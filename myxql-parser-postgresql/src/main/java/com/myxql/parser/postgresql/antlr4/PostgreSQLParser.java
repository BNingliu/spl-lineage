// Generated from com/myxql/parser/postgresql/antlr4/PostgreSQLParser.g4 by ANTLR 4.9.3
package com.myxql.parser.postgresql.antlr4;


import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PostgreSQLParser extends PostgreSQLParserBase {
	static { RuntimeMetaData.checkVersion("4.9.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, Operator=29, ALL=30, ANALYSE=31, ANALYZE=32, 
		AND=33, ANY=34, ARRAY=35, AS=36, ASC=37, ASYMMETRIC=38, BOTH=39, CASE=40, 
		CAST=41, CHECK=42, COLLATE=43, COLUMN=44, CONSTRAINT=45, CREATE=46, CURRENT_CATALOG=47, 
		CURRENT_DATE=48, CURRENT_ROLE=49, CURRENT_TIME=50, CURRENT_TIMESTAMP=51, 
		CURRENT_USER=52, DEFAULT=53, DEFERRABLE=54, DESC=55, DISTINCT=56, DO=57, 
		ELSE=58, EXCEPT=59, FALSE_P=60, FETCH=61, FOR=62, FOREIGN=63, FROM=64, 
		GRANT=65, GROUP_P=66, HAVING=67, IN_P=68, INITIALLY=69, INTERSECT=70, 
		INTO=71, LATERAL_P=72, LEADING=73, LIMIT=74, LOCALTIME=75, LOCALTIMESTAMP=76, 
		NOT=77, NULL_P=78, OFFSET=79, ON=80, ONLY=81, OR=82, ORDER=83, PLACING=84, 
		PRIMARY=85, REFERENCES=86, RETURNING=87, SELECT=88, SESSION_USER=89, SOME=90, 
		SYMMETRIC=91, TABLE=92, THEN=93, TO=94, TRAILING=95, TRUE_P=96, UNION=97, 
		UNIQUE=98, USER=99, USING=100, VARIADIC=101, WHEN=102, WHERE=103, WINDOW=104, 
		WITH=105, AUTHORIZATION=106, BINARY=107, COLLATION=108, CONCURRENTLY=109, 
		CROSS=110, CURRENT_SCHEMA=111, FREEZE=112, FULL=113, ILIKE=114, INNER_P=115, 
		IS=116, ISNULL=117, JOIN=118, LEFT=119, LIKE=120, NATURAL=121, NOTNULL=122, 
		OUTER_P=123, OVER=124, OVERLAPS=125, RIGHT=126, SIMILAR=127, VERBOSE=128, 
		ABORT_P=129, ABSOLUTE_P=130, ACCESS=131, ACTION=132, ADD_P=133, ADMIN=134, 
		AFTER=135, AGGREGATE=136, ALSO=137, ALTER=138, ALWAYS=139, ASSERTION=140, 
		ASSIGNMENT=141, AT=142, ATTRIBUTE=143, BACKWARD=144, BEFORE=145, BEGIN_P=146, 
		BY=147, CACHE=148, CALLED=149, CASCADE=150, CASCADED=151, CATALOG=152, 
		CHAIN=153, CHARACTERISTICS=154, CHECKPOINT=155, CLASS=156, CLOSE=157, 
		CLUSTER=158, COMMENT=159, COMMENTS=160, COMMIT=161, COMMITTED=162, CONFIGURATION=163, 
		CONNECTION=164, CONSTRAINTS=165, CONTENT_P=166, CONTINUE_P=167, CONVERSION_P=168, 
		COPY=169, COST=170, CSV=171, CURSOR=172, CYCLE=173, DATA_P=174, DATABASE=175, 
		DAY_P=176, DEALLOCATE=177, DECLARE=178, DEFAULTS=179, DEFERRED=180, DEFINER=181, 
		DELETE_P=182, DELIMITER=183, DELIMITERS=184, DICTIONARY=185, DISABLE_P=186, 
		DISCARD=187, DOCUMENT_P=188, DOMAIN_P=189, DOUBLE_P=190, DROP=191, EACH=192, 
		ENABLE_P=193, ENCODING=194, ENCRYPTED=195, ENUM_P=196, ESCAPE=197, EVENT=198, 
		EXCLUDE=199, EXCLUDING=200, EXCLUSIVE=201, EXECUTE=202, EXPLAIN=203, EXTENSION=204, 
		EXTERNAL=205, FAMILY=206, FIRST_P=207, FOLLOWING=208, FORCE=209, FORWARD=210, 
		FUNCTION=211, FUNCTIONS=212, GLOBAL=213, GRANTED=214, HANDLER=215, HEADER_P=216, 
		HOLD=217, HOUR_P=218, IDENTITY_P=219, IF_P=220, IMMEDIATE=221, IMMUTABLE=222, 
		IMPLICIT_P=223, INCLUDING=224, INCREMENT=225, INDEX=226, INDEXES=227, 
		INHERIT=228, INHERITS=229, INLINE_P=230, INSENSITIVE=231, INSERT=232, 
		INSTEAD=233, INVOKER=234, ISOLATION=235, KEY=236, LABEL=237, LANGUAGE=238, 
		LARGE_P=239, LAST_P=240, LEAKPROOF=241, LEVEL=242, LISTEN=243, LOAD=244, 
		LOCAL=245, LOCATION=246, LOCK_P=247, MAPPING=248, MATCH=249, MATCHED=250, 
		MATERIALIZED=251, MAXVALUE=252, MERGE=253, MINUTE_P=254, MINVALUE=255, 
		MODE=256, MONTH_P=257, MOVE=258, NAME_P=259, NAMES=260, NEXT=261, NO=262, 
		NOTHING=263, NOTIFY=264, NOWAIT=265, NULLS_P=266, OBJECT_P=267, OF=268, 
		OFF=269, OIDS=270, OPERATOR=271, OPTION=272, OPTIONS=273, OWNED=274, OWNER=275, 
		PARSER=276, PARTIAL=277, PARTITION=278, PASSING=279, PASSWORD=280, PLANS=281, 
		PRECEDING=282, PREPARE=283, PREPARED=284, PRESERVE=285, PRIOR=286, PRIVILEGES=287, 
		PROCEDURAL=288, PROCEDURE=289, PROGRAM=290, QUOTE=291, RANGE=292, READ=293, 
		REASSIGN=294, RECHECK=295, RECURSIVE=296, REF=297, REFRESH=298, REINDEX=299, 
		RELATIVE_P=300, RELEASE=301, RENAME=302, REPEATABLE=303, REPLACE=304, 
		REPLICA=305, RESET=306, RESTART=307, RESTRICT=308, RETURNS=309, REVOKE=310, 
		ROLE=311, ROLLBACK=312, ROWS=313, RULE=314, SAVEPOINT=315, SCHEMA=316, 
		SCROLL=317, SEARCH=318, SECOND_P=319, SECURITY=320, SEQUENCE=321, SEQUENCES=322, 
		SERIALIZABLE=323, SERVER=324, SESSION=325, SET=326, SHARE=327, SHOW=328, 
		SIMPLE=329, SNAPSHOT=330, STABLE=331, STANDALONE_P=332, START=333, STATEMENT=334, 
		STATISTICS=335, STDIN=336, STDOUT=337, STORAGE=338, STRICT_P=339, STRIP_P=340, 
		SYSID=341, SYSTEM_P=342, TABLES=343, TABLESPACE=344, TEMP=345, TEMPLATE=346, 
		TEMPORARY=347, TEXT_P=348, TRANSACTION=349, TRIGGER=350, TRUNCATE=351, 
		TRUSTED=352, TYPE_P=353, TYPES_P=354, UNBOUNDED=355, UNCOMMITTED=356, 
		UNENCRYPTED=357, UNKNOWN=358, UNLISTEN=359, UNLOGGED=360, UNTIL=361, UPDATE=362, 
		VACUUM=363, VALID=364, VALIDATE=365, VALIDATOR=366, VARYING=367, VERSION_P=368, 
		VIEW=369, VOLATILE=370, WHITESPACE_P=371, WITHOUT=372, WORK=373, WRAPPER=374, 
		WRITE=375, XML_P=376, YEAR_P=377, YES_P=378, ZONE=379, BETWEEN=380, BIGINT=381, 
		BIT=382, BOOLEAN_P=383, CHAR_P=384, CHARACTER=385, COALESCE=386, DEC=387, 
		DECIMAL_P=388, EXISTS=389, EXTRACT=390, FLOAT_P=391, GREATEST=392, INOUT=393, 
		INT_P=394, INTEGER=395, INTERVAL=396, LEAST=397, NATIONAL=398, NCHAR=399, 
		NONE=400, NULLIF=401, NUMERIC=402, OVERLAY=403, POSITION=404, PRECISION=405, 
		REAL=406, ROW=407, SETOF=408, SMALLINT=409, SUBSTRING=410, TIME=411, TIMESTAMP=412, 
		TREAT=413, TRIM=414, VALUES=415, VARCHAR=416, XMLATTRIBUTES=417, XMLCOMMENT=418, 
		XMLAGG=419, XML_IS_WELL_FORMED=420, XML_IS_WELL_FORMED_DOCUMENT=421, XML_IS_WELL_FORMED_CONTENT=422, 
		XPATH=423, XPATH_EXISTS=424, XMLCONCAT=425, XMLELEMENT=426, XMLEXISTS=427, 
		XMLFOREST=428, XMLPARSE=429, XMLPI=430, XMLROOT=431, XMLSERIALIZE=432, 
		CALL=433, CURRENT_P=434, ATTACH=435, DETACH=436, EXPRESSION=437, GENERATED=438, 
		LOGGED=439, STORED=440, INCLUDE=441, ROUTINE=442, TRANSFORM=443, IMPORT_P=444, 
		POLICY=445, METHOD=446, REFERENCING=447, NEW=448, OLD=449, VALUE_P=450, 
		SUBSCRIPTION=451, PUBLICATION=452, OUT_P=453, END_P=454, ROUTINES=455, 
		SCHEMAS=456, PROCEDURES=457, INPUT_P=458, SUPPORT=459, PARALLEL=460, SQL_P=461, 
		DEPENDS=462, OVERRIDING=463, CONFLICT=464, SKIP_P=465, LOCKED=466, TIES=467, 
		ROLLUP=468, CUBE=469, GROUPING=470, SETS=471, TABLESAMPLE=472, ORDINALITY=473, 
		XMLTABLE=474, COLUMNS=475, XMLNAMESPACES=476, ROWTYPE=477, NORMALIZED=478, 
		WITHIN=479, FILTER=480, GROUPS=481, OTHERS=482, NFC=483, NFD=484, NFKC=485, 
		NFKD=486, UESCAPE=487, VIEWS=488, NORMALIZE=489, DUMP=490, PRINT_STRICT_PARAMS=491, 
		VARIABLE_CONFLICT=492, ERROR=493, USE_VARIABLE=494, USE_COLUMN=495, ALIAS=496, 
		CONSTANT=497, PERFORM=498, GET=499, DIAGNOSTICS=500, STACKED=501, ELSIF=502, 
		WHILE=503, REVERSE=504, FOREACH=505, SLICE=506, EXIT=507, RETURN=508, 
		QUERY=509, RAISE=510, SQLSTATE=511, DEBUG=512, LOG=513, INFO=514, NOTICE=515, 
		WARNING=516, EXCEPTION=517, ASSERT=518, LOOP=519, OPEN=520, ABS=521, CBRT=522, 
		CEIL=523, CEILING=524, DEGREES=525, DIV=526, EXP=527, FACTORIAL=528, FLOOR=529, 
		GCD=530, LCM=531, LN=532, LOG10=533, MIN_SCALE=534, MOD=535, PI=536, POWER=537, 
		RADIANS=538, ROUND=539, SCALE=540, SIGN=541, SQRT=542, TRIM_SCALE=543, 
		TRUNC=544, WIDTH_BUCKET=545, RANDOM=546, SETSEED=547, ACOS=548, ACOSD=549, 
		ASIN=550, ASIND=551, ATAN=552, ATAND=553, ATAN2=554, ATAN2D=555, COS=556, 
		COSD=557, COT=558, COTD=559, SIN=560, SIND=561, TAN=562, TAND=563, SINH=564, 
		COSH=565, TANH=566, ASINH=567, ACOSH=568, ATANH=569, BIT_LENGTH=570, CHAR_LENGTH=571, 
		CHARACTER_LENGTH=572, LOWER=573, OCTET_LENGTH=574, UPPER=575, ASCII=576, 
		BTRIM=577, CHR=578, CONCAT=579, CONCAT_WS=580, FORMAT=581, INITCAP=582, 
		LENGTH=583, LPAD=584, LTRIM=585, MD5=586, PARSE_IDENT=587, PG_CLIENT_ENCODING=588, 
		QUOTE_IDENT=589, QUOTE_LITERAL=590, QUOTE_NULLABLE=591, REGEXP_COUNT=592, 
		REGEXP_INSTR=593, REGEXP_LIKE=594, REGEXP_MATCH=595, REGEXP_MATCHES=596, 
		REGEXP_REPLACE=597, REGEXP_SPLIT_TO_ARRAY=598, REGEXP_SPLIT_TO_TABLE=599, 
		REGEXP_SUBSTR=600, REPEAT=601, RPAD=602, RTRIM=603, SPLIT_PART=604, STARTS_WITH=605, 
		STRING_TO_ARRAY=606, STRING_TO_TABLE=607, STRPOS=608, SUBSTR=609, TO_ASCII=610, 
		TO_HEX=611, TRANSLATE=612, UNISTR=613, AGE=614, CLOCK_TIMESTAMP=615, DATE_BIN=616, 
		DATE_PART=617, DATE_TRUNC=618, ISFINITE=619, JUSTIFY_DAYS=620, JUSTIFY_HOURS=621, 
		JUSTIFY_INTERVAL=622, MAKE_DATE=623, MAKE_INTERVAL=624, MAKE_TIME=625, 
		MAKE_TIMESTAMP=626, MAKE_TIMESTAMPTZ=627, NOW=628, STATEMENT_TIMESTAMP=629, 
		TIMEOFDAY=630, TRANSACTION_TIMESTAMP=631, TO_TIMESTAMP=632, TO_CHAR=633, 
		TO_DATE=634, TO_NUMBER=635, Identifier=636, QuotedIdentifier=637, UnterminatedQuotedIdentifier=638, 
		InvalidQuotedIdentifier=639, InvalidUnterminatedQuotedIdentifier=640, 
		UnicodeQuotedIdentifier=641, UnterminatedUnicodeQuotedIdentifier=642, 
		InvalidUnicodeQuotedIdentifier=643, InvalidUnterminatedUnicodeQuotedIdentifier=644, 
		StringConstant=645, UnterminatedStringConstant=646, UnicodeEscapeStringConstant=647, 
		UnterminatedUnicodeEscapeStringConstant=648, BeginDollarStringConstant=649, 
		BinaryStringConstant=650, UnterminatedBinaryStringConstant=651, InvalidBinaryStringConstant=652, 
		InvalidUnterminatedBinaryStringConstant=653, HexadecimalStringConstant=654, 
		UnterminatedHexadecimalStringConstant=655, InvalidHexadecimalStringConstant=656, 
		InvalidUnterminatedHexadecimalStringConstant=657, Integral=658, NumericFail=659, 
		Numeric=660, PLSQLVARIABLENAME=661, PLSQLIDENTIFIER=662, Whitespace=663, 
		Newline=664, LineComment=665, BlockComment=666, UnterminatedBlockComment=667, 
		MetaCommand=668, EndMetaCommand=669, ErrorCharacter=670, EscapeStringConstant=671, 
		UnterminatedEscapeStringConstant=672, InvalidEscapeStringConstant=673, 
		InvalidUnterminatedEscapeStringConstant=674, AfterEscapeStringConstantMode_NotContinued=675, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=676, DollarText=677, 
		EndDollarStringConstant=678, AfterEscapeStringConstantWithNewlineMode_Continued=679;
	public static final int
		RULE_root = 0, RULE_plsqlroot = 1, RULE_stmtblock = 2, RULE_stmtmulti = 3, 
		RULE_stmt = 4, RULE_plsqlconsolecommand = 5, RULE_callstmt = 6, RULE_createrolestmt = 7, 
		RULE_opt_with = 8, RULE_optrolelist = 9, RULE_alteroptrolelist = 10, RULE_alteroptroleelem = 11, 
		RULE_createoptroleelem = 12, RULE_createuserstmt = 13, RULE_alterrolestmt = 14, 
		RULE_opt_in_database = 15, RULE_alterrolesetstmt = 16, RULE_droprolestmt = 17, 
		RULE_creategroupstmt = 18, RULE_altergroupstmt = 19, RULE_add_drop = 20, 
		RULE_createschemastmt = 21, RULE_optschemaname = 22, RULE_optschemaeltlist = 23, 
		RULE_schema_stmt = 24, RULE_variablesetstmt = 25, RULE_set_rest = 26, 
		RULE_generic_set = 27, RULE_set_rest_more = 28, RULE_var_name = 29, RULE_var_list = 30, 
		RULE_var_value = 31, RULE_iso_level = 32, RULE_opt_boolean_or_string = 33, 
		RULE_zone_value = 34, RULE_opt_encoding = 35, RULE_nonreservedword_or_sconst = 36, 
		RULE_variableresetstmt = 37, RULE_reset_rest = 38, RULE_generic_reset = 39, 
		RULE_setresetclause = 40, RULE_functionsetresetclause = 41, RULE_variableshowstmt = 42, 
		RULE_constraintssetstmt = 43, RULE_constraints_set_list = 44, RULE_constraints_set_mode = 45, 
		RULE_checkpointstmt = 46, RULE_discardstmt = 47, RULE_altertablestmt = 48, 
		RULE_alter_table_cmds = 49, RULE_partition_cmd = 50, RULE_index_partition_cmd = 51, 
		RULE_alter_table_cmd = 52, RULE_alter_column_default = 53, RULE_opt_drop_behavior = 54, 
		RULE_opt_collate_clause = 55, RULE_alter_using = 56, RULE_replica_identity = 57, 
		RULE_reloptions = 58, RULE_opt_reloptions = 59, RULE_reloption_list = 60, 
		RULE_reloption_elem = 61, RULE_alter_identity_column_option_list = 62, 
		RULE_alter_identity_column_option = 63, RULE_partitionboundspec = 64, 
		RULE_hash_partbound_elem = 65, RULE_hash_partbound = 66, RULE_altercompositetypestmt = 67, 
		RULE_alter_type_cmds = 68, RULE_alter_type_cmd = 69, RULE_closeportalstmt = 70, 
		RULE_copystmt = 71, RULE_copy_from = 72, RULE_opt_program = 73, RULE_copy_file_name = 74, 
		RULE_copy_options = 75, RULE_copy_opt_list = 76, RULE_copy_opt_item = 77, 
		RULE_opt_binary = 78, RULE_copy_delimiter = 79, RULE_opt_using = 80, RULE_copy_generic_opt_list = 81, 
		RULE_copy_generic_opt_elem = 82, RULE_copy_generic_opt_arg = 83, RULE_copy_generic_opt_arg_list = 84, 
		RULE_copy_generic_opt_arg_list_item = 85, RULE_createstmt = 86, RULE_opttemp = 87, 
		RULE_opttableelementlist = 88, RULE_opttypedtableelementlist = 89, RULE_tableelementlist = 90, 
		RULE_typedtableelementlist = 91, RULE_tableelement = 92, RULE_typedtableelement = 93, 
		RULE_columnDef = 94, RULE_columnOptions = 95, RULE_colquallist = 96, RULE_colconstraint = 97, 
		RULE_colconstraintelem = 98, RULE_generated_when = 99, RULE_constraintattr = 100, 
		RULE_tablelikeclause = 101, RULE_tablelikeoptionlist = 102, RULE_tablelikeoption = 103, 
		RULE_tableconstraint = 104, RULE_constraintelem = 105, RULE_opt_no_inherit = 106, 
		RULE_opt_column_list = 107, RULE_columnlist = 108, RULE_columnElem = 109, 
		RULE_opt_c_include = 110, RULE_key_match = 111, RULE_exclusionconstraintlist = 112, 
		RULE_exclusionconstraintelem = 113, RULE_exclusionwhereclause = 114, RULE_key_actions = 115, 
		RULE_key_update = 116, RULE_key_delete = 117, RULE_key_action = 118, RULE_optinherit = 119, 
		RULE_optpartitionspec = 120, RULE_partitionspec = 121, RULE_part_params = 122, 
		RULE_part_elem = 123, RULE_table_access_method_clause = 124, RULE_optwith = 125, 
		RULE_oncommitoption = 126, RULE_opttablespace = 127, RULE_optconstablespace = 128, 
		RULE_existingindex = 129, RULE_createstatsstmt = 130, RULE_alterstatsstmt = 131, 
		RULE_createasstmt = 132, RULE_create_as_target = 133, RULE_opt_with_data = 134, 
		RULE_creatematviewstmt = 135, RULE_create_mv_target = 136, RULE_optnolog = 137, 
		RULE_refreshmatviewstmt = 138, RULE_createseqstmt = 139, RULE_alterseqstmt = 140, 
		RULE_optseqoptlist = 141, RULE_optparenthesizedseqoptlist = 142, RULE_seqoptlist = 143, 
		RULE_seqoptelem = 144, RULE_opt_by = 145, RULE_numericonly = 146, RULE_numericonly_list = 147, 
		RULE_createplangstmt = 148, RULE_opt_trusted = 149, RULE_handler_name = 150, 
		RULE_opt_inline_handler = 151, RULE_validator_clause = 152, RULE_opt_validator = 153, 
		RULE_opt_procedural = 154, RULE_createtablespacestmt = 155, RULE_opttablespaceowner = 156, 
		RULE_droptablespacestmt = 157, RULE_createextensionstmt = 158, RULE_create_extension_opt_list = 159, 
		RULE_create_extension_opt_item = 160, RULE_alterextensionstmt = 161, RULE_alter_extension_opt_list = 162, 
		RULE_alter_extension_opt_item = 163, RULE_alterextensioncontentsstmt = 164, 
		RULE_createfdwstmt = 165, RULE_fdw_option = 166, RULE_fdw_options = 167, 
		RULE_opt_fdw_options = 168, RULE_alterfdwstmt = 169, RULE_create_generic_options = 170, 
		RULE_generic_option_list = 171, RULE_alter_generic_options = 172, RULE_alter_generic_option_list = 173, 
		RULE_alter_generic_option_elem = 174, RULE_generic_option_elem = 175, 
		RULE_generic_option_name = 176, RULE_generic_option_arg = 177, RULE_createforeignserverstmt = 178, 
		RULE_opt_type = 179, RULE_foreign_server_version = 180, RULE_opt_foreign_server_version = 181, 
		RULE_alterforeignserverstmt = 182, RULE_createforeigntablestmt = 183, 
		RULE_importforeignschemastmt = 184, RULE_import_qualification_type = 185, 
		RULE_import_qualification = 186, RULE_createusermappingstmt = 187, RULE_auth_ident = 188, 
		RULE_dropusermappingstmt = 189, RULE_alterusermappingstmt = 190, RULE_createpolicystmt = 191, 
		RULE_alterpolicystmt = 192, RULE_rowsecurityoptionalexpr = 193, RULE_rowsecurityoptionalwithcheck = 194, 
		RULE_rowsecuritydefaulttorole = 195, RULE_rowsecurityoptionaltorole = 196, 
		RULE_rowsecuritydefaultpermissive = 197, RULE_rowsecuritydefaultforcmd = 198, 
		RULE_row_security_cmd = 199, RULE_createamstmt = 200, RULE_am_type = 201, 
		RULE_createtrigstmt = 202, RULE_triggeractiontime = 203, RULE_triggerevents = 204, 
		RULE_triggeroneevent = 205, RULE_triggerreferencing = 206, RULE_triggertransitions = 207, 
		RULE_triggertransition = 208, RULE_transitionoldornew = 209, RULE_transitionrowortable = 210, 
		RULE_transitionrelname = 211, RULE_triggerforspec = 212, RULE_triggerforopteach = 213, 
		RULE_triggerfortype = 214, RULE_triggerwhen = 215, RULE_function_or_procedure = 216, 
		RULE_triggerfuncargs = 217, RULE_triggerfuncarg = 218, RULE_optconstrfromtable = 219, 
		RULE_constraintattributespec = 220, RULE_constraintattributeElem = 221, 
		RULE_createeventtrigstmt = 222, RULE_event_trigger_when_list = 223, RULE_event_trigger_when_item = 224, 
		RULE_event_trigger_value_list = 225, RULE_altereventtrigstmt = 226, RULE_enable_trigger = 227, 
		RULE_createassertionstmt = 228, RULE_definestmt = 229, RULE_definition = 230, 
		RULE_def_list = 231, RULE_def_elem = 232, RULE_def_arg = 233, RULE_old_aggr_definition = 234, 
		RULE_old_aggr_list = 235, RULE_old_aggr_elem = 236, RULE_opt_enum_val_list = 237, 
		RULE_enum_val_list = 238, RULE_alterenumstmt = 239, RULE_opt_if_not_exists = 240, 
		RULE_createopclassstmt = 241, RULE_opclass_item_list = 242, RULE_opclass_item = 243, 
		RULE_opt_default = 244, RULE_opt_opfamily = 245, RULE_opclass_purpose = 246, 
		RULE_opt_recheck = 247, RULE_createopfamilystmt = 248, RULE_alteropfamilystmt = 249, 
		RULE_opclass_drop_list = 250, RULE_opclass_drop = 251, RULE_dropopclassstmt = 252, 
		RULE_dropopfamilystmt = 253, RULE_dropownedstmt = 254, RULE_reassignownedstmt = 255, 
		RULE_dropstmt = 256, RULE_object_type_any_name = 257, RULE_object_type_name = 258, 
		RULE_drop_type_name = 259, RULE_object_type_name_on_any_name = 260, RULE_any_name_list = 261, 
		RULE_any_name = 262, RULE_attrs = 263, RULE_type_name_list = 264, RULE_truncatestmt = 265, 
		RULE_opt_restart_seqs = 266, RULE_commentstmt = 267, RULE_comment_text = 268, 
		RULE_seclabelstmt = 269, RULE_opt_provider = 270, RULE_security_label = 271, 
		RULE_fetchstmt = 272, RULE_fetch_args = 273, RULE_from_in = 274, RULE_opt_from_in = 275, 
		RULE_grantstmt = 276, RULE_revokestmt = 277, RULE_privileges = 278, RULE_privilege_list = 279, 
		RULE_privilege = 280, RULE_privilege_target = 281, RULE_grantee_list = 282, 
		RULE_grantee = 283, RULE_opt_grant_grant_option = 284, RULE_grantrolestmt = 285, 
		RULE_revokerolestmt = 286, RULE_opt_grant_admin_option = 287, RULE_opt_granted_by = 288, 
		RULE_alterdefaultprivilegesstmt = 289, RULE_defacloptionlist = 290, RULE_defacloption = 291, 
		RULE_defaclaction = 292, RULE_defacl_privilege_target = 293, RULE_indexstmt = 294, 
		RULE_opt_unique = 295, RULE_opt_concurrently = 296, RULE_opt_index_name = 297, 
		RULE_access_method_clause = 298, RULE_index_params = 299, RULE_index_elem_options = 300, 
		RULE_index_elem = 301, RULE_opt_include = 302, RULE_index_including_params = 303, 
		RULE_opt_collate = 304, RULE_opt_class = 305, RULE_opt_asc_desc = 306, 
		RULE_opt_nulls_order = 307, RULE_createfunctionstmt = 308, RULE_opt_or_replace = 309, 
		RULE_func_args = 310, RULE_func_args_list = 311, RULE_function_with_argtypes_list = 312, 
		RULE_function_with_argtypes = 313, RULE_func_args_with_defaults = 314, 
		RULE_func_args_with_defaults_list = 315, RULE_func_arg = 316, RULE_arg_class = 317, 
		RULE_param_name = 318, RULE_func_return = 319, RULE_func_type = 320, RULE_func_arg_with_default = 321, 
		RULE_aggr_arg = 322, RULE_aggr_args = 323, RULE_aggr_args_list = 324, 
		RULE_aggregate_with_argtypes = 325, RULE_aggregate_with_argtypes_list = 326, 
		RULE_createfunc_opt_list = 327, RULE_common_func_opt_item = 328, RULE_createfunc_opt_item = 329, 
		RULE_func_as = 330, RULE_transform_type_list = 331, RULE_opt_definition = 332, 
		RULE_table_func_column = 333, RULE_table_func_column_list = 334, RULE_alterfunctionstmt = 335, 
		RULE_alterfunc_opt_list = 336, RULE_opt_restrict = 337, RULE_removefuncstmt = 338, 
		RULE_removeaggrstmt = 339, RULE_removeoperstmt = 340, RULE_oper_argtypes = 341, 
		RULE_any_operator = 342, RULE_operator_with_argtypes_list = 343, RULE_operator_with_argtypes = 344, 
		RULE_dostmt = 345, RULE_dostmt_opt_list = 346, RULE_dostmt_opt_item = 347, 
		RULE_createcaststmt = 348, RULE_cast_context = 349, RULE_dropcaststmt = 350, 
		RULE_opt_if_exists = 351, RULE_createtransformstmt = 352, RULE_transform_element_list = 353, 
		RULE_droptransformstmt = 354, RULE_reindexstmt = 355, RULE_reindex_target_type = 356, 
		RULE_reindex_target_multitable = 357, RULE_reindex_option_list = 358, 
		RULE_reindex_option_elem = 359, RULE_altertblspcstmt = 360, RULE_renamestmt = 361, 
		RULE_opt_column = 362, RULE_opt_set_data = 363, RULE_alterobjectdependsstmt = 364, 
		RULE_opt_no = 365, RULE_alterobjectschemastmt = 366, RULE_alteroperatorstmt = 367, 
		RULE_operator_def_list = 368, RULE_operator_def_elem = 369, RULE_operator_def_arg = 370, 
		RULE_altertypestmt = 371, RULE_alterownerstmt = 372, RULE_createpublicationstmt = 373, 
		RULE_opt_publication_for_tables = 374, RULE_publication_for_tables = 375, 
		RULE_alterpublicationstmt = 376, RULE_createsubscriptionstmt = 377, RULE_publication_name_list = 378, 
		RULE_publication_name_item = 379, RULE_altersubscriptionstmt = 380, RULE_dropsubscriptionstmt = 381, 
		RULE_rulestmt = 382, RULE_ruleactionlist = 383, RULE_ruleactionmulti = 384, 
		RULE_ruleactionstmt = 385, RULE_ruleactionstmtOrEmpty = 386, RULE_event = 387, 
		RULE_opt_instead = 388, RULE_notifystmt = 389, RULE_notify_payload = 390, 
		RULE_listenstmt = 391, RULE_unlistenstmt = 392, RULE_transactionstmt = 393, 
		RULE_opt_transaction = 394, RULE_transaction_mode_item = 395, RULE_transaction_mode_list = 396, 
		RULE_transaction_mode_list_or_empty = 397, RULE_opt_transaction_chain = 398, 
		RULE_viewstmt = 399, RULE_opt_check_option = 400, RULE_loadstmt = 401, 
		RULE_createdbstmt = 402, RULE_createdb_opt_list = 403, RULE_createdb_opt_items = 404, 
		RULE_createdb_opt_item = 405, RULE_createdb_opt_name = 406, RULE_opt_equal = 407, 
		RULE_alterdatabasestmt = 408, RULE_alterdatabasesetstmt = 409, RULE_dropdbstmt = 410, 
		RULE_drop_option_list = 411, RULE_drop_option = 412, RULE_altercollationstmt = 413, 
		RULE_altersystemstmt = 414, RULE_createdomainstmt = 415, RULE_alterdomainstmt = 416, 
		RULE_opt_as = 417, RULE_altertsdictionarystmt = 418, RULE_altertsconfigurationstmt = 419, 
		RULE_any_with = 420, RULE_createconversionstmt = 421, RULE_clusterstmt = 422, 
		RULE_cluster_index_specification = 423, RULE_vacuumstmt = 424, RULE_analyzestmt = 425, 
		RULE_vac_analyze_option_list = 426, RULE_analyze_keyword = 427, RULE_vac_analyze_option_elem = 428, 
		RULE_vac_analyze_option_name = 429, RULE_vac_analyze_option_arg = 430, 
		RULE_opt_analyze = 431, RULE_opt_verbose = 432, RULE_opt_full = 433, RULE_opt_freeze = 434, 
		RULE_opt_name_list = 435, RULE_vacuum_relation = 436, RULE_vacuum_relation_list = 437, 
		RULE_opt_vacuum_relation_list = 438, RULE_explainstmt = 439, RULE_explainablestmt = 440, 
		RULE_explain_option_list = 441, RULE_explain_option_elem = 442, RULE_explain_option_name = 443, 
		RULE_explain_option_arg = 444, RULE_preparestmt = 445, RULE_prep_type_clause = 446, 
		RULE_preparablestmt = 447, RULE_executestmt = 448, RULE_execute_param_clause = 449, 
		RULE_deallocatestmt = 450, RULE_insertstmt = 451, RULE_insert_target = 452, 
		RULE_insert_rest = 453, RULE_override_kind = 454, RULE_insert_column_list = 455, 
		RULE_insert_column_item = 456, RULE_opt_on_conflict = 457, RULE_opt_conf_expr = 458, 
		RULE_returning_clause = 459, RULE_mergestmt = 460, RULE_merge_insert_clause = 461, 
		RULE_merge_update_clause = 462, RULE_merge_delete_clause = 463, RULE_deletestmt = 464, 
		RULE_using_clause = 465, RULE_lockstmt = 466, RULE_opt_lock = 467, RULE_lock_type = 468, 
		RULE_opt_nowait = 469, RULE_opt_nowait_or_skip = 470, RULE_updatestmt = 471, 
		RULE_set_clause_list = 472, RULE_set_clause = 473, RULE_set_target = 474, 
		RULE_set_target_list = 475, RULE_declarecursorstmt = 476, RULE_cursor_name = 477, 
		RULE_cursor_options = 478, RULE_opt_hold = 479, RULE_selectstmt = 480, 
		RULE_select_with_parens = 481, RULE_select_no_parens = 482, RULE_select_clause = 483, 
		RULE_simple_select = 484, RULE_set_operator = 485, RULE_set_operator_with_all_or_distinct = 486, 
		RULE_with_clause = 487, RULE_cte_list = 488, RULE_common_table_expr = 489, 
		RULE_opt_materialized = 490, RULE_opt_with_clause = 491, RULE_into_clause = 492, 
		RULE_opt_strict = 493, RULE_opttempTableName = 494, RULE_opt_table = 495, 
		RULE_all_or_distinct = 496, RULE_distinct_clause = 497, RULE_opt_all_clause = 498, 
		RULE_opt_sort_clause = 499, RULE_sort_clause = 500, RULE_sortby_list = 501, 
		RULE_sortby = 502, RULE_select_limit = 503, RULE_opt_select_limit = 504, 
		RULE_limit_clause = 505, RULE_offset_clause = 506, RULE_select_limit_value = 507, 
		RULE_select_offset_value = 508, RULE_select_fetch_first_value = 509, RULE_i_or_f_const = 510, 
		RULE_row_or_rows = 511, RULE_first_or_next = 512, RULE_group_clause = 513, 
		RULE_group_by_list = 514, RULE_group_by_item = 515, RULE_empty_grouping_set = 516, 
		RULE_rollup_clause = 517, RULE_cube_clause = 518, RULE_grouping_sets_clause = 519, 
		RULE_having_clause = 520, RULE_for_locking_clause = 521, RULE_opt_for_locking_clause = 522, 
		RULE_for_locking_items = 523, RULE_for_locking_item = 524, RULE_for_locking_strength = 525, 
		RULE_locked_rels_list = 526, RULE_values_clause = 527, RULE_from_clause = 528, 
		RULE_from_list = 529, RULE_non_ansi_join = 530, RULE_table_ref = 531, 
		RULE_alias_clause = 532, RULE_opt_alias_clause = 533, RULE_func_alias_clause = 534, 
		RULE_join_type = 535, RULE_join_qual = 536, RULE_relation_expr = 537, 
		RULE_relation_expr_list = 538, RULE_relation_expr_opt_alias = 539, RULE_tablesample_clause = 540, 
		RULE_opt_repeatable_clause = 541, RULE_func_table = 542, RULE_rowsfrom_item = 543, 
		RULE_rowsfrom_list = 544, RULE_opt_col_def_list = 545, RULE_opt_ordinality = 546, 
		RULE_where_clause = 547, RULE_where_or_current_clause = 548, RULE_opttablefuncelementlist = 549, 
		RULE_tablefuncelementlist = 550, RULE_tablefuncelement = 551, RULE_xmltable = 552, 
		RULE_xmltable_column_list = 553, RULE_xmltable_column_el = 554, RULE_xmltable_column_option_list = 555, 
		RULE_xmltable_column_option_el = 556, RULE_xml_namespace_list = 557, RULE_xml_namespace_el = 558, 
		RULE_typename = 559, RULE_opt_array_bounds = 560, RULE_simpletypename = 561, 
		RULE_consttypename = 562, RULE_generictype = 563, RULE_opt_type_modifiers = 564, 
		RULE_numeric = 565, RULE_opt_float = 566, RULE_bit = 567, RULE_constbit = 568, 
		RULE_bitwithlength = 569, RULE_bitwithoutlength = 570, RULE_character = 571, 
		RULE_constcharacter = 572, RULE_character_c = 573, RULE_opt_varying = 574, 
		RULE_constdatetime = 575, RULE_constinterval = 576, RULE_opt_timezone = 577, 
		RULE_opt_interval = 578, RULE_interval_second = 579, RULE_opt_escape = 580, 
		RULE_a_expr = 581, RULE_a_expr_qual = 582, RULE_a_expr_lessless = 583, 
		RULE_a_expr_or = 584, RULE_a_expr_and = 585, RULE_a_expr_between = 586, 
		RULE_a_expr_in = 587, RULE_a_expr_unary_not = 588, RULE_a_expr_isnull = 589, 
		RULE_a_expr_is_not = 590, RULE_a_expr_compare = 591, RULE_a_expr_like = 592, 
		RULE_a_expr_qual_op = 593, RULE_a_expr_unary_qualop = 594, RULE_a_expr_add = 595, 
		RULE_a_expr_mul = 596, RULE_a_expr_caret = 597, RULE_a_expr_unary_sign = 598, 
		RULE_a_expr_at_time_zone = 599, RULE_a_expr_collate = 600, RULE_a_expr_typecast = 601, 
		RULE_b_expr = 602, RULE_c_expr = 603, RULE_plsqlvariablename = 604, RULE_func_application = 605, 
		RULE_func_expr = 606, RULE_func_expr_windowless = 607, RULE_func_expr_common_subexpr = 608, 
		RULE_xml_root_version = 609, RULE_opt_xml_root_standalone = 610, RULE_xml_attributes = 611, 
		RULE_xml_attribute_list = 612, RULE_xml_attribute_el = 613, RULE_document_or_content = 614, 
		RULE_xml_whitespace_option = 615, RULE_xmlexists_argument = 616, RULE_xml_passing_mech = 617, 
		RULE_within_group_clause = 618, RULE_filter_clause = 619, RULE_window_clause = 620, 
		RULE_window_definition_list = 621, RULE_window_definition = 622, RULE_over_clause = 623, 
		RULE_window_specification = 624, RULE_opt_existing_window_name = 625, 
		RULE_opt_partition_clause = 626, RULE_opt_frame_clause = 627, RULE_frame_extent = 628, 
		RULE_frame_bound = 629, RULE_opt_window_exclusion_clause = 630, RULE_row = 631, 
		RULE_explicit_row = 632, RULE_implicit_row = 633, RULE_sub_type = 634, 
		RULE_all_op = 635, RULE_mathop = 636, RULE_qual_op = 637, RULE_qual_all_op = 638, 
		RULE_subquery_Op = 639, RULE_expr_list = 640, RULE_func_arg_list = 641, 
		RULE_func_arg_expr = 642, RULE_type_list = 643, RULE_array_expr = 644, 
		RULE_array_expr_list = 645, RULE_extract_list = 646, RULE_extract_arg = 647, 
		RULE_unicode_normal_form = 648, RULE_overlay_list = 649, RULE_position_list = 650, 
		RULE_substr_list = 651, RULE_trim_list = 652, RULE_in_expr = 653, RULE_case_expr = 654, 
		RULE_when_clause_list = 655, RULE_when_clause = 656, RULE_case_default = 657, 
		RULE_case_arg = 658, RULE_columnref = 659, RULE_indirection_el = 660, 
		RULE_opt_slice_bound = 661, RULE_indirection = 662, RULE_opt_indirection = 663, 
		RULE_opt_target_list = 664, RULE_target_list = 665, RULE_target_el = 666, 
		RULE_qualified_name_list = 667, RULE_qualified_name = 668, RULE_name_list = 669, 
		RULE_name = 670, RULE_attr_name = 671, RULE_file_name = 672, RULE_func_name = 673, 
		RULE_aexprconst = 674, RULE_xconst = 675, RULE_bconst = 676, RULE_fconst = 677, 
		RULE_iconst = 678, RULE_sconst = 679, RULE_anysconst = 680, RULE_opt_uescape = 681, 
		RULE_signediconst = 682, RULE_roleid = 683, RULE_rolespec = 684, RULE_role_list = 685, 
		RULE_colid = 686, RULE_type_function_name = 687, RULE_nonreservedword = 688, 
		RULE_collabel = 689, RULE_identifier = 690, RULE_plsqlidentifier = 691, 
		RULE_unreserved_keyword = 692, RULE_col_name_keyword = 693, RULE_type_func_name_keyword = 694, 
		RULE_reserved_keyword = 695, RULE_builtin_function_name = 696, RULE_pl_function = 697, 
		RULE_comp_options = 698, RULE_comp_option = 699, RULE_sharp = 700, RULE_option_value = 701, 
		RULE_opt_semi = 702, RULE_pl_block = 703, RULE_decl_sect = 704, RULE_decl_start = 705, 
		RULE_decl_stmts = 706, RULE_label_decl = 707, RULE_decl_stmt = 708, RULE_decl_statement = 709, 
		RULE_opt_scrollable = 710, RULE_decl_cursor_query = 711, RULE_decl_cursor_args = 712, 
		RULE_decl_cursor_arglist = 713, RULE_decl_cursor_arg = 714, RULE_decl_is_for = 715, 
		RULE_decl_aliasitem = 716, RULE_decl_varname = 717, RULE_decl_const = 718, 
		RULE_decl_datatype = 719, RULE_decl_collate = 720, RULE_decl_notnull = 721, 
		RULE_decl_defval = 722, RULE_decl_defkey = 723, RULE_assign_operator = 724, 
		RULE_proc_sect = 725, RULE_proc_stmt = 726, RULE_stmt_perform = 727, RULE_stmt_call = 728, 
		RULE_opt_expr_list = 729, RULE_stmt_assign = 730, RULE_stmt_getdiag = 731, 
		RULE_getdiag_area_opt = 732, RULE_getdiag_list = 733, RULE_getdiag_list_item = 734, 
		RULE_getdiag_item = 735, RULE_getdiag_target = 736, RULE_assign_var = 737, 
		RULE_stmt_if = 738, RULE_stmt_elsifs = 739, RULE_stmt_else = 740, RULE_stmt_case = 741, 
		RULE_opt_expr_until_when = 742, RULE_case_when_list = 743, RULE_case_when = 744, 
		RULE_opt_case_else = 745, RULE_stmt_loop = 746, RULE_stmt_while = 747, 
		RULE_stmt_for = 748, RULE_for_control = 749, RULE_opt_for_using_expression = 750, 
		RULE_opt_cursor_parameters = 751, RULE_opt_reverse = 752, RULE_opt_by_expression = 753, 
		RULE_for_variable = 754, RULE_stmt_foreach_a = 755, RULE_foreach_slice = 756, 
		RULE_stmt_exit = 757, RULE_exit_type = 758, RULE_stmt_return = 759, RULE_opt_return_result = 760, 
		RULE_stmt_raise = 761, RULE_opt_stmt_raise_level = 762, RULE_opt_raise_list = 763, 
		RULE_opt_raise_using = 764, RULE_opt_raise_using_elem = 765, RULE_opt_raise_using_elem_list = 766, 
		RULE_stmt_assert = 767, RULE_opt_stmt_assert_message = 768, RULE_loop_body = 769, 
		RULE_stmt_execsql = 770, RULE_stmt_dynexecute = 771, RULE_opt_execute_using = 772, 
		RULE_opt_execute_using_list = 773, RULE_opt_execute_into = 774, RULE_stmt_open = 775, 
		RULE_opt_open_bound_list_item = 776, RULE_opt_open_bound_list = 777, RULE_opt_open_using = 778, 
		RULE_opt_scroll_option = 779, RULE_opt_scroll_option_no = 780, RULE_stmt_fetch = 781, 
		RULE_into_target = 782, RULE_opt_cursor_from = 783, RULE_opt_fetch_direction = 784, 
		RULE_stmt_move = 785, RULE_stmt_close = 786, RULE_stmt_null = 787, RULE_stmt_commit = 788, 
		RULE_stmt_rollback = 789, RULE_plsql_opt_transaction_chain = 790, RULE_stmt_set = 791, 
		RULE_cursor_variable = 792, RULE_exception_sect = 793, RULE_proc_exceptions = 794, 
		RULE_proc_exception = 795, RULE_proc_conditions = 796, RULE_proc_condition = 797, 
		RULE_opt_block_label = 798, RULE_opt_loop_label = 799, RULE_opt_label = 800, 
		RULE_opt_exitcond = 801, RULE_any_identifier = 802, RULE_plsql_unreserved_keyword = 803, 
		RULE_sql_expression = 804, RULE_expr_until_then = 805, RULE_expr_until_semi = 806, 
		RULE_expr_until_rightbracket = 807, RULE_expr_until_loop = 808, RULE_make_execsql_stmt = 809, 
		RULE_opt_returning_clause_into = 810;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "plsqlroot", "stmtblock", "stmtmulti", "stmt", "plsqlconsolecommand", 
			"callstmt", "createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", 
			"alteroptroleelem", "createoptroleelem", "createuserstmt", "alterrolestmt", 
			"opt_in_database", "alterrolesetstmt", "droprolestmt", "creategroupstmt", 
			"altergroupstmt", "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
			"schema_stmt", "variablesetstmt", "set_rest", "generic_set", "set_rest_more", 
			"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
			"zone_value", "opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", 
			"reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
			"variableshowstmt", "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
			"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
			"partition_cmd", "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
			"opt_drop_behavior", "opt_collate_clause", "alter_using", "replica_identity", 
			"reloptions", "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option_list", 
			"alter_identity_column_option", "partitionboundspec", "hash_partbound_elem", 
			"hash_partbound", "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
			"closeportalstmt", "copystmt", "copy_from", "opt_program", "copy_file_name", 
			"copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", "copy_delimiter", 
			"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
			"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createstmt", 
			"opttemp", "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
			"typedtableelementlist", "tableelement", "typedtableelement", "columnDef", 
			"columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
			"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
			"tablelikeoption", "tableconstraint", "constraintelem", "opt_no_inherit", 
			"opt_column_list", "columnlist", "columnElem", "opt_c_include", "key_match", 
			"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
			"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
			"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
			"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
			"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
			"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
			"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
			"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
			"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
			"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
			"createtablespacestmt", "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
			"create_extension_opt_list", "create_extension_opt_item", "alterextensionstmt", 
			"alter_extension_opt_list", "alter_extension_opt_item", "alterextensioncontentsstmt", 
			"createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", 
			"create_generic_options", "generic_option_list", "alter_generic_options", 
			"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
			"generic_option_name", "generic_option_arg", "createforeignserverstmt", 
			"opt_type", "foreign_server_version", "opt_foreign_server_version", "alterforeignserverstmt", 
			"createforeigntablestmt", "importforeignschemastmt", "import_qualification_type", 
			"import_qualification", "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
			"alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
			"rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
			"rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", "row_security_cmd", 
			"createamstmt", "am_type", "createtrigstmt", "triggeractiontime", "triggerevents", 
			"triggeroneevent", "triggerreferencing", "triggertransitions", "triggertransition", 
			"transitionoldornew", "transitionrowortable", "transitionrelname", "triggerforspec", 
			"triggerforopteach", "triggerfortype", "triggerwhen", "function_or_procedure", 
			"triggerfuncargs", "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
			"constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
			"event_trigger_when_item", "event_trigger_value_list", "altereventtrigstmt", 
			"enable_trigger", "createassertionstmt", "definestmt", "definition", 
			"def_list", "def_elem", "def_arg", "old_aggr_definition", "old_aggr_list", 
			"old_aggr_elem", "opt_enum_val_list", "enum_val_list", "alterenumstmt", 
			"opt_if_not_exists", "createopclassstmt", "opclass_item_list", "opclass_item", 
			"opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", "createopfamilystmt", 
			"alteropfamilystmt", "opclass_drop_list", "opclass_drop", "dropopclassstmt", 
			"dropopfamilystmt", "dropownedstmt", "reassignownedstmt", "dropstmt", 
			"object_type_any_name", "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
			"any_name_list", "any_name", "attrs", "type_name_list", "truncatestmt", 
			"opt_restart_seqs", "commentstmt", "comment_text", "seclabelstmt", "opt_provider", 
			"security_label", "fetchstmt", "fetch_args", "from_in", "opt_from_in", 
			"grantstmt", "revokestmt", "privileges", "privilege_list", "privilege", 
			"privilege_target", "grantee_list", "grantee", "opt_grant_grant_option", 
			"grantrolestmt", "revokerolestmt", "opt_grant_admin_option", "opt_granted_by", 
			"alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", "defaclaction", 
			"defacl_privilege_target", "indexstmt", "opt_unique", "opt_concurrently", 
			"opt_index_name", "access_method_clause", "index_params", "index_elem_options", 
			"index_elem", "opt_include", "index_including_params", "opt_collate", 
			"opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
			"opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
			"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
			"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
			"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
			"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
			"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
			"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
			"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
			"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
			"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
			"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
			"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
			"reindex_option_list", "reindex_option_elem", "altertblspcstmt", "renamestmt", 
			"opt_column", "opt_set_data", "alterobjectdependsstmt", "opt_no", "alterobjectschemastmt", 
			"alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
			"altertypestmt", "alterownerstmt", "createpublicationstmt", "opt_publication_for_tables", 
			"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
			"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
			"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
			"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "opt_instead", "notifystmt", 
			"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "opt_transaction", 
			"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
			"opt_transaction_chain", "viewstmt", "opt_check_option", "loadstmt", 
			"createdbstmt", "createdb_opt_list", "createdb_opt_items", "createdb_opt_item", 
			"createdb_opt_name", "opt_equal", "alterdatabasestmt", "alterdatabasesetstmt", 
			"dropdbstmt", "drop_option_list", "drop_option", "altercollationstmt", 
			"altersystemstmt", "createdomainstmt", "alterdomainstmt", "opt_as", "altertsdictionarystmt", 
			"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
			"cluster_index_specification", "vacuumstmt", "analyzestmt", "vac_analyze_option_list", 
			"analyze_keyword", "vac_analyze_option_elem", "vac_analyze_option_name", 
			"vac_analyze_option_arg", "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
			"opt_name_list", "vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
			"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
			"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
			"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
			"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
			"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
			"mergestmt", "merge_insert_clause", "merge_update_clause", "merge_delete_clause", 
			"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
			"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", 
			"set_target", "set_target_list", "declarecursorstmt", "cursor_name", 
			"cursor_options", "opt_hold", "selectstmt", "select_with_parens", "select_no_parens", 
			"select_clause", "simple_select", "set_operator", "set_operator_with_all_or_distinct", 
			"with_clause", "cte_list", "common_table_expr", "opt_materialized", "opt_with_clause", 
			"into_clause", "opt_strict", "opttempTableName", "opt_table", "all_or_distinct", 
			"distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause", 
			"sortby_list", "sortby", "select_limit", "opt_select_limit", "limit_clause", 
			"offset_clause", "select_limit_value", "select_offset_value", "select_fetch_first_value", 
			"i_or_f_const", "row_or_rows", "first_or_next", "group_clause", "group_by_list", 
			"group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause", 
			"grouping_sets_clause", "having_clause", "for_locking_clause", "opt_for_locking_clause", 
			"for_locking_items", "for_locking_item", "for_locking_strength", "locked_rels_list", 
			"values_clause", "from_clause", "from_list", "non_ansi_join", "table_ref", 
			"alias_clause", "opt_alias_clause", "func_alias_clause", "join_type", 
			"join_qual", "relation_expr", "relation_expr_list", "relation_expr_opt_alias", 
			"tablesample_clause", "opt_repeatable_clause", "func_table", "rowsfrom_item", 
			"rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause", 
			"where_or_current_clause", "opttablefuncelementlist", "tablefuncelementlist", 
			"tablefuncelement", "xmltable", "xmltable_column_list", "xmltable_column_el", 
			"xmltable_column_option_list", "xmltable_column_option_el", "xml_namespace_list", 
			"xml_namespace_el", "typename", "opt_array_bounds", "simpletypename", 
			"consttypename", "generictype", "opt_type_modifiers", "numeric", "opt_float", 
			"bit", "constbit", "bitwithlength", "bitwithoutlength", "character", 
			"constcharacter", "character_c", "opt_varying", "constdatetime", "constinterval", 
			"opt_timezone", "opt_interval", "interval_second", "opt_escape", "a_expr", 
			"a_expr_qual", "a_expr_lessless", "a_expr_or", "a_expr_and", "a_expr_between", 
			"a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", "a_expr_compare", 
			"a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", "a_expr_add", 
			"a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
			"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
			"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
			"xml_root_version", "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
			"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
			"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
			"window_definition_list", "window_definition", "over_clause", "window_specification", 
			"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
			"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", 
			"explicit_row", "implicit_row", "sub_type", "all_op", "mathop", "qual_op", 
			"qual_all_op", "subquery_Op", "expr_list", "func_arg_list", "func_arg_expr", 
			"type_list", "array_expr", "array_expr_list", "extract_list", "extract_arg", 
			"unicode_normal_form", "overlay_list", "position_list", "substr_list", 
			"trim_list", "in_expr", "case_expr", "when_clause_list", "when_clause", 
			"case_default", "case_arg", "columnref", "indirection_el", "opt_slice_bound", 
			"indirection", "opt_indirection", "opt_target_list", "target_list", "target_el", 
			"qualified_name_list", "qualified_name", "name_list", "name", "attr_name", 
			"file_name", "func_name", "aexprconst", "xconst", "bconst", "fconst", 
			"iconst", "sconst", "anysconst", "opt_uescape", "signediconst", "roleid", 
			"rolespec", "role_list", "colid", "type_function_name", "nonreservedword", 
			"collabel", "identifier", "plsqlidentifier", "unreserved_keyword", "col_name_keyword", 
			"type_func_name_keyword", "reserved_keyword", "builtin_function_name", 
			"pl_function", "comp_options", "comp_option", "sharp", "option_value", 
			"opt_semi", "pl_block", "decl_sect", "decl_start", "decl_stmts", "label_decl", 
			"decl_stmt", "decl_statement", "opt_scrollable", "decl_cursor_query", 
			"decl_cursor_args", "decl_cursor_arglist", "decl_cursor_arg", "decl_is_for", 
			"decl_aliasitem", "decl_varname", "decl_const", "decl_datatype", "decl_collate", 
			"decl_notnull", "decl_defval", "decl_defkey", "assign_operator", "proc_sect", 
			"proc_stmt", "stmt_perform", "stmt_call", "opt_expr_list", "stmt_assign", 
			"stmt_getdiag", "getdiag_area_opt", "getdiag_list", "getdiag_list_item", 
			"getdiag_item", "getdiag_target", "assign_var", "stmt_if", "stmt_elsifs", 
			"stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", "case_when", 
			"opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
			"opt_for_using_expression", "opt_cursor_parameters", "opt_reverse", "opt_by_expression", 
			"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
			"stmt_return", "opt_return_result", "stmt_raise", "opt_stmt_raise_level", 
			"opt_raise_list", "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
			"stmt_assert", "opt_stmt_assert_message", "loop_body", "stmt_execsql", 
			"stmt_dynexecute", "opt_execute_using", "opt_execute_using_list", "opt_execute_into", 
			"stmt_open", "opt_open_bound_list_item", "opt_open_bound_list", "opt_open_using", 
			"opt_scroll_option", "opt_scroll_option_no", "stmt_fetch", "into_target", 
			"opt_cursor_from", "opt_fetch_direction", "stmt_move", "stmt_close", 
			"stmt_null", "stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", 
			"stmt_set", "cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
			"proc_conditions", "proc_condition", "opt_block_label", "opt_loop_label", 
			"opt_label", "opt_exitcond", "any_identifier", "plsql_unreserved_keyword", 
			"sql_expression", "expr_until_then", "expr_until_semi", "expr_until_rightbracket", 
			"expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
			"'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", 
			"':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, 
			null, "'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
			"'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", 
			"'COLLATE'", "'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", 
			"'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
			"'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", "'DESC'", "'DISTINCT'", 
			"'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", 
			"'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", 
			"'INTO'", "'LATERAL'", "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
			"'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
			"'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
			"'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", 
			"'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", 
			"'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
			"'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", 
			"'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", 
			"'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
			"'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", 
			"'AFTER'", "'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", 
			"'ASSIGNMENT'", "'AT'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
			"'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", 
			"'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", 
			"'CLUSTER'", "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
			"'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
			"'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
			"'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", 
			"'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", 
			"'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", 
			"'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", 
			"'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", 
			"'EXTENSION'", "'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", 
			"'FORWARD'", "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", 
			"'HEADER'", "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", 
			"'IMMUTABLE'", "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", 
			"'INDEXES'", "'INHERIT'", "'INHERITS'", "'INLINE'", "'INSENSITIVE'", 
			"'INSERT'", "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", "'LABEL'", 
			"'LANGUAGE'", "'LARGE'", "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", 
			"'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", 
			"'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", "'MERGE'", "'MINUTE'", "'MINVALUE'", 
			"'MODE'", "'MONTH'", "'MOVE'", "'NAME'", "'NAMES'", "'NEXT'", "'NO'", 
			"'NOTHING'", "'NOTIFY'", "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", 
			"'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", 
			"'PARSER'", "'PARTIAL'", "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", 
			"'PRECEDING'", "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", 
			"'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", "'READ'", 
			"'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", 
			"'RELATIVE'", "'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'REPLICA'", 
			"'RESET'", "'RESTART'", "'RESTRICT'", "'RETURNS'", "'REVOKE'", "'ROLE'", 
			"'ROLLBACK'", "'ROWS'", "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", 
			"'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", 
			"'SERVER'", "'SESSION'", "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", 
			"'STABLE'", "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", 
			"'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", 
			"'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
			"'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", 
			"'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", 
			"'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", "'VACUUM'", "'VALID'", 
			"'VALIDATE'", "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", 
			"'WHITESPACE'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", 
			"'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", 
			"'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", 
			"'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", 
			"'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
			"'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", 
			"'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", 
			"'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", 
			"'XMLAGG'", "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", 
			"'XML_IS_WELL_FORMED_CONTENT'", "'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", 
			"'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", 
			"'XMLROOT'", "'XMLSERIALIZE'", "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", 
			"'EXPRESSION'", "'GENERATED'", "'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", 
			"'TRANSFORM'", "'IMPORT'", "'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", 
			"'OLD'", "'VALUE'", "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
			"'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", 
			"'SQL'", "'DEPENDS'", "'OVERRIDING'", "'CONFLICT'", "'SKIP'", "'LOCKED'", 
			"'TIES'", "'ROLLUP'", "'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", 
			"'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", 
			"'NORMALIZED'", "'WITHIN'", "'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", 
			"'NFD'", "'NFKC'", "'NFKD'", "'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", 
			"'PRINT_STRICT_PARAMS'", "'VARIABLE_CONFLICT'", "'ERROR'", "'USE_VARIABLE'", 
			"'USE_COLUMN'", "'ALIAS'", "'CONSTANT'", "'PERFORM'", "'GET'", "'DIAGNOSTICS'", 
			"'STACKED'", "'ELSIF'", "'WHILE'", "'REVERSE'", "'FOREACH'", "'SLICE'", 
			"'EXIT'", "'RETURN'", "'QUERY'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", 
			"'LOG'", "'INFO'", "'NOTICE'", "'WARNING'", "'EXCEPTION'", "'ASSERT'", 
			"'LOOP'", "'OPEN'", "'ABS'", "'CBRT'", "'CEIL'", "'CEILING'", "'DEGREES'", 
			"'DIV'", "'EXP'", "'FACTORIAL'", "'FLOOR'", "'GCD'", "'LCM'", "'LN'", 
			"'LOG10'", "'MIN_SCALE'", "'MOD'", "'PI'", "'POWER'", "'RADIANS'", "'ROUND'", 
			"'SCALE'", "'SIGN'", "'SQRT'", "'TRIM_SCALE'", "'TRUNC'", "'WIDTH_BUCKET'", 
			"'RANDOM'", "'SETSEED'", "'ACOS'", "'ACOSD'", "'ASIN'", "'ASIND'", "'ATAN'", 
			"'ATAND'", "'ATAN2'", "'ATAN2D'", "'COS'", "'COSD'", "'COT'", "'COTD'", 
			"'SIN'", "'SIND'", "'TAN'", "'TAND'", "'SINH'", "'COSH'", "'TANH'", "'ASINH'", 
			"'ACOSH'", "'ATANH'", "'BIT_LENGTH'", "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", 
			"'LOWER'", "'OCTET_LENGTH'", "'UPPER'", "'ASCII'", "'BTRIM'", "'CHR'", 
			"'CONCAT'", "'CONCAT_WS'", "'FORMAT'", "'INITCAP'", "'LENGTH'", "'LPAD'", 
			"'LTRIM'", "'MD5'", "'PARSE_IDENT'", "'PG_CLIENT_ENCODING'", "'QUOTE_IDENT'", 
			"'QUOTE_LITERAL'", "'QUOTE_NULLABLE'", "'REGEXP_COUNT'", "'REGEXP_INSTR'", 
			"'REGEXP_LIKE'", "'REGEXP_MATCH'", "'REGEXP_MATCHES'", "'REGEXP_REPLACE'", 
			"'REGEXP_SPLIT_TO_ARRAY'", "'REGEXP_SPLIT_TO_TABLE'", "'REGEXP_SUBSTR'", 
			"'REPEAT'", "'RPAD'", "'RTRIM'", "'SPLIT_PART'", "'STARTS_WITH'", "'STRING_TO_ARRAY'", 
			"'STRING_TO_TABLE'", "'STRPOS'", "'SUBSTR'", "'TO_ASCII'", "'TO_HEX'", 
			"'TRANSLATE'", "'UNISTR'", "'AGE'", "'CLOCK_TIMESTAMP'", "'DATE_BIN'", 
			"'DATE_PART'", "'DATE_TRUNC'", "'ISFINITE'", "'JUSTIFY_DAYS'", "'JUSTIFY_HOURS'", 
			"'JUSTIFY_INTERVAL'", "'MAKE_DATE'", "'MAKE_INTERVAL'", "'MAKE_TIME'", 
			"'MAKE_TIMESTAMP'", "'MAKE_TIMESTAMPTZ'", "'NOW'", "'STATEMENT_TIMESTAMP'", 
			"'TIMEOFDAY'", "'TRANSACTION_TIMESTAMP'", "'TO_TIMESTAMP'", "'TO_CHAR'", 
			"'TO_DATE'", "'TO_NUMBER'", null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, "'\\\\'", null, null, null, null, null, null, null, null, 
			null, "'''"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
			"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
			"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
			"LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
			"TYPECAST", "PERCENT", "PARAM", "Operator", "ALL", "ANALYSE", "ANALYZE", 
			"AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", 
			"CHECK", "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", 
			"CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", 
			"EXCEPT", "FALSE_P", "FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP_P", 
			"HAVING", "IN_P", "INITIALLY", "INTERSECT", "INTO", "LATERAL_P", "LEADING", 
			"LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL_P", "OFFSET", "ON", 
			"ONLY", "OR", "ORDER", "PLACING", "PRIMARY", "REFERENCES", "RETURNING", 
			"SELECT", "SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", 
			"TRAILING", "TRUE_P", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", 
			"WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", "BINARY", "COLLATION", 
			"CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", "FREEZE", "FULL", "ILIKE", 
			"INNER_P", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", 
			"OUTER_P", "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", "ABORT_P", 
			"ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", 
			"ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", "ATTRIBUTE", 
			"BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", "CASCADE", 
			"CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", "CLASS", 
			"CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONFIGURATION", 
			"CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", 
			"COPY", "COST", "CSV", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", 
			"DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE_P", 
			"DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", "DISCARD", "DOCUMENT_P", 
			"DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", "ENCODING", "ENCRYPTED", 
			"ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
			"EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", "FOLLOWING", 
			"FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANTED", "HANDLER", 
			"HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", "IMMUTABLE", 
			"IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", 
			"INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", "INSTEAD", "INVOKER", 
			"ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LEAKPROOF", 
			"LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "MAPPING", 
			"MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", "MINUTE_P", 
			"MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", "NEXT", "NO", 
			"NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", "OFF", "OIDS", 
			"OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", "PARSER", "PARTIAL", 
			"PARTITION", "PASSING", "PASSWORD", "PLANS", "PRECEDING", "PREPARE", 
			"PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
			"PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", 
			"REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", 
			"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
			"ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", 
			"SEARCH", "SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", 
			"SERVER", "SESSION", "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", 
			"STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", 
			"STORAGE", "STRICT_P", "STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", 
			"TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", 
			"TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
			"UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", 
			"VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", "VIEW", 
			"VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", 
			"YEAR_P", "YES_P", "ZONE", "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", 
			"CHARACTER", "COALESCE", "DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", 
			"GREATEST", "INOUT", "INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", 
			"NCHAR", "NONE", "NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", 
			"REAL", "ROW", "SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", 
			"TREAT", "TRIM", "VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCOMMENT", 
			"XMLAGG", "XML_IS_WELL_FORMED", "XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", 
			"XPATH", "XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", 
			"XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "CALL", "CURRENT_P", 
			"ATTACH", "DETACH", "EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", 
			"ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", "METHOD", "REFERENCING", 
			"NEW", "OLD", "VALUE_P", "SUBSCRIPTION", "PUBLICATION", "OUT_P", "END_P", 
			"ROUTINES", "SCHEMAS", "PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", 
			"SQL_P", "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", "TIES", 
			"ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", 
			"COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", 
			"GROUPS", "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", 
			"NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", "VARIABLE_CONFLICT", "ERROR", 
			"USE_VARIABLE", "USE_COLUMN", "ALIAS", "CONSTANT", "PERFORM", "GET", 
			"DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "REVERSE", "FOREACH", "SLICE", 
			"EXIT", "RETURN", "QUERY", "RAISE", "SQLSTATE", "DEBUG", "LOG", "INFO", 
			"NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", "ABS", "CBRT", 
			"CEIL", "CEILING", "DEGREES", "DIV", "EXP", "FACTORIAL", "FLOOR", "GCD", 
			"LCM", "LN", "LOG10", "MIN_SCALE", "MOD", "PI", "POWER", "RADIANS", "ROUND", 
			"SCALE", "SIGN", "SQRT", "TRIM_SCALE", "TRUNC", "WIDTH_BUCKET", "RANDOM", 
			"SETSEED", "ACOS", "ACOSD", "ASIN", "ASIND", "ATAN", "ATAND", "ATAN2", 
			"ATAN2D", "COS", "COSD", "COT", "COTD", "SIN", "SIND", "TAN", "TAND", 
			"SINH", "COSH", "TANH", "ASINH", "ACOSH", "ATANH", "BIT_LENGTH", "CHAR_LENGTH", 
			"CHARACTER_LENGTH", "LOWER", "OCTET_LENGTH", "UPPER", "ASCII", "BTRIM", 
			"CHR", "CONCAT", "CONCAT_WS", "FORMAT", "INITCAP", "LENGTH", "LPAD", 
			"LTRIM", "MD5", "PARSE_IDENT", "PG_CLIENT_ENCODING", "QUOTE_IDENT", "QUOTE_LITERAL", 
			"QUOTE_NULLABLE", "REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_MATCH", 
			"REGEXP_MATCHES", "REGEXP_REPLACE", "REGEXP_SPLIT_TO_ARRAY", "REGEXP_SPLIT_TO_TABLE", 
			"REGEXP_SUBSTR", "REPEAT", "RPAD", "RTRIM", "SPLIT_PART", "STARTS_WITH", 
			"STRING_TO_ARRAY", "STRING_TO_TABLE", "STRPOS", "SUBSTR", "TO_ASCII", 
			"TO_HEX", "TRANSLATE", "UNISTR", "AGE", "CLOCK_TIMESTAMP", "DATE_BIN", 
			"DATE_PART", "DATE_TRUNC", "ISFINITE", "JUSTIFY_DAYS", "JUSTIFY_HOURS", 
			"JUSTIFY_INTERVAL", "MAKE_DATE", "MAKE_INTERVAL", "MAKE_TIME", "MAKE_TIMESTAMP", 
			"MAKE_TIMESTAMPTZ", "NOW", "STATEMENT_TIMESTAMP", "TIMEOFDAY", "TRANSACTION_TIMESTAMP", 
			"TO_TIMESTAMP", "TO_CHAR", "TO_DATE", "TO_NUMBER", "Identifier", "QuotedIdentifier", 
			"UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
			"UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", "InvalidUnicodeQuotedIdentifier", 
			"InvalidUnterminatedUnicodeQuotedIdentifier", "StringConstant", "UnterminatedStringConstant", 
			"UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
			"BeginDollarStringConstant", "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
			"InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
			"HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
			"InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
			"Integral", "NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", 
			"Whitespace", "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
			"MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
			"UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
			"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
			"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }



	public PostgreSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public StmtblockContext stmtblock() {
			return getRuleContext(StmtblockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PostgreSQLParser.EOF, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1622);
			stmtblock();
			setState(1623);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlrootContext extends ParserRuleContext {
		public Pl_functionContext pl_function() {
			return getRuleContext(Pl_functionContext.class,0);
		}
		public PlsqlrootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlroot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlroot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlroot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlroot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlrootContext plsqlroot() throws RecognitionException {
		PlsqlrootContext _localctx = new PlsqlrootContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_plsqlroot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			pl_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtblockContext extends ParserRuleContext {
		public StmtmultiContext stmtmulti() {
			return getRuleContext(StmtmultiContext.class,0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtblock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtblock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmtblock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1627);
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtmultiContext extends ParserRuleContext {
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmtmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmtmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmtmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtmultiContext stmtmulti() throws RecognitionException {
		StmtmultiContext _localctx = new StmtmultiContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_stmtmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAREN) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << CREATE) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (GRANT - 65)) | (1L << (SELECT - 65)) | (1L << (TABLE - 65)) | (1L << (WITH - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (ABORT_P - 129)) | (1L << (ALTER - 129)) | (1L << (BEGIN_P - 129)) | (1L << (CHECKPOINT - 129)) | (1L << (CLOSE - 129)) | (1L << (CLUSTER - 129)) | (1L << (COMMENT - 129)) | (1L << (COMMIT - 129)) | (1L << (COPY - 129)) | (1L << (DEALLOCATE - 129)) | (1L << (DECLARE - 129)) | (1L << (DELETE_P - 129)) | (1L << (DISCARD - 129)) | (1L << (DROP - 129)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (EXECUTE - 202)) | (1L << (EXPLAIN - 202)) | (1L << (INSERT - 202)) | (1L << (LISTEN - 202)) | (1L << (LOAD - 202)) | (1L << (LOCK_P - 202)) | (1L << (MERGE - 202)) | (1L << (MOVE - 202)) | (1L << (NOTIFY - 202)))) != 0) || ((((_la - 283)) & ~0x3f) == 0 && ((1L << (_la - 283)) & ((1L << (PREPARE - 283)) | (1L << (REASSIGN - 283)) | (1L << (REFRESH - 283)) | (1L << (REINDEX - 283)) | (1L << (RELEASE - 283)) | (1L << (RESET - 283)) | (1L << (REVOKE - 283)) | (1L << (ROLLBACK - 283)) | (1L << (SAVEPOINT - 283)) | (1L << (SECURITY - 283)) | (1L << (SET - 283)) | (1L << (SHOW - 283)) | (1L << (START - 283)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (TRUNCATE - 351)) | (1L << (UNLISTEN - 351)) | (1L << (UPDATE - 351)) | (1L << (VACUUM - 351)))) != 0) || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (VALUES - 415)) | (1L << (CALL - 415)) | (1L << (IMPORT_P - 415)) | (1L << (END_P - 415)))) != 0) || _la==MetaCommand) {
				{
				{
				setState(1629);
				stmt();
				setState(1631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(1630);
					match(SEMI);
					}
				}

				}
				}
				setState(1637);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public AltereventtrigstmtContext altereventtrigstmt() {
			return getRuleContext(AltereventtrigstmtContext.class,0);
		}
		public AltercollationstmtContext altercollationstmt() {
			return getRuleContext(AltercollationstmtContext.class,0);
		}
		public AlterdatabasestmtContext alterdatabasestmt() {
			return getRuleContext(AlterdatabasestmtContext.class,0);
		}
		public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return getRuleContext(AlterdatabasesetstmtContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return getRuleContext(AlterdefaultprivilegesstmtContext.class,0);
		}
		public AlterdomainstmtContext alterdomainstmt() {
			return getRuleContext(AlterdomainstmtContext.class,0);
		}
		public AlterenumstmtContext alterenumstmt() {
			return getRuleContext(AlterenumstmtContext.class,0);
		}
		public AlterextensionstmtContext alterextensionstmt() {
			return getRuleContext(AlterextensionstmtContext.class,0);
		}
		public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return getRuleContext(AlterextensioncontentsstmtContext.class,0);
		}
		public AlterfdwstmtContext alterfdwstmt() {
			return getRuleContext(AlterfdwstmtContext.class,0);
		}
		public AlterforeignserverstmtContext alterforeignserverstmt() {
			return getRuleContext(AlterforeignserverstmtContext.class,0);
		}
		public AlterfunctionstmtContext alterfunctionstmt() {
			return getRuleContext(AlterfunctionstmtContext.class,0);
		}
		public AltergroupstmtContext altergroupstmt() {
			return getRuleContext(AltergroupstmtContext.class,0);
		}
		public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return getRuleContext(AlterobjectdependsstmtContext.class,0);
		}
		public AlterobjectschemastmtContext alterobjectschemastmt() {
			return getRuleContext(AlterobjectschemastmtContext.class,0);
		}
		public AlterownerstmtContext alterownerstmt() {
			return getRuleContext(AlterownerstmtContext.class,0);
		}
		public AlteroperatorstmtContext alteroperatorstmt() {
			return getRuleContext(AlteroperatorstmtContext.class,0);
		}
		public AltertypestmtContext altertypestmt() {
			return getRuleContext(AltertypestmtContext.class,0);
		}
		public AlterpolicystmtContext alterpolicystmt() {
			return getRuleContext(AlterpolicystmtContext.class,0);
		}
		public AlterseqstmtContext alterseqstmt() {
			return getRuleContext(AlterseqstmtContext.class,0);
		}
		public AltersystemstmtContext altersystemstmt() {
			return getRuleContext(AltersystemstmtContext.class,0);
		}
		public AltertablestmtContext altertablestmt() {
			return getRuleContext(AltertablestmtContext.class,0);
		}
		public AltertblspcstmtContext altertblspcstmt() {
			return getRuleContext(AltertblspcstmtContext.class,0);
		}
		public AltercompositetypestmtContext altercompositetypestmt() {
			return getRuleContext(AltercompositetypestmtContext.class,0);
		}
		public AlterpublicationstmtContext alterpublicationstmt() {
			return getRuleContext(AlterpublicationstmtContext.class,0);
		}
		public AlterrolesetstmtContext alterrolesetstmt() {
			return getRuleContext(AlterrolesetstmtContext.class,0);
		}
		public AlterrolestmtContext alterrolestmt() {
			return getRuleContext(AlterrolestmtContext.class,0);
		}
		public AltersubscriptionstmtContext altersubscriptionstmt() {
			return getRuleContext(AltersubscriptionstmtContext.class,0);
		}
		public AlterstatsstmtContext alterstatsstmt() {
			return getRuleContext(AlterstatsstmtContext.class,0);
		}
		public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return getRuleContext(AltertsconfigurationstmtContext.class,0);
		}
		public AltertsdictionarystmtContext altertsdictionarystmt() {
			return getRuleContext(AltertsdictionarystmtContext.class,0);
		}
		public AlterusermappingstmtContext alterusermappingstmt() {
			return getRuleContext(AlterusermappingstmtContext.class,0);
		}
		public AnalyzestmtContext analyzestmt() {
			return getRuleContext(AnalyzestmtContext.class,0);
		}
		public CallstmtContext callstmt() {
			return getRuleContext(CallstmtContext.class,0);
		}
		public CheckpointstmtContext checkpointstmt() {
			return getRuleContext(CheckpointstmtContext.class,0);
		}
		public CloseportalstmtContext closeportalstmt() {
			return getRuleContext(CloseportalstmtContext.class,0);
		}
		public ClusterstmtContext clusterstmt() {
			return getRuleContext(ClusterstmtContext.class,0);
		}
		public CommentstmtContext commentstmt() {
			return getRuleContext(CommentstmtContext.class,0);
		}
		public ConstraintssetstmtContext constraintssetstmt() {
			return getRuleContext(ConstraintssetstmtContext.class,0);
		}
		public CopystmtContext copystmt() {
			return getRuleContext(CopystmtContext.class,0);
		}
		public CreateamstmtContext createamstmt() {
			return getRuleContext(CreateamstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreateassertionstmtContext createassertionstmt() {
			return getRuleContext(CreateassertionstmtContext.class,0);
		}
		public CreatecaststmtContext createcaststmt() {
			return getRuleContext(CreatecaststmtContext.class,0);
		}
		public CreateconversionstmtContext createconversionstmt() {
			return getRuleContext(CreateconversionstmtContext.class,0);
		}
		public CreatedomainstmtContext createdomainstmt() {
			return getRuleContext(CreatedomainstmtContext.class,0);
		}
		public CreateextensionstmtContext createextensionstmt() {
			return getRuleContext(CreateextensionstmtContext.class,0);
		}
		public CreatefdwstmtContext createfdwstmt() {
			return getRuleContext(CreatefdwstmtContext.class,0);
		}
		public CreateforeignserverstmtContext createforeignserverstmt() {
			return getRuleContext(CreateforeignserverstmtContext.class,0);
		}
		public CreateforeigntablestmtContext createforeigntablestmt() {
			return getRuleContext(CreateforeigntablestmtContext.class,0);
		}
		public CreatefunctionstmtContext createfunctionstmt() {
			return getRuleContext(CreatefunctionstmtContext.class,0);
		}
		public CreategroupstmtContext creategroupstmt() {
			return getRuleContext(CreategroupstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public CreateopclassstmtContext createopclassstmt() {
			return getRuleContext(CreateopclassstmtContext.class,0);
		}
		public CreateopfamilystmtContext createopfamilystmt() {
			return getRuleContext(CreateopfamilystmtContext.class,0);
		}
		public CreatepublicationstmtContext createpublicationstmt() {
			return getRuleContext(CreatepublicationstmtContext.class,0);
		}
		public AlteropfamilystmtContext alteropfamilystmt() {
			return getRuleContext(AlteropfamilystmtContext.class,0);
		}
		public CreatepolicystmtContext createpolicystmt() {
			return getRuleContext(CreatepolicystmtContext.class,0);
		}
		public CreateplangstmtContext createplangstmt() {
			return getRuleContext(CreateplangstmtContext.class,0);
		}
		public CreateschemastmtContext createschemastmt() {
			return getRuleContext(CreateschemastmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return getRuleContext(CreatesubscriptionstmtContext.class,0);
		}
		public CreatestatsstmtContext createstatsstmt() {
			return getRuleContext(CreatestatsstmtContext.class,0);
		}
		public CreatetablespacestmtContext createtablespacestmt() {
			return getRuleContext(CreatetablespacestmtContext.class,0);
		}
		public CreatetransformstmtContext createtransformstmt() {
			return getRuleContext(CreatetransformstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public CreateeventtrigstmtContext createeventtrigstmt() {
			return getRuleContext(CreateeventtrigstmtContext.class,0);
		}
		public CreaterolestmtContext createrolestmt() {
			return getRuleContext(CreaterolestmtContext.class,0);
		}
		public CreateuserstmtContext createuserstmt() {
			return getRuleContext(CreateuserstmtContext.class,0);
		}
		public CreateusermappingstmtContext createusermappingstmt() {
			return getRuleContext(CreateusermappingstmtContext.class,0);
		}
		public CreatedbstmtContext createdbstmt() {
			return getRuleContext(CreatedbstmtContext.class,0);
		}
		public DeallocatestmtContext deallocatestmt() {
			return getRuleContext(DeallocatestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public DefinestmtContext definestmt() {
			return getRuleContext(DefinestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DiscardstmtContext discardstmt() {
			return getRuleContext(DiscardstmtContext.class,0);
		}
		public DostmtContext dostmt() {
			return getRuleContext(DostmtContext.class,0);
		}
		public DropcaststmtContext dropcaststmt() {
			return getRuleContext(DropcaststmtContext.class,0);
		}
		public DropopclassstmtContext dropopclassstmt() {
			return getRuleContext(DropopclassstmtContext.class,0);
		}
		public DropopfamilystmtContext dropopfamilystmt() {
			return getRuleContext(DropopfamilystmtContext.class,0);
		}
		public DropownedstmtContext dropownedstmt() {
			return getRuleContext(DropownedstmtContext.class,0);
		}
		public DropstmtContext dropstmt() {
			return getRuleContext(DropstmtContext.class,0);
		}
		public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return getRuleContext(DropsubscriptionstmtContext.class,0);
		}
		public DroptablespacestmtContext droptablespacestmt() {
			return getRuleContext(DroptablespacestmtContext.class,0);
		}
		public DroptransformstmtContext droptransformstmt() {
			return getRuleContext(DroptransformstmtContext.class,0);
		}
		public DroprolestmtContext droprolestmt() {
			return getRuleContext(DroprolestmtContext.class,0);
		}
		public DropusermappingstmtContext dropusermappingstmt() {
			return getRuleContext(DropusermappingstmtContext.class,0);
		}
		public DropdbstmtContext dropdbstmt() {
			return getRuleContext(DropdbstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public FetchstmtContext fetchstmt() {
			return getRuleContext(FetchstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public GrantrolestmtContext grantrolestmt() {
			return getRuleContext(GrantrolestmtContext.class,0);
		}
		public ImportforeignschemastmtContext importforeignschemastmt() {
			return getRuleContext(ImportforeignschemastmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public MergestmtContext mergestmt() {
			return getRuleContext(MergestmtContext.class,0);
		}
		public ListenstmtContext listenstmt() {
			return getRuleContext(ListenstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public LoadstmtContext loadstmt() {
			return getRuleContext(LoadstmtContext.class,0);
		}
		public LockstmtContext lockstmt() {
			return getRuleContext(LockstmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public PreparestmtContext preparestmt() {
			return getRuleContext(PreparestmtContext.class,0);
		}
		public ReassignownedstmtContext reassignownedstmt() {
			return getRuleContext(ReassignownedstmtContext.class,0);
		}
		public ReindexstmtContext reindexstmt() {
			return getRuleContext(ReindexstmtContext.class,0);
		}
		public RemoveaggrstmtContext removeaggrstmt() {
			return getRuleContext(RemoveaggrstmtContext.class,0);
		}
		public RemovefuncstmtContext removefuncstmt() {
			return getRuleContext(RemovefuncstmtContext.class,0);
		}
		public RemoveoperstmtContext removeoperstmt() {
			return getRuleContext(RemoveoperstmtContext.class,0);
		}
		public RenamestmtContext renamestmt() {
			return getRuleContext(RenamestmtContext.class,0);
		}
		public RevokestmtContext revokestmt() {
			return getRuleContext(RevokestmtContext.class,0);
		}
		public RevokerolestmtContext revokerolestmt() {
			return getRuleContext(RevokerolestmtContext.class,0);
		}
		public RulestmtContext rulestmt() {
			return getRuleContext(RulestmtContext.class,0);
		}
		public SeclabelstmtContext seclabelstmt() {
			return getRuleContext(SeclabelstmtContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TransactionstmtContext transactionstmt() {
			return getRuleContext(TransactionstmtContext.class,0);
		}
		public TruncatestmtContext truncatestmt() {
			return getRuleContext(TruncatestmtContext.class,0);
		}
		public UnlistenstmtContext unlistenstmt() {
			return getRuleContext(UnlistenstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public VacuumstmtContext vacuumstmt() {
			return getRuleContext(VacuumstmtContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public VariablesetstmtContext variablesetstmt() {
			return getRuleContext(VariablesetstmtContext.class,0);
		}
		public VariableshowstmtContext variableshowstmt() {
			return getRuleContext(VariableshowstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public PlsqlconsolecommandContext plsqlconsolecommand() {
			return getRuleContext(PlsqlconsolecommandContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_stmt);
		try {
			setState(1763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1638);
				altereventtrigstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1639);
				altercollationstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1640);
				alterdatabasestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1641);
				alterdatabasesetstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1642);
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1643);
				alterdomainstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1644);
				alterenumstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1645);
				alterextensionstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1646);
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1647);
				alterfdwstmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1648);
				alterforeignserverstmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1649);
				alterfunctionstmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1650);
				altergroupstmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1651);
				alterobjectdependsstmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1652);
				alterobjectschemastmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1653);
				alterownerstmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1654);
				alteroperatorstmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1655);
				altertypestmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1656);
				alterpolicystmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1657);
				alterseqstmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1658);
				altersystemstmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1659);
				altertablestmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1660);
				altertblspcstmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1661);
				altercompositetypestmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1662);
				alterpublicationstmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1663);
				alterrolesetstmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1664);
				alterrolestmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1665);
				altersubscriptionstmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1666);
				alterstatsstmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1667);
				altertsconfigurationstmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1668);
				altertsdictionarystmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1669);
				alterusermappingstmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1670);
				analyzestmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1671);
				callstmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1672);
				checkpointstmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1673);
				closeportalstmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1674);
				clusterstmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1675);
				commentstmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1676);
				constraintssetstmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1677);
				copystmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1678);
				createamstmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1679);
				createasstmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1680);
				createassertionstmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1681);
				createcaststmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1682);
				createconversionstmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1683);
				createdomainstmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1684);
				createextensionstmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1685);
				createfdwstmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1686);
				createforeignserverstmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1687);
				createforeigntablestmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1688);
				createfunctionstmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1689);
				creategroupstmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1690);
				creatematviewstmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1691);
				createopclassstmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1692);
				createopfamilystmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1693);
				createpublicationstmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1694);
				alteropfamilystmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1695);
				createpolicystmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1696);
				createplangstmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1697);
				createschemastmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1698);
				createseqstmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1699);
				createstmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1700);
				createsubscriptionstmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1701);
				createstatsstmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1702);
				createtablespacestmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1703);
				createtransformstmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1704);
				createtrigstmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1705);
				createeventtrigstmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1706);
				createrolestmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1707);
				createuserstmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1708);
				createusermappingstmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1709);
				createdbstmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1710);
				deallocatestmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1711);
				declarecursorstmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1712);
				definestmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1713);
				deletestmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1714);
				discardstmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1715);
				dostmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1716);
				dropcaststmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1717);
				dropopclassstmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1718);
				dropopfamilystmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1719);
				dropownedstmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1720);
				dropstmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1721);
				dropsubscriptionstmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1722);
				droptablespacestmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1723);
				droptransformstmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1724);
				droprolestmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1725);
				dropusermappingstmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1726);
				dropdbstmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1727);
				executestmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1728);
				explainstmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1729);
				fetchstmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1730);
				grantstmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1731);
				grantrolestmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1732);
				importforeignschemastmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1733);
				indexstmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1734);
				insertstmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1735);
				mergestmt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1736);
				listenstmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1737);
				refreshmatviewstmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1738);
				loadstmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1739);
				lockstmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1740);
				notifystmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1741);
				preparestmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1742);
				reassignownedstmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1743);
				reindexstmt();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1744);
				removeaggrstmt();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1745);
				removefuncstmt();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1746);
				removeoperstmt();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1747);
				renamestmt();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1748);
				revokestmt();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1749);
				revokerolestmt();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1750);
				rulestmt();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1751);
				seclabelstmt();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1752);
				selectstmt();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1753);
				transactionstmt();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1754);
				truncatestmt();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1755);
				unlistenstmt();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1756);
				updatestmt();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1757);
				vacuumstmt();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1758);
				variableresetstmt();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1759);
				variablesetstmt();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1760);
				variableshowstmt();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1761);
				viewstmt();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1762);
				plsqlconsolecommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlconsolecommandContext extends ParserRuleContext {
		public TerminalNode MetaCommand() { return getToken(PostgreSQLParser.MetaCommand, 0); }
		public TerminalNode EndMetaCommand() { return getToken(PostgreSQLParser.EndMetaCommand, 0); }
		public PlsqlconsolecommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlconsolecommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlconsolecommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlconsolecommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlconsolecommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlconsolecommandContext plsqlconsolecommand() throws RecognitionException {
		PlsqlconsolecommandContext _localctx = new PlsqlconsolecommandContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_plsqlconsolecommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1765);
			match(MetaCommand);
			setState(1767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EndMetaCommand) {
				{
				setState(1766);
				match(EndMetaCommand);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallstmtContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCallstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCallstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCallstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallstmtContext callstmt() throws RecognitionException {
		CallstmtContext _localctx = new CallstmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_callstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1769);
			match(CALL);
			setState(1770);
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreaterolestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreaterolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreaterolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreaterolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreaterolestmtContext createrolestmt() throws RecognitionException {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_createrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1772);
			match(CREATE);
			setState(1773);
			match(ROLE);
			setState(1774);
			roleid();
			setState(1775);
			opt_with();
			setState(1776);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_withContext opt_with() throws RecognitionException {
		Opt_withContext _localctx = new Opt_withContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_opt_with);
		try {
			setState(1780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1778);
				match(WITH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptrolelistContext extends ParserRuleContext {
		public List<CreateoptroleelemContext> createoptroleelem() {
			return getRuleContexts(CreateoptroleelemContext.class);
		}
		public CreateoptroleelemContext createoptroleelem(int i) {
			return getRuleContext(CreateoptroleelemContext.class,i);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptrolelistContext optrolelist() throws RecognitionException {
		OptrolelistContext _localctx = new OptrolelistContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_optrolelist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1785);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1782);
					createoptroleelem();
					}
					} 
				}
				setState(1787);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteroptrolelistContext extends ParserRuleContext {
		public List<AlteroptroleelemContext> alteroptroleelem() {
			return getRuleContexts(AlteroptroleelemContext.class);
		}
		public AlteroptroleelemContext alteroptroleelem(int i) {
			return getRuleContext(AlteroptroleelemContext.class,i);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptrolelist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptrolelist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptrolelist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptrolelist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptrolelistContext alteroptrolelist() throws RecognitionException {
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alteroptrolelist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1791);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1788);
					alteroptroleelem();
					}
					} 
				}
				setState(1793);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteroptroleelemContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroptroleelemContext alteroptroleelem() throws RecognitionException {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alteroptroleelem);
		int _la;
		try {
			setState(1812);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1794);
				match(PASSWORD);
				setState(1797);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(1795);
					sconst();
					}
					break;
				case NULL_P:
					{
					setState(1796);
					match(NULL_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTED:
			case UNENCRYPTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1799);
				_la = _input.LA(1);
				if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1800);
				match(PASSWORD);
				setState(1801);
				sconst();
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1802);
				match(INHERIT);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(1803);
				match(CONNECTION);
				setState(1804);
				match(LIMIT);
				setState(1805);
				signediconst();
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 5);
				{
				setState(1806);
				match(VALID);
				setState(1807);
				match(UNTIL);
				setState(1808);
				sconst();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1809);
				match(USER);
				setState(1810);
				role_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 7);
				{
				setState(1811);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateoptroleelemContext extends ParserRuleContext {
		public AlteroptroleelemContext alteroptroleelem() {
			return getRuleContext(AlteroptroleelemContext.class,0);
		}
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createoptroleelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateoptroleelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateoptroleelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateoptroleelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateoptroleelemContext createoptroleelem() throws RecognitionException {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createoptroleelem);
		int _la;
		try {
			setState(1824);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case USER:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONNECTION:
			case CONTINUE_P:
			case CURSOR:
			case ENCRYPTED:
			case FIRST_P:
			case FORWARD:
			case INHERIT:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PASSWORD:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case UNENCRYPTED:
			case VALID:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1814);
				alteroptroleelem();
				}
				break;
			case SYSID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1815);
				match(SYSID);
				setState(1816);
				iconst();
				}
				break;
			case ADMIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1817);
				match(ADMIN);
				setState(1818);
				role_list();
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1819);
				match(ROLE);
				setState(1820);
				role_list();
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(1821);
				match(IN_P);
				setState(1822);
				_la = _input.LA(1);
				if ( !(_la==GROUP_P || _la==ROLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1823);
				role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateuserstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createuserstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateuserstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateuserstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateuserstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateuserstmtContext createuserstmt() throws RecognitionException {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createuserstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1826);
			match(CREATE);
			setState(1827);
			match(USER);
			setState(1828);
			roleid();
			setState(1829);
			opt_with();
			setState(1830);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterrolestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public AlteroptrolelistContext alteroptrolelist() {
			return getRuleContext(AlteroptrolelistContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolestmtContext alterrolestmt() throws RecognitionException {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterrolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832);
			match(ALTER);
			setState(1833);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1834);
			rolespec();
			setState(1835);
			opt_with();
			setState(1836);
			alteroptrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_in_databaseContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_in_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_in_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_in_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_in_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_in_databaseContext opt_in_database() throws RecognitionException {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_opt_in_database);
		try {
			setState(1842);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESET:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1839);
				match(IN_P);
				setState(1840);
				match(DATABASE);
				setState(1841);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterrolesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_in_databaseContext opt_in_database() {
			return getRuleContext(Opt_in_databaseContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterrolesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterrolesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterrolesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterrolesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterrolesetstmtContext alterrolesetstmt() throws RecognitionException {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterrolesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1844);
			match(ALTER);
			setState(1845);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(1846);
				match(ALL);
				}
			}

			setState(1849);
			rolespec();
			setState(1850);
			opt_in_database();
			setState(1851);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroprolestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droprolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroprolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroprolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroprolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroprolestmtContext droprolestmt() throws RecognitionException {
		DroprolestmtContext _localctx = new DroprolestmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_droprolestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1853);
			match(DROP);
			setState(1854);
			_la = _input.LA(1);
			if ( !(_la==GROUP_P || _la==USER || _la==ROLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1855);
				match(IF_P);
				setState(1856);
				match(EXISTS);
				}
				break;
			}
			setState(1859);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreategroupstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RoleidContext roleid() {
			return getRuleContext(RoleidContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public OptrolelistContext optrolelist() {
			return getRuleContext(OptrolelistContext.class,0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creategroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreategroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreategroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreategroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreategroupstmtContext creategroupstmt() throws RecognitionException {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_creategroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1861);
			match(CREATE);
			setState(1862);
			match(GROUP_P);
			setState(1863);
			roleid();
			setState(1864);
			opt_with();
			setState(1865);
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltergroupstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altergroupstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltergroupstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltergroupstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltergroupstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltergroupstmtContext altergroupstmt() throws RecognitionException {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_altergroupstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			match(ALTER);
			setState(1868);
			match(GROUP_P);
			setState(1869);
			rolespec();
			setState(1870);
			add_drop();
			setState(1871);
			match(USER);
			setState(1872);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_dropContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAdd_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAdd_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAdd_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_dropContext add_drop() throws RecognitionException {
		Add_dropContext _localctx = new Add_dropContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_add_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874);
			_la = _input.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateschemastmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public OptschemaeltlistContext optschemaeltlist() {
			return getRuleContext(OptschemaeltlistContext.class,0);
		}
		public OptschemanameContext optschemaname() {
			return getRuleContext(OptschemanameContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateschemastmtContext createschemastmt() throws RecognitionException {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createschemastmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1876);
			match(CREATE);
			setState(1877);
			match(SCHEMA);
			setState(1881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1878);
				match(IF_P);
				setState(1879);
				match(NOT);
				setState(1880);
				match(EXISTS);
				}
				break;
			}
			setState(1888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(1883);
				optschemaname();
				setState(1884);
				match(AUTHORIZATION);
				setState(1885);
				rolespec();
				}
				break;
			case 2:
				{
				setState(1887);
				colid();
				}
				break;
			}
			setState(1890);
			optschemaeltlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptschemanameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemanameContext optschemaname() throws RecognitionException {
		OptschemanameContext _localctx = new OptschemanameContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_optschemaname);
		try {
			setState(1894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1892);
				colid();
				}
				break;
			case AUTHORIZATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptschemaeltlistContext extends ParserRuleContext {
		public List<Schema_stmtContext> schema_stmt() {
			return getRuleContexts(Schema_stmtContext.class);
		}
		public Schema_stmtContext schema_stmt(int i) {
			return getRuleContext(Schema_stmtContext.class,i);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optschemaeltlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptschemaeltlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptschemaeltlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptschemaeltlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptschemaeltlistContext optschemaeltlist() throws RecognitionException {
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_optschemaeltlist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1899);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1896);
					schema_stmt();
					}
					} 
				}
				setState(1901);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_stmtContext extends ParserRuleContext {
		public CreatestmtContext createstmt() {
			return getRuleContext(CreatestmtContext.class,0);
		}
		public IndexstmtContext indexstmt() {
			return getRuleContext(IndexstmtContext.class,0);
		}
		public CreateseqstmtContext createseqstmt() {
			return getRuleContext(CreateseqstmtContext.class,0);
		}
		public CreatetrigstmtContext createtrigstmt() {
			return getRuleContext(CreatetrigstmtContext.class,0);
		}
		public GrantstmtContext grantstmt() {
			return getRuleContext(GrantstmtContext.class,0);
		}
		public ViewstmtContext viewstmt() {
			return getRuleContext(ViewstmtContext.class,0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSchema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSchema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSchema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_stmtContext schema_stmt() throws RecognitionException {
		Schema_stmtContext _localctx = new Schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_schema_stmt);
		try {
			setState(1908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1902);
				createstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1903);
				indexstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1904);
				createseqstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1905);
				createtrigstmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1906);
				grantstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1907);
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariablesetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variablesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariablesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariablesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariablesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariablesetstmtContext variablesetstmt() throws RecognitionException {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_variablesetstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1910);
			match(SET);
			setState(1912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(1911);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1914);
			set_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_restContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_restContext set_rest() throws RecognitionException {
		Set_restContext _localctx = new Set_restContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_set_rest);
		try {
			setState(1924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1916);
				match(TRANSACTION);
				setState(1917);
				transaction_mode_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1918);
				match(SESSION);
				setState(1919);
				match(CHARACTERISTICS);
				setState(1920);
				match(AS);
				setState(1921);
				match(TRANSACTION);
				setState(1922);
				transaction_mode_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1923);
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_setContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_setContext generic_set() throws RecognitionException {
		Generic_setContext _localctx = new Generic_setContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_generic_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1926);
			var_name();
			setState(1927);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1928);
			var_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rest_moreContext extends ParserRuleContext {
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Zone_valueContext zone_value() {
			return getRuleContext(Zone_valueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public Opt_encodingContext opt_encoding() {
			return getRuleContext(Opt_encodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rest_more; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_rest_more(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_rest_more(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_rest_more(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_rest_moreContext set_rest_more() throws RecognitionException {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_set_rest_more);
		try {
			setState(1955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1930);
				generic_set();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1931);
				var_name();
				setState(1932);
				match(FROM);
				setState(1933);
				match(CURRENT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1935);
				match(TIME);
				setState(1936);
				match(ZONE);
				setState(1937);
				zone_value();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1938);
				match(CATALOG);
				setState(1939);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1940);
				match(SCHEMA);
				setState(1941);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1942);
				match(NAMES);
				setState(1943);
				opt_encoding();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1944);
				match(ROLE);
				setState(1945);
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1946);
				match(SESSION);
				setState(1947);
				match(AUTHORIZATION);
				setState(1948);
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1949);
				match(XML_P);
				setState(1950);
				match(OPTION);
				setState(1951);
				document_or_content();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1952);
				match(TRANSACTION);
				setState(1953);
				match(SNAPSHOT);
				setState(1954);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		Var_nameContext _localctx = new Var_nameContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_var_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1957);
			colid();
			setState(1962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(1958);
				match(DOT);
				setState(1959);
				colid();
				}
				}
				setState(1964);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_listContext extends ParserRuleContext {
		public List<Var_valueContext> var_value() {
			return getRuleContexts(Var_valueContext.class);
		}
		public Var_valueContext var_value(int i) {
			return getRuleContext(Var_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		Var_listContext _localctx = new Var_listContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_var_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			var_value();
			setState(1970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1966);
				match(COMMA);
				setState(1967);
				var_value();
				}
				}
				setState(1972);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_valueContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVar_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVar_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVar_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_valueContext var_value() throws RecognitionException {
		Var_valueContext _localctx = new Var_valueContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_var_value);
		try {
			setState(1975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(1973);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(1974);
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Iso_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iso_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIso_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIso_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIso_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iso_levelContext iso_level() throws RecognitionException {
		Iso_levelContext _localctx = new Iso_levelContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_iso_level);
		int _la;
		try {
			setState(1982);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(1977);
				match(READ);
				setState(1978);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REPEATABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1979);
				match(REPEATABLE);
				setState(1980);
				match(READ);
				}
				break;
			case SERIALIZABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1981);
				match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_boolean_or_stringContext extends ParserRuleContext {
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_boolean_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_boolean_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_boolean_or_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_boolean_or_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_boolean_or_stringContext opt_boolean_or_string() throws RecognitionException {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_opt_boolean_or_string);
		try {
			setState(1988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(1984);
				match(TRUE_P);
				}
				break;
			case FALSE_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(1985);
				match(FALSE_P);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(1986);
				match(ON);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(1987);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterZone_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitZone_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitZone_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Zone_valueContext zone_value() throws RecognitionException {
		Zone_valueContext _localctx = new Zone_valueContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_zone_value);
		try {
			setState(2005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1990);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1991);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1992);
				constinterval();
				setState(1993);
				sconst();
				setState(1994);
				opt_interval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1996);
				constinterval();
				setState(1997);
				match(OPEN_PAREN);
				setState(1998);
				iconst();
				setState(1999);
				match(CLOSE_PAREN);
				setState(2000);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2002);
				numericonly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2003);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2004);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encodingContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_encoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_encoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_encoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_encodingContext opt_encoding() throws RecognitionException {
		Opt_encodingContext _localctx = new Opt_encodingContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_opt_encoding);
		try {
			setState(2010);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2007);
				sconst();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2008);
				match(DEFAULT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CALLED:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case COST:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case EXTERNAL:
			case IMMUTABLE:
			case INSERT:
			case LANGUAGE:
			case LEAKPROOF:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case STABLE:
			case START:
			case STRICT_P:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VOLATILE:
			case VALUES:
			case CALL:
			case TRANSFORM:
			case IMPORT_P:
			case END_P:
			case SUPPORT:
			case PARALLEL:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonreservedword_or_sconstContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword_or_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword_or_sconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword_or_sconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword_or_sconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nonreservedword_or_sconstContext nonreservedword_or_sconst() throws RecognitionException {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_nonreservedword_or_sconst);
		try {
			setState(2014);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2012);
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(2013);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableresetstmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Reset_restContext reset_rest() {
			return getRuleContext(Reset_restContext.class,0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableresetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableresetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableresetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableresetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableresetstmtContext variableresetstmt() throws RecognitionException {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_variableresetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2016);
			match(RESET);
			setState(2017);
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reset_restContext extends ParserRuleContext {
		public Generic_resetContext generic_reset() {
			return getRuleContext(Generic_resetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReset_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReset_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReset_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_restContext reset_rest() throws RecognitionException {
		Reset_restContext _localctx = new Reset_restContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_reset_rest);
		try {
			setState(2027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2019);
				generic_reset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2020);
				match(TIME);
				setState(2021);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2022);
				match(TRANSACTION);
				setState(2023);
				match(ISOLATION);
				setState(2024);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2025);
				match(SESSION);
				setState(2026);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_resetContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_reset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_reset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_reset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_reset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_resetContext generic_reset() throws RecognitionException {
		Generic_resetContext _localctx = new Generic_resetContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_generic_reset);
		try {
			setState(2031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2029);
				var_name();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2030);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_restContext set_rest() {
			return getRuleContext(Set_restContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetresetclauseContext setresetclause() throws RecognitionException {
		SetresetclauseContext _localctx = new SetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_setresetclause);
		try {
			setState(2036);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2033);
				match(SET);
				setState(2034);
				set_rest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2035);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionsetresetclauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_rest_moreContext set_rest_more() {
			return getRuleContext(Set_rest_moreContext.class,0);
		}
		public VariableresetstmtContext variableresetstmt() {
			return getRuleContext(VariableresetstmtContext.class,0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionsetresetclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunctionsetresetclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunctionsetresetclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunctionsetresetclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionsetresetclauseContext functionsetresetclause() throws RecognitionException {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_functionsetresetclause);
		try {
			setState(2041);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2038);
				match(SET);
				setState(2039);
				set_rest_more();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2040);
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableshowstmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableshowstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVariableshowstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVariableshowstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVariableshowstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableshowstmtContext variableshowstmt() throws RecognitionException {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_variableshowstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2043);
			match(SHOW);
			setState(2053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(2044);
				var_name();
				}
				break;
			case 2:
				{
				setState(2045);
				match(TIME);
				setState(2046);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(2047);
				match(TRANSACTION);
				setState(2048);
				match(ISOLATION);
				setState(2049);
				match(LEVEL);
				}
				break;
			case 4:
				{
				setState(2050);
				match(SESSION);
				setState(2051);
				match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				setState(2052);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintssetstmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public Constraints_set_listContext constraints_set_list() {
			return getRuleContext(Constraints_set_listContext.class,0);
		}
		public Constraints_set_modeContext constraints_set_mode() {
			return getRuleContext(Constraints_set_modeContext.class,0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintssetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintssetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintssetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintssetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintssetstmtContext constraintssetstmt() throws RecognitionException {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_constraintssetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2055);
			match(SET);
			setState(2056);
			match(CONSTRAINTS);
			setState(2057);
			constraints_set_list();
			setState(2058);
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_listContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_listContext constraints_set_list() throws RecognitionException {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_constraints_set_list);
		try {
			setState(2062);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2060);
				match(ALL);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2061);
				qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraints_set_modeContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraints_set_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraints_set_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraints_set_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraints_set_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraints_set_modeContext constraints_set_mode() throws RecognitionException {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_constraints_set_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2064);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckpointstmtContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpointstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCheckpointstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCheckpointstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCheckpointstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointstmtContext checkpointstmt() throws RecognitionException {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_checkpointstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2066);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardstmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDiscardstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDiscardstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDiscardstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardstmtContext discardstmt() throws RecognitionException {
		DiscardstmtContext _localctx = new DiscardstmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_discardstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2068);
			match(DISCARD);
			setState(2069);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertablestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Alter_table_cmdsContext alter_table_cmds() {
			return getRuleContext(Alter_table_cmdsContext.class,0);
		}
		public Partition_cmdContext partition_cmd() {
			return getRuleContext(Partition_cmdContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLParser.TABLESPACE, i);
		}
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext index_partition_cmd() {
			return getRuleContext(Index_partition_cmdContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertablestmtContext altertablestmt() throws RecognitionException {
		AltertablestmtContext _localctx = new AltertablestmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_altertablestmt);
		int _la;
		try {
			setState(2180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2071);
				match(ALTER);
				setState(2072);
				match(TABLE);
				setState(2075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(2073);
					match(IF_P);
					setState(2074);
					match(EXISTS);
					}
					break;
				}
				setState(2077);
				relation_expr();
				setState(2080);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(2078);
					alter_table_cmds();
					}
					break;
				case ATTACH:
				case DETACH:
					{
					setState(2079);
					partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2082);
				match(ALTER);
				setState(2083);
				match(TABLE);
				setState(2084);
				match(ALL);
				setState(2085);
				match(IN_P);
				setState(2086);
				match(TABLESPACE);
				setState(2087);
				name();
				setState(2091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2088);
					match(OWNED);
					setState(2089);
					match(BY);
					setState(2090);
					role_list();
					}
				}

				setState(2093);
				match(SET);
				setState(2094);
				match(TABLESPACE);
				setState(2095);
				name();
				setState(2096);
				opt_nowait();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2098);
				match(ALTER);
				setState(2099);
				match(INDEX);
				setState(2102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(2100);
					match(IF_P);
					setState(2101);
					match(EXISTS);
					}
					break;
				}
				setState(2104);
				qualified_name();
				setState(2107);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(2105);
					alter_table_cmds();
					}
					break;
				case ATTACH:
					{
					setState(2106);
					index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2109);
				match(ALTER);
				setState(2110);
				match(INDEX);
				setState(2111);
				match(ALL);
				setState(2112);
				match(IN_P);
				setState(2113);
				match(TABLESPACE);
				setState(2114);
				name();
				setState(2118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2115);
					match(OWNED);
					setState(2116);
					match(BY);
					setState(2117);
					role_list();
					}
				}

				setState(2120);
				match(SET);
				setState(2121);
				match(TABLESPACE);
				setState(2122);
				name();
				setState(2123);
				opt_nowait();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2125);
				match(ALTER);
				setState(2126);
				match(SEQUENCE);
				setState(2129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(2127);
					match(IF_P);
					setState(2128);
					match(EXISTS);
					}
					break;
				}
				setState(2131);
				qualified_name();
				setState(2132);
				alter_table_cmds();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2134);
				match(ALTER);
				setState(2135);
				match(VIEW);
				setState(2138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(2136);
					match(IF_P);
					setState(2137);
					match(EXISTS);
					}
					break;
				}
				setState(2140);
				qualified_name();
				setState(2141);
				alter_table_cmds();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2143);
				match(ALTER);
				setState(2144);
				match(MATERIALIZED);
				setState(2145);
				match(VIEW);
				setState(2148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(2146);
					match(IF_P);
					setState(2147);
					match(EXISTS);
					}
					break;
				}
				setState(2150);
				qualified_name();
				setState(2151);
				alter_table_cmds();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2153);
				match(ALTER);
				setState(2154);
				match(MATERIALIZED);
				setState(2155);
				match(VIEW);
				setState(2156);
				match(ALL);
				setState(2157);
				match(IN_P);
				setState(2158);
				match(TABLESPACE);
				setState(2159);
				name();
				setState(2163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(2160);
					match(OWNED);
					setState(2161);
					match(BY);
					setState(2162);
					role_list();
					}
				}

				setState(2165);
				match(SET);
				setState(2166);
				match(TABLESPACE);
				setState(2167);
				name();
				setState(2168);
				opt_nowait();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2170);
				match(ALTER);
				setState(2171);
				match(FOREIGN);
				setState(2172);
				match(TABLE);
				setState(2175);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(2173);
					match(IF_P);
					setState(2174);
					match(EXISTS);
					}
					break;
				}
				setState(2177);
				relation_expr();
				setState(2178);
				alter_table_cmds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdsContext extends ParserRuleContext {
		public List<Alter_table_cmdContext> alter_table_cmd() {
			return getRuleContexts(Alter_table_cmdContext.class);
		}
		public Alter_table_cmdContext alter_table_cmd(int i) {
			return getRuleContext(Alter_table_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdsContext alter_table_cmds() throws RecognitionException {
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_table_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2182);
			alter_table_cmd();
			setState(2187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2183);
				match(COMMA);
				setState(2184);
				alter_table_cmd();
				}
				}
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_cmdContext partition_cmd() throws RecognitionException {
		Partition_cmdContext _localctx = new Partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_partition_cmd);
		try {
			setState(2198);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2190);
				match(ATTACH);
				setState(2191);
				match(PARTITION);
				setState(2192);
				qualified_name();
				setState(2193);
				partitionboundspec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2195);
				match(DETACH);
				setState(2196);
				match(PARTITION);
				setState(2197);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_partition_cmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partition_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_partition_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_partition_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_partition_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_partition_cmdContext index_partition_cmd() throws RecognitionException {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_index_partition_cmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2200);
			match(ATTACH);
			setState(2201);
			match(PARTITION);
			setState(2202);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return getRuleContext(Alter_identity_column_option_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_usingContext alter_using() {
			return getRuleContext(Alter_usingContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Replica_identityContext replica_identity() {
			return getRuleContext(Replica_identityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_cmdContext alter_table_cmd() throws RecognitionException {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_alter_table_cmd);
		try {
			setState(2456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2204);
				match(ADD_P);
				setState(2205);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2206);
				match(ADD_P);
				setState(2207);
				match(IF_P);
				setState(2208);
				match(NOT);
				setState(2209);
				match(EXISTS);
				setState(2210);
				columnDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2211);
				match(ADD_P);
				setState(2212);
				match(COLUMN);
				setState(2213);
				columnDef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2214);
				match(ADD_P);
				setState(2215);
				match(COLUMN);
				setState(2216);
				match(IF_P);
				setState(2217);
				match(NOT);
				setState(2218);
				match(EXISTS);
				setState(2219);
				columnDef();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2220);
				match(ALTER);
				setState(2221);
				opt_column();
				setState(2222);
				colid();
				setState(2223);
				alter_column_default();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2225);
				match(ALTER);
				setState(2226);
				opt_column();
				setState(2227);
				colid();
				setState(2228);
				match(DROP);
				setState(2229);
				match(NOT);
				setState(2230);
				match(NULL_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2232);
				match(ALTER);
				setState(2233);
				opt_column();
				setState(2234);
				colid();
				setState(2235);
				match(SET);
				setState(2236);
				match(NOT);
				setState(2237);
				match(NULL_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2239);
				match(ALTER);
				setState(2240);
				opt_column();
				setState(2241);
				colid();
				setState(2242);
				match(DROP);
				setState(2243);
				match(EXPRESSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2245);
				match(ALTER);
				setState(2246);
				opt_column();
				setState(2247);
				colid();
				setState(2248);
				match(DROP);
				setState(2249);
				match(EXPRESSION);
				setState(2250);
				match(IF_P);
				setState(2251);
				match(EXISTS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2253);
				match(ALTER);
				setState(2254);
				opt_column();
				setState(2255);
				colid();
				setState(2256);
				match(SET);
				setState(2257);
				match(STATISTICS);
				setState(2258);
				signediconst();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2260);
				match(ALTER);
				setState(2261);
				opt_column();
				setState(2262);
				iconst();
				setState(2263);
				match(SET);
				setState(2264);
				match(STATISTICS);
				setState(2265);
				signediconst();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2267);
				match(ALTER);
				setState(2268);
				opt_column();
				setState(2269);
				colid();
				setState(2270);
				match(SET);
				setState(2271);
				reloptions();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2273);
				match(ALTER);
				setState(2274);
				opt_column();
				setState(2275);
				colid();
				setState(2276);
				match(RESET);
				setState(2277);
				reloptions();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2279);
				match(ALTER);
				setState(2280);
				opt_column();
				setState(2281);
				colid();
				setState(2282);
				match(SET);
				setState(2283);
				match(STORAGE);
				setState(2284);
				colid();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2286);
				match(ALTER);
				setState(2287);
				opt_column();
				setState(2288);
				colid();
				setState(2289);
				match(ADD_P);
				setState(2290);
				match(GENERATED);
				setState(2291);
				generated_when();
				setState(2292);
				match(AS);
				setState(2293);
				match(IDENTITY_P);
				setState(2294);
				optparenthesizedseqoptlist();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2296);
				match(ALTER);
				setState(2297);
				opt_column();
				setState(2298);
				colid();
				setState(2299);
				alter_identity_column_option_list();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2301);
				match(ALTER);
				setState(2302);
				opt_column();
				setState(2303);
				colid();
				setState(2304);
				match(DROP);
				setState(2305);
				match(IDENTITY_P);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2307);
				match(ALTER);
				setState(2308);
				opt_column();
				setState(2309);
				colid();
				setState(2310);
				match(DROP);
				setState(2311);
				match(IDENTITY_P);
				setState(2312);
				match(IF_P);
				setState(2313);
				match(EXISTS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2315);
				match(DROP);
				setState(2316);
				opt_column();
				setState(2317);
				match(IF_P);
				setState(2318);
				match(EXISTS);
				setState(2319);
				colid();
				setState(2320);
				opt_drop_behavior();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2322);
				match(DROP);
				setState(2323);
				opt_column();
				setState(2324);
				colid();
				setState(2325);
				opt_drop_behavior();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2327);
				match(ALTER);
				setState(2328);
				opt_column();
				setState(2329);
				colid();
				setState(2330);
				opt_set_data();
				setState(2331);
				match(TYPE_P);
				setState(2332);
				typename();
				setState(2333);
				opt_collate_clause();
				setState(2334);
				alter_using();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2336);
				match(ALTER);
				setState(2337);
				opt_column();
				setState(2338);
				colid();
				setState(2339);
				alter_generic_options();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2341);
				match(ADD_P);
				setState(2342);
				tableconstraint();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2343);
				match(ALTER);
				setState(2344);
				match(CONSTRAINT);
				setState(2345);
				name();
				setState(2346);
				constraintattributespec();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2348);
				match(VALIDATE);
				setState(2349);
				match(CONSTRAINT);
				setState(2350);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2351);
				match(DROP);
				setState(2352);
				match(CONSTRAINT);
				setState(2353);
				match(IF_P);
				setState(2354);
				match(EXISTS);
				setState(2355);
				name();
				setState(2356);
				opt_drop_behavior();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2358);
				match(DROP);
				setState(2359);
				match(CONSTRAINT);
				setState(2360);
				name();
				setState(2361);
				opt_drop_behavior();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2363);
				match(SET);
				setState(2364);
				match(WITHOUT);
				setState(2365);
				match(OIDS);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2366);
				match(CLUSTER);
				setState(2367);
				match(ON);
				setState(2368);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2369);
				match(SET);
				setState(2370);
				match(WITHOUT);
				setState(2371);
				match(CLUSTER);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2372);
				match(SET);
				setState(2373);
				match(LOGGED);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2374);
				match(SET);
				setState(2375);
				match(UNLOGGED);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2376);
				match(ENABLE_P);
				setState(2377);
				match(TRIGGER);
				setState(2378);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2379);
				match(ENABLE_P);
				setState(2380);
				match(ALWAYS);
				setState(2381);
				match(TRIGGER);
				setState(2382);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2383);
				match(ENABLE_P);
				setState(2384);
				match(REPLICA);
				setState(2385);
				match(TRIGGER);
				setState(2386);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2387);
				match(ENABLE_P);
				setState(2388);
				match(TRIGGER);
				setState(2389);
				match(ALL);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2390);
				match(ENABLE_P);
				setState(2391);
				match(TRIGGER);
				setState(2392);
				match(USER);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2393);
				match(DISABLE_P);
				setState(2394);
				match(TRIGGER);
				setState(2395);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2396);
				match(DISABLE_P);
				setState(2397);
				match(TRIGGER);
				setState(2398);
				match(ALL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2399);
				match(DISABLE_P);
				setState(2400);
				match(TRIGGER);
				setState(2401);
				match(USER);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2402);
				match(ENABLE_P);
				setState(2403);
				match(RULE);
				setState(2404);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2405);
				match(ENABLE_P);
				setState(2406);
				match(ALWAYS);
				setState(2407);
				match(RULE);
				setState(2408);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2409);
				match(ENABLE_P);
				setState(2410);
				match(REPLICA);
				setState(2411);
				match(RULE);
				setState(2412);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2413);
				match(DISABLE_P);
				setState(2414);
				match(RULE);
				setState(2415);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2416);
				match(INHERIT);
				setState(2417);
				qualified_name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2418);
				match(NO);
				setState(2419);
				match(INHERIT);
				setState(2420);
				qualified_name();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2421);
				match(OF);
				setState(2422);
				any_name();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2423);
				match(NOT);
				setState(2424);
				match(OF);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2425);
				match(OWNER);
				setState(2426);
				match(TO);
				setState(2427);
				rolespec();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2428);
				match(SET);
				setState(2429);
				match(TABLESPACE);
				setState(2430);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2431);
				match(SET);
				setState(2432);
				reloptions();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2433);
				match(RESET);
				setState(2434);
				reloptions();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2435);
				match(REPLICA);
				setState(2436);
				match(IDENTITY_P);
				setState(2437);
				replica_identity();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2438);
				match(ENABLE_P);
				setState(2439);
				match(ROW);
				setState(2440);
				match(LEVEL);
				setState(2441);
				match(SECURITY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2442);
				match(DISABLE_P);
				setState(2443);
				match(ROW);
				setState(2444);
				match(LEVEL);
				setState(2445);
				match(SECURITY);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2446);
				match(FORCE);
				setState(2447);
				match(ROW);
				setState(2448);
				match(LEVEL);
				setState(2449);
				match(SECURITY);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2450);
				match(NO);
				setState(2451);
				match(FORCE);
				setState(2452);
				match(ROW);
				setState(2453);
				match(LEVEL);
				setState(2454);
				match(SECURITY);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(2455);
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_defaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_column_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_column_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_column_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_defaultContext alter_column_default() throws RecognitionException {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_column_default);
		try {
			setState(2463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2458);
				match(SET);
				setState(2459);
				match(DEFAULT);
				setState(2460);
				a_expr();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2461);
				match(DROP);
				setState(2462);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_drop_behaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_drop_behavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_drop_behavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_drop_behavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_drop_behavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_drop_behaviorContext opt_drop_behavior() throws RecognitionException {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_opt_drop_behavior);
		try {
			setState(2468);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2465);
				match(CASCADE);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2466);
				match(RESTRICT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collate_clauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collate_clauseContext opt_collate_clause() throws RecognitionException {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_opt_collate_clause);
		try {
			setState(2473);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLLATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2470);
				match(COLLATE);
				setState(2471);
				any_name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_usingContext alter_using() throws RecognitionException {
		Alter_usingContext _localctx = new Alter_usingContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alter_using);
		try {
			setState(2478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2475);
				match(USING);
				setState(2476);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replica_identityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replica_identity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReplica_identity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReplica_identity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReplica_identity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replica_identityContext replica_identity() throws RecognitionException {
		Replica_identityContext _localctx = new Replica_identityContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_replica_identity);
		try {
			setState(2486);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2480);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2481);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2482);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(2483);
				match(USING);
				setState(2484);
				match(INDEX);
				setState(2485);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reloption_listContext reloption_list() {
			return getRuleContext(Reloption_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2488);
			match(OPEN_PAREN);
			setState(2489);
			reloption_list();
			setState(2490);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reloptionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reloptionsContext opt_reloptions() throws RecognitionException {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_opt_reloptions);
		try {
			setState(2495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2492);
				match(WITH);
				setState(2493);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_listContext extends ParserRuleContext {
		public List<Reloption_elemContext> reloption_elem() {
			return getRuleContexts(Reloption_elemContext.class);
		}
		public Reloption_elemContext reloption_elem(int i) {
			return getRuleContext(Reloption_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_listContext reloption_list() throws RecognitionException {
		Reloption_listContext _localctx = new Reloption_listContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_reloption_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2497);
			reloption_elem();
			setState(2502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2498);
				match(COMMA);
				setState(2499);
				reloption_elem();
				}
				}
				setState(2504);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reloption_elemContext extends ParserRuleContext {
		public List<CollabelContext> collabel() {
			return getRuleContexts(CollabelContext.class);
		}
		public CollabelContext collabel(int i) {
			return getRuleContext(CollabelContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloption_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReloption_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReloption_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReloption_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reloption_elemContext reloption_elem() throws RecognitionException {
		Reloption_elemContext _localctx = new Reloption_elemContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_reloption_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2505);
			collabel();
			setState(2514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				{
				setState(2506);
				match(EQUAL);
				setState(2507);
				def_arg();
				}
				break;
			case DOT:
				{
				setState(2508);
				match(DOT);
				setState(2509);
				collabel();
				setState(2512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(2510);
					match(EQUAL);
					setState(2511);
					def_arg();
					}
				}

				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identity_column_option_listContext extends ParserRuleContext {
		public List<Alter_identity_column_optionContext> alter_identity_column_option() {
			return getRuleContexts(Alter_identity_column_optionContext.class);
		}
		public Alter_identity_column_optionContext alter_identity_column_option(int i) {
			return getRuleContext(Alter_identity_column_optionContext.class,i);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_option_listContext alter_identity_column_option_list() throws RecognitionException {
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alter_identity_column_option_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2517); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2516);
					alter_identity_column_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2519); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identity_column_optionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SeqoptelemContext seqoptelem() {
			return getRuleContext(SeqoptelemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identity_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_identity_column_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_identity_column_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_identity_column_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_identity_column_optionContext alter_identity_column_option() throws RecognitionException {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alter_identity_column_option);
		try {
			setState(2533);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTART:
				enterOuterAlt(_localctx, 1);
				{
				setState(2521);
				match(RESTART);
				setState(2525);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(2522);
					opt_with();
					setState(2523);
					numericonly();
					}
					break;
				}
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2527);
				match(SET);
				setState(2531);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case OWNED:
				case RESTART:
				case SEQUENCE:
				case START:
					{
					setState(2528);
					seqoptelem();
					}
					break;
				case GENERATED:
					{
					setState(2529);
					match(GENERATED);
					setState(2530);
					generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionboundspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Hash_partboundContext hash_partbound() {
			return getRuleContext(Hash_partboundContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionboundspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionboundspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionboundspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionboundspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionboundspecContext partitionboundspec() throws RecognitionException {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_partitionboundspec);
		try {
			setState(2561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2535);
				match(FOR);
				setState(2536);
				match(VALUES);
				setState(2537);
				match(WITH);
				setState(2538);
				match(OPEN_PAREN);
				setState(2539);
				hash_partbound();
				setState(2540);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2542);
				match(FOR);
				setState(2543);
				match(VALUES);
				setState(2544);
				match(IN_P);
				setState(2545);
				match(OPEN_PAREN);
				setState(2546);
				expr_list();
				setState(2547);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2549);
				match(FOR);
				setState(2550);
				match(VALUES);
				setState(2551);
				match(FROM);
				setState(2552);
				match(OPEN_PAREN);
				setState(2553);
				expr_list();
				setState(2554);
				match(CLOSE_PAREN);
				setState(2555);
				match(TO);
				setState(2556);
				match(OPEN_PAREN);
				setState(2557);
				expr_list();
				setState(2558);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2560);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partbound_elemContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partbound_elemContext hash_partbound_elem() throws RecognitionException {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_hash_partbound_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			nonreservedword();
			setState(2564);
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partboundContext extends ParserRuleContext {
		public List<Hash_partbound_elemContext> hash_partbound_elem() {
			return getRuleContexts(Hash_partbound_elemContext.class);
		}
		public Hash_partbound_elemContext hash_partbound_elem(int i) {
			return getRuleContext(Hash_partbound_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Hash_partboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partbound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHash_partbound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHash_partbound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHash_partbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partboundContext hash_partbound() throws RecognitionException {
		Hash_partboundContext _localctx = new Hash_partboundContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_hash_partbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2566);
			hash_partbound_elem();
			setState(2571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2567);
				match(COMMA);
				setState(2568);
				hash_partbound_elem();
				}
				}
				setState(2573);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltercompositetypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_type_cmdsContext alter_type_cmds() {
			return getRuleContext(Alter_type_cmdsContext.class,0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercompositetypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercompositetypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercompositetypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercompositetypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercompositetypestmtContext altercompositetypestmt() throws RecognitionException {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_altercompositetypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(ALTER);
			setState(2575);
			match(TYPE_P);
			setState(2576);
			any_name();
			setState(2577);
			alter_type_cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdsContext extends ParserRuleContext {
		public List<Alter_type_cmdContext> alter_type_cmd() {
			return getRuleContexts(Alter_type_cmdContext.class);
		}
		public Alter_type_cmdContext alter_type_cmd(int i) {
			return getRuleContext(Alter_type_cmdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdsContext alter_type_cmds() throws RecognitionException {
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alter_type_cmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2579);
			alter_type_cmd();
			setState(2584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2580);
				match(COMMA);
				setState(2581);
				alter_type_cmd();
				}
				}
				setState(2586);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_cmdContext extends ParserRuleContext {
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TablefuncelementContext tablefuncelement() {
			return getRuleContext(TablefuncelementContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Opt_set_dataContext opt_set_data() {
			return getRuleContext(Opt_set_dataContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_cmdContext alter_type_cmd() throws RecognitionException {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_type_cmd);
		try {
			setState(2610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(2587);
				match(ADD_P);
				setState(2588);
				match(ATTRIBUTE);
				setState(2589);
				tablefuncelement();
				setState(2590);
				opt_drop_behavior();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2592);
				match(DROP);
				setState(2593);
				match(ATTRIBUTE);
				setState(2596);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(2594);
					match(IF_P);
					setState(2595);
					match(EXISTS);
					}
					break;
				}
				setState(2598);
				colid();
				setState(2599);
				opt_drop_behavior();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2601);
				match(ALTER);
				setState(2602);
				match(ATTRIBUTE);
				setState(2603);
				colid();
				setState(2604);
				opt_set_data();
				setState(2605);
				match(TYPE_P);
				setState(2606);
				typename();
				setState(2607);
				opt_collate_clause();
				setState(2608);
				opt_drop_behavior();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseportalstmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closeportalstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCloseportalstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCloseportalstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCloseportalstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseportalstmtContext closeportalstmt() throws RecognitionException {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_closeportalstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(CLOSE);
			setState(2615);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(2613);
				cursor_name();
				}
				break;
			case ALL:
				{
				setState(2614);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopystmtContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public Opt_binaryContext opt_binary() {
			return getRuleContext(Opt_binaryContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Copy_fromContext copy_from() {
			return getRuleContext(Copy_fromContext.class,0);
		}
		public Opt_programContext opt_program() {
			return getRuleContext(Opt_programContext.class,0);
		}
		public Copy_file_nameContext copy_file_name() {
			return getRuleContext(Copy_file_nameContext.class,0);
		}
		public Copy_delimiterContext copy_delimiter() {
			return getRuleContext(Copy_delimiterContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopystmtContext copystmt() throws RecognitionException {
		CopystmtContext _localctx = new CopystmtContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_copystmt);
		try {
			setState(2639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2617);
				match(COPY);
				setState(2618);
				opt_binary();
				setState(2619);
				qualified_name();
				setState(2620);
				opt_column_list();
				setState(2621);
				copy_from();
				setState(2622);
				opt_program();
				setState(2623);
				copy_file_name();
				setState(2624);
				copy_delimiter();
				setState(2625);
				opt_with();
				setState(2626);
				copy_options();
				setState(2627);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2629);
				match(COPY);
				setState(2630);
				match(OPEN_PAREN);
				setState(2631);
				preparablestmt();
				setState(2632);
				match(CLOSE_PAREN);
				setState(2633);
				match(TO);
				setState(2634);
				opt_program();
				setState(2635);
				copy_file_name();
				setState(2636);
				opt_with();
				setState(2637);
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_fromContext copy_from() throws RecognitionException {
		Copy_fromContext _localctx = new Copy_fromContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_copy_from);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2641);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_programContext extends ParserRuleContext {
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public Opt_programContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_program(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_program(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_program(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_programContext opt_program() throws RecognitionException {
		Opt_programContext _localctx = new Opt_programContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_opt_program);
		try {
			setState(2645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2643);
				match(PROGRAM);
				}
				break;
			case STDIN:
			case STDOUT:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_file_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_file_nameContext copy_file_name() throws RecognitionException {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_copy_file_name);
		try {
			setState(2650);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2647);
				sconst();
				}
				break;
			case STDIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2648);
				match(STDIN);
				}
				break;
			case STDOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2649);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionsContext extends ParserRuleContext {
		public Copy_opt_listContext copy_opt_list() {
			return getRuleContext(Copy_opt_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_listContext copy_generic_opt_list() {
			return getRuleContext(Copy_generic_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_copy_options);
		try {
			setState(2657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2652);
				copy_opt_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2653);
				match(OPEN_PAREN);
				setState(2654);
				copy_generic_opt_list();
				setState(2655);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_listContext extends ParserRuleContext {
		public List<Copy_opt_itemContext> copy_opt_item() {
			return getRuleContexts(Copy_opt_itemContext.class);
		}
		public Copy_opt_itemContext copy_opt_item(int i) {
			return getRuleContext(Copy_opt_itemContext.class,i);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_listContext copy_opt_list() throws RecognitionException {
		Copy_opt_listContext _localctx = new Copy_opt_listContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_copy_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (NULL_P - 78)) | (1L << (BINARY - 78)) | (1L << (FREEZE - 78)))) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (CSV - 171)) | (1L << (DELIMITER - 171)) | (1L << (ENCODING - 171)) | (1L << (ESCAPE - 171)) | (1L << (FORCE - 171)) | (1L << (HEADER_P - 171)))) != 0) || _la==QUOTE) {
				{
				{
				setState(2659);
				copy_opt_item();
				}
				}
				setState(2664);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_opt_itemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_opt_itemContext copy_opt_item() throws RecognitionException {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_copy_opt_item);
		try {
			setState(2700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2665);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2666);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2667);
				match(DELIMITER);
				setState(2668);
				opt_as();
				setState(2669);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2671);
				match(NULL_P);
				setState(2672);
				opt_as();
				setState(2673);
				sconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2675);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2676);
				match(HEADER_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2677);
				match(QUOTE);
				setState(2678);
				opt_as();
				setState(2679);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2681);
				match(ESCAPE);
				setState(2682);
				opt_as();
				setState(2683);
				sconst();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2685);
				match(FORCE);
				setState(2686);
				match(QUOTE);
				setState(2687);
				columnlist();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2688);
				match(FORCE);
				setState(2689);
				match(QUOTE);
				setState(2690);
				match(STAR);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2691);
				match(FORCE);
				setState(2692);
				match(NOT);
				setState(2693);
				match(NULL_P);
				setState(2694);
				columnlist();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2695);
				match(FORCE);
				setState(2696);
				match(NULL_P);
				setState(2697);
				columnlist();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2698);
				match(ENCODING);
				setState(2699);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_binaryContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_binary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_binary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_binary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_binaryContext opt_binary() throws RecognitionException {
		Opt_binaryContext _localctx = new Opt_binaryContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_opt_binary);
		try {
			setState(2704);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2702);
				match(BINARY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_delimiterContext extends ParserRuleContext {
		public Opt_usingContext opt_using() {
			return getRuleContext(Opt_usingContext.class,0);
		}
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_delimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_delimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_delimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_delimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_delimiterContext copy_delimiter() throws RecognitionException {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_copy_delimiter);
		try {
			setState(2711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
			case DELIMITERS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2706);
				opt_using();
				setState(2707);
				match(DELIMITERS);
				setState(2708);
				sconst();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NULL_P:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case BINARY:
			case FREEZE:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case CSV:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DELIMITER:
			case DISCARD:
			case DROP:
			case ENCODING:
			case ESCAPE:
			case EXECUTE:
			case EXPLAIN:
			case FORCE:
			case HEADER_P:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case QUOTE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_usingContext opt_using() throws RecognitionException {
		Opt_usingContext _localctx = new Opt_usingContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_opt_using);
		try {
			setState(2715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(2713);
				match(USING);
				}
				break;
			case DELIMITERS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_elemContext> copy_generic_opt_elem() {
			return getRuleContexts(Copy_generic_opt_elemContext.class);
		}
		public Copy_generic_opt_elemContext copy_generic_opt_elem(int i) {
			return getRuleContext(Copy_generic_opt_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_listContext copy_generic_opt_list() throws RecognitionException {
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_copy_generic_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2717);
			copy_generic_opt_elem();
			setState(2722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2718);
				match(COMMA);
				setState(2719);
				copy_generic_opt_elem();
				}
				}
				setState(2724);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return getRuleContext(Copy_generic_opt_argContext.class,0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_elemContext copy_generic_opt_elem() throws RecognitionException {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_copy_generic_opt_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2725);
			collabel();
			setState(2726);
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return getRuleContext(Copy_generic_opt_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_argContext copy_generic_opt_arg() throws RecognitionException {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_copy_generic_opt_arg);
		try {
			setState(2736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(2728);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(2729);
				numericonly();
				}
				break;
			case STAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(2730);
				match(STAR);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				setState(2731);
				match(OPEN_PAREN);
				setState(2732);
				copy_generic_opt_arg_list();
				setState(2733);
				match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_listContext extends ParserRuleContext {
		public List<Copy_generic_opt_arg_list_itemContext> copy_generic_opt_arg_list_item() {
			return getRuleContexts(Copy_generic_opt_arg_list_itemContext.class);
		}
		public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item(int i) {
			return getRuleContext(Copy_generic_opt_arg_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() throws RecognitionException {
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_copy_generic_opt_arg_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2738);
			copy_generic_opt_arg_list_item();
			setState(2743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2739);
				match(COMMA);
				setState(2740);
				copy_generic_opt_arg_list_item();
				}
				}
				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_generic_opt_arg_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_generic_opt_arg_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_generic_opt_arg_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() throws RecognitionException {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_copy_generic_opt_arg_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public OptpartitionspecContext optpartitionspec() {
			return getRuleContext(OptpartitionspecContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestmtContext createstmt() throws RecognitionException {
		CreatestmtContext _localctx = new CreatestmtContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_createstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2748);
			match(CREATE);
			setState(2749);
			opttemp();
			setState(2750);
			match(TABLE);
			setState(2754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(2751);
				match(IF_P);
				setState(2752);
				match(NOT);
				setState(2753);
				match(EXISTS);
				}
				break;
			}
			setState(2756);
			qualified_name();
			setState(2787);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(2757);
				match(OPEN_PAREN);
				setState(2758);
				opttableelementlist();
				setState(2759);
				match(CLOSE_PAREN);
				setState(2760);
				optinherit();
				setState(2761);
				optpartitionspec();
				setState(2762);
				table_access_method_clause();
				setState(2763);
				optwith();
				setState(2764);
				oncommitoption();
				setState(2765);
				opttablespace();
				}
				break;
			case OF:
				{
				setState(2767);
				match(OF);
				setState(2768);
				any_name();
				setState(2769);
				opttypedtableelementlist();
				setState(2770);
				optpartitionspec();
				setState(2771);
				table_access_method_clause();
				setState(2772);
				optwith();
				setState(2773);
				oncommitoption();
				setState(2774);
				opttablespace();
				}
				break;
			case PARTITION:
				{
				setState(2776);
				match(PARTITION);
				setState(2777);
				match(OF);
				setState(2778);
				qualified_name();
				setState(2779);
				opttypedtableelementlist();
				setState(2780);
				partitionboundspec();
				setState(2781);
				optpartitionspec();
				setState(2782);
				table_access_method_clause();
				setState(2783);
				optwith();
				setState(2784);
				oncommitoption();
				setState(2785);
				opttablespace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttempContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttemp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttemp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttemp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttemp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempContext opttemp() throws RecognitionException {
		OpttempContext _localctx = new OpttempContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_opttemp);
		int _la;
		try {
			setState(2797);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2789);
				match(TEMPORARY);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2790);
				match(TEMP);
				}
				break;
			case LOCAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2791);
				match(LOCAL);
				setState(2792);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case GLOBAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2793);
				match(GLOBAL);
				setState(2794);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 5);
				{
				setState(2795);
				match(UNLOGGED);
				}
				break;
			case TABLE:
			case RECURSIVE:
			case SEQUENCE:
			case VIEW:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttableelementlistContext extends ParserRuleContext {
		public TableelementlistContext tableelementlist() {
			return getRuleContext(TableelementlistContext.class,0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttableelementlistContext opttableelementlist() throws RecognitionException {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_opttableelementlist);
		try {
			setState(2801);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case FOREIGN:
			case PRIMARY:
			case TABLE:
			case UNIQUE:
			case IS:
			case LEFT:
			case LIKE:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2799);
				tableelementlist();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttypedtableelementlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TypedtableelementlistContext typedtableelementlist() {
			return getRuleContext(TypedtableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttypedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttypedtableelementlistContext opttypedtableelementlist() throws RecognitionException {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_opttypedtableelementlist);
		try {
			setState(2808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2803);
				match(OPEN_PAREN);
				setState(2804);
				typedtableelementlist();
				setState(2805);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableelementlistContext extends ParserRuleContext {
		public List<TableelementContext> tableelement() {
			return getRuleContexts(TableelementContext.class);
		}
		public TableelementContext tableelement(int i) {
			return getRuleContext(TableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementlistContext tableelementlist() throws RecognitionException {
		TableelementlistContext _localctx = new TableelementlistContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_tableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2810);
			tableelement();
			setState(2815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2811);
				match(COMMA);
				setState(2812);
				tableelement();
				}
				}
				setState(2817);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedtableelementlistContext extends ParserRuleContext {
		public List<TypedtableelementContext> typedtableelement() {
			return getRuleContexts(TypedtableelementContext.class);
		}
		public TypedtableelementContext typedtableelement(int i) {
			return getRuleContext(TypedtableelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementlistContext typedtableelementlist() throws RecognitionException {
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_typedtableelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2818);
			typedtableelement();
			setState(2823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2819);
				match(COMMA);
				setState(2820);
				typedtableelement();
				}
				}
				setState(2825);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableelementContext extends ParserRuleContext {
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TablelikeclauseContext tablelikeclause() {
			return getRuleContext(TablelikeclauseContext.class,0);
		}
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableelementContext tableelement() throws RecognitionException {
		TableelementContext _localctx = new TableelementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_tableelement);
		try {
			setState(2829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2826);
				tableconstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2827);
				tablelikeclause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2828);
				columnDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedtableelementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedtableelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypedtableelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypedtableelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypedtableelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedtableelementContext typedtableelement() throws RecognitionException {
		TypedtableelementContext _localctx = new TypedtableelementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_typedtableelement);
		try {
			setState(2833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2831);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2832);
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_columnDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2835);
			colid();
			setState(2836);
			typename();
			setState(2837);
			create_generic_options();
			setState(2838);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2840);
			colid();
			setState(2843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2841);
				match(WITH);
				setState(2842);
				match(OPTIONS);
				}
			}

			setState(2845);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColquallistContext extends ParserRuleContext {
		public List<ColconstraintContext> colconstraint() {
			return getRuleContexts(ColconstraintContext.class);
		}
		public ColconstraintContext colconstraint(int i) {
			return getRuleContext(ColconstraintContext.class,i);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colquallist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColquallist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColquallist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColquallist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColquallistContext colquallist() throws RecognitionException {
		ColquallistContext _localctx = new ColquallistContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_colquallist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & ((1L << (CHECK - 42)) | (1L << (COLLATE - 42)) | (1L << (CONSTRAINT - 42)) | (1L << (DEFAULT - 42)) | (1L << (DEFERRABLE - 42)) | (1L << (INITIALLY - 42)) | (1L << (NOT - 42)) | (1L << (NULL_P - 42)) | (1L << (PRIMARY - 42)) | (1L << (REFERENCES - 42)) | (1L << (UNIQUE - 42)))) != 0) || _la==GENERATED) {
				{
				{
				setState(2847);
				colconstraint();
				}
				}
				setState(2852);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColconstraintelemContext colconstraintelem() {
			return getRuleContext(ColconstraintelemContext.class,0);
		}
		public ConstraintattrContext constraintattr() {
			return getRuleContext(ConstraintattrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintContext colconstraint() throws RecognitionException {
		ColconstraintContext _localctx = new ColconstraintContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_colconstraint);
		try {
			setState(2861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2853);
				match(CONSTRAINT);
				setState(2854);
				name();
				setState(2855);
				colconstraintelem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2857);
				colconstraintelem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2858);
				constraintattr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2859);
				match(COLLATE);
				setState(2860);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColconstraintelemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_no_inheritContext opt_no_inherit() {
			return getRuleContext(Opt_no_inheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public Generated_whenContext generated_when() {
			return getRuleContext(Generated_whenContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return getRuleContext(OptparenthesizedseqoptlistContext.class,0);
		}
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColconstraintelemContext colconstraintelem() throws RecognitionException {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_colconstraintelem);
		try {
			setState(2901);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2863);
				match(NOT);
				setState(2864);
				match(NULL_P);
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(2865);
				match(NULL_P);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2866);
				match(UNIQUE);
				setState(2867);
				opt_definition();
				setState(2868);
				optconstablespace();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 4);
				{
				setState(2870);
				match(PRIMARY);
				setState(2871);
				match(KEY);
				setState(2872);
				opt_definition();
				setState(2873);
				optconstablespace();
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 5);
				{
				setState(2875);
				match(CHECK);
				setState(2876);
				match(OPEN_PAREN);
				setState(2877);
				a_expr();
				setState(2878);
				match(CLOSE_PAREN);
				setState(2879);
				opt_no_inherit();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2881);
				match(DEFAULT);
				setState(2882);
				b_expr(0);
				}
				break;
			case GENERATED:
				enterOuterAlt(_localctx, 7);
				{
				setState(2883);
				match(GENERATED);
				setState(2884);
				generated_when();
				setState(2885);
				match(AS);
				setState(2893);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IDENTITY_P:
					{
					setState(2886);
					match(IDENTITY_P);
					setState(2887);
					optparenthesizedseqoptlist();
					}
					break;
				case OPEN_PAREN:
					{
					setState(2888);
					match(OPEN_PAREN);
					setState(2889);
					a_expr();
					setState(2890);
					match(CLOSE_PAREN);
					setState(2891);
					match(STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 8);
				{
				setState(2895);
				match(REFERENCES);
				setState(2896);
				qualified_name();
				setState(2897);
				opt_column_list();
				setState(2898);
				key_match();
				setState(2899);
				key_actions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generated_whenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generated_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerated_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerated_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerated_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generated_whenContext generated_when() throws RecognitionException {
		Generated_whenContext _localctx = new Generated_whenContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_generated_when);
		try {
			setState(2906);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2903);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2904);
				match(BY);
				setState(2905);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattrContext constraintattr() throws RecognitionException {
		ConstraintattrContext _localctx = new ConstraintattrContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_constraintattr);
		int _la;
		try {
			setState(2913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2908);
				match(DEFERRABLE);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2909);
				match(NOT);
				setState(2910);
				match(DEFERRABLE);
				}
				break;
			case INITIALLY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2911);
				match(INITIALLY);
				setState(2912);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeclauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TablelikeoptionlistContext tablelikeoptionlist() {
			return getRuleContext(TablelikeoptionlistContext.class,0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeclauseContext tablelikeclause() throws RecognitionException {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_tablelikeclause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2915);
			match(LIKE);
			setState(2916);
			qualified_name();
			setState(2917);
			tablelikeoptionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeoptionlistContext extends ParserRuleContext {
		public List<TablelikeoptionContext> tablelikeoption() {
			return getRuleContexts(TablelikeoptionContext.class);
		}
		public TablelikeoptionContext tablelikeoption(int i) {
			return getRuleContext(TablelikeoptionContext.class,i);
		}
		public List<TerminalNode> INCLUDING() { return getTokens(PostgreSQLParser.INCLUDING); }
		public TerminalNode INCLUDING(int i) {
			return getToken(PostgreSQLParser.INCLUDING, i);
		}
		public List<TerminalNode> EXCLUDING() { return getTokens(PostgreSQLParser.EXCLUDING); }
		public TerminalNode EXCLUDING(int i) {
			return getToken(PostgreSQLParser.EXCLUDING, i);
		}
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionlistContext tablelikeoptionlist() throws RecognitionException {
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_tablelikeoptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2923);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCLUDING || _la==INCLUDING) {
				{
				{
				setState(2919);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2920);
				tablelikeoption();
				}
				}
				setState(2925);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablelikeoptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablelikeoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablelikeoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablelikeoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablelikeoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablelikeoptionContext tablelikeoption() throws RecognitionException {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_tablelikeoption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2926);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (COMMENTS - 160)) | (1L << (CONSTRAINTS - 160)) | (1L << (DEFAULTS - 160)) | (1L << (IDENTITY_P - 160)))) != 0) || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableconstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintelemContext constraintelem() {
			return getRuleContext(ConstraintelemContext.class,0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableconstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTableconstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTableconstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTableconstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableconstraintContext tableconstraint() throws RecognitionException {
		TableconstraintContext _localctx = new TableconstraintContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_tableconstraint);
		try {
			setState(2933);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONSTRAINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2928);
				match(CONSTRAINT);
				setState(2929);
				name();
				setState(2930);
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2932);
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintelemContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public Opt_c_includeContext opt_c_include() {
			return getRuleContext(Opt_c_includeContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public OptconstablespaceContext optconstablespace() {
			return getRuleContext(OptconstablespaceContext.class,0);
		}
		public ExistingindexContext existingindex() {
			return getRuleContext(ExistingindexContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public ExclusionconstraintlistContext exclusionconstraintlist() {
			return getRuleContext(ExclusionconstraintlistContext.class,0);
		}
		public ExclusionwhereclauseContext exclusionwhereclause() {
			return getRuleContext(ExclusionwhereclauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Key_matchContext key_match() {
			return getRuleContext(Key_matchContext.class,0);
		}
		public Key_actionsContext key_actions() {
			return getRuleContext(Key_actionsContext.class,0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintelemContext constraintelem() throws RecognitionException {
		ConstraintelemContext _localctx = new ConstraintelemContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_constraintelem);
		try {
			setState(2993);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(2935);
				match(CHECK);
				setState(2936);
				match(OPEN_PAREN);
				setState(2937);
				a_expr();
				setState(2938);
				match(CLOSE_PAREN);
				setState(2939);
				constraintattributespec();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2941);
				match(UNIQUE);
				setState(2953);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(2942);
					match(OPEN_PAREN);
					setState(2943);
					columnlist();
					setState(2944);
					match(CLOSE_PAREN);
					setState(2945);
					opt_c_include();
					setState(2946);
					opt_definition();
					setState(2947);
					optconstablespace();
					setState(2948);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(2950);
					existingindex();
					setState(2951);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2955);
				match(PRIMARY);
				setState(2956);
				match(KEY);
				setState(2968);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(2957);
					match(OPEN_PAREN);
					setState(2958);
					columnlist();
					setState(2959);
					match(CLOSE_PAREN);
					setState(2960);
					opt_c_include();
					setState(2961);
					opt_definition();
					setState(2962);
					optconstablespace();
					setState(2963);
					constraintattributespec();
					}
					break;
				case USING:
					{
					setState(2965);
					existingindex();
					setState(2966);
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2970);
				match(EXCLUDE);
				setState(2971);
				access_method_clause();
				setState(2972);
				match(OPEN_PAREN);
				setState(2973);
				exclusionconstraintlist();
				setState(2974);
				match(CLOSE_PAREN);
				setState(2975);
				opt_c_include();
				setState(2976);
				opt_definition();
				setState(2977);
				optconstablespace();
				setState(2978);
				exclusionwhereclause();
				setState(2979);
				constraintattributespec();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(2981);
				match(FOREIGN);
				setState(2982);
				match(KEY);
				setState(2983);
				match(OPEN_PAREN);
				setState(2984);
				columnlist();
				setState(2985);
				match(CLOSE_PAREN);
				setState(2986);
				match(REFERENCES);
				setState(2987);
				qualified_name();
				setState(2988);
				opt_column_list();
				setState(2989);
				key_match();
				setState(2990);
				key_actions();
				setState(2991);
				constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_no_inheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no_inherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no_inherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no_inherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no_inherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_no_inheritContext opt_no_inherit() throws RecognitionException {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_opt_no_inherit);
		try {
			setState(2998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(2995);
				match(NO);
				setState(2996);
				match(INHERIT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_column_listContext opt_column_list() throws RecognitionException {
		Opt_column_listContext _localctx = new Opt_column_listContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_opt_column_list);
		try {
			setState(3005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3000);
				match(OPEN_PAREN);
				setState(3001);
				columnlist();
				setState(3002);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnlistContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ColumnlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnlistContext columnlist() throws RecognitionException {
		ColumnlistContext _localctx = new ColumnlistContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_columnlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3007);
			columnElem();
			setState(3012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3008);
				match(COMMA);
				setState(3009);
				columnElem();
				}
				}
				setState(3014);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3015);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_c_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_c_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_c_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_c_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_c_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_c_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_c_includeContext opt_c_include() throws RecognitionException {
		Opt_c_includeContext _localctx = new Opt_c_includeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_opt_c_include);
		try {
			setState(3023);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3017);
				match(INCLUDE);
				setState(3018);
				match(OPEN_PAREN);
				setState(3019);
				columnlist();
				setState(3020);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case USING:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_matchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_matchContext key_match() throws RecognitionException {
		Key_matchContext _localctx = new Key_matchContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_key_match);
		int _la;
		try {
			setState(3028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3025);
				match(MATCH);
				setState(3026);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case ON:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionconstraintlistContext extends ParserRuleContext {
		public List<ExclusionconstraintelemContext> exclusionconstraintelem() {
			return getRuleContexts(ExclusionconstraintelemContext.class);
		}
		public ExclusionconstraintelemContext exclusionconstraintelem(int i) {
			return getRuleContext(ExclusionconstraintelemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintlistContext exclusionconstraintlist() throws RecognitionException {
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_exclusionconstraintlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3030);
			exclusionconstraintelem();
			setState(3035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3031);
				match(COMMA);
				setState(3032);
				exclusionconstraintelem();
				}
				}
				setState(3037);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionconstraintelemContext extends ParserRuleContext {
		public Index_elemContext index_elem() {
			return getRuleContext(Index_elemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionconstraintelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionconstraintelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionconstraintelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionconstraintelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionconstraintelemContext exclusionconstraintelem() throws RecognitionException {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_exclusionconstraintelem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3038);
			index_elem();
			setState(3039);
			match(WITH);
			setState(3046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(3040);
				any_operator();
				}
				break;
			case 2:
				{
				setState(3041);
				match(OPERATOR);
				setState(3042);
				match(OPEN_PAREN);
				setState(3043);
				any_operator();
				setState(3044);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionwhereclauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionwhereclause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclusionwhereclause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclusionwhereclause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclusionwhereclause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionwhereclauseContext exclusionwhereclause() throws RecognitionException {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_exclusionwhereclause);
		try {
			setState(3054);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3048);
				match(WHERE);
				setState(3049);
				match(OPEN_PAREN);
				setState(3050);
				a_expr();
				setState(3051);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionsContext extends ParserRuleContext {
		public Key_updateContext key_update() {
			return getRuleContext(Key_updateContext.class,0);
		}
		public Key_deleteContext key_delete() {
			return getRuleContext(Key_deleteContext.class,0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_actions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_actions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionsContext key_actions() throws RecognitionException {
		Key_actionsContext _localctx = new Key_actionsContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_key_actions);
		try {
			setState(3065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3056);
				key_update();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3057);
				key_delete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3058);
				key_update();
				setState(3059);
				key_delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3061);
				key_delete();
				setState(3062);
				key_update();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_updateContext key_update() throws RecognitionException {
		Key_updateContext _localctx = new Key_updateContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_key_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3067);
			match(ON);
			setState(3068);
			match(UPDATE);
			setState(3069);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Key_actionContext key_action() {
			return getRuleContext(Key_actionContext.class,0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_deleteContext key_delete() throws RecognitionException {
		Key_deleteContext _localctx = new Key_deleteContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_key_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3071);
			match(ON);
			setState(3072);
			match(DELETE_P);
			setState(3073);
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_actionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterKey_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitKey_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitKey_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_actionContext key_action() throws RecognitionException {
		Key_actionContext _localctx = new Key_actionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_key_action);
		int _la;
		try {
			setState(3081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3075);
				match(NO);
				setState(3076);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3077);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3078);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3079);
				match(SET);
				setState(3080);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_P) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptinheritContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optinherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptinherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptinherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptinherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptinheritContext optinherit() throws RecognitionException {
		OptinheritContext _localctx = new OptinheritContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_optinherit);
		try {
			setState(3089);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INHERITS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3083);
				match(INHERITS);
				setState(3084);
				match(OPEN_PAREN);
				setState(3085);
				qualified_name_list();
				setState(3086);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PARTITION:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SERVER:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptpartitionspecContext extends ParserRuleContext {
		public PartitionspecContext partitionspec() {
			return getRuleContext(PartitionspecContext.class,0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optpartitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptpartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptpartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptpartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptpartitionspecContext optpartitionspec() throws RecognitionException {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_optpartitionspec);
		try {
			setState(3093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3091);
				partitionspec();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionspecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Part_paramsContext part_params() {
			return getRuleContext(Part_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPartitionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPartitionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPartitionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionspecContext partitionspec() throws RecognitionException {
		PartitionspecContext _localctx = new PartitionspecContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_partitionspec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3095);
			match(PARTITION);
			setState(3096);
			match(BY);
			setState(3097);
			colid();
			setState(3098);
			match(OPEN_PAREN);
			setState(3099);
			part_params();
			setState(3100);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Part_paramsContext extends ParserRuleContext {
		public List<Part_elemContext> part_elem() {
			return getRuleContexts(Part_elemContext.class);
		}
		public Part_elemContext part_elem(int i) {
			return getRuleContext(Part_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Part_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_paramsContext part_params() throws RecognitionException {
		Part_paramsContext _localctx = new Part_paramsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_part_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3102);
			part_elem();
			setState(3107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3103);
				match(COMMA);
				setState(3104);
				part_elem();
				}
				}
				setState(3109);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Part_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPart_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPart_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPart_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Part_elemContext part_elem() throws RecognitionException {
		Part_elemContext _localctx = new Part_elemContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_part_elem);
		try {
			setState(3124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3110);
				colid();
				setState(3111);
				opt_collate();
				setState(3112);
				opt_class();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3114);
				func_expr_windowless();
				setState(3115);
				opt_collate();
				setState(3116);
				opt_class();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3118);
				match(OPEN_PAREN);
				setState(3119);
				a_expr();
				setState(3120);
				match(CLOSE_PAREN);
				setState(3121);
				opt_collate();
				setState(3122);
				opt_class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_access_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_access_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_access_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_access_method_clauseContext table_access_method_clause() throws RecognitionException {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_table_access_method_clause);
		try {
			setState(3129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3126);
				match(USING);
				setState(3127);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptwithContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optwith; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptwith(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptwith(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptwith(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptwithContext optwith() throws RecognitionException {
		OptwithContext _localctx = new OptwithContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_optwith);
		try {
			setState(3136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3131);
				match(WITH);
				setState(3132);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3133);
				match(WITHOUT);
				setState(3134);
				match(OIDS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OncommitoptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oncommitoption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOncommitoption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOncommitoption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOncommitoption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OncommitoptionContext oncommitoption() throws RecognitionException {
		OncommitoptionContext _localctx = new OncommitoptionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_oncommitoption);
		try {
			setState(3148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3138);
				match(ON);
				setState(3139);
				match(COMMIT);
				setState(3145);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DROP:
					{
					setState(3140);
					match(DROP);
					}
					break;
				case DELETE_P:
					{
					setState(3141);
					match(DELETE_P);
					setState(3142);
					match(ROWS);
					}
					break;
				case PRESERVE:
					{
					setState(3143);
					match(PRESERVE);
					setState(3144);
					match(ROWS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceContext opttablespace() throws RecognitionException {
		OpttablespaceContext _localctx = new OpttablespaceContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_opttablespace);
		try {
			setState(3153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3150);
				match(TABLESPACE);
				setState(3151);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptconstablespaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstablespaceContext optconstablespace() throws RecognitionException {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_optconstablespace);
		try {
			setState(3160);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3155);
				match(USING);
				setState(3156);
				match(INDEX);
				setState(3157);
				match(TABLESPACE);
				setState(3158);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingindexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingindex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExistingindex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExistingindex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExistingindex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingindexContext existingindex() throws RecognitionException {
		ExistingindexContext _localctx = new ExistingindexContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_existingindex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3162);
			match(USING);
			setState(3163);
			match(INDEX);
			setState(3164);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatestatsstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatestatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatestatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatestatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatestatsstmtContext createstatsstmt() throws RecognitionException {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_createstatsstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3166);
			match(CREATE);
			setState(3167);
			match(STATISTICS);
			setState(3171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(3168);
				match(IF_P);
				setState(3169);
				match(NOT);
				setState(3170);
				match(EXISTS);
				}
				break;
			}
			setState(3173);
			any_name();
			setState(3174);
			opt_name_list();
			setState(3175);
			match(ON);
			setState(3176);
			expr_list();
			setState(3177);
			match(FROM);
			setState(3178);
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterstatsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(PostgreSQLParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(PostgreSQLParser.STATISTICS, i);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterstatsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterstatsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterstatsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterstatsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterstatsstmtContext alterstatsstmt() throws RecognitionException {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_alterstatsstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180);
			match(ALTER);
			setState(3181);
			match(STATISTICS);
			setState(3184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				setState(3182);
				match(IF_P);
				setState(3183);
				match(EXISTS);
				}
				break;
			}
			setState(3186);
			any_name();
			setState(3187);
			match(SET);
			setState(3188);
			match(STATISTICS);
			setState(3189);
			signediconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateasstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateasstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createasstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateasstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateasstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateasstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateasstmtContext createasstmt() throws RecognitionException {
		CreateasstmtContext _localctx = new CreateasstmtContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_createasstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3191);
			match(CREATE);
			setState(3192);
			opttemp();
			setState(3193);
			match(TABLE);
			setState(3197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(3194);
				match(IF_P);
				setState(3195);
				match(NOT);
				setState(3196);
				match(EXISTS);
				}
				break;
			}
			setState(3199);
			create_as_target();
			setState(3200);
			match(AS);
			setState(3201);
			selectstmt();
			setState(3202);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_as_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public OptwithContext optwith() {
			return getRuleContext(OptwithContext.class,0);
		}
		public OncommitoptionContext oncommitoption() {
			return getRuleContext(OncommitoptionContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_as_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_as_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_as_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_as_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_as_targetContext create_as_target() throws RecognitionException {
		Create_as_targetContext _localctx = new Create_as_targetContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_create_as_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3204);
			qualified_name();
			setState(3205);
			opt_column_list();
			setState(3206);
			table_access_method_clause();
			setState(3207);
			optwith();
			setState(3208);
			oncommitoption();
			setState(3209);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_dataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_dataContext opt_with_data() throws RecognitionException {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_opt_with_data);
		try {
			setState(3218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3211);
				match(WITH);
				setState(3215);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATA_P:
					{
					setState(3212);
					match(DATA_P);
					}
					break;
				case NO:
					{
					setState(3213);
					match(NO);
					setState(3214);
					match(DATA_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatematviewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OptnologContext optnolog() {
			return getRuleContext(OptnologContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Create_mv_targetContext create_mv_target() {
			return getRuleContext(Create_mv_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_creatematviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatematviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatematviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatematviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatematviewstmtContext creatematviewstmt() throws RecognitionException {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_creatematviewstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3220);
			match(CREATE);
			setState(3221);
			optnolog();
			setState(3222);
			match(MATERIALIZED);
			setState(3223);
			match(VIEW);
			setState(3227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(3224);
				match(IF_P);
				setState(3225);
				match(NOT);
				setState(3226);
				match(EXISTS);
				}
				break;
			}
			setState(3229);
			create_mv_target();
			setState(3230);
			match(AS);
			setState(3231);
			selectstmt();
			setState(3232);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mv_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Table_access_method_clauseContext table_access_method_clause() {
			return getRuleContext(Table_access_method_clauseContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_mv_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_mv_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_mv_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_mv_targetContext create_mv_target() throws RecognitionException {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_create_mv_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3234);
			qualified_name();
			setState(3235);
			opt_column_list();
			setState(3236);
			table_access_method_clause();
			setState(3237);
			opt_reloptions();
			setState(3238);
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptnologContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optnolog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptnolog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptnolog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptnolog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptnologContext optnolog() throws RecognitionException {
		OptnologContext _localctx = new OptnologContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_optnolog);
		try {
			setState(3242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNLOGGED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3240);
				match(UNLOGGED);
				}
				break;
			case MATERIALIZED:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshmatviewstmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshmatviewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRefreshmatviewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRefreshmatviewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRefreshmatviewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshmatviewstmtContext refreshmatviewstmt() throws RecognitionException {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_refreshmatviewstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			match(REFRESH);
			setState(3245);
			match(MATERIALIZED);
			setState(3246);
			match(VIEW);
			setState(3247);
			opt_concurrently();
			setState(3248);
			qualified_name();
			setState(3249);
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateseqstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptseqoptlistContext optseqoptlist() {
			return getRuleContext(OptseqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateseqstmtContext createseqstmt() throws RecognitionException {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_createseqstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3251);
			match(CREATE);
			setState(3252);
			opttemp();
			setState(3253);
			match(SEQUENCE);
			setState(3257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(3254);
				match(IF_P);
				setState(3255);
				match(NOT);
				setState(3256);
				match(EXISTS);
				}
				break;
			}
			setState(3259);
			qualified_name();
			setState(3260);
			optseqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterseqstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterseqstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterseqstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterseqstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterseqstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterseqstmtContext alterseqstmt() throws RecognitionException {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alterseqstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3262);
			match(ALTER);
			setState(3263);
			match(SEQUENCE);
			setState(3266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(3264);
				match(IF_P);
				setState(3265);
				match(EXISTS);
				}
				break;
			}
			setState(3268);
			qualified_name();
			setState(3269);
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptseqoptlistContext extends ParserRuleContext {
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptseqoptlistContext optseqoptlist() throws RecognitionException {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_optseqoptlist);
		try {
			setState(3273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3271);
				seqoptlist();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptparenthesizedseqoptlistContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public SeqoptlistContext seqoptlist() {
			return getRuleContext(SeqoptlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optparenthesizedseqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptparenthesizedseqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptparenthesizedseqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptparenthesizedseqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() throws RecognitionException {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_optparenthesizedseqoptlist);
		try {
			setState(3280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3275);
				match(OPEN_PAREN);
				setState(3276);
				seqoptlist();
				setState(3277);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqoptlistContext extends ParserRuleContext {
		public List<SeqoptelemContext> seqoptelem() {
			return getRuleContexts(SeqoptelemContext.class);
		}
		public SeqoptelemContext seqoptelem(int i) {
			return getRuleContext(SeqoptelemContext.class,i);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptlistContext seqoptlist() throws RecognitionException {
		SeqoptlistContext _localctx = new SeqoptlistContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_seqoptlist);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3283); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3282);
					seqoptelem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3285); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqoptelemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public Opt_byContext opt_by() {
			return getRuleContext(Opt_byContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqoptelem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeqoptelem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeqoptelem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeqoptelem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqoptelemContext seqoptelem() throws RecognitionException {
		SeqoptelemContext _localctx = new SeqoptelemContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_seqoptelem);
		int _la;
		try {
			setState(3317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3287);
				match(AS);
				setState(3288);
				simpletypename();
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3289);
				match(CACHE);
				setState(3290);
				numericonly();
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3291);
				match(CYCLE);
				}
				break;
			case INCREMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3292);
				match(INCREMENT);
				setState(3293);
				opt_by();
				setState(3294);
				numericonly();
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3296);
				match(MAXVALUE);
				setState(3297);
				numericonly();
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3298);
				match(MINVALUE);
				setState(3299);
				numericonly();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 7);
				{
				setState(3300);
				match(NO);
				setState(3301);
				_la = _input.LA(1);
				if ( !(_la==CYCLE || _la==MAXVALUE || _la==MINVALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNED:
				enterOuterAlt(_localctx, 8);
				{
				setState(3302);
				match(OWNED);
				setState(3303);
				match(BY);
				setState(3304);
				any_name();
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3305);
				match(SEQUENCE);
				setState(3306);
				match(NAME_P);
				setState(3307);
				any_name();
				}
				break;
			case START:
				enterOuterAlt(_localctx, 10);
				{
				setState(3308);
				match(START);
				setState(3309);
				opt_with();
				setState(3310);
				numericonly();
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 11);
				{
				setState(3312);
				match(RESTART);
				setState(3313);
				opt_with();
				setState(3315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS || _la==Integral || _la==Numeric) {
					{
					setState(3314);
					numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_byContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_byContext opt_by() throws RecognitionException {
		Opt_byContext _localctx = new Opt_byContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_opt_by);
		try {
			setState(3321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3319);
				match(BY);
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericonlyContext extends ParserRuleContext {
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericonlyContext numericonly() throws RecognitionException {
		NumericonlyContext _localctx = new NumericonlyContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_numericonly);
		try {
			setState(3329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3323);
				fconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3324);
				match(PLUS);
				setState(3325);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3326);
				match(MINUS);
				setState(3327);
				fconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3328);
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numericonly_listContext extends ParserRuleContext {
		public List<NumericonlyContext> numericonly() {
			return getRuleContexts(NumericonlyContext.class);
		}
		public NumericonlyContext numericonly(int i) {
			return getRuleContext(NumericonlyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Numericonly_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericonly_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumericonly_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumericonly_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumericonly_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numericonly_listContext numericonly_list() throws RecognitionException {
		Numericonly_listContext _localctx = new Numericonly_listContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_numericonly_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3331);
			numericonly();
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3332);
				match(COMMA);
				setState(3333);
				numericonly();
				}
				}
				setState(3338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateplangstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Opt_trustedContext opt_trusted() {
			return getRuleContext(Opt_trustedContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext opt_inline_handler() {
			return getRuleContext(Opt_inline_handlerContext.class,0);
		}
		public Opt_validatorContext opt_validator() {
			return getRuleContext(Opt_validatorContext.class,0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createplangstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateplangstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateplangstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateplangstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateplangstmtContext createplangstmt() throws RecognitionException {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_createplangstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3339);
			match(CREATE);
			setState(3340);
			opt_or_replace();
			setState(3341);
			opt_trusted();
			setState(3342);
			opt_procedural();
			setState(3343);
			match(LANGUAGE);
			setState(3344);
			name();
			setState(3350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HANDLER) {
				{
				setState(3345);
				match(HANDLER);
				setState(3346);
				handler_name();
				setState(3347);
				opt_inline_handler();
				setState(3348);
				opt_validator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_trustedContext extends ParserRuleContext {
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_trusted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_trusted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_trusted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_trusted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_trustedContext opt_trusted() throws RecognitionException {
		Opt_trustedContext _localctx = new Opt_trustedContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_opt_trusted);
		try {
			setState(3354);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUSTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3352);
				match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHandler_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHandler_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHandler_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Handler_nameContext handler_name() throws RecognitionException {
		Handler_nameContext _localctx = new Handler_nameContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_handler_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3356);
			name();
			setState(3358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(3357);
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_inline_handlerContext extends ParserRuleContext {
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_inline_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_inline_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_inline_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_inline_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_inline_handlerContext opt_inline_handler() throws RecognitionException {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_opt_inline_handler);
		try {
			setState(3363);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INLINE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3360);
				match(INLINE_P);
				setState(3361);
				handler_name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALIDATOR:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Validator_clauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validator_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValidator_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValidator_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValidator_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Validator_clauseContext validator_clause() throws RecognitionException {
		Validator_clauseContext _localctx = new Validator_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_validator_clause);
		try {
			setState(3369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3365);
				match(VALIDATOR);
				setState(3366);
				handler_name();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3367);
				match(NO);
				setState(3368);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_validatorContext extends ParserRuleContext {
		public Validator_clauseContext validator_clause() {
			return getRuleContext(Validator_clauseContext.class,0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_validator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_validator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_validator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_validator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_validatorContext opt_validator() throws RecognitionException {
		Opt_validatorContext _localctx = new Opt_validatorContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_opt_validator);
		try {
			setState(3373);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3371);
				validator_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_proceduralContext extends ParserRuleContext {
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_procedural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_procedural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_procedural(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_procedural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_proceduralContext opt_procedural() throws RecognitionException {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_opt_procedural);
		try {
			setState(3377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3375);
				match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetablespacestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OpttablespaceownerContext opttablespaceowner() {
			return getRuleContext(OpttablespaceownerContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetablespacestmtContext createtablespacestmt() throws RecognitionException {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_createtablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3379);
			match(CREATE);
			setState(3380);
			match(TABLESPACE);
			setState(3381);
			name();
			setState(3382);
			opttablespaceowner();
			setState(3383);
			match(LOCATION);
			setState(3384);
			sconst();
			setState(3385);
			opt_reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablespaceownerContext extends ParserRuleContext {
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablespaceowner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablespaceowner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablespaceowner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablespaceowner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablespaceownerContext opttablespaceowner() throws RecognitionException {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_opttablespaceowner);
		try {
			setState(3390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OWNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3387);
				match(OWNER);
				setState(3388);
				rolespec();
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroptablespacestmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptablespacestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptablespacestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptablespacestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptablespacestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptablespacestmtContext droptablespacestmt() throws RecognitionException {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_droptablespacestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3392);
			match(DROP);
			setState(3393);
			match(TABLESPACE);
			setState(3396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(3394);
				match(IF_P);
				setState(3395);
				match(EXISTS);
				}
				break;
			}
			setState(3398);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateextensionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Create_extension_opt_listContext create_extension_opt_list() {
			return getRuleContext(Create_extension_opt_listContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateextensionstmtContext createextensionstmt() throws RecognitionException {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_createextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3400);
			match(CREATE);
			setState(3401);
			match(EXTENSION);
			setState(3405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(3402);
				match(IF_P);
				setState(3403);
				match(NOT);
				setState(3404);
				match(EXISTS);
				}
				break;
			}
			setState(3407);
			name();
			setState(3408);
			opt_with();
			setState(3409);
			create_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_listContext extends ParserRuleContext {
		public List<Create_extension_opt_itemContext> create_extension_opt_item() {
			return getRuleContexts(Create_extension_opt_itemContext.class);
		}
		public Create_extension_opt_itemContext create_extension_opt_item(int i) {
			return getRuleContext(Create_extension_opt_itemContext.class,i);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_listContext create_extension_opt_list() throws RecognitionException {
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_create_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FROM || _la==CASCADE || _la==SCHEMA || _la==VERSION_P) {
				{
				{
				setState(3411);
				create_extension_opt_item();
				}
				}
				setState(3416);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_extension_opt_itemContext create_extension_opt_item() throws RecognitionException {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_create_extension_opt_item);
		try {
			setState(3424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3417);
				match(SCHEMA);
				setState(3418);
				name();
				}
				break;
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(3419);
				match(VERSION_P);
				setState(3420);
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(3421);
				match(FROM);
				setState(3422);
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3423);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterextensionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Alter_extension_opt_listContext alter_extension_opt_list() {
			return getRuleContext(Alter_extension_opt_listContext.class,0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensionstmtContext alterextensionstmt() throws RecognitionException {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alterextensionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3426);
			match(ALTER);
			setState(3427);
			match(EXTENSION);
			setState(3428);
			name();
			setState(3429);
			match(UPDATE);
			setState(3430);
			alter_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_listContext extends ParserRuleContext {
		public List<Alter_extension_opt_itemContext> alter_extension_opt_item() {
			return getRuleContexts(Alter_extension_opt_itemContext.class);
		}
		public Alter_extension_opt_itemContext alter_extension_opt_item(int i) {
			return getRuleContext(Alter_extension_opt_itemContext.class,i);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_listContext alter_extension_opt_list() throws RecognitionException {
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alter_extension_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(3432);
				alter_extension_opt_item();
				}
				}
				setState(3437);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_opt_itemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_opt_itemContext alter_extension_opt_item() throws RecognitionException {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alter_extension_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3438);
			match(TO);
			setState(3439);
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterextensioncontentsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Add_dropContext add_drop() {
			return getRuleContext(Add_dropContext.class,0);
		}
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterextensioncontentsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterextensioncontentsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterextensioncontentsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterextensioncontentsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterextensioncontentsstmtContext alterextensioncontentsstmt() throws RecognitionException {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alterextensioncontentsstmt);
		try {
			setState(3545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3441);
				match(ALTER);
				setState(3442);
				match(EXTENSION);
				setState(3443);
				name();
				setState(3444);
				add_drop();
				setState(3445);
				object_type_name();
				setState(3446);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3448);
				match(ALTER);
				setState(3449);
				match(EXTENSION);
				setState(3450);
				name();
				setState(3451);
				add_drop();
				setState(3452);
				object_type_any_name();
				setState(3453);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3455);
				match(ALTER);
				setState(3456);
				match(EXTENSION);
				setState(3457);
				name();
				setState(3458);
				add_drop();
				setState(3459);
				match(AGGREGATE);
				setState(3460);
				aggregate_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3462);
				match(ALTER);
				setState(3463);
				match(EXTENSION);
				setState(3464);
				name();
				setState(3465);
				add_drop();
				setState(3466);
				match(CAST);
				setState(3467);
				match(OPEN_PAREN);
				setState(3468);
				typename();
				setState(3469);
				match(AS);
				setState(3470);
				typename();
				setState(3471);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3473);
				match(ALTER);
				setState(3474);
				match(EXTENSION);
				setState(3475);
				name();
				setState(3476);
				add_drop();
				setState(3477);
				match(DOMAIN_P);
				setState(3478);
				typename();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3480);
				match(ALTER);
				setState(3481);
				match(EXTENSION);
				setState(3482);
				name();
				setState(3483);
				add_drop();
				setState(3484);
				match(FUNCTION);
				setState(3485);
				function_with_argtypes();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3487);
				match(ALTER);
				setState(3488);
				match(EXTENSION);
				setState(3489);
				name();
				setState(3490);
				add_drop();
				setState(3491);
				match(OPERATOR);
				setState(3492);
				operator_with_argtypes();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3494);
				match(ALTER);
				setState(3495);
				match(EXTENSION);
				setState(3496);
				name();
				setState(3497);
				add_drop();
				setState(3498);
				match(OPERATOR);
				setState(3499);
				match(CLASS);
				setState(3500);
				any_name();
				setState(3501);
				match(USING);
				setState(3502);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3504);
				match(ALTER);
				setState(3505);
				match(EXTENSION);
				setState(3506);
				name();
				setState(3507);
				add_drop();
				setState(3508);
				match(OPERATOR);
				setState(3509);
				match(FAMILY);
				setState(3510);
				any_name();
				setState(3511);
				match(USING);
				setState(3512);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3514);
				match(ALTER);
				setState(3515);
				match(EXTENSION);
				setState(3516);
				name();
				setState(3517);
				add_drop();
				setState(3518);
				match(PROCEDURE);
				setState(3519);
				function_with_argtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3521);
				match(ALTER);
				setState(3522);
				match(EXTENSION);
				setState(3523);
				name();
				setState(3524);
				add_drop();
				setState(3525);
				match(ROUTINE);
				setState(3526);
				function_with_argtypes();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3528);
				match(ALTER);
				setState(3529);
				match(EXTENSION);
				setState(3530);
				name();
				setState(3531);
				add_drop();
				setState(3532);
				match(TRANSFORM);
				setState(3533);
				match(FOR);
				setState(3534);
				typename();
				setState(3535);
				match(LANGUAGE);
				setState(3536);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3538);
				match(ALTER);
				setState(3539);
				match(EXTENSION);
				setState(3540);
				name();
				setState(3541);
				add_drop();
				setState(3542);
				match(TYPE_P);
				setState(3543);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefdwstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefdwstmtContext createfdwstmt() throws RecognitionException {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_createfdwstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3547);
			match(CREATE);
			setState(3548);
			match(FOREIGN);
			setState(3549);
			match(DATA_P);
			setState(3550);
			match(WRAPPER);
			setState(3551);
			name();
			setState(3552);
			opt_fdw_options();
			setState(3553);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionContext fdw_option() throws RecognitionException {
		Fdw_optionContext _localctx = new Fdw_optionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_fdw_option);
		try {
			setState(3563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3555);
				match(HANDLER);
				setState(3556);
				handler_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3557);
				match(NO);
				setState(3558);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3559);
				match(VALIDATOR);
				setState(3560);
				handler_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3561);
				match(NO);
				setState(3562);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fdw_optionsContext extends ParserRuleContext {
		public List<Fdw_optionContext> fdw_option() {
			return getRuleContexts(Fdw_optionContext.class);
		}
		public Fdw_optionContext fdw_option(int i) {
			return getRuleContext(Fdw_optionContext.class,i);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fdw_optionsContext fdw_options() throws RecognitionException {
		Fdw_optionsContext _localctx = new Fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_fdw_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3566); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3565);
				fdw_option();
				}
				}
				setState(3568); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==HANDLER || _la==NO || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fdw_optionsContext extends ParserRuleContext {
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fdw_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fdw_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fdw_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fdw_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fdw_optionsContext opt_fdw_options() throws RecognitionException {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_opt_fdw_options);
		try {
			setState(3572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
			case NO:
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3570);
				fdw_options();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case OPTIONS:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfdwstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_fdw_optionsContext opt_fdw_options() {
			return getRuleContext(Opt_fdw_optionsContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Fdw_optionsContext fdw_options() {
			return getRuleContext(Fdw_optionsContext.class,0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfdwstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfdwstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfdwstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfdwstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfdwstmtContext alterfdwstmt() throws RecognitionException {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alterfdwstmt);
		try {
			setState(3589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3574);
				match(ALTER);
				setState(3575);
				match(FOREIGN);
				setState(3576);
				match(DATA_P);
				setState(3577);
				match(WRAPPER);
				setState(3578);
				name();
				setState(3579);
				opt_fdw_options();
				setState(3580);
				alter_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3582);
				match(ALTER);
				setState(3583);
				match(FOREIGN);
				setState(3584);
				match(DATA_P);
				setState(3585);
				match(WRAPPER);
				setState(3586);
				name();
				setState(3587);
				fdw_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Generic_option_listContext generic_option_list() {
			return getRuleContext(Generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_generic_optionsContext create_generic_options() throws RecognitionException {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_generic_options);
		try {
			setState(3597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPTIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3591);
				match(OPTIONS);
				setState(3592);
				match(OPEN_PAREN);
				setState(3593);
				generic_option_list();
				setState(3594);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_listContext extends ParserRuleContext {
		public List<Generic_option_elemContext> generic_option_elem() {
			return getRuleContexts(Generic_option_elemContext.class);
		}
		public Generic_option_elemContext generic_option_elem(int i) {
			return getRuleContext(Generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_listContext generic_option_list() throws RecognitionException {
		Generic_option_listContext _localctx = new Generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599);
			generic_option_elem();
			setState(3604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3600);
				match(COMMA);
				setState(3601);
				generic_option_elem();
				}
				}
				setState(3606);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_optionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Alter_generic_option_listContext alter_generic_option_list() {
			return getRuleContext(Alter_generic_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_optionsContext alter_generic_options() throws RecognitionException {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_generic_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3607);
			match(OPTIONS);
			setState(3608);
			match(OPEN_PAREN);
			setState(3609);
			alter_generic_option_list();
			setState(3610);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_listContext extends ParserRuleContext {
		public List<Alter_generic_option_elemContext> alter_generic_option_elem() {
			return getRuleContexts(Alter_generic_option_elemContext.class);
		}
		public Alter_generic_option_elemContext alter_generic_option_elem(int i) {
			return getRuleContext(Alter_generic_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_listContext alter_generic_option_list() throws RecognitionException {
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alter_generic_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3612);
			alter_generic_option_elem();
			setState(3617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3613);
				match(COMMA);
				setState(3614);
				alter_generic_option_elem();
				}
				}
				setState(3619);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_generic_option_elemContext extends ParserRuleContext {
		public Generic_option_elemContext generic_option_elem() {
			return getRuleContext(Generic_option_elemContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_generic_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_generic_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_generic_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_generic_option_elemContext alter_generic_option_elem() throws RecognitionException {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_alter_generic_option_elem);
		try {
			setState(3627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3620);
				generic_option_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3621);
				match(SET);
				setState(3622);
				generic_option_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3623);
				match(ADD_P);
				setState(3624);
				generic_option_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3625);
				match(DROP);
				setState(3626);
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_elemContext extends ParserRuleContext {
		public Generic_option_nameContext generic_option_name() {
			return getRuleContext(Generic_option_nameContext.class,0);
		}
		public Generic_option_argContext generic_option_arg() {
			return getRuleContext(Generic_option_argContext.class,0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_elemContext generic_option_elem() throws RecognitionException {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_generic_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3629);
			generic_option_name();
			setState(3630);
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_nameContext generic_option_name() throws RecognitionException {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_generic_option_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3632);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generic_option_argContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGeneric_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGeneric_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGeneric_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generic_option_argContext generic_option_arg() throws RecognitionException {
		Generic_option_argContext _localctx = new Generic_option_argContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_generic_option_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3634);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Opt_typeContext opt_type() {
			return getRuleContext(Opt_typeContext.class,0);
		}
		public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return getRuleContext(Opt_foreign_server_versionContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeignserverstmtContext createforeignserverstmt() throws RecognitionException {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_createforeignserverstmt);
		try {
			setState(3661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3636);
				match(CREATE);
				setState(3637);
				match(SERVER);
				setState(3638);
				name();
				setState(3639);
				opt_type();
				setState(3640);
				opt_foreign_server_version();
				setState(3641);
				match(FOREIGN);
				setState(3642);
				match(DATA_P);
				setState(3643);
				match(WRAPPER);
				setState(3644);
				name();
				setState(3645);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3647);
				match(CREATE);
				setState(3648);
				match(SERVER);
				setState(3649);
				match(IF_P);
				setState(3650);
				match(NOT);
				setState(3651);
				match(EXISTS);
				setState(3652);
				name();
				setState(3653);
				opt_type();
				setState(3654);
				opt_foreign_server_version();
				setState(3655);
				match(FOREIGN);
				setState(3656);
				match(DATA_P);
				setState(3657);
				match(WRAPPER);
				setState(3658);
				name();
				setState(3659);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_typeContext extends ParserRuleContext {
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_typeContext opt_type() throws RecognitionException {
		Opt_typeContext _localctx = new Opt_typeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_opt_type);
		try {
			setState(3666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3663);
				match(TYPE_P);
				setState(3664);
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_server_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_server_versionContext foreign_server_version() throws RecognitionException {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_foreign_server_version);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			match(VERSION_P);
			setState(3671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				{
				setState(3669);
				sconst();
				}
				break;
			case NULL_P:
				{
				setState(3670);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_foreign_server_versionContext extends ParserRuleContext {
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_foreign_server_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_foreign_server_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_foreign_server_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_foreign_server_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_foreign_server_versionContext opt_foreign_server_version() throws RecognitionException {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_opt_foreign_server_version);
		try {
			setState(3675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSION_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(3673);
				foreign_server_version();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterforeignserverstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public Foreign_server_versionContext foreign_server_version() {
			return getRuleContext(Foreign_server_versionContext.class,0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterforeignserverstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterforeignserverstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterforeignserverstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterforeignserverstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterforeignserverstmtContext alterforeignserverstmt() throws RecognitionException {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_alterforeignserverstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3677);
			match(ALTER);
			setState(3678);
			match(SERVER);
			setState(3679);
			name();
			setState(3685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPTIONS:
				{
				setState(3680);
				alter_generic_options();
				}
				break;
			case VERSION_P:
				{
				setState(3681);
				foreign_server_version();
				setState(3683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(3682);
					alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateforeigntablestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttableelementlistContext opttableelementlist() {
			return getRuleContext(OpttableelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext optinherit() {
			return getRuleContext(OptinheritContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public OpttypedtableelementlistContext opttypedtableelementlist() {
			return getRuleContext(OpttypedtableelementlistContext.class,0);
		}
		public PartitionboundspecContext partitionboundspec() {
			return getRuleContext(PartitionboundspecContext.class,0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createforeigntablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateforeigntablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateforeigntablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateforeigntablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateforeigntablestmtContext createforeigntablestmt() throws RecognitionException {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_createforeigntablestmt);
		try {
			setState(3743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3687);
				match(CREATE);
				setState(3688);
				match(FOREIGN);
				setState(3689);
				match(TABLE);
				setState(3690);
				qualified_name();
				setState(3691);
				match(OPEN_PAREN);
				setState(3692);
				opttableelementlist();
				setState(3693);
				match(CLOSE_PAREN);
				setState(3694);
				optinherit();
				setState(3695);
				match(SERVER);
				setState(3696);
				name();
				setState(3697);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3699);
				match(CREATE);
				setState(3700);
				match(FOREIGN);
				setState(3701);
				match(TABLE);
				setState(3702);
				match(IF_P);
				setState(3703);
				match(NOT);
				setState(3704);
				match(EXISTS);
				setState(3705);
				qualified_name();
				setState(3706);
				match(OPEN_PAREN);
				setState(3707);
				opttableelementlist();
				setState(3708);
				match(CLOSE_PAREN);
				setState(3709);
				optinherit();
				setState(3710);
				match(SERVER);
				setState(3711);
				name();
				setState(3712);
				create_generic_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3714);
				match(CREATE);
				setState(3715);
				match(FOREIGN);
				setState(3716);
				match(TABLE);
				setState(3717);
				qualified_name();
				setState(3718);
				match(PARTITION);
				setState(3719);
				match(OF);
				setState(3720);
				qualified_name();
				setState(3721);
				opttypedtableelementlist();
				setState(3722);
				partitionboundspec();
				setState(3723);
				match(SERVER);
				setState(3724);
				name();
				setState(3725);
				create_generic_options();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3727);
				match(CREATE);
				setState(3728);
				match(FOREIGN);
				setState(3729);
				match(TABLE);
				setState(3730);
				match(IF_P);
				setState(3731);
				match(NOT);
				setState(3732);
				match(EXISTS);
				setState(3733);
				qualified_name();
				setState(3734);
				match(PARTITION);
				setState(3735);
				match(OF);
				setState(3736);
				qualified_name();
				setState(3737);
				opttypedtableelementlist();
				setState(3738);
				partitionboundspec();
				setState(3739);
				match(SERVER);
				setState(3740);
				name();
				setState(3741);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportforeignschemastmtContext extends ParserRuleContext {
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public Import_qualificationContext import_qualification() {
			return getRuleContext(Import_qualificationContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importforeignschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImportforeignschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImportforeignschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImportforeignschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportforeignschemastmtContext importforeignschemastmt() throws RecognitionException {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_importforeignschemastmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3745);
			match(IMPORT_P);
			setState(3746);
			match(FOREIGN);
			setState(3747);
			match(SCHEMA);
			setState(3748);
			name();
			setState(3749);
			import_qualification();
			setState(3750);
			match(FROM);
			setState(3751);
			match(SERVER);
			setState(3752);
			name();
			setState(3753);
			match(INTO);
			setState(3754);
			name();
			setState(3755);
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Import_qualification_typeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualification_typeContext import_qualification_type() throws RecognitionException {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_import_qualification_type);
		try {
			setState(3760);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3757);
				match(LIMIT);
				setState(3758);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3759);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Import_qualificationContext extends ParserRuleContext {
		public Import_qualification_typeContext import_qualification_type() {
			return getRuleContext(Import_qualification_typeContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_qualification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_qualification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_qualification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_qualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_qualificationContext import_qualification() throws RecognitionException {
		Import_qualificationContext _localctx = new Import_qualificationContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_import_qualification);
		try {
			setState(3768);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPT:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3762);
				import_qualification_type();
				setState(3763);
				match(OPEN_PAREN);
				setState(3764);
				relation_expr_list();
				setState(3765);
				match(CLOSE_PAREN);
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateusermappingstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Create_generic_optionsContext create_generic_options() {
			return getRuleContext(Create_generic_optionsContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateusermappingstmtContext createusermappingstmt() throws RecognitionException {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_createusermappingstmt);
		try {
			setState(3791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3770);
				match(CREATE);
				setState(3771);
				match(USER);
				setState(3772);
				match(MAPPING);
				setState(3773);
				match(FOR);
				setState(3774);
				auth_ident();
				setState(3775);
				match(SERVER);
				setState(3776);
				name();
				setState(3777);
				create_generic_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3779);
				match(CREATE);
				setState(3780);
				match(USER);
				setState(3781);
				match(MAPPING);
				setState(3782);
				match(IF_P);
				setState(3783);
				match(NOT);
				setState(3784);
				match(EXISTS);
				setState(3785);
				match(FOR);
				setState(3786);
				auth_ident();
				setState(3787);
				match(SERVER);
				setState(3788);
				name();
				setState(3789);
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_identContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_ident; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAuth_ident(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAuth_ident(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAuth_ident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_identContext auth_ident() throws RecognitionException {
		Auth_identContext _localctx = new Auth_identContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_auth_ident);
		try {
			setState(3795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3793);
				rolespec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3794);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropusermappingstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropusermappingstmtContext dropusermappingstmt() throws RecognitionException {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_dropusermappingstmt);
		try {
			setState(3815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3797);
				match(DROP);
				setState(3798);
				match(USER);
				setState(3799);
				match(MAPPING);
				setState(3800);
				match(FOR);
				setState(3801);
				auth_ident();
				setState(3802);
				match(SERVER);
				setState(3803);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3805);
				match(DROP);
				setState(3806);
				match(USER);
				setState(3807);
				match(MAPPING);
				setState(3808);
				match(IF_P);
				setState(3809);
				match(EXISTS);
				setState(3810);
				match(FOR);
				setState(3811);
				auth_ident();
				setState(3812);
				match(SERVER);
				setState(3813);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterusermappingstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Auth_identContext auth_ident() {
			return getRuleContext(Auth_identContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Alter_generic_optionsContext alter_generic_options() {
			return getRuleContext(Alter_generic_optionsContext.class,0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterusermappingstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterusermappingstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterusermappingstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterusermappingstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterusermappingstmtContext alterusermappingstmt() throws RecognitionException {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterusermappingstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3817);
			match(ALTER);
			setState(3818);
			match(USER);
			setState(3819);
			match(MAPPING);
			setState(3820);
			match(FOR);
			setState(3821);
			auth_ident();
			setState(3822);
			match(SERVER);
			setState(3823);
			name();
			setState(3824);
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatepolicystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return getRuleContext(RowsecuritydefaultpermissiveContext.class,0);
		}
		public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return getRuleContext(RowsecuritydefaultforcmdContext.class,0);
		}
		public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return getRuleContext(RowsecuritydefaulttoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepolicystmtContext createpolicystmt() throws RecognitionException {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3826);
			match(CREATE);
			setState(3827);
			match(POLICY);
			setState(3828);
			name();
			setState(3829);
			match(ON);
			setState(3830);
			qualified_name();
			setState(3831);
			rowsecuritydefaultpermissive();
			setState(3832);
			rowsecuritydefaultforcmd();
			setState(3833);
			rowsecuritydefaulttorole();
			setState(3834);
			rowsecurityoptionalexpr();
			setState(3835);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterpolicystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return getRuleContext(RowsecurityoptionaltoroleContext.class,0);
		}
		public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return getRuleContext(RowsecurityoptionalexprContext.class,0);
		}
		public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return getRuleContext(RowsecurityoptionalwithcheckContext.class,0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpolicystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpolicystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpolicystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpolicystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpolicystmtContext alterpolicystmt() throws RecognitionException {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alterpolicystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3837);
			match(ALTER);
			setState(3838);
			match(POLICY);
			setState(3839);
			name();
			setState(3840);
			match(ON);
			setState(3841);
			qualified_name();
			setState(3842);
			rowsecurityoptionaltorole();
			setState(3843);
			rowsecurityoptionalexpr();
			setState(3844);
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionalexprContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalexprContext rowsecurityoptionalexpr() throws RecognitionException {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_rowsecurityoptionalexpr);
		try {
			setState(3852);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3846);
				match(USING);
				setState(3847);
				match(OPEN_PAREN);
				setState(3848);
				a_expr();
				setState(3849);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionalwithcheckContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionalwithcheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionalwithcheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionalwithcheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionalwithcheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() throws RecognitionException {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_rowsecurityoptionalwithcheck);
		try {
			setState(3861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3854);
				match(WITH);
				setState(3855);
				match(CHECK);
				setState(3856);
				match(OPEN_PAREN);
				setState(3857);
				a_expr();
				setState(3858);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaulttoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaulttorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaulttorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaulttorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaulttorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() throws RecognitionException {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_rowsecuritydefaulttorole);
		try {
			setState(3866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3863);
				match(TO);
				setState(3864);
				role_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecurityoptionaltoroleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecurityoptionaltorole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecurityoptionaltorole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecurityoptionaltorole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecurityoptionaltorole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() throws RecognitionException {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_rowsecurityoptionaltorole);
		try {
			setState(3871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3868);
				match(TO);
				setState(3869);
				role_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaultpermissiveContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultpermissive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultpermissive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultpermissive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultpermissive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() throws RecognitionException {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_rowsecuritydefaultpermissive);
		try {
			setState(3876);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3873);
				match(AS);
				setState(3874);
				identifier();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsecuritydefaultforcmdContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Row_security_cmdContext row_security_cmd() {
			return getRuleContext(Row_security_cmdContext.class,0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsecuritydefaultforcmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsecuritydefaultforcmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsecuritydefaultforcmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsecuritydefaultforcmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() throws RecognitionException {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_rowsecuritydefaultforcmd);
		try {
			setState(3881);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3878);
				match(FOR);
				setState(3879);
				row_security_cmd();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_security_cmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_security_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_security_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_security_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_security_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_security_cmdContext row_security_cmd() throws RecognitionException {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_row_security_cmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3883);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateamstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Am_typeContext am_type() {
			return getRuleContext(Am_typeContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Handler_nameContext handler_name() {
			return getRuleContext(Handler_nameContext.class,0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createamstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateamstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateamstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateamstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateamstmtContext createamstmt() throws RecognitionException {
		CreateamstmtContext _localctx = new CreateamstmtContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_createamstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3885);
			match(CREATE);
			setState(3886);
			match(ACCESS);
			setState(3887);
			match(METHOD);
			setState(3888);
			name();
			setState(3889);
			match(TYPE_P);
			setState(3890);
			am_type();
			setState(3891);
			match(HANDLER);
			setState(3892);
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Am_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_am_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAm_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAm_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAm_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Am_typeContext am_type() throws RecognitionException {
		Am_typeContext _localctx = new Am_typeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_am_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3894);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggeractiontimeContext triggeractiontime() {
			return getRuleContext(TriggeractiontimeContext.class,0);
		}
		public TriggereventsContext triggerevents() {
			return getRuleContext(TriggereventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TriggerreferencingContext triggerreferencing() {
			return getRuleContext(TriggerreferencingContext.class,0);
		}
		public TriggerforspecContext triggerforspec() {
			return getRuleContext(TriggerforspecContext.class,0);
		}
		public TriggerwhenContext triggerwhen() {
			return getRuleContext(TriggerwhenContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TriggerfuncargsContext triggerfuncargs() {
			return getRuleContext(TriggerfuncargsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public OptconstrfromtableContext optconstrfromtable() {
			return getRuleContext(OptconstrfromtableContext.class,0);
		}
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetrigstmtContext createtrigstmt() throws RecognitionException {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_createtrigstmt);
		try {
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3896);
				match(CREATE);
				setState(3897);
				match(TRIGGER);
				setState(3898);
				name();
				setState(3899);
				triggeractiontime();
				setState(3900);
				triggerevents();
				setState(3901);
				match(ON);
				setState(3902);
				qualified_name();
				setState(3903);
				triggerreferencing();
				setState(3904);
				triggerforspec();
				setState(3905);
				triggerwhen();
				setState(3906);
				match(EXECUTE);
				setState(3907);
				function_or_procedure();
				setState(3908);
				func_name();
				setState(3909);
				match(OPEN_PAREN);
				setState(3910);
				triggerfuncargs();
				setState(3911);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3913);
				match(CREATE);
				setState(3914);
				match(CONSTRAINT);
				setState(3915);
				match(TRIGGER);
				setState(3916);
				name();
				setState(3917);
				match(AFTER);
				setState(3918);
				triggerevents();
				setState(3919);
				match(ON);
				setState(3920);
				qualified_name();
				setState(3921);
				optconstrfromtable();
				setState(3922);
				constraintattributespec();
				setState(3923);
				match(FOR);
				setState(3924);
				match(EACH);
				setState(3925);
				match(ROW);
				setState(3926);
				triggerwhen();
				setState(3927);
				match(EXECUTE);
				setState(3928);
				function_or_procedure();
				setState(3929);
				func_name();
				setState(3930);
				match(OPEN_PAREN);
				setState(3931);
				triggerfuncargs();
				setState(3932);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggeractiontimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeractiontime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeractiontime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeractiontime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeractiontime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeractiontimeContext triggeractiontime() throws RecognitionException {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_triggeractiontime);
		try {
			setState(3940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3936);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3937);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3938);
				match(INSTEAD);
				setState(3939);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggereventsContext extends ParserRuleContext {
		public List<TriggeroneeventContext> triggeroneevent() {
			return getRuleContexts(TriggeroneeventContext.class);
		}
		public TriggeroneeventContext triggeroneevent(int i) {
			return getRuleContext(TriggeroneeventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public TriggereventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerevents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerevents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerevents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerevents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggereventsContext triggerevents() throws RecognitionException {
		TriggereventsContext _localctx = new TriggereventsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_triggerevents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3942);
			triggeroneevent();
			setState(3947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(3943);
				match(OR);
				setState(3944);
				triggeroneevent();
				}
				}
				setState(3949);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggeroneeventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggeroneevent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggeroneevent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggeroneevent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggeroneevent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggeroneeventContext triggeroneevent() throws RecognitionException {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_triggeroneevent);
		try {
			setState(3957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3950);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3951);
				match(DELETE_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3952);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3953);
				match(UPDATE);
				setState(3954);
				match(OF);
				setState(3955);
				columnlist();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3956);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerreferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TriggertransitionsContext triggertransitions() {
			return getRuleContext(TriggertransitionsContext.class,0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerreferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerreferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerreferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerreferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerreferencingContext triggerreferencing() throws RecognitionException {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_triggerreferencing);
		try {
			setState(3962);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFERENCING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3959);
				match(REFERENCING);
				setState(3960);
				triggertransitions();
				}
				break;
			case FOR:
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggertransitionsContext extends ParserRuleContext {
		public List<TriggertransitionContext> triggertransition() {
			return getRuleContexts(TriggertransitionContext.class);
		}
		public TriggertransitionContext triggertransition(int i) {
			return getRuleContext(TriggertransitionContext.class,i);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionsContext triggertransitions() throws RecognitionException {
		TriggertransitionsContext _localctx = new TriggertransitionsContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_triggertransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3965); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3964);
				triggertransition();
				}
				}
				setState(3967); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NEW || _la==OLD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggertransitionContext extends ParserRuleContext {
		public TransitionoldornewContext transitionoldornew() {
			return getRuleContext(TransitionoldornewContext.class,0);
		}
		public TransitionrowortableContext transitionrowortable() {
			return getRuleContext(TransitionrowortableContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TransitionrelnameContext transitionrelname() {
			return getRuleContext(TransitionrelnameContext.class,0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggertransition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggertransition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggertransition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggertransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggertransitionContext triggertransition() throws RecognitionException {
		TriggertransitionContext _localctx = new TriggertransitionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_triggertransition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3969);
			transitionoldornew();
			setState(3970);
			transitionrowortable();
			setState(3971);
			opt_as();
			setState(3972);
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionoldornewContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionoldornew; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionoldornew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionoldornew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionoldornew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionoldornewContext transitionoldornew() throws RecognitionException {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_transitionoldornew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionrowortableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrowortable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrowortable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrowortable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrowortable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrowortableContext transitionrowortable() throws RecognitionException {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_transitionrowortable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionrelnameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionrelname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransitionrelname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransitionrelname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransitionrelname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionrelnameContext transitionrelname() throws RecognitionException {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_transitionrelname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3978);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerforspecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TriggerforopteachContext triggerforopteach() {
			return getRuleContext(TriggerforopteachContext.class,0);
		}
		public TriggerfortypeContext triggerfortype() {
			return getRuleContext(TriggerfortypeContext.class,0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforspecContext triggerforspec() throws RecognitionException {
		TriggerforspecContext _localctx = new TriggerforspecContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_triggerforspec);
		try {
			setState(3985);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3980);
				match(FOR);
				setState(3981);
				triggerforopteach();
				setState(3982);
				triggerfortype();
				}
				break;
			case WHEN:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerforopteachContext extends ParserRuleContext {
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerforopteach; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerforopteach(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerforopteach(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerforopteach(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerforopteachContext triggerforopteach() throws RecognitionException {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_triggerforopteach);
		try {
			setState(3989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3987);
				match(EACH);
				}
				break;
			case STATEMENT:
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfortypeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfortype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfortype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfortype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfortype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfortypeContext triggerfortype() throws RecognitionException {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_triggerfortype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991);
			_la = _input.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerwhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerwhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerwhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerwhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerwhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerwhenContext triggerwhen() throws RecognitionException {
		TriggerwhenContext _localctx = new TriggerwhenContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_triggerwhen);
		try {
			setState(3999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3993);
				match(WHEN);
				setState(3994);
				match(OPEN_PAREN);
				setState(3995);
				a_expr();
				setState(3996);
				match(CLOSE_PAREN);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_or_procedureContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_or_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_or_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_or_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_or_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_or_procedureContext function_or_procedure() throws RecognitionException {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_function_or_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4001);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfuncargsContext extends ParserRuleContext {
		public List<TriggerfuncargContext> triggerfuncarg() {
			return getRuleContexts(TriggerfuncargContext.class);
		}
		public TriggerfuncargContext triggerfuncarg(int i) {
			return getRuleContext(TriggerfuncargContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncargs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncargs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncargs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncargs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargsContext triggerfuncargs() throws RecognitionException {
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_triggerfuncargs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4005);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(4003);
				triggerfuncarg();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4007);
				match(COMMA);
				setState(4008);
				triggerfuncarg();
				}
				}
				setState(4013);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerfuncargContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerfuncarg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTriggerfuncarg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTriggerfuncarg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTriggerfuncarg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerfuncargContext triggerfuncarg() throws RecognitionException {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_triggerfuncarg);
		try {
			setState(4018);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(4014);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(4015);
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(4016);
				sconst();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4017);
				collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptconstrfromtableContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optconstrfromtable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOptconstrfromtable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOptconstrfromtable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOptconstrfromtable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptconstrfromtableContext optconstrfromtable() throws RecognitionException {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_optconstrfromtable);
		try {
			setState(4023);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4020);
				match(FROM);
				setState(4021);
				qualified_name();
				}
				break;
			case DEFERRABLE:
			case FOR:
			case INITIALLY:
			case NOT:
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattributespecContext extends ParserRuleContext {
		public List<ConstraintattributeElemContext> constraintattributeElem() {
			return getRuleContexts(ConstraintattributeElemContext.class);
		}
		public ConstraintattributeElemContext constraintattributeElem(int i) {
			return getRuleContext(ConstraintattributeElemContext.class,i);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributespecContext constraintattributespec() throws RecognitionException {
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_constraintattributespec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (DEFERRABLE - 54)) | (1L << (INITIALLY - 54)) | (1L << (NOT - 54)))) != 0) || _la==NO) {
				{
				{
				setState(4025);
				constraintattributeElem();
				}
				}
				setState(4030);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintattributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintattributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstraintattributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstraintattributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstraintattributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintattributeElemContext constraintattributeElem() throws RecognitionException {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_constraintattributeElem);
		try {
			setState(4042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4031);
				match(NOT);
				setState(4032);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4033);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4034);
				match(INITIALLY);
				setState(4035);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4036);
				match(INITIALLY);
				setState(4037);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4038);
				match(NOT);
				setState(4039);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4040);
				match(NO);
				setState(4041);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateeventtrigstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Function_or_procedureContext function_or_procedure() {
			return getRuleContext(Function_or_procedureContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Event_trigger_when_listContext event_trigger_when_list() {
			return getRuleContext(Event_trigger_when_listContext.class,0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createeventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateeventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateeventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateeventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateeventtrigstmtContext createeventtrigstmt() throws RecognitionException {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_createeventtrigstmt);
		try {
			setState(4070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4044);
				match(CREATE);
				setState(4045);
				match(EVENT);
				setState(4046);
				match(TRIGGER);
				setState(4047);
				name();
				setState(4048);
				match(ON);
				setState(4049);
				collabel();
				setState(4050);
				match(EXECUTE);
				setState(4051);
				function_or_procedure();
				setState(4052);
				func_name();
				setState(4053);
				match(OPEN_PAREN);
				setState(4054);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4056);
				match(CREATE);
				setState(4057);
				match(EVENT);
				setState(4058);
				match(TRIGGER);
				setState(4059);
				name();
				setState(4060);
				match(ON);
				setState(4061);
				collabel();
				setState(4062);
				match(WHEN);
				setState(4063);
				event_trigger_when_list();
				setState(4064);
				match(EXECUTE);
				setState(4065);
				function_or_procedure();
				setState(4066);
				func_name();
				setState(4067);
				match(OPEN_PAREN);
				setState(4068);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_when_listContext extends ParserRuleContext {
		public List<Event_trigger_when_itemContext> event_trigger_when_item() {
			return getRuleContexts(Event_trigger_when_itemContext.class);
		}
		public Event_trigger_when_itemContext event_trigger_when_item(int i) {
			return getRuleContext(Event_trigger_when_itemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_listContext event_trigger_when_list() throws RecognitionException {
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_event_trigger_when_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4072);
			event_trigger_when_item();
			setState(4077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(4073);
				match(AND);
				setState(4074);
				event_trigger_when_item();
				}
				}
				setState(4079);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_when_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Event_trigger_value_listContext event_trigger_value_list() {
			return getRuleContext(Event_trigger_value_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_when_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_when_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_when_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_when_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_when_itemContext event_trigger_when_item() throws RecognitionException {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_event_trigger_when_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4080);
			colid();
			setState(4081);
			match(IN_P);
			setState(4082);
			match(OPEN_PAREN);
			setState(4083);
			event_trigger_value_list();
			setState(4084);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_trigger_value_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_trigger_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent_trigger_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent_trigger_value_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent_trigger_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_trigger_value_listContext event_trigger_value_list() throws RecognitionException {
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_event_trigger_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			sconst();
			setState(4091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4087);
				match(COMMA);
				setState(4088);
				sconst();
				}
				}
				setState(4093);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltereventtrigstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altereventtrigstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltereventtrigstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltereventtrigstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltereventtrigstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltereventtrigstmtContext altereventtrigstmt() throws RecognitionException {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_altereventtrigstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4094);
			match(ALTER);
			setState(4095);
			match(EVENT);
			setState(4096);
			match(TRIGGER);
			setState(4097);
			name();
			setState(4098);
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_enable_trigger);
		try {
			setState(4106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4100);
				match(ENABLE_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4101);
				match(ENABLE_P);
				setState(4102);
				match(REPLICA);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4103);
				match(ENABLE_P);
				setState(4104);
				match(ALWAYS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4105);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateassertionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstraintattributespecContext constraintattributespec() {
			return getRuleContext(ConstraintattributespecContext.class,0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createassertionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateassertionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateassertionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateassertionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateassertionstmtContext createassertionstmt() throws RecognitionException {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_createassertionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4108);
			match(CREATE);
			setState(4109);
			match(ASSERTION);
			setState(4110);
			any_name();
			setState(4111);
			match(CHECK);
			setState(4112);
			match(OPEN_PAREN);
			setState(4113);
			a_expr();
			setState(4114);
			match(CLOSE_PAREN);
			setState(4115);
			constraintattributespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Old_aggr_definitionContext old_aggr_definition() {
			return getRuleContext(Old_aggr_definitionContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public OpttablefuncelementlistContext opttablefuncelementlist() {
			return getRuleContext(OpttablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public Opt_enum_val_listContext opt_enum_val_list() {
			return getRuleContext(Opt_enum_val_listContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinestmtContext definestmt() throws RecognitionException {
		DefinestmtContext _localctx = new DefinestmtContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_definestmt);
		try {
			setState(4223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4117);
				match(CREATE);
				setState(4118);
				opt_or_replace();
				setState(4119);
				match(AGGREGATE);
				setState(4120);
				func_name();
				setState(4121);
				aggr_args();
				setState(4122);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4124);
				match(CREATE);
				setState(4125);
				opt_or_replace();
				setState(4126);
				match(AGGREGATE);
				setState(4127);
				func_name();
				setState(4128);
				old_aggr_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4130);
				match(CREATE);
				setState(4131);
				match(OPERATOR);
				setState(4132);
				any_operator();
				setState(4133);
				definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4135);
				match(CREATE);
				setState(4136);
				match(TYPE_P);
				setState(4137);
				any_name();
				setState(4138);
				definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4140);
				match(CREATE);
				setState(4141);
				match(TYPE_P);
				setState(4142);
				any_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4143);
				match(CREATE);
				setState(4144);
				match(TYPE_P);
				setState(4145);
				any_name();
				setState(4146);
				match(AS);
				setState(4147);
				match(OPEN_PAREN);
				setState(4148);
				opttablefuncelementlist();
				setState(4149);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4151);
				match(CREATE);
				setState(4152);
				match(TYPE_P);
				setState(4153);
				any_name();
				setState(4154);
				match(AS);
				setState(4155);
				match(ENUM_P);
				setState(4156);
				match(OPEN_PAREN);
				setState(4157);
				opt_enum_val_list();
				setState(4158);
				match(CLOSE_PAREN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4160);
				match(CREATE);
				setState(4161);
				match(TYPE_P);
				setState(4162);
				any_name();
				setState(4163);
				match(AS);
				setState(4164);
				match(RANGE);
				setState(4165);
				definition();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4167);
				match(CREATE);
				setState(4168);
				match(TEXT_P);
				setState(4169);
				match(SEARCH);
				setState(4170);
				match(PARSER);
				setState(4171);
				any_name();
				setState(4172);
				definition();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4174);
				match(CREATE);
				setState(4175);
				match(TEXT_P);
				setState(4176);
				match(SEARCH);
				setState(4177);
				match(DICTIONARY);
				setState(4178);
				any_name();
				setState(4179);
				definition();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4181);
				match(CREATE);
				setState(4182);
				match(TEXT_P);
				setState(4183);
				match(SEARCH);
				setState(4184);
				match(TEMPLATE);
				setState(4185);
				any_name();
				setState(4186);
				definition();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4188);
				match(CREATE);
				setState(4189);
				match(TEXT_P);
				setState(4190);
				match(SEARCH);
				setState(4191);
				match(CONFIGURATION);
				setState(4192);
				any_name();
				setState(4193);
				definition();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4195);
				match(CREATE);
				setState(4196);
				match(COLLATION);
				setState(4197);
				any_name();
				setState(4198);
				definition();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4200);
				match(CREATE);
				setState(4201);
				match(COLLATION);
				setState(4202);
				match(IF_P);
				setState(4203);
				match(NOT);
				setState(4204);
				match(EXISTS);
				setState(4205);
				any_name();
				setState(4206);
				definition();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4208);
				match(CREATE);
				setState(4209);
				match(COLLATION);
				setState(4210);
				any_name();
				setState(4211);
				match(FROM);
				setState(4212);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4214);
				match(CREATE);
				setState(4215);
				match(COLLATION);
				setState(4216);
				match(IF_P);
				setState(4217);
				match(NOT);
				setState(4218);
				match(EXISTS);
				setState(4219);
				any_name();
				setState(4220);
				match(FROM);
				setState(4221);
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Def_listContext def_list() {
			return getRuleContext(Def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4225);
			match(OPEN_PAREN);
			setState(4226);
			def_list();
			setState(4227);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_listContext extends ParserRuleContext {
		public List<Def_elemContext> def_elem() {
			return getRuleContexts(Def_elemContext.class);
		}
		public Def_elemContext def_elem(int i) {
			return getRuleContext(Def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_listContext def_list() throws RecognitionException {
		Def_listContext _localctx = new Def_listContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4229);
			def_elem();
			setState(4234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4230);
				match(COMMA);
				setState(4231);
				def_elem();
				}
				}
				setState(4236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_elemContext def_elem() throws RecognitionException {
		Def_elemContext _localctx = new Def_elemContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_def_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4237);
			collabel();
			setState(4240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(4238);
				match(EQUAL);
				setState(4239);
				def_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDef_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDef_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDef_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Def_argContext def_arg() throws RecognitionException {
		Def_argContext _localctx = new Def_argContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_def_arg);
		try {
			setState(4248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4242);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4243);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4244);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4245);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4246);
				sconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4247);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_definitionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Old_aggr_listContext old_aggr_list() {
			return getRuleContext(Old_aggr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_definitionContext old_aggr_definition() throws RecognitionException {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_old_aggr_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4250);
			match(OPEN_PAREN);
			setState(4251);
			old_aggr_list();
			setState(4252);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_listContext extends ParserRuleContext {
		public List<Old_aggr_elemContext> old_aggr_elem() {
			return getRuleContexts(Old_aggr_elemContext.class);
		}
		public Old_aggr_elemContext old_aggr_elem(int i) {
			return getRuleContext(Old_aggr_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_listContext old_aggr_list() throws RecognitionException {
		Old_aggr_listContext _localctx = new Old_aggr_listContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_old_aggr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4254);
			old_aggr_elem();
			setState(4259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4255);
				match(COMMA);
				setState(4256);
				old_aggr_elem();
				}
				}
				setState(4261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_aggr_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Def_argContext def_arg() {
			return getRuleContext(Def_argContext.class,0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_aggr_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOld_aggr_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOld_aggr_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOld_aggr_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_aggr_elemContext old_aggr_elem() throws RecognitionException {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_old_aggr_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			identifier();
			setState(4263);
			match(EQUAL);
			setState(4264);
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_enum_val_listContext extends ParserRuleContext {
		public Enum_val_listContext enum_val_list() {
			return getRuleContext(Enum_val_listContext.class,0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_enum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_enum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_enum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_enum_val_listContext opt_enum_val_list() throws RecognitionException {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_opt_enum_val_list);
		try {
			setState(4268);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4266);
				enum_val_list();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enum_val_listContext extends ParserRuleContext {
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enum_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEnum_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEnum_val_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEnum_val_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enum_val_listContext enum_val_list() throws RecognitionException {
		Enum_val_listContext _localctx = new Enum_val_listContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_enum_val_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4270);
			sconst();
			setState(4275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4271);
				match(COMMA);
				setState(4272);
				sconst();
				}
				}
				setState(4277);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterenumstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_if_not_existsContext opt_if_not_exists() {
			return getRuleContext(Opt_if_not_existsContext.class,0);
		}
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterenumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterenumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterenumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterenumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterenumstmtContext alterenumstmt() throws RecognitionException {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_alterenumstmt);
		try {
			setState(4315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4278);
				match(ALTER);
				setState(4279);
				match(TYPE_P);
				setState(4280);
				any_name();
				setState(4281);
				match(ADD_P);
				setState(4282);
				match(VALUE_P);
				setState(4283);
				opt_if_not_exists();
				setState(4284);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4286);
				match(ALTER);
				setState(4287);
				match(TYPE_P);
				setState(4288);
				any_name();
				setState(4289);
				match(ADD_P);
				setState(4290);
				match(VALUE_P);
				setState(4291);
				opt_if_not_exists();
				setState(4292);
				sconst();
				setState(4293);
				match(BEFORE);
				setState(4294);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4296);
				match(ALTER);
				setState(4297);
				match(TYPE_P);
				setState(4298);
				any_name();
				setState(4299);
				match(ADD_P);
				setState(4300);
				match(VALUE_P);
				setState(4301);
				opt_if_not_exists();
				setState(4302);
				sconst();
				setState(4303);
				match(AFTER);
				setState(4304);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4306);
				match(ALTER);
				setState(4307);
				match(TYPE_P);
				setState(4308);
				any_name();
				setState(4309);
				match(RENAME);
				setState(4310);
				match(VALUE_P);
				setState(4311);
				sconst();
				setState(4312);
				match(TO);
				setState(4313);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_not_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_not_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_not_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_not_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_not_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_not_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_not_existsContext opt_if_not_exists() throws RecognitionException {
		Opt_if_not_existsContext _localctx = new Opt_if_not_existsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_opt_if_not_exists);
		try {
			setState(4321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4317);
				match(IF_P);
				setState(4318);
				match(NOT);
				setState(4319);
				match(EXISTS);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateopclassstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_opfamilyContext opt_opfamily() {
			return getRuleContext(Opt_opfamilyContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopclassstmtContext createopclassstmt() throws RecognitionException {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_createopclassstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4323);
			match(CREATE);
			setState(4324);
			match(OPERATOR);
			setState(4325);
			match(CLASS);
			setState(4326);
			any_name();
			setState(4327);
			opt_default();
			setState(4328);
			match(FOR);
			setState(4329);
			match(TYPE_P);
			setState(4330);
			typename();
			setState(4331);
			match(USING);
			setState(4332);
			name();
			setState(4333);
			opt_opfamily();
			setState(4334);
			match(AS);
			setState(4335);
			opclass_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_item_listContext extends ParserRuleContext {
		public List<Opclass_itemContext> opclass_item() {
			return getRuleContexts(Opclass_itemContext.class);
		}
		public Opclass_itemContext opclass_item(int i) {
			return getRuleContext(Opclass_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_item_listContext opclass_item_list() throws RecognitionException {
		Opclass_item_listContext _localctx = new Opclass_item_listContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_opclass_item_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4337);
			opclass_item();
			setState(4342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4338);
				match(COMMA);
				setState(4339);
				opclass_item();
				}
				}
				setState(4344);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_itemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Opclass_purposeContext opclass_purpose() {
			return getRuleContext(Opclass_purposeContext.class,0);
		}
		public Opt_recheckContext opt_recheck() {
			return getRuleContext(Opt_recheckContext.class,0);
		}
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_itemContext opclass_item() throws RecognitionException {
		Opclass_itemContext _localctx = new Opclass_itemContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_opclass_item);
		try {
			setState(4370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4345);
				match(OPERATOR);
				setState(4346);
				iconst();
				setState(4347);
				any_operator();
				setState(4348);
				opclass_purpose();
				setState(4349);
				opt_recheck();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4351);
				match(OPERATOR);
				setState(4352);
				iconst();
				setState(4353);
				operator_with_argtypes();
				setState(4354);
				opclass_purpose();
				setState(4355);
				opt_recheck();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4357);
				match(FUNCTION);
				setState(4358);
				iconst();
				setState(4359);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4361);
				match(FUNCTION);
				setState(4362);
				iconst();
				setState(4363);
				match(OPEN_PAREN);
				setState(4364);
				type_list();
				setState(4365);
				match(CLOSE_PAREN);
				setState(4366);
				function_with_argtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4368);
				match(STORAGE);
				setState(4369);
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_defaultContext opt_default() throws RecognitionException {
		Opt_defaultContext _localctx = new Opt_defaultContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opt_default);
		try {
			setState(4374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4372);
				match(DEFAULT);
				}
				break;
			case FOR:
			case CONVERSION_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_opfamilyContext extends ParserRuleContext {
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_opfamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_opfamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_opfamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_opfamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_opfamilyContext opt_opfamily() throws RecognitionException {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_opt_opfamily);
		try {
			setState(4379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4376);
				match(FAMILY);
				setState(4377);
				any_name();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_purposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_purpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_purpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_purpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_purpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_purposeContext opclass_purpose() throws RecognitionException {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_opclass_purpose);
		try {
			setState(4388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4381);
				match(FOR);
				setState(4382);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4383);
				match(FOR);
				setState(4384);
				match(ORDER);
				setState(4385);
				match(BY);
				setState(4386);
				any_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_recheckContext extends ParserRuleContext {
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_recheck; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_recheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_recheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_recheck(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_recheckContext opt_recheck() throws RecognitionException {
		Opt_recheckContext _localctx = new Opt_recheckContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_opt_recheck);
		try {
			setState(4392);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(4390);
				match(RECHECK);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateopfamilystmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateopfamilystmtContext createopfamilystmt() throws RecognitionException {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_createopfamilystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4394);
			match(CREATE);
			setState(4395);
			match(OPERATOR);
			setState(4396);
			match(FAMILY);
			setState(4397);
			any_name();
			setState(4398);
			match(USING);
			setState(4399);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteropfamilystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public Opclass_item_listContext opclass_item_list() {
			return getRuleContext(Opclass_item_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Opclass_drop_listContext opclass_drop_list() {
			return getRuleContext(Opclass_drop_listContext.class,0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteropfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteropfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteropfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteropfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteropfamilystmtContext alteropfamilystmt() throws RecognitionException {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_alteropfamilystmt);
		try {
			setState(4419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4401);
				match(ALTER);
				setState(4402);
				match(OPERATOR);
				setState(4403);
				match(FAMILY);
				setState(4404);
				any_name();
				setState(4405);
				match(USING);
				setState(4406);
				name();
				setState(4407);
				match(ADD_P);
				setState(4408);
				opclass_item_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4410);
				match(ALTER);
				setState(4411);
				match(OPERATOR);
				setState(4412);
				match(FAMILY);
				setState(4413);
				any_name();
				setState(4414);
				match(USING);
				setState(4415);
				name();
				setState(4416);
				match(DROP);
				setState(4417);
				opclass_drop_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_drop_listContext extends ParserRuleContext {
		public List<Opclass_dropContext> opclass_drop() {
			return getRuleContexts(Opclass_dropContext.class);
		}
		public Opclass_dropContext opclass_drop(int i) {
			return getRuleContext(Opclass_dropContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_drop_listContext opclass_drop_list() throws RecognitionException {
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_opclass_drop_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			opclass_drop();
			setState(4426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4422);
				match(COMMA);
				setState(4423);
				opclass_drop();
				}
				}
				setState(4428);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opclass_dropContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclass_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpclass_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpclass_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpclass_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opclass_dropContext opclass_drop() throws RecognitionException {
		Opclass_dropContext _localctx = new Opclass_dropContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_opclass_drop);
		try {
			setState(4441);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4429);
				match(OPERATOR);
				setState(4430);
				iconst();
				setState(4431);
				match(OPEN_PAREN);
				setState(4432);
				type_list();
				setState(4433);
				match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4435);
				match(FUNCTION);
				setState(4436);
				iconst();
				setState(4437);
				match(OPEN_PAREN);
				setState(4438);
				type_list();
				setState(4439);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropopclassstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopclassstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopclassstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopclassstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopclassstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopclassstmtContext dropopclassstmt() throws RecognitionException {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_dropopclassstmt);
		try {
			setState(4461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4443);
				match(DROP);
				setState(4444);
				match(OPERATOR);
				setState(4445);
				match(CLASS);
				setState(4446);
				any_name();
				setState(4447);
				match(USING);
				setState(4448);
				name();
				setState(4449);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4451);
				match(DROP);
				setState(4452);
				match(OPERATOR);
				setState(4453);
				match(CLASS);
				setState(4454);
				match(IF_P);
				setState(4455);
				match(EXISTS);
				setState(4456);
				any_name();
				setState(4457);
				match(USING);
				setState(4458);
				name();
				setState(4459);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropopfamilystmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropopfamilystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropopfamilystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropopfamilystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropopfamilystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropopfamilystmtContext dropopfamilystmt() throws RecognitionException {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_dropopfamilystmt);
		try {
			setState(4481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4463);
				match(DROP);
				setState(4464);
				match(OPERATOR);
				setState(4465);
				match(FAMILY);
				setState(4466);
				any_name();
				setState(4467);
				match(USING);
				setState(4468);
				name();
				setState(4469);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4471);
				match(DROP);
				setState(4472);
				match(OPERATOR);
				setState(4473);
				match(FAMILY);
				setState(4474);
				match(IF_P);
				setState(4475);
				match(EXISTS);
				setState(4476);
				any_name();
				setState(4477);
				match(USING);
				setState(4478);
				name();
				setState(4479);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropownedstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropownedstmtContext dropownedstmt() throws RecognitionException {
		DropownedstmtContext _localctx = new DropownedstmtContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_dropownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4483);
			match(DROP);
			setState(4484);
			match(OWNED);
			setState(4485);
			match(BY);
			setState(4486);
			role_list();
			setState(4487);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReassignownedstmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassignownedstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReassignownedstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReassignownedstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReassignownedstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReassignownedstmtContext reassignownedstmt() throws RecognitionException {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_reassignownedstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4489);
			match(REASSIGN);
			setState(4490);
			match(OWNED);
			setState(4491);
			match(BY);
			setState(4492);
			role_list();
			setState(4493);
			match(TO);
			setState(4494);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Type_name_listContext type_name_list() {
			return getRuleContext(Type_name_listContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropstmtContext dropstmt() throws RecognitionException {
		DropstmtContext _localctx = new DropstmtContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_dropstmt);
		try {
			setState(4574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4496);
				match(DROP);
				setState(4497);
				object_type_any_name();
				setState(4498);
				match(IF_P);
				setState(4499);
				match(EXISTS);
				setState(4500);
				any_name_list();
				setState(4501);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4503);
				match(DROP);
				setState(4504);
				object_type_any_name();
				setState(4505);
				any_name_list();
				setState(4506);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4508);
				match(DROP);
				setState(4509);
				drop_type_name();
				setState(4510);
				match(IF_P);
				setState(4511);
				match(EXISTS);
				setState(4512);
				name_list();
				setState(4513);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4515);
				match(DROP);
				setState(4516);
				drop_type_name();
				setState(4517);
				name_list();
				setState(4518);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4520);
				match(DROP);
				setState(4521);
				object_type_name_on_any_name();
				setState(4522);
				name();
				setState(4523);
				match(ON);
				setState(4524);
				any_name();
				setState(4525);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4527);
				match(DROP);
				setState(4528);
				object_type_name_on_any_name();
				setState(4529);
				match(IF_P);
				setState(4530);
				match(EXISTS);
				setState(4531);
				name();
				setState(4532);
				match(ON);
				setState(4533);
				any_name();
				setState(4534);
				opt_drop_behavior();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4536);
				match(DROP);
				setState(4537);
				match(TYPE_P);
				setState(4538);
				type_name_list();
				setState(4539);
				opt_drop_behavior();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4541);
				match(DROP);
				setState(4542);
				match(TYPE_P);
				setState(4543);
				match(IF_P);
				setState(4544);
				match(EXISTS);
				setState(4545);
				type_name_list();
				setState(4546);
				opt_drop_behavior();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4548);
				match(DROP);
				setState(4549);
				match(DOMAIN_P);
				setState(4550);
				type_name_list();
				setState(4551);
				opt_drop_behavior();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4553);
				match(DROP);
				setState(4554);
				match(DOMAIN_P);
				setState(4555);
				match(IF_P);
				setState(4556);
				match(EXISTS);
				setState(4557);
				type_name_list();
				setState(4558);
				opt_drop_behavior();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4560);
				match(DROP);
				setState(4561);
				match(INDEX);
				setState(4562);
				match(CONCURRENTLY);
				setState(4563);
				any_name_list();
				setState(4564);
				opt_drop_behavior();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4566);
				match(DROP);
				setState(4567);
				match(INDEX);
				setState(4568);
				match(CONCURRENTLY);
				setState(4569);
				match(IF_P);
				setState(4570);
				match(EXISTS);
				setState(4571);
				any_name_list();
				setState(4572);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_any_nameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_any_nameContext object_type_any_name() throws RecognitionException {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_object_type_any_name);
		try {
			setState(4599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4576);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4577);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4578);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4579);
				match(MATERIALIZED);
				setState(4580);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4581);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4582);
				match(FOREIGN);
				setState(4583);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4584);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4585);
				match(CONVERSION_P);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4586);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4587);
				match(TEXT_P);
				setState(4588);
				match(SEARCH);
				setState(4589);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4590);
				match(TEXT_P);
				setState(4591);
				match(SEARCH);
				setState(4592);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4593);
				match(TEXT_P);
				setState(4594);
				match(SEARCH);
				setState(4595);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4596);
				match(TEXT_P);
				setState(4597);
				match(SEARCH);
				setState(4598);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_nameContext extends ParserRuleContext {
		public Drop_type_nameContext drop_type_name() {
			return getRuleContext(Drop_type_nameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_nameContext object_type_name() throws RecognitionException {
		Object_type_nameContext _localctx = new Object_type_nameContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_object_type_name);
		try {
			setState(4606);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(4601);
				drop_type_name();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4602);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4603);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(4604);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4605);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_type_nameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_type_nameContext drop_type_name() throws RecognitionException {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_drop_type_name);
		try {
			setState(4622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4608);
				match(ACCESS);
				setState(4609);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4610);
				match(EVENT);
				setState(4611);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4612);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4613);
				match(FOREIGN);
				setState(4614);
				match(DATA_P);
				setState(4615);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4616);
				opt_procedural();
				setState(4617);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4619);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(4620);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(4621);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_name_on_any_nameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name_on_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterObject_type_name_on_any_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitObject_type_name_on_any_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitObject_type_name_on_any_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_name_on_any_nameContext object_type_name_on_any_name() throws RecognitionException {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_object_type_name_on_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4624);
			_la = _input.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_name_listContext extends ParserRuleContext {
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_name_listContext any_name_list() throws RecognitionException {
		Any_name_listContext _localctx = new Any_name_listContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_any_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4626);
			any_name();
			setState(4631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4627);
				match(COMMA);
				setState(4628);
				any_name();
				}
				}
				setState(4633);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_nameContext any_name() throws RecognitionException {
		Any_nameContext _localctx = new Any_nameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_any_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4634);
			colid();
			setState(4636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4635);
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public List<Attr_nameContext> attr_name() {
			return getRuleContexts(Attr_nameContext.class);
		}
		public Attr_nameContext attr_name(int i) {
			return getRuleContext(Attr_nameContext.class,i);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		AttrsContext _localctx = new AttrsContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_attrs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4640); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4638);
					match(DOT);
					setState(4639);
					attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4642); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_name_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_name_listContext type_name_list() throws RecognitionException {
		Type_name_listContext _localctx = new Type_name_listContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_type_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4644);
			typename();
			setState(4649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4645);
				match(COMMA);
				setState(4646);
				typename();
				}
				}
				setState(4651);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncatestmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_restart_seqsContext opt_restart_seqs() {
			return getRuleContext(Opt_restart_seqsContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTruncatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTruncatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTruncatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncatestmtContext truncatestmt() throws RecognitionException {
		TruncatestmtContext _localctx = new TruncatestmtContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_truncatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4652);
			match(TRUNCATE);
			setState(4653);
			opt_table();
			setState(4654);
			relation_expr_list();
			setState(4655);
			opt_restart_seqs();
			setState(4656);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restart_seqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restart_seqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restart_seqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restart_seqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restart_seqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restart_seqsContext opt_restart_seqs() throws RecognitionException {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_opt_restart_seqs);
		try {
			setState(4663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4658);
				match(CONTINUE_P);
				setState(4659);
				match(IDENTITY_P);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(4660);
				match(RESTART);
				setState(4661);
				match(IDENTITY_P);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentstmtContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Comment_textContext comment_text() {
			return getRuleContext(Comment_textContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return getRuleContext(Object_type_name_on_any_nameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommentstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommentstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommentstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentstmtContext commentstmt() throws RecognitionException {
		CommentstmtContext _localctx = new CommentstmtContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_commentstmt);
		try {
			setState(4812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4665);
				match(COMMENT);
				setState(4666);
				match(ON);
				setState(4667);
				object_type_any_name();
				setState(4668);
				any_name();
				setState(4669);
				match(IS);
				setState(4670);
				comment_text();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4672);
				match(COMMENT);
				setState(4673);
				match(ON);
				setState(4674);
				match(COLUMN);
				setState(4675);
				any_name();
				setState(4676);
				match(IS);
				setState(4677);
				comment_text();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4679);
				match(COMMENT);
				setState(4680);
				match(ON);
				setState(4681);
				object_type_name();
				setState(4682);
				name();
				setState(4683);
				match(IS);
				setState(4684);
				comment_text();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4686);
				match(COMMENT);
				setState(4687);
				match(ON);
				setState(4688);
				match(TYPE_P);
				setState(4689);
				typename();
				setState(4690);
				match(IS);
				setState(4691);
				comment_text();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4693);
				match(COMMENT);
				setState(4694);
				match(ON);
				setState(4695);
				match(DOMAIN_P);
				setState(4696);
				typename();
				setState(4697);
				match(IS);
				setState(4698);
				comment_text();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4700);
				match(COMMENT);
				setState(4701);
				match(ON);
				setState(4702);
				match(AGGREGATE);
				setState(4703);
				aggregate_with_argtypes();
				setState(4704);
				match(IS);
				setState(4705);
				comment_text();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4707);
				match(COMMENT);
				setState(4708);
				match(ON);
				setState(4709);
				match(FUNCTION);
				setState(4710);
				function_with_argtypes();
				setState(4711);
				match(IS);
				setState(4712);
				comment_text();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4714);
				match(COMMENT);
				setState(4715);
				match(ON);
				setState(4716);
				match(OPERATOR);
				setState(4717);
				operator_with_argtypes();
				setState(4718);
				match(IS);
				setState(4719);
				comment_text();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4721);
				match(COMMENT);
				setState(4722);
				match(ON);
				setState(4723);
				match(CONSTRAINT);
				setState(4724);
				name();
				setState(4725);
				match(ON);
				setState(4726);
				any_name();
				setState(4727);
				match(IS);
				setState(4728);
				comment_text();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4730);
				match(COMMENT);
				setState(4731);
				match(ON);
				setState(4732);
				match(CONSTRAINT);
				setState(4733);
				name();
				setState(4734);
				match(ON);
				setState(4735);
				match(DOMAIN_P);
				setState(4736);
				any_name();
				setState(4737);
				match(IS);
				setState(4738);
				comment_text();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4740);
				match(COMMENT);
				setState(4741);
				match(ON);
				setState(4742);
				object_type_name_on_any_name();
				setState(4743);
				name();
				setState(4744);
				match(ON);
				setState(4745);
				any_name();
				setState(4746);
				match(IS);
				setState(4747);
				comment_text();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4749);
				match(COMMENT);
				setState(4750);
				match(ON);
				setState(4751);
				match(PROCEDURE);
				setState(4752);
				function_with_argtypes();
				setState(4753);
				match(IS);
				setState(4754);
				comment_text();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4756);
				match(COMMENT);
				setState(4757);
				match(ON);
				setState(4758);
				match(ROUTINE);
				setState(4759);
				function_with_argtypes();
				setState(4760);
				match(IS);
				setState(4761);
				comment_text();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4763);
				match(COMMENT);
				setState(4764);
				match(ON);
				setState(4765);
				match(TRANSFORM);
				setState(4766);
				match(FOR);
				setState(4767);
				typename();
				setState(4768);
				match(LANGUAGE);
				setState(4769);
				name();
				setState(4770);
				match(IS);
				setState(4771);
				comment_text();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4773);
				match(COMMENT);
				setState(4774);
				match(ON);
				setState(4775);
				match(OPERATOR);
				setState(4776);
				match(CLASS);
				setState(4777);
				any_name();
				setState(4778);
				match(USING);
				setState(4779);
				name();
				setState(4780);
				match(IS);
				setState(4781);
				comment_text();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4783);
				match(COMMENT);
				setState(4784);
				match(ON);
				setState(4785);
				match(OPERATOR);
				setState(4786);
				match(FAMILY);
				setState(4787);
				any_name();
				setState(4788);
				match(USING);
				setState(4789);
				name();
				setState(4790);
				match(IS);
				setState(4791);
				comment_text();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4793);
				match(COMMENT);
				setState(4794);
				match(ON);
				setState(4795);
				match(LARGE_P);
				setState(4796);
				match(OBJECT_P);
				setState(4797);
				numericonly();
				setState(4798);
				match(IS);
				setState(4799);
				comment_text();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4801);
				match(COMMENT);
				setState(4802);
				match(ON);
				setState(4803);
				match(CAST);
				setState(4804);
				match(OPEN_PAREN);
				setState(4805);
				typename();
				setState(4806);
				match(AS);
				setState(4807);
				typename();
				setState(4808);
				match(CLOSE_PAREN);
				setState(4809);
				match(IS);
				setState(4810);
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_textContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_text; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComment_text(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComment_text(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComment_text(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_textContext comment_text() throws RecognitionException {
		Comment_textContext _localctx = new Comment_textContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_comment_text);
		try {
			setState(4816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4814);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4815);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeclabelstmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public Opt_providerContext opt_provider() {
			return getRuleContext(Opt_providerContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Object_type_any_nameContext object_type_any_name() {
			return getRuleContext(Object_type_any_nameContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public Security_labelContext security_label() {
			return getRuleContext(Security_labelContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seclabelstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSeclabelstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSeclabelstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSeclabelstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeclabelstmtContext seclabelstmt() throws RecognitionException {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_seclabelstmt);
		try {
			setState(4909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4818);
				match(SECURITY);
				setState(4819);
				match(LABEL);
				setState(4820);
				opt_provider();
				setState(4821);
				match(ON);
				setState(4822);
				object_type_any_name();
				setState(4823);
				any_name();
				setState(4824);
				match(IS);
				setState(4825);
				security_label();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4827);
				match(SECURITY);
				setState(4828);
				match(LABEL);
				setState(4829);
				opt_provider();
				setState(4830);
				match(ON);
				setState(4831);
				match(COLUMN);
				setState(4832);
				any_name();
				setState(4833);
				match(IS);
				setState(4834);
				security_label();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4836);
				match(SECURITY);
				setState(4837);
				match(LABEL);
				setState(4838);
				opt_provider();
				setState(4839);
				match(ON);
				setState(4840);
				object_type_name();
				setState(4841);
				name();
				setState(4842);
				match(IS);
				setState(4843);
				security_label();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4845);
				match(SECURITY);
				setState(4846);
				match(LABEL);
				setState(4847);
				opt_provider();
				setState(4848);
				match(ON);
				setState(4849);
				match(TYPE_P);
				setState(4850);
				typename();
				setState(4851);
				match(IS);
				setState(4852);
				security_label();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4854);
				match(SECURITY);
				setState(4855);
				match(LABEL);
				setState(4856);
				opt_provider();
				setState(4857);
				match(ON);
				setState(4858);
				match(DOMAIN_P);
				setState(4859);
				typename();
				setState(4860);
				match(IS);
				setState(4861);
				security_label();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4863);
				match(SECURITY);
				setState(4864);
				match(LABEL);
				setState(4865);
				opt_provider();
				setState(4866);
				match(ON);
				setState(4867);
				match(AGGREGATE);
				setState(4868);
				aggregate_with_argtypes();
				setState(4869);
				match(IS);
				setState(4870);
				security_label();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4872);
				match(SECURITY);
				setState(4873);
				match(LABEL);
				setState(4874);
				opt_provider();
				setState(4875);
				match(ON);
				setState(4876);
				match(FUNCTION);
				setState(4877);
				function_with_argtypes();
				setState(4878);
				match(IS);
				setState(4879);
				security_label();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4881);
				match(SECURITY);
				setState(4882);
				match(LABEL);
				setState(4883);
				opt_provider();
				setState(4884);
				match(ON);
				setState(4885);
				match(LARGE_P);
				setState(4886);
				match(OBJECT_P);
				setState(4887);
				numericonly();
				setState(4888);
				match(IS);
				setState(4889);
				security_label();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4891);
				match(SECURITY);
				setState(4892);
				match(LABEL);
				setState(4893);
				opt_provider();
				setState(4894);
				match(ON);
				setState(4895);
				match(PROCEDURE);
				setState(4896);
				function_with_argtypes();
				setState(4897);
				match(IS);
				setState(4898);
				security_label();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4900);
				match(SECURITY);
				setState(4901);
				match(LABEL);
				setState(4902);
				opt_provider();
				setState(4903);
				match(ON);
				setState(4904);
				match(ROUTINE);
				setState(4905);
				function_with_argtypes();
				setState(4906);
				match(IS);
				setState(4907);
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_providerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_providerContext opt_provider() throws RecognitionException {
		Opt_providerContext _localctx = new Opt_providerContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_opt_provider);
		try {
			setState(4914);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4911);
				match(FOR);
				setState(4912);
				nonreservedword_or_sconst();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_labelContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSecurity_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSecurity_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSecurity_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_labelContext security_label() throws RecognitionException {
		Security_labelContext _localctx = new Security_labelContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_security_label);
		try {
			setState(4918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(4916);
				sconst();
				}
				break;
			case NULL_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(4917);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchstmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Fetch_argsContext fetch_args() {
			return getRuleContext(Fetch_argsContext.class,0);
		}
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetchstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetchstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetchstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchstmtContext fetchstmt() throws RecognitionException {
		FetchstmtContext _localctx = new FetchstmtContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_fetchstmt);
		try {
			setState(4924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(4920);
				match(FETCH);
				setState(4921);
				fetch_args();
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4922);
				match(MOVE);
				setState(4923);
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_argsContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Opt_from_inContext opt_from_in() {
			return getRuleContext(Opt_from_inContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_argsContext fetch_args() throws RecognitionException {
		Fetch_argsContext _localctx = new Fetch_argsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_fetch_args);
		try {
			setState(4992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4926);
				cursor_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4927);
				from_in();
				setState(4928);
				cursor_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4930);
				match(NEXT);
				setState(4931);
				opt_from_in();
				setState(4932);
				cursor_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4934);
				match(PRIOR);
				setState(4935);
				opt_from_in();
				setState(4936);
				cursor_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4938);
				match(FIRST_P);
				setState(4939);
				opt_from_in();
				setState(4940);
				cursor_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4942);
				match(LAST_P);
				setState(4943);
				opt_from_in();
				setState(4944);
				cursor_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4946);
				match(ABSOLUTE_P);
				setState(4947);
				signediconst();
				setState(4948);
				opt_from_in();
				setState(4949);
				cursor_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4951);
				match(RELATIVE_P);
				setState(4952);
				signediconst();
				setState(4953);
				opt_from_in();
				setState(4954);
				cursor_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4956);
				signediconst();
				setState(4957);
				opt_from_in();
				setState(4958);
				cursor_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4960);
				match(ALL);
				setState(4961);
				opt_from_in();
				setState(4962);
				cursor_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4964);
				match(FORWARD);
				setState(4965);
				opt_from_in();
				setState(4966);
				cursor_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4968);
				match(FORWARD);
				setState(4969);
				signediconst();
				setState(4970);
				opt_from_in();
				setState(4971);
				cursor_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4973);
				match(FORWARD);
				setState(4974);
				match(ALL);
				setState(4975);
				opt_from_in();
				setState(4976);
				cursor_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4978);
				match(BACKWARD);
				setState(4979);
				opt_from_in();
				setState(4980);
				cursor_name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4982);
				match(BACKWARD);
				setState(4983);
				signediconst();
				setState(4984);
				opt_from_in();
				setState(4985);
				cursor_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4987);
				match(BACKWARD);
				setState(4988);
				match(ALL);
				setState(4989);
				opt_from_in();
				setState(4990);
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_inContext from_in() throws RecognitionException {
		From_inContext _localctx = new From_inContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_from_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4994);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_from_inContext extends ParserRuleContext {
		public From_inContext from_in() {
			return getRuleContext(From_inContext.class,0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_from_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_from_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_from_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_from_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_from_inContext opt_from_in() throws RecognitionException {
		Opt_from_inContext _localctx = new Opt_from_inContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_opt_from_in);
		try {
			setState(4998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(4996);
				from_in();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantstmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantstmtContext grantstmt() throws RecognitionException {
		GrantstmtContext _localctx = new GrantstmtContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_grantstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5000);
			match(GRANT);
			setState(5001);
			privileges();
			setState(5002);
			match(ON);
			setState(5003);
			privilege_target();
			setState(5004);
			match(TO);
			setState(5005);
			grantee_list();
			setState(5006);
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Privilege_targetContext privilege_target() {
			return getRuleContext(Privilege_targetContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokestmtContext revokestmt() throws RecognitionException {
		RevokestmtContext _localctx = new RevokestmtContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_revokestmt);
		try {
			setState(5027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5008);
				match(REVOKE);
				setState(5009);
				privileges();
				setState(5010);
				match(ON);
				setState(5011);
				privilege_target();
				setState(5012);
				match(FROM);
				setState(5013);
				grantee_list();
				setState(5014);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5016);
				match(REVOKE);
				setState(5017);
				match(GRANT);
				setState(5018);
				match(OPTION);
				setState(5019);
				match(FOR);
				setState(5020);
				privileges();
				setState(5021);
				match(ON);
				setState(5022);
				privilege_target();
				setState(5023);
				match(FROM);
				setState(5024);
				grantee_list();
				setState(5025);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_privileges);
		try {
			setState(5044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5029);
				privilege_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5030);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5031);
				match(ALL);
				setState(5032);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5033);
				match(ALL);
				setState(5034);
				match(OPEN_PAREN);
				setState(5035);
				columnlist();
				setState(5036);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5038);
				match(ALL);
				setState(5039);
				match(PRIVILEGES);
				setState(5040);
				match(OPEN_PAREN);
				setState(5041);
				columnlist();
				setState(5042);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_listContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_listContext privilege_list() throws RecognitionException {
		Privilege_listContext _localctx = new Privilege_listContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_privilege_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5046);
			privilege();
			setState(5051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5047);
				match(COMMA);
				setState(5048);
				privilege();
				}
				}
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_privilege);
		try {
			setState(5063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5054);
				match(SELECT);
				setState(5055);
				opt_column_list();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(5056);
				match(REFERENCES);
				setState(5057);
				opt_column_list();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5058);
				match(CREATE);
				setState(5059);
				opt_column_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5060);
				colid();
				setState(5061);
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Privilege_targetContext extends ParserRuleContext {
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public Numericonly_listContext numericonly_list() {
			return getRuleContext(Numericonly_listContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrivilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrivilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrivilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Privilege_targetContext privilege_target() throws RecognitionException {
		Privilege_targetContext _localctx = new Privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_privilege_target);
		try {
			setState(5123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5065);
				qualified_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5066);
				match(TABLE);
				setState(5067);
				qualified_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5068);
				match(SEQUENCE);
				setState(5069);
				qualified_name_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5070);
				match(FOREIGN);
				setState(5071);
				match(DATA_P);
				setState(5072);
				match(WRAPPER);
				setState(5073);
				name_list();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5074);
				match(FOREIGN);
				setState(5075);
				match(SERVER);
				setState(5076);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5077);
				match(FUNCTION);
				setState(5078);
				function_with_argtypes_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5079);
				match(PROCEDURE);
				setState(5080);
				function_with_argtypes_list();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5081);
				match(ROUTINE);
				setState(5082);
				function_with_argtypes_list();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5083);
				match(DATABASE);
				setState(5084);
				name_list();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5085);
				match(DOMAIN_P);
				setState(5086);
				any_name_list();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5087);
				match(LANGUAGE);
				setState(5088);
				name_list();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5089);
				match(LARGE_P);
				setState(5090);
				match(OBJECT_P);
				setState(5091);
				numericonly_list();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5092);
				match(SCHEMA);
				setState(5093);
				name_list();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5094);
				match(TABLESPACE);
				setState(5095);
				name_list();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5096);
				match(TYPE_P);
				setState(5097);
				any_name_list();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5098);
				match(ALL);
				setState(5099);
				match(TABLES);
				setState(5100);
				match(IN_P);
				setState(5101);
				match(SCHEMA);
				setState(5102);
				name_list();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5103);
				match(ALL);
				setState(5104);
				match(SEQUENCES);
				setState(5105);
				match(IN_P);
				setState(5106);
				match(SCHEMA);
				setState(5107);
				name_list();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5108);
				match(ALL);
				setState(5109);
				match(FUNCTIONS);
				setState(5110);
				match(IN_P);
				setState(5111);
				match(SCHEMA);
				setState(5112);
				name_list();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5113);
				match(ALL);
				setState(5114);
				match(PROCEDURES);
				setState(5115);
				match(IN_P);
				setState(5116);
				match(SCHEMA);
				setState(5117);
				name_list();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5118);
				match(ALL);
				setState(5119);
				match(ROUTINES);
				setState(5120);
				match(IN_P);
				setState(5121);
				match(SCHEMA);
				setState(5122);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_listContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grantee_listContext grantee_list() throws RecognitionException {
		Grantee_listContext _localctx = new Grantee_listContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_grantee_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5125);
			grantee();
			setState(5130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5126);
				match(COMMA);
				setState(5127);
				grantee();
				}
				}
				setState(5132);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_grantee);
		try {
			setState(5136);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5133);
				rolespec();
				}
				break;
			case GROUP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5134);
				match(GROUP_P);
				setState(5135);
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_grant_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_grant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_grant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_grant_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_grant_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_grant_optionContext opt_grant_grant_option() throws RecognitionException {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_opt_grant_grant_option);
		try {
			setState(5142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5138);
				match(WITH);
				setState(5139);
				match(GRANT);
				setState(5140);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantrolestmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return getRuleContext(Opt_grant_admin_optionContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantrolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrantrolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrantrolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrantrolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantrolestmtContext grantrolestmt() throws RecognitionException {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_grantrolestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5144);
			match(GRANT);
			setState(5145);
			privilege_list();
			setState(5146);
			match(TO);
			setState(5147);
			role_list();
			setState(5148);
			opt_grant_admin_option();
			setState(5149);
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokerolestmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public Privilege_listContext privilege_list() {
			return getRuleContext(Privilege_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Opt_granted_byContext opt_granted_by() {
			return getRuleContext(Opt_granted_byContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokerolestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevokerolestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevokerolestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevokerolestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokerolestmtContext revokerolestmt() throws RecognitionException {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_revokerolestmt);
		try {
			setState(5168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5151);
				match(REVOKE);
				setState(5152);
				privilege_list();
				setState(5153);
				match(FROM);
				setState(5154);
				role_list();
				setState(5155);
				opt_granted_by();
				setState(5156);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5158);
				match(REVOKE);
				setState(5159);
				match(ADMIN);
				setState(5160);
				match(OPTION);
				setState(5161);
				match(FOR);
				setState(5162);
				privilege_list();
				setState(5163);
				match(FROM);
				setState(5164);
				role_list();
				setState(5165);
				opt_granted_by();
				setState(5166);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_grant_admin_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_grant_admin_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_grant_admin_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_grant_admin_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_grant_admin_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_grant_admin_optionContext opt_grant_admin_option() throws RecognitionException {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_opt_grant_admin_option);
		try {
			setState(5174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5170);
				match(WITH);
				setState(5171);
				match(ADMIN);
				setState(5172);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_granted_byContext extends ParserRuleContext {
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_granted_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_granted_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_granted_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_granted_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_granted_byContext opt_granted_by() throws RecognitionException {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_opt_granted_by);
		try {
			setState(5180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5176);
				match(GRANTED);
				setState(5177);
				match(BY);
				setState(5178);
				rolespec();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdefaultprivilegesstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public DefacloptionlistContext defacloptionlist() {
			return getRuleContext(DefacloptionlistContext.class,0);
		}
		public DefaclactionContext defaclaction() {
			return getRuleContext(DefaclactionContext.class,0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdefaultprivilegesstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdefaultprivilegesstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdefaultprivilegesstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdefaultprivilegesstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() throws RecognitionException {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_alterdefaultprivilegesstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5182);
			match(ALTER);
			setState(5183);
			match(DEFAULT);
			setState(5184);
			match(PRIVILEGES);
			setState(5185);
			defacloptionlist();
			setState(5186);
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefacloptionlistContext extends ParserRuleContext {
		public List<DefacloptionContext> defacloption() {
			return getRuleContexts(DefacloptionContext.class);
		}
		public DefacloptionContext defacloption(int i) {
			return getRuleContext(DefacloptionContext.class,i);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloptionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloptionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloptionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloptionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionlistContext defacloptionlist() throws RecognitionException {
		DefacloptionlistContext _localctx = new DefacloptionlistContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_defacloptionlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==IN_P) {
				{
				{
				setState(5188);
				defacloption();
				}
				}
				setState(5193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefacloptionContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacloption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacloption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacloption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacloption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefacloptionContext defacloption() throws RecognitionException {
		DefacloptionContext _localctx = new DefacloptionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_defacloption);
		try {
			setState(5203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5194);
				match(IN_P);
				setState(5195);
				match(SCHEMA);
				setState(5196);
				name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5197);
				match(FOR);
				setState(5198);
				match(ROLE);
				setState(5199);
				role_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5200);
				match(FOR);
				setState(5201);
				match(USER);
				setState(5202);
				role_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaclactionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Defacl_privilege_targetContext defacl_privilege_target() {
			return getRuleContext(Defacl_privilege_targetContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Grantee_listContext grantee_list() {
			return getRuleContext(Grantee_listContext.class,0);
		}
		public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return getRuleContext(Opt_grant_grant_optionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefaclaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefaclaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefaclaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclactionContext defaclaction() throws RecognitionException {
		DefaclactionContext _localctx = new DefaclactionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_defaclaction);
		try {
			setState(5232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5205);
				match(GRANT);
				setState(5206);
				privileges();
				setState(5207);
				match(ON);
				setState(5208);
				defacl_privilege_target();
				setState(5209);
				match(TO);
				setState(5210);
				grantee_list();
				setState(5211);
				opt_grant_grant_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5213);
				match(REVOKE);
				setState(5214);
				privileges();
				setState(5215);
				match(ON);
				setState(5216);
				defacl_privilege_target();
				setState(5217);
				match(FROM);
				setState(5218);
				grantee_list();
				setState(5219);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5221);
				match(REVOKE);
				setState(5222);
				match(GRANT);
				setState(5223);
				match(OPTION);
				setState(5224);
				match(FOR);
				setState(5225);
				privileges();
				setState(5226);
				match(ON);
				setState(5227);
				defacl_privilege_target();
				setState(5228);
				match(FROM);
				setState(5229);
				grantee_list();
				setState(5230);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Defacl_privilege_targetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defacl_privilege_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDefacl_privilege_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDefacl_privilege_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDefacl_privilege_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Defacl_privilege_targetContext defacl_privilege_target() throws RecognitionException {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_defacl_privilege_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5234);
			_la = _input.LA(1);
			if ( !(_la==FUNCTIONS || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (SEQUENCES - 322)) | (1L << (TABLES - 322)) | (1L << (TYPES_P - 322)))) != 0) || _la==ROUTINES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_uniqueContext opt_unique() {
			return getRuleContext(Opt_uniqueContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Opt_index_nameContext opt_index_name() {
			return getRuleContext(Opt_index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Access_method_clauseContext access_method_clause() {
			return getRuleContext(Access_method_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext opt_include() {
			return getRuleContext(Opt_includeContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public OpttablespaceContext opttablespace() {
			return getRuleContext(OpttablespaceContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexstmtContext indexstmt() throws RecognitionException {
		IndexstmtContext _localctx = new IndexstmtContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_indexstmt);
		try {
			setState(5271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5236);
				match(CREATE);
				setState(5237);
				opt_unique();
				setState(5238);
				match(INDEX);
				setState(5239);
				opt_concurrently();
				setState(5240);
				opt_index_name();
				setState(5241);
				match(ON);
				setState(5242);
				relation_expr();
				setState(5243);
				access_method_clause();
				setState(5244);
				match(OPEN_PAREN);
				setState(5245);
				index_params();
				setState(5246);
				match(CLOSE_PAREN);
				setState(5247);
				opt_include();
				setState(5248);
				opt_reloptions();
				setState(5249);
				opttablespace();
				setState(5250);
				where_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5252);
				match(CREATE);
				setState(5253);
				opt_unique();
				setState(5254);
				match(INDEX);
				setState(5255);
				opt_concurrently();
				setState(5256);
				match(IF_P);
				setState(5257);
				match(NOT);
				setState(5258);
				match(EXISTS);
				setState(5259);
				name();
				setState(5260);
				match(ON);
				setState(5261);
				relation_expr();
				setState(5262);
				access_method_clause();
				setState(5263);
				match(OPEN_PAREN);
				setState(5264);
				index_params();
				setState(5265);
				match(CLOSE_PAREN);
				setState(5266);
				opt_include();
				setState(5267);
				opt_reloptions();
				setState(5268);
				opttablespace();
				setState(5269);
				where_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uniqueContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_unique; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_unique(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_unique(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_unique(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uniqueContext opt_unique() throws RecognitionException {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_opt_unique);
		try {
			setState(5275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5273);
				match(UNIQUE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_concurrentlyContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_concurrently; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_concurrently(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_concurrently(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_concurrently(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_concurrentlyContext opt_concurrently() throws RecognitionException {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_opt_concurrently);
		try {
			setState(5279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCURRENTLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5277);
				match(CONCURRENTLY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case ON:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_index_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_index_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_index_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_index_nameContext opt_index_name() throws RecognitionException {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_opt_index_name);
		try {
			setState(5283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5281);
				name();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_method_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_method_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAccess_method_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAccess_method_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAccess_method_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_method_clauseContext access_method_clause() throws RecognitionException {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_access_method_clause);
		try {
			setState(5288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5285);
				match(USING);
				setState(5286);
				name();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_paramsContext index_params() throws RecognitionException {
		Index_paramsContext _localctx = new Index_paramsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_index_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5290);
			index_elem();
			setState(5295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5291);
				match(COMMA);
				setState(5292);
				index_elem();
				}
				}
				setState(5297);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_elem_optionsContext extends ParserRuleContext {
		public Opt_collateContext opt_collate() {
			return getRuleContext(Opt_collateContext.class,0);
		}
		public Opt_classContext opt_class() {
			return getRuleContext(Opt_classContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elem_optionsContext index_elem_options() throws RecognitionException {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_index_elem_options);
		try {
			setState(5309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5298);
				opt_collate();
				setState(5299);
				opt_class();
				setState(5300);
				opt_asc_desc();
				setState(5301);
				opt_nulls_order();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5303);
				opt_collate();
				setState(5304);
				any_name();
				setState(5305);
				reloptions();
				setState(5306);
				opt_asc_desc();
				setState(5307);
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_elemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Index_elem_optionsContext index_elem_options() {
			return getRuleContext(Index_elem_optionsContext.class,0);
		}
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_elemContext index_elem() throws RecognitionException {
		Index_elemContext _localctx = new Index_elemContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_index_elem);
		try {
			setState(5322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5311);
				colid();
				setState(5312);
				index_elem_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5314);
				func_expr_windowless();
				setState(5315);
				index_elem_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5317);
				match(OPEN_PAREN);
				setState(5318);
				a_expr();
				setState(5319);
				match(CLOSE_PAREN);
				setState(5320);
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_including_paramsContext index_including_params() {
			return getRuleContext(Index_including_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_includeContext opt_include() throws RecognitionException {
		Opt_includeContext _localctx = new Opt_includeContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_opt_include);
		try {
			setState(5330);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5324);
				match(INCLUDE);
				setState(5325);
				match(OPEN_PAREN);
				setState(5326);
				index_including_params();
				setState(5327);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_including_paramsContext extends ParserRuleContext {
		public List<Index_elemContext> index_elem() {
			return getRuleContexts(Index_elemContext.class);
		}
		public Index_elemContext index_elem(int i) {
			return getRuleContext(Index_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_including_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_including_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_including_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_including_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_including_paramsContext index_including_params() throws RecognitionException {
		Index_including_paramsContext _localctx = new Index_including_paramsContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_index_including_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5332);
			index_elem();
			setState(5337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5333);
				match(COMMA);
				setState(5334);
				index_elem();
				}
				}
				setState(5339);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_collateContext opt_collate() throws RecognitionException {
		Opt_collateContext _localctx = new Opt_collateContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_opt_collate);
		try {
			setState(5343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5340);
				match(COLLATE);
				setState(5341);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_classContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_classContext opt_class() throws RecognitionException {
		Opt_classContext _localctx = new Opt_classContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_opt_class);
		try {
			setState(5347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5345);
				any_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_asc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_asc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_asc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asc_descContext opt_asc_desc() throws RecognitionException {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_opt_asc_desc);
		try {
			setState(5352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC:
				enterOuterAlt(_localctx, 1);
				{
				setState(5349);
				match(ASC);
				}
				break;
			case DESC:
				enterOuterAlt(_localctx, 2);
				{
				setState(5350);
				match(DESC);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nulls_orderContext extends ParserRuleContext {
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nulls_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nulls_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nulls_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nulls_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nulls_orderContext opt_nulls_order() throws RecognitionException {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_opt_nulls_order);
		try {
			setState(5359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5354);
				match(NULLS_P);
				setState(5355);
				match(FIRST_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5356);
				match(NULLS_P);
				setState(5357);
				match(LAST_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefunctionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_args_with_defaultsContext func_args_with_defaults() {
			return getRuleContext(Func_args_with_defaultsContext.class,0);
		}
		public Createfunc_opt_listContext createfunc_opt_list() {
			return getRuleContext(Createfunc_opt_listContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Table_func_column_listContext table_func_column_list() {
			return getRuleContext(Table_func_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefunctionstmtContext createfunctionstmt() throws RecognitionException {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_createfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5361);
			match(CREATE);
			setState(5362);
			opt_or_replace();
			setState(5363);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5364);
			func_name();
			setState(5365);
			func_args_with_defaults();
			setState(5375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(5366);
				match(RETURNS);
				setState(5373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					setState(5367);
					func_return();
					}
					break;
				case 2:
					{
					setState(5368);
					match(TABLE);
					setState(5369);
					match(OPEN_PAREN);
					setState(5370);
					table_func_column_list();
					setState(5371);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			setState(5377);
			createfunc_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_or_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_or_replace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_or_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_or_replaceContext opt_or_replace() throws RecognitionException {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_opt_or_replace);
		try {
			setState(5382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5379);
				match(OR);
				setState(5380);
				match(REPLACE);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case PROCEDURE:
			case RULE:
			case TRUSTED:
			case TRANSFORM:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_listContext func_args_list() {
			return getRuleContext(Func_args_listContext.class,0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argsContext func_args() throws RecognitionException {
		Func_argsContext _localctx = new Func_argsContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_func_args);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5384);
			match(OPEN_PAREN);
			setState(5386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (AND - 33)) | (1L << (ARRAY - 33)) | (1L << (COLLATE - 33)) | (1L << (COLUMN - 33)) | (1L << (CONSTRAINT - 33)) | (1L << (DEFAULT - 33)) | (1L << (DO - 33)) | (1L << (FETCH - 33)) | (1L << (IN_P - 33)) | (1L << (TABLE - 33)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (VARIADIC - 101)) | (1L << (AUTHORIZATION - 101)) | (1L << (BINARY - 101)) | (1L << (COLLATION - 101)) | (1L << (CONCURRENTLY - 101)) | (1L << (CROSS - 101)) | (1L << (CURRENT_SCHEMA - 101)) | (1L << (FREEZE - 101)) | (1L << (FULL - 101)) | (1L << (ILIKE - 101)) | (1L << (INNER_P - 101)) | (1L << (IS - 101)) | (1L << (ISNULL - 101)) | (1L << (JOIN - 101)) | (1L << (LEFT - 101)) | (1L << (LIKE - 101)) | (1L << (NATURAL - 101)) | (1L << (NOTNULL - 101)) | (1L << (OUTER_P - 101)) | (1L << (OVER - 101)) | (1L << (OVERLAPS - 101)) | (1L << (RIGHT - 101)) | (1L << (SIMILAR - 101)) | (1L << (VERBOSE - 101)) | (1L << (ABORT_P - 101)) | (1L << (ABSOLUTE_P - 101)) | (1L << (ACCESS - 101)) | (1L << (ACTION - 101)) | (1L << (ADD_P - 101)) | (1L << (ADMIN - 101)) | (1L << (AFTER - 101)) | (1L << (AGGREGATE - 101)) | (1L << (ALSO - 101)) | (1L << (ALTER - 101)) | (1L << (ALWAYS - 101)) | (1L << (ASSERTION - 101)) | (1L << (ASSIGNMENT - 101)) | (1L << (AT - 101)) | (1L << (ATTRIBUTE - 101)) | (1L << (BACKWARD - 101)) | (1L << (BEFORE - 101)) | (1L << (BEGIN_P - 101)) | (1L << (BY - 101)) | (1L << (CACHE - 101)) | (1L << (CALLED - 101)) | (1L << (CASCADE - 101)) | (1L << (CASCADED - 101)) | (1L << (CATALOG - 101)) | (1L << (CHAIN - 101)) | (1L << (CHARACTERISTICS - 101)) | (1L << (CHECKPOINT - 101)) | (1L << (CLASS - 101)) | (1L << (CLOSE - 101)) | (1L << (CLUSTER - 101)) | (1L << (COMMENT - 101)) | (1L << (COMMENTS - 101)) | (1L << (COMMIT - 101)) | (1L << (COMMITTED - 101)) | (1L << (CONFIGURATION - 101)) | (1L << (CONNECTION - 101)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (CONSTRAINTS - 165)) | (1L << (CONTENT_P - 165)) | (1L << (CONTINUE_P - 165)) | (1L << (CONVERSION_P - 165)) | (1L << (COPY - 165)) | (1L << (COST - 165)) | (1L << (CSV - 165)) | (1L << (CURSOR - 165)) | (1L << (CYCLE - 165)) | (1L << (DATA_P - 165)) | (1L << (DATABASE - 165)) | (1L << (DAY_P - 165)) | (1L << (DEALLOCATE - 165)) | (1L << (DECLARE - 165)) | (1L << (DEFAULTS - 165)) | (1L << (DEFERRED - 165)) | (1L << (DEFINER - 165)) | (1L << (DELETE_P - 165)) | (1L << (DELIMITER - 165)) | (1L << (DELIMITERS - 165)) | (1L << (DICTIONARY - 165)) | (1L << (DISABLE_P - 165)) | (1L << (DISCARD - 165)) | (1L << (DOCUMENT_P - 165)) | (1L << (DOMAIN_P - 165)) | (1L << (DOUBLE_P - 165)) | (1L << (DROP - 165)) | (1L << (EACH - 165)) | (1L << (ENABLE_P - 165)) | (1L << (ENCODING - 165)) | (1L << (ENCRYPTED - 165)) | (1L << (ENUM_P - 165)) | (1L << (ESCAPE - 165)) | (1L << (EVENT - 165)) | (1L << (EXCLUDE - 165)) | (1L << (EXCLUDING - 165)) | (1L << (EXCLUSIVE - 165)) | (1L << (EXECUTE - 165)) | (1L << (EXPLAIN - 165)) | (1L << (EXTENSION - 165)) | (1L << (EXTERNAL - 165)) | (1L << (FAMILY - 165)) | (1L << (FIRST_P - 165)) | (1L << (FOLLOWING - 165)) | (1L << (FORCE - 165)) | (1L << (FORWARD - 165)) | (1L << (FUNCTION - 165)) | (1L << (FUNCTIONS - 165)) | (1L << (GLOBAL - 165)) | (1L << (GRANTED - 165)) | (1L << (HANDLER - 165)) | (1L << (HEADER_P - 165)) | (1L << (HOLD - 165)) | (1L << (HOUR_P - 165)) | (1L << (IDENTITY_P - 165)) | (1L << (IF_P - 165)) | (1L << (IMMEDIATE - 165)) | (1L << (IMMUTABLE - 165)) | (1L << (IMPLICIT_P - 165)) | (1L << (INCLUDING - 165)) | (1L << (INCREMENT - 165)) | (1L << (INDEX - 165)) | (1L << (INDEXES - 165)) | (1L << (INHERIT - 165)))) != 0) || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & ((1L << (INHERITS - 229)) | (1L << (INLINE_P - 229)) | (1L << (INSENSITIVE - 229)) | (1L << (INSERT - 229)) | (1L << (INSTEAD - 229)) | (1L << (INVOKER - 229)) | (1L << (ISOLATION - 229)) | (1L << (KEY - 229)) | (1L << (LABEL - 229)) | (1L << (LANGUAGE - 229)) | (1L << (LARGE_P - 229)) | (1L << (LAST_P - 229)) | (1L << (LEAKPROOF - 229)) | (1L << (LEVEL - 229)) | (1L << (LISTEN - 229)) | (1L << (LOAD - 229)) | (1L << (LOCAL - 229)) | (1L << (LOCATION - 229)) | (1L << (LOCK_P - 229)) | (1L << (MAPPING - 229)) | (1L << (MATCH - 229)) | (1L << (MATERIALIZED - 229)) | (1L << (MAXVALUE - 229)) | (1L << (MINUTE_P - 229)) | (1L << (MINVALUE - 229)) | (1L << (MODE - 229)) | (1L << (MONTH_P - 229)) | (1L << (MOVE - 229)) | (1L << (NAME_P - 229)) | (1L << (NAMES - 229)) | (1L << (NEXT - 229)) | (1L << (NO - 229)) | (1L << (NOTHING - 229)) | (1L << (NOTIFY - 229)) | (1L << (NOWAIT - 229)) | (1L << (NULLS_P - 229)) | (1L << (OBJECT_P - 229)) | (1L << (OF - 229)) | (1L << (OFF - 229)) | (1L << (OIDS - 229)) | (1L << (OPERATOR - 229)) | (1L << (OPTION - 229)) | (1L << (OPTIONS - 229)) | (1L << (OWNED - 229)) | (1L << (OWNER - 229)) | (1L << (PARSER - 229)) | (1L << (PARTIAL - 229)) | (1L << (PARTITION - 229)) | (1L << (PASSING - 229)) | (1L << (PASSWORD - 229)) | (1L << (PLANS - 229)) | (1L << (PRECEDING - 229)) | (1L << (PREPARE - 229)) | (1L << (PREPARED - 229)) | (1L << (PRESERVE - 229)) | (1L << (PRIOR - 229)) | (1L << (PRIVILEGES - 229)) | (1L << (PROCEDURAL - 229)) | (1L << (PROCEDURE - 229)) | (1L << (PROGRAM - 229)) | (1L << (QUOTE - 229)) | (1L << (RANGE - 229)))) != 0) || ((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (READ - 293)) | (1L << (REASSIGN - 293)) | (1L << (RECHECK - 293)) | (1L << (RECURSIVE - 293)) | (1L << (REF - 293)) | (1L << (REFRESH - 293)) | (1L << (REINDEX - 293)) | (1L << (RELATIVE_P - 293)) | (1L << (RELEASE - 293)) | (1L << (RENAME - 293)) | (1L << (REPEATABLE - 293)) | (1L << (REPLACE - 293)) | (1L << (REPLICA - 293)) | (1L << (RESET - 293)) | (1L << (RESTART - 293)) | (1L << (RESTRICT - 293)) | (1L << (RETURNS - 293)) | (1L << (REVOKE - 293)) | (1L << (ROLE - 293)) | (1L << (ROLLBACK - 293)) | (1L << (ROWS - 293)) | (1L << (RULE - 293)) | (1L << (SAVEPOINT - 293)) | (1L << (SCHEMA - 293)) | (1L << (SCROLL - 293)) | (1L << (SEARCH - 293)) | (1L << (SECOND_P - 293)) | (1L << (SECURITY - 293)) | (1L << (SEQUENCE - 293)) | (1L << (SEQUENCES - 293)) | (1L << (SERIALIZABLE - 293)) | (1L << (SERVER - 293)) | (1L << (SESSION - 293)) | (1L << (SET - 293)) | (1L << (SHARE - 293)) | (1L << (SHOW - 293)) | (1L << (SIMPLE - 293)) | (1L << (SNAPSHOT - 293)) | (1L << (STABLE - 293)) | (1L << (STANDALONE_P - 293)) | (1L << (START - 293)) | (1L << (STATEMENT - 293)) | (1L << (STATISTICS - 293)) | (1L << (STDIN - 293)) | (1L << (STDOUT - 293)) | (1L << (STORAGE - 293)) | (1L << (STRICT_P - 293)) | (1L << (STRIP_P - 293)) | (1L << (SYSID - 293)) | (1L << (SYSTEM_P - 293)) | (1L << (TABLES - 293)) | (1L << (TABLESPACE - 293)) | (1L << (TEMP - 293)) | (1L << (TEMPLATE - 293)) | (1L << (TEMPORARY - 293)) | (1L << (TEXT_P - 293)) | (1L << (TRANSACTION - 293)) | (1L << (TRIGGER - 293)) | (1L << (TRUNCATE - 293)) | (1L << (TRUSTED - 293)) | (1L << (TYPE_P - 293)) | (1L << (TYPES_P - 293)) | (1L << (UNBOUNDED - 293)) | (1L << (UNCOMMITTED - 293)))) != 0) || ((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & ((1L << (UNENCRYPTED - 357)) | (1L << (UNKNOWN - 357)) | (1L << (UNLISTEN - 357)) | (1L << (UNLOGGED - 357)) | (1L << (UNTIL - 357)) | (1L << (UPDATE - 357)) | (1L << (VACUUM - 357)) | (1L << (VALID - 357)) | (1L << (VALIDATE - 357)) | (1L << (VALIDATOR - 357)) | (1L << (VARYING - 357)) | (1L << (VERSION_P - 357)) | (1L << (VIEW - 357)) | (1L << (VOLATILE - 357)) | (1L << (WHITESPACE_P - 357)) | (1L << (WITHOUT - 357)) | (1L << (WORK - 357)) | (1L << (WRAPPER - 357)) | (1L << (WRITE - 357)) | (1L << (XML_P - 357)) | (1L << (YEAR_P - 357)) | (1L << (YES_P - 357)) | (1L << (ZONE - 357)) | (1L << (BETWEEN - 357)) | (1L << (BIGINT - 357)) | (1L << (BIT - 357)) | (1L << (BOOLEAN_P - 357)) | (1L << (CHAR_P - 357)) | (1L << (CHARACTER - 357)) | (1L << (COALESCE - 357)) | (1L << (DEC - 357)) | (1L << (DECIMAL_P - 357)) | (1L << (EXISTS - 357)) | (1L << (EXTRACT - 357)) | (1L << (FLOAT_P - 357)) | (1L << (GREATEST - 357)) | (1L << (INOUT - 357)) | (1L << (INT_P - 357)) | (1L << (INTEGER - 357)) | (1L << (INTERVAL - 357)) | (1L << (LEAST - 357)) | (1L << (NATIONAL - 357)) | (1L << (NCHAR - 357)) | (1L << (NONE - 357)) | (1L << (NULLIF - 357)) | (1L << (NUMERIC - 357)) | (1L << (OVERLAY - 357)) | (1L << (POSITION - 357)) | (1L << (PRECISION - 357)) | (1L << (REAL - 357)) | (1L << (ROW - 357)) | (1L << (SETOF - 357)) | (1L << (SMALLINT - 357)) | (1L << (SUBSTRING - 357)) | (1L << (TIME - 357)) | (1L << (TIMESTAMP - 357)) | (1L << (TREAT - 357)) | (1L << (TRIM - 357)) | (1L << (VALUES - 357)) | (1L << (VARCHAR - 357)) | (1L << (XMLATTRIBUTES - 357)) | (1L << (XMLCOMMENT - 357)) | (1L << (XMLAGG - 357)) | (1L << (XML_IS_WELL_FORMED - 357)))) != 0) || ((((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & ((1L << (XML_IS_WELL_FORMED_DOCUMENT - 421)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 421)) | (1L << (XPATH - 421)) | (1L << (XPATH_EXISTS - 421)) | (1L << (XMLCONCAT - 421)) | (1L << (XMLELEMENT - 421)) | (1L << (XMLEXISTS - 421)) | (1L << (XMLFOREST - 421)) | (1L << (XMLPARSE - 421)) | (1L << (XMLPI - 421)) | (1L << (XMLROOT - 421)) | (1L << (XMLSERIALIZE - 421)) | (1L << (CALL - 421)) | (1L << (CURRENT_P - 421)) | (1L << (ATTACH - 421)) | (1L << (DETACH - 421)) | (1L << (EXPRESSION - 421)) | (1L << (GENERATED - 421)) | (1L << (LOGGED - 421)) | (1L << (STORED - 421)) | (1L << (INCLUDE - 421)) | (1L << (ROUTINE - 421)) | (1L << (TRANSFORM - 421)) | (1L << (IMPORT_P - 421)) | (1L << (POLICY - 421)) | (1L << (METHOD - 421)) | (1L << (REFERENCING - 421)) | (1L << (NEW - 421)) | (1L << (OLD - 421)) | (1L << (VALUE_P - 421)) | (1L << (SUBSCRIPTION - 421)) | (1L << (PUBLICATION - 421)) | (1L << (OUT_P - 421)) | (1L << (ROUTINES - 421)) | (1L << (SCHEMAS - 421)) | (1L << (PROCEDURES - 421)) | (1L << (INPUT_P - 421)) | (1L << (SUPPORT - 421)) | (1L << (PARALLEL - 421)) | (1L << (SQL_P - 421)) | (1L << (DEPENDS - 421)) | (1L << (OVERRIDING - 421)) | (1L << (CONFLICT - 421)) | (1L << (SKIP_P - 421)) | (1L << (LOCKED - 421)) | (1L << (TIES - 421)) | (1L << (ROLLUP - 421)) | (1L << (CUBE - 421)) | (1L << (GROUPING - 421)) | (1L << (SETS - 421)) | (1L << (TABLESAMPLE - 421)) | (1L << (ORDINALITY - 421)) | (1L << (XMLTABLE - 421)) | (1L << (COLUMNS - 421)) | (1L << (XMLNAMESPACES - 421)) | (1L << (ROWTYPE - 421)) | (1L << (NORMALIZED - 421)) | (1L << (WITHIN - 421)) | (1L << (FILTER - 421)) | (1L << (GROUPS - 421)) | (1L << (OTHERS - 421)) | (1L << (NFC - 421)) | (1L << (NFD - 421)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (NFKC - 485)) | (1L << (NFKD - 485)) | (1L << (UESCAPE - 485)) | (1L << (VIEWS - 485)) | (1L << (NORMALIZE - 485)) | (1L << (DUMP - 485)) | (1L << (PRINT_STRICT_PARAMS - 485)) | (1L << (VARIABLE_CONFLICT - 485)) | (1L << (ERROR - 485)) | (1L << (USE_VARIABLE - 485)) | (1L << (USE_COLUMN - 485)) | (1L << (ALIAS - 485)) | (1L << (CONSTANT - 485)) | (1L << (PERFORM - 485)) | (1L << (GET - 485)) | (1L << (DIAGNOSTICS - 485)) | (1L << (STACKED - 485)) | (1L << (ELSIF - 485)) | (1L << (REVERSE - 485)) | (1L << (SLICE - 485)) | (1L << (EXIT - 485)) | (1L << (RETURN - 485)) | (1L << (QUERY - 485)) | (1L << (RAISE - 485)) | (1L << (SQLSTATE - 485)) | (1L << (DEBUG - 485)) | (1L << (LOG - 485)) | (1L << (INFO - 485)) | (1L << (NOTICE - 485)) | (1L << (WARNING - 485)) | (1L << (EXCEPTION - 485)) | (1L << (ASSERT - 485)) | (1L << (OPEN - 485)) | (1L << (ABS - 485)) | (1L << (CBRT - 485)) | (1L << (CEIL - 485)) | (1L << (CEILING - 485)) | (1L << (DEGREES - 485)) | (1L << (DIV - 485)) | (1L << (EXP - 485)) | (1L << (FACTORIAL - 485)) | (1L << (FLOOR - 485)) | (1L << (GCD - 485)) | (1L << (LCM - 485)) | (1L << (LN - 485)) | (1L << (LOG10 - 485)) | (1L << (MIN_SCALE - 485)) | (1L << (MOD - 485)) | (1L << (PI - 485)) | (1L << (POWER - 485)) | (1L << (RADIANS - 485)) | (1L << (ROUND - 485)) | (1L << (SCALE - 485)) | (1L << (SIGN - 485)) | (1L << (SQRT - 485)) | (1L << (TRIM_SCALE - 485)) | (1L << (TRUNC - 485)) | (1L << (WIDTH_BUCKET - 485)) | (1L << (RANDOM - 485)) | (1L << (SETSEED - 485)) | (1L << (ACOS - 485)))) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (ACOSD - 549)) | (1L << (ASIN - 549)) | (1L << (ASIND - 549)) | (1L << (ATAN - 549)) | (1L << (ATAND - 549)) | (1L << (ATAN2 - 549)) | (1L << (ATAN2D - 549)) | (1L << (COS - 549)) | (1L << (COSD - 549)) | (1L << (COT - 549)) | (1L << (COTD - 549)) | (1L << (SIN - 549)) | (1L << (SIND - 549)) | (1L << (TAN - 549)) | (1L << (TAND - 549)) | (1L << (SINH - 549)) | (1L << (COSH - 549)) | (1L << (TANH - 549)) | (1L << (ASINH - 549)) | (1L << (ACOSH - 549)) | (1L << (ATANH - 549)) | (1L << (BIT_LENGTH - 549)) | (1L << (CHAR_LENGTH - 549)) | (1L << (CHARACTER_LENGTH - 549)) | (1L << (LOWER - 549)) | (1L << (OCTET_LENGTH - 549)) | (1L << (UPPER - 549)) | (1L << (ASCII - 549)) | (1L << (BTRIM - 549)) | (1L << (CHR - 549)) | (1L << (CONCAT - 549)) | (1L << (CONCAT_WS - 549)) | (1L << (FORMAT - 549)) | (1L << (INITCAP - 549)) | (1L << (LENGTH - 549)) | (1L << (LPAD - 549)) | (1L << (LTRIM - 549)) | (1L << (MD5 - 549)) | (1L << (PARSE_IDENT - 549)) | (1L << (PG_CLIENT_ENCODING - 549)) | (1L << (QUOTE_IDENT - 549)) | (1L << (QUOTE_LITERAL - 549)) | (1L << (QUOTE_NULLABLE - 549)) | (1L << (REGEXP_COUNT - 549)) | (1L << (REGEXP_INSTR - 549)) | (1L << (REGEXP_LIKE - 549)) | (1L << (REGEXP_MATCH - 549)) | (1L << (REGEXP_MATCHES - 549)) | (1L << (REGEXP_REPLACE - 549)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 549)) | (1L << (REGEXP_SPLIT_TO_TABLE - 549)) | (1L << (REGEXP_SUBSTR - 549)) | (1L << (REPEAT - 549)) | (1L << (RPAD - 549)) | (1L << (RTRIM - 549)) | (1L << (SPLIT_PART - 549)) | (1L << (STARTS_WITH - 549)) | (1L << (STRING_TO_ARRAY - 549)) | (1L << (STRING_TO_TABLE - 549)) | (1L << (STRPOS - 549)) | (1L << (SUBSTR - 549)) | (1L << (TO_ASCII - 549)) | (1L << (TO_HEX - 549)) | (1L << (TRANSLATE - 549)))) != 0) || ((((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & ((1L << (UNISTR - 613)) | (1L << (AGE - 613)) | (1L << (CLOCK_TIMESTAMP - 613)) | (1L << (DATE_BIN - 613)) | (1L << (DATE_PART - 613)) | (1L << (DATE_TRUNC - 613)) | (1L << (ISFINITE - 613)) | (1L << (JUSTIFY_DAYS - 613)) | (1L << (JUSTIFY_HOURS - 613)) | (1L << (JUSTIFY_INTERVAL - 613)) | (1L << (MAKE_DATE - 613)) | (1L << (MAKE_INTERVAL - 613)) | (1L << (MAKE_TIME - 613)) | (1L << (MAKE_TIMESTAMP - 613)) | (1L << (MAKE_TIMESTAMPTZ - 613)) | (1L << (NOW - 613)) | (1L << (STATEMENT_TIMESTAMP - 613)) | (1L << (TIMEOFDAY - 613)) | (1L << (TRANSACTION_TIMESTAMP - 613)) | (1L << (TO_TIMESTAMP - 613)) | (1L << (TO_CHAR - 613)) | (1L << (TO_DATE - 613)) | (1L << (TO_NUMBER - 613)) | (1L << (Identifier - 613)) | (1L << (QuotedIdentifier - 613)) | (1L << (UnicodeQuotedIdentifier - 613)) | (1L << (PLSQLVARIABLENAME - 613)) | (1L << (PLSQLIDENTIFIER - 613)))) != 0)) {
				{
				setState(5385);
				func_args_list();
				}
			}

			setState(5388);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_listContext extends ParserRuleContext {
		public List<Func_argContext> func_arg() {
			return getRuleContexts(Func_argContext.class);
		}
		public Func_argContext func_arg(int i) {
			return getRuleContext(Func_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_listContext func_args_list() throws RecognitionException {
		Func_args_listContext _localctx = new Func_args_listContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_func_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5390);
			func_arg();
			setState(5395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5391);
				match(COMMA);
				setState(5392);
				func_arg();
				}
				}
				setState(5397);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypes_listContext extends ParserRuleContext {
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypes_listContext function_with_argtypes_list() throws RecognitionException {
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_function_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5398);
			function_with_argtypes();
			setState(5403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5399);
				match(COMMA);
				setState(5400);
				function_with_argtypes();
				}
				}
				setState(5405);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Func_argsContext func_args() {
			return getRuleContext(Func_argsContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunction_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunction_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunction_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_with_argtypesContext function_with_argtypes() throws RecognitionException {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_function_with_argtypes);
		int _la;
		try {
			setState(5414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5406);
				func_name();
				setState(5407);
				func_args();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5409);
				type_func_name_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5410);
				colid();
				setState(5412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_BRACKET || _la==DOT) {
					{
					setState(5411);
					indirection();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaultsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return getRuleContext(Func_args_with_defaults_listContext.class,0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaultsContext func_args_with_defaults() throws RecognitionException {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_func_args_with_defaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5416);
			match(OPEN_PAREN);
			setState(5418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (AND - 33)) | (1L << (ARRAY - 33)) | (1L << (COLLATE - 33)) | (1L << (COLUMN - 33)) | (1L << (CONSTRAINT - 33)) | (1L << (DEFAULT - 33)) | (1L << (DO - 33)) | (1L << (FETCH - 33)) | (1L << (IN_P - 33)) | (1L << (TABLE - 33)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (VARIADIC - 101)) | (1L << (AUTHORIZATION - 101)) | (1L << (BINARY - 101)) | (1L << (COLLATION - 101)) | (1L << (CONCURRENTLY - 101)) | (1L << (CROSS - 101)) | (1L << (CURRENT_SCHEMA - 101)) | (1L << (FREEZE - 101)) | (1L << (FULL - 101)) | (1L << (ILIKE - 101)) | (1L << (INNER_P - 101)) | (1L << (IS - 101)) | (1L << (ISNULL - 101)) | (1L << (JOIN - 101)) | (1L << (LEFT - 101)) | (1L << (LIKE - 101)) | (1L << (NATURAL - 101)) | (1L << (NOTNULL - 101)) | (1L << (OUTER_P - 101)) | (1L << (OVER - 101)) | (1L << (OVERLAPS - 101)) | (1L << (RIGHT - 101)) | (1L << (SIMILAR - 101)) | (1L << (VERBOSE - 101)) | (1L << (ABORT_P - 101)) | (1L << (ABSOLUTE_P - 101)) | (1L << (ACCESS - 101)) | (1L << (ACTION - 101)) | (1L << (ADD_P - 101)) | (1L << (ADMIN - 101)) | (1L << (AFTER - 101)) | (1L << (AGGREGATE - 101)) | (1L << (ALSO - 101)) | (1L << (ALTER - 101)) | (1L << (ALWAYS - 101)) | (1L << (ASSERTION - 101)) | (1L << (ASSIGNMENT - 101)) | (1L << (AT - 101)) | (1L << (ATTRIBUTE - 101)) | (1L << (BACKWARD - 101)) | (1L << (BEFORE - 101)) | (1L << (BEGIN_P - 101)) | (1L << (BY - 101)) | (1L << (CACHE - 101)) | (1L << (CALLED - 101)) | (1L << (CASCADE - 101)) | (1L << (CASCADED - 101)) | (1L << (CATALOG - 101)) | (1L << (CHAIN - 101)) | (1L << (CHARACTERISTICS - 101)) | (1L << (CHECKPOINT - 101)) | (1L << (CLASS - 101)) | (1L << (CLOSE - 101)) | (1L << (CLUSTER - 101)) | (1L << (COMMENT - 101)) | (1L << (COMMENTS - 101)) | (1L << (COMMIT - 101)) | (1L << (COMMITTED - 101)) | (1L << (CONFIGURATION - 101)) | (1L << (CONNECTION - 101)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (CONSTRAINTS - 165)) | (1L << (CONTENT_P - 165)) | (1L << (CONTINUE_P - 165)) | (1L << (CONVERSION_P - 165)) | (1L << (COPY - 165)) | (1L << (COST - 165)) | (1L << (CSV - 165)) | (1L << (CURSOR - 165)) | (1L << (CYCLE - 165)) | (1L << (DATA_P - 165)) | (1L << (DATABASE - 165)) | (1L << (DAY_P - 165)) | (1L << (DEALLOCATE - 165)) | (1L << (DECLARE - 165)) | (1L << (DEFAULTS - 165)) | (1L << (DEFERRED - 165)) | (1L << (DEFINER - 165)) | (1L << (DELETE_P - 165)) | (1L << (DELIMITER - 165)) | (1L << (DELIMITERS - 165)) | (1L << (DICTIONARY - 165)) | (1L << (DISABLE_P - 165)) | (1L << (DISCARD - 165)) | (1L << (DOCUMENT_P - 165)) | (1L << (DOMAIN_P - 165)) | (1L << (DOUBLE_P - 165)) | (1L << (DROP - 165)) | (1L << (EACH - 165)) | (1L << (ENABLE_P - 165)) | (1L << (ENCODING - 165)) | (1L << (ENCRYPTED - 165)) | (1L << (ENUM_P - 165)) | (1L << (ESCAPE - 165)) | (1L << (EVENT - 165)) | (1L << (EXCLUDE - 165)) | (1L << (EXCLUDING - 165)) | (1L << (EXCLUSIVE - 165)) | (1L << (EXECUTE - 165)) | (1L << (EXPLAIN - 165)) | (1L << (EXTENSION - 165)) | (1L << (EXTERNAL - 165)) | (1L << (FAMILY - 165)) | (1L << (FIRST_P - 165)) | (1L << (FOLLOWING - 165)) | (1L << (FORCE - 165)) | (1L << (FORWARD - 165)) | (1L << (FUNCTION - 165)) | (1L << (FUNCTIONS - 165)) | (1L << (GLOBAL - 165)) | (1L << (GRANTED - 165)) | (1L << (HANDLER - 165)) | (1L << (HEADER_P - 165)) | (1L << (HOLD - 165)) | (1L << (HOUR_P - 165)) | (1L << (IDENTITY_P - 165)) | (1L << (IF_P - 165)) | (1L << (IMMEDIATE - 165)) | (1L << (IMMUTABLE - 165)) | (1L << (IMPLICIT_P - 165)) | (1L << (INCLUDING - 165)) | (1L << (INCREMENT - 165)) | (1L << (INDEX - 165)) | (1L << (INDEXES - 165)) | (1L << (INHERIT - 165)))) != 0) || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & ((1L << (INHERITS - 229)) | (1L << (INLINE_P - 229)) | (1L << (INSENSITIVE - 229)) | (1L << (INSERT - 229)) | (1L << (INSTEAD - 229)) | (1L << (INVOKER - 229)) | (1L << (ISOLATION - 229)) | (1L << (KEY - 229)) | (1L << (LABEL - 229)) | (1L << (LANGUAGE - 229)) | (1L << (LARGE_P - 229)) | (1L << (LAST_P - 229)) | (1L << (LEAKPROOF - 229)) | (1L << (LEVEL - 229)) | (1L << (LISTEN - 229)) | (1L << (LOAD - 229)) | (1L << (LOCAL - 229)) | (1L << (LOCATION - 229)) | (1L << (LOCK_P - 229)) | (1L << (MAPPING - 229)) | (1L << (MATCH - 229)) | (1L << (MATERIALIZED - 229)) | (1L << (MAXVALUE - 229)) | (1L << (MINUTE_P - 229)) | (1L << (MINVALUE - 229)) | (1L << (MODE - 229)) | (1L << (MONTH_P - 229)) | (1L << (MOVE - 229)) | (1L << (NAME_P - 229)) | (1L << (NAMES - 229)) | (1L << (NEXT - 229)) | (1L << (NO - 229)) | (1L << (NOTHING - 229)) | (1L << (NOTIFY - 229)) | (1L << (NOWAIT - 229)) | (1L << (NULLS_P - 229)) | (1L << (OBJECT_P - 229)) | (1L << (OF - 229)) | (1L << (OFF - 229)) | (1L << (OIDS - 229)) | (1L << (OPERATOR - 229)) | (1L << (OPTION - 229)) | (1L << (OPTIONS - 229)) | (1L << (OWNED - 229)) | (1L << (OWNER - 229)) | (1L << (PARSER - 229)) | (1L << (PARTIAL - 229)) | (1L << (PARTITION - 229)) | (1L << (PASSING - 229)) | (1L << (PASSWORD - 229)) | (1L << (PLANS - 229)) | (1L << (PRECEDING - 229)) | (1L << (PREPARE - 229)) | (1L << (PREPARED - 229)) | (1L << (PRESERVE - 229)) | (1L << (PRIOR - 229)) | (1L << (PRIVILEGES - 229)) | (1L << (PROCEDURAL - 229)) | (1L << (PROCEDURE - 229)) | (1L << (PROGRAM - 229)) | (1L << (QUOTE - 229)) | (1L << (RANGE - 229)))) != 0) || ((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (READ - 293)) | (1L << (REASSIGN - 293)) | (1L << (RECHECK - 293)) | (1L << (RECURSIVE - 293)) | (1L << (REF - 293)) | (1L << (REFRESH - 293)) | (1L << (REINDEX - 293)) | (1L << (RELATIVE_P - 293)) | (1L << (RELEASE - 293)) | (1L << (RENAME - 293)) | (1L << (REPEATABLE - 293)) | (1L << (REPLACE - 293)) | (1L << (REPLICA - 293)) | (1L << (RESET - 293)) | (1L << (RESTART - 293)) | (1L << (RESTRICT - 293)) | (1L << (RETURNS - 293)) | (1L << (REVOKE - 293)) | (1L << (ROLE - 293)) | (1L << (ROLLBACK - 293)) | (1L << (ROWS - 293)) | (1L << (RULE - 293)) | (1L << (SAVEPOINT - 293)) | (1L << (SCHEMA - 293)) | (1L << (SCROLL - 293)) | (1L << (SEARCH - 293)) | (1L << (SECOND_P - 293)) | (1L << (SECURITY - 293)) | (1L << (SEQUENCE - 293)) | (1L << (SEQUENCES - 293)) | (1L << (SERIALIZABLE - 293)) | (1L << (SERVER - 293)) | (1L << (SESSION - 293)) | (1L << (SET - 293)) | (1L << (SHARE - 293)) | (1L << (SHOW - 293)) | (1L << (SIMPLE - 293)) | (1L << (SNAPSHOT - 293)) | (1L << (STABLE - 293)) | (1L << (STANDALONE_P - 293)) | (1L << (START - 293)) | (1L << (STATEMENT - 293)) | (1L << (STATISTICS - 293)) | (1L << (STDIN - 293)) | (1L << (STDOUT - 293)) | (1L << (STORAGE - 293)) | (1L << (STRICT_P - 293)) | (1L << (STRIP_P - 293)) | (1L << (SYSID - 293)) | (1L << (SYSTEM_P - 293)) | (1L << (TABLES - 293)) | (1L << (TABLESPACE - 293)) | (1L << (TEMP - 293)) | (1L << (TEMPLATE - 293)) | (1L << (TEMPORARY - 293)) | (1L << (TEXT_P - 293)) | (1L << (TRANSACTION - 293)) | (1L << (TRIGGER - 293)) | (1L << (TRUNCATE - 293)) | (1L << (TRUSTED - 293)) | (1L << (TYPE_P - 293)) | (1L << (TYPES_P - 293)) | (1L << (UNBOUNDED - 293)) | (1L << (UNCOMMITTED - 293)))) != 0) || ((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & ((1L << (UNENCRYPTED - 357)) | (1L << (UNKNOWN - 357)) | (1L << (UNLISTEN - 357)) | (1L << (UNLOGGED - 357)) | (1L << (UNTIL - 357)) | (1L << (UPDATE - 357)) | (1L << (VACUUM - 357)) | (1L << (VALID - 357)) | (1L << (VALIDATE - 357)) | (1L << (VALIDATOR - 357)) | (1L << (VARYING - 357)) | (1L << (VERSION_P - 357)) | (1L << (VIEW - 357)) | (1L << (VOLATILE - 357)) | (1L << (WHITESPACE_P - 357)) | (1L << (WITHOUT - 357)) | (1L << (WORK - 357)) | (1L << (WRAPPER - 357)) | (1L << (WRITE - 357)) | (1L << (XML_P - 357)) | (1L << (YEAR_P - 357)) | (1L << (YES_P - 357)) | (1L << (ZONE - 357)) | (1L << (BETWEEN - 357)) | (1L << (BIGINT - 357)) | (1L << (BIT - 357)) | (1L << (BOOLEAN_P - 357)) | (1L << (CHAR_P - 357)) | (1L << (CHARACTER - 357)) | (1L << (COALESCE - 357)) | (1L << (DEC - 357)) | (1L << (DECIMAL_P - 357)) | (1L << (EXISTS - 357)) | (1L << (EXTRACT - 357)) | (1L << (FLOAT_P - 357)) | (1L << (GREATEST - 357)) | (1L << (INOUT - 357)) | (1L << (INT_P - 357)) | (1L << (INTEGER - 357)) | (1L << (INTERVAL - 357)) | (1L << (LEAST - 357)) | (1L << (NATIONAL - 357)) | (1L << (NCHAR - 357)) | (1L << (NONE - 357)) | (1L << (NULLIF - 357)) | (1L << (NUMERIC - 357)) | (1L << (OVERLAY - 357)) | (1L << (POSITION - 357)) | (1L << (PRECISION - 357)) | (1L << (REAL - 357)) | (1L << (ROW - 357)) | (1L << (SETOF - 357)) | (1L << (SMALLINT - 357)) | (1L << (SUBSTRING - 357)) | (1L << (TIME - 357)) | (1L << (TIMESTAMP - 357)) | (1L << (TREAT - 357)) | (1L << (TRIM - 357)) | (1L << (VALUES - 357)) | (1L << (VARCHAR - 357)) | (1L << (XMLATTRIBUTES - 357)) | (1L << (XMLCOMMENT - 357)) | (1L << (XMLAGG - 357)) | (1L << (XML_IS_WELL_FORMED - 357)))) != 0) || ((((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & ((1L << (XML_IS_WELL_FORMED_DOCUMENT - 421)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 421)) | (1L << (XPATH - 421)) | (1L << (XPATH_EXISTS - 421)) | (1L << (XMLCONCAT - 421)) | (1L << (XMLELEMENT - 421)) | (1L << (XMLEXISTS - 421)) | (1L << (XMLFOREST - 421)) | (1L << (XMLPARSE - 421)) | (1L << (XMLPI - 421)) | (1L << (XMLROOT - 421)) | (1L << (XMLSERIALIZE - 421)) | (1L << (CALL - 421)) | (1L << (CURRENT_P - 421)) | (1L << (ATTACH - 421)) | (1L << (DETACH - 421)) | (1L << (EXPRESSION - 421)) | (1L << (GENERATED - 421)) | (1L << (LOGGED - 421)) | (1L << (STORED - 421)) | (1L << (INCLUDE - 421)) | (1L << (ROUTINE - 421)) | (1L << (TRANSFORM - 421)) | (1L << (IMPORT_P - 421)) | (1L << (POLICY - 421)) | (1L << (METHOD - 421)) | (1L << (REFERENCING - 421)) | (1L << (NEW - 421)) | (1L << (OLD - 421)) | (1L << (VALUE_P - 421)) | (1L << (SUBSCRIPTION - 421)) | (1L << (PUBLICATION - 421)) | (1L << (OUT_P - 421)) | (1L << (ROUTINES - 421)) | (1L << (SCHEMAS - 421)) | (1L << (PROCEDURES - 421)) | (1L << (INPUT_P - 421)) | (1L << (SUPPORT - 421)) | (1L << (PARALLEL - 421)) | (1L << (SQL_P - 421)) | (1L << (DEPENDS - 421)) | (1L << (OVERRIDING - 421)) | (1L << (CONFLICT - 421)) | (1L << (SKIP_P - 421)) | (1L << (LOCKED - 421)) | (1L << (TIES - 421)) | (1L << (ROLLUP - 421)) | (1L << (CUBE - 421)) | (1L << (GROUPING - 421)) | (1L << (SETS - 421)) | (1L << (TABLESAMPLE - 421)) | (1L << (ORDINALITY - 421)) | (1L << (XMLTABLE - 421)) | (1L << (COLUMNS - 421)) | (1L << (XMLNAMESPACES - 421)) | (1L << (ROWTYPE - 421)) | (1L << (NORMALIZED - 421)) | (1L << (WITHIN - 421)) | (1L << (FILTER - 421)) | (1L << (GROUPS - 421)) | (1L << (OTHERS - 421)) | (1L << (NFC - 421)) | (1L << (NFD - 421)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (NFKC - 485)) | (1L << (NFKD - 485)) | (1L << (UESCAPE - 485)) | (1L << (VIEWS - 485)) | (1L << (NORMALIZE - 485)) | (1L << (DUMP - 485)) | (1L << (PRINT_STRICT_PARAMS - 485)) | (1L << (VARIABLE_CONFLICT - 485)) | (1L << (ERROR - 485)) | (1L << (USE_VARIABLE - 485)) | (1L << (USE_COLUMN - 485)) | (1L << (ALIAS - 485)) | (1L << (CONSTANT - 485)) | (1L << (PERFORM - 485)) | (1L << (GET - 485)) | (1L << (DIAGNOSTICS - 485)) | (1L << (STACKED - 485)) | (1L << (ELSIF - 485)) | (1L << (REVERSE - 485)) | (1L << (SLICE - 485)) | (1L << (EXIT - 485)) | (1L << (RETURN - 485)) | (1L << (QUERY - 485)) | (1L << (RAISE - 485)) | (1L << (SQLSTATE - 485)) | (1L << (DEBUG - 485)) | (1L << (LOG - 485)) | (1L << (INFO - 485)) | (1L << (NOTICE - 485)) | (1L << (WARNING - 485)) | (1L << (EXCEPTION - 485)) | (1L << (ASSERT - 485)) | (1L << (OPEN - 485)) | (1L << (ABS - 485)) | (1L << (CBRT - 485)) | (1L << (CEIL - 485)) | (1L << (CEILING - 485)) | (1L << (DEGREES - 485)) | (1L << (DIV - 485)) | (1L << (EXP - 485)) | (1L << (FACTORIAL - 485)) | (1L << (FLOOR - 485)) | (1L << (GCD - 485)) | (1L << (LCM - 485)) | (1L << (LN - 485)) | (1L << (LOG10 - 485)) | (1L << (MIN_SCALE - 485)) | (1L << (MOD - 485)) | (1L << (PI - 485)) | (1L << (POWER - 485)) | (1L << (RADIANS - 485)) | (1L << (ROUND - 485)) | (1L << (SCALE - 485)) | (1L << (SIGN - 485)) | (1L << (SQRT - 485)) | (1L << (TRIM_SCALE - 485)) | (1L << (TRUNC - 485)) | (1L << (WIDTH_BUCKET - 485)) | (1L << (RANDOM - 485)) | (1L << (SETSEED - 485)) | (1L << (ACOS - 485)))) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (ACOSD - 549)) | (1L << (ASIN - 549)) | (1L << (ASIND - 549)) | (1L << (ATAN - 549)) | (1L << (ATAND - 549)) | (1L << (ATAN2 - 549)) | (1L << (ATAN2D - 549)) | (1L << (COS - 549)) | (1L << (COSD - 549)) | (1L << (COT - 549)) | (1L << (COTD - 549)) | (1L << (SIN - 549)) | (1L << (SIND - 549)) | (1L << (TAN - 549)) | (1L << (TAND - 549)) | (1L << (SINH - 549)) | (1L << (COSH - 549)) | (1L << (TANH - 549)) | (1L << (ASINH - 549)) | (1L << (ACOSH - 549)) | (1L << (ATANH - 549)) | (1L << (BIT_LENGTH - 549)) | (1L << (CHAR_LENGTH - 549)) | (1L << (CHARACTER_LENGTH - 549)) | (1L << (LOWER - 549)) | (1L << (OCTET_LENGTH - 549)) | (1L << (UPPER - 549)) | (1L << (ASCII - 549)) | (1L << (BTRIM - 549)) | (1L << (CHR - 549)) | (1L << (CONCAT - 549)) | (1L << (CONCAT_WS - 549)) | (1L << (FORMAT - 549)) | (1L << (INITCAP - 549)) | (1L << (LENGTH - 549)) | (1L << (LPAD - 549)) | (1L << (LTRIM - 549)) | (1L << (MD5 - 549)) | (1L << (PARSE_IDENT - 549)) | (1L << (PG_CLIENT_ENCODING - 549)) | (1L << (QUOTE_IDENT - 549)) | (1L << (QUOTE_LITERAL - 549)) | (1L << (QUOTE_NULLABLE - 549)) | (1L << (REGEXP_COUNT - 549)) | (1L << (REGEXP_INSTR - 549)) | (1L << (REGEXP_LIKE - 549)) | (1L << (REGEXP_MATCH - 549)) | (1L << (REGEXP_MATCHES - 549)) | (1L << (REGEXP_REPLACE - 549)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 549)) | (1L << (REGEXP_SPLIT_TO_TABLE - 549)) | (1L << (REGEXP_SUBSTR - 549)) | (1L << (REPEAT - 549)) | (1L << (RPAD - 549)) | (1L << (RTRIM - 549)) | (1L << (SPLIT_PART - 549)) | (1L << (STARTS_WITH - 549)) | (1L << (STRING_TO_ARRAY - 549)) | (1L << (STRING_TO_TABLE - 549)) | (1L << (STRPOS - 549)) | (1L << (SUBSTR - 549)) | (1L << (TO_ASCII - 549)) | (1L << (TO_HEX - 549)) | (1L << (TRANSLATE - 549)))) != 0) || ((((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & ((1L << (UNISTR - 613)) | (1L << (AGE - 613)) | (1L << (CLOCK_TIMESTAMP - 613)) | (1L << (DATE_BIN - 613)) | (1L << (DATE_PART - 613)) | (1L << (DATE_TRUNC - 613)) | (1L << (ISFINITE - 613)) | (1L << (JUSTIFY_DAYS - 613)) | (1L << (JUSTIFY_HOURS - 613)) | (1L << (JUSTIFY_INTERVAL - 613)) | (1L << (MAKE_DATE - 613)) | (1L << (MAKE_INTERVAL - 613)) | (1L << (MAKE_TIME - 613)) | (1L << (MAKE_TIMESTAMP - 613)) | (1L << (MAKE_TIMESTAMPTZ - 613)) | (1L << (NOW - 613)) | (1L << (STATEMENT_TIMESTAMP - 613)) | (1L << (TIMEOFDAY - 613)) | (1L << (TRANSACTION_TIMESTAMP - 613)) | (1L << (TO_TIMESTAMP - 613)) | (1L << (TO_CHAR - 613)) | (1L << (TO_DATE - 613)) | (1L << (TO_NUMBER - 613)) | (1L << (Identifier - 613)) | (1L << (QuotedIdentifier - 613)) | (1L << (UnicodeQuotedIdentifier - 613)) | (1L << (PLSQLVARIABLENAME - 613)) | (1L << (PLSQLIDENTIFIER - 613)))) != 0)) {
				{
				setState(5417);
				func_args_with_defaults_list();
				}
			}

			setState(5420);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_args_with_defaults_listContext extends ParserRuleContext {
		public List<Func_arg_with_defaultContext> func_arg_with_default() {
			return getRuleContexts(Func_arg_with_defaultContext.class);
		}
		public Func_arg_with_defaultContext func_arg_with_default(int i) {
			return getRuleContext(Func_arg_with_defaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_args_with_defaults_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_args_with_defaults_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_args_with_defaults_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_args_with_defaults_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_args_with_defaults_listContext func_args_with_defaults_list() throws RecognitionException {
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_func_args_with_defaults_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5422);
			func_arg_with_default();
			setState(5427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5423);
				match(COMMA);
				setState(5424);
				func_arg_with_default();
				}
				}
				setState(5429);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_argContext extends ParserRuleContext {
		public Arg_classContext arg_class() {
			return getRuleContext(Arg_classContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_argContext func_arg() throws RecognitionException {
		Func_argContext _localctx = new Func_argContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_func_arg);
		try {
			setState(5443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5430);
				arg_class();
				setState(5432);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(5431);
					param_name();
					}
					break;
				}
				setState(5434);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5436);
				param_name();
				setState(5438);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(5437);
					arg_class();
					}
					break;
				}
				setState(5440);
				func_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5442);
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_classContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_class; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArg_class(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArg_class(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArg_class(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_classContext arg_class() throws RecognitionException {
		Arg_classContext _localctx = new Arg_classContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_arg_class);
		try {
			setState(5452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5445);
				match(IN_P);
				setState(5447);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(5446);
					match(OUT_P);
					}
					break;
				}
				}
				break;
			case OUT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(5449);
				match(OUT_P);
				}
				break;
			case INOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5450);
				match(INOUT);
				}
				break;
			case VARIADIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(5451);
				match(VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_param_name);
		try {
			setState(5456);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5454);
				type_function_name();
				}
				break;
			case LEFT:
			case RIGHT:
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5455);
				builtin_function_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_func_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5458);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_typeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_typeContext func_type() throws RecognitionException {
		Func_typeContext _localctx = new Func_typeContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_func_type);
		int _la;
		try {
			setState(5472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5460);
				typename();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SETOF) {
					{
					setState(5461);
					match(SETOF);
					}
				}

				setState(5466);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT:
				case RIGHT:
				case REPLACE:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case REVERSE:
				case LOG:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
					{
					setState(5464);
					builtin_function_name();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case COLUMNS:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(5465);
					type_function_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5468);
				attrs();
				setState(5469);
				match(PERCENT);
				setState(5470);
				match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_with_defaultContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_with_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_with_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_with_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_with_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_with_defaultContext func_arg_with_default() throws RecognitionException {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_func_arg_with_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5474);
			func_arg();
			setState(5477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL || _la==DEFAULT) {
				{
				setState(5475);
				_la = _input.LA(1);
				if ( !(_la==EQUAL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5476);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argContext extends ParserRuleContext {
		public Func_argContext func_arg() {
			return getRuleContext(Func_argContext.class,0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argContext aggr_arg() throws RecognitionException {
		Aggr_argContext _localctx = new Aggr_argContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_aggr_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5479);
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<Aggr_args_listContext> aggr_args_list() {
			return getRuleContexts(Aggr_args_listContext.class);
		}
		public Aggr_args_listContext aggr_args_list(int i) {
			return getRuleContext(Aggr_args_listContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_argsContext aggr_args() throws RecognitionException {
		Aggr_argsContext _localctx = new Aggr_argsContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_aggr_args);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5481);
			match(OPEN_PAREN);
			setState(5492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(5482);
				match(STAR);
				}
				break;
			case 2:
				{
				setState(5483);
				aggr_args_list();
				}
				break;
			case 3:
				{
				setState(5484);
				match(ORDER);
				setState(5485);
				match(BY);
				setState(5486);
				aggr_args_list();
				}
				break;
			case 4:
				{
				setState(5487);
				aggr_args_list();
				setState(5488);
				match(ORDER);
				setState(5489);
				match(BY);
				setState(5490);
				aggr_args_list();
				}
				break;
			}
			setState(5494);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggr_args_listContext extends ParserRuleContext {
		public List<Aggr_argContext> aggr_arg() {
			return getRuleContexts(Aggr_argContext.class);
		}
		public Aggr_argContext aggr_arg(int i) {
			return getRuleContext(Aggr_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggr_args_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggr_args_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggr_args_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggr_args_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggr_args_listContext aggr_args_list() throws RecognitionException {
		Aggr_args_listContext _localctx = new Aggr_args_listContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_aggr_args_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5496);
			aggr_arg();
			setState(5501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5497);
				match(COMMA);
				setState(5498);
				aggr_arg();
				}
				}
				setState(5503);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_with_argtypesContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public Aggr_argsContext aggr_args() {
			return getRuleContext(Aggr_argsContext.class,0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypesContext aggregate_with_argtypes() throws RecognitionException {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_aggregate_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5504);
			func_name();
			setState(5505);
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_with_argtypes_listContext extends ParserRuleContext {
		public List<Aggregate_with_argtypesContext> aggregate_with_argtypes() {
			return getRuleContexts(Aggregate_with_argtypesContext.class);
		}
		public Aggregate_with_argtypesContext aggregate_with_argtypes(int i) {
			return getRuleContext(Aggregate_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() throws RecognitionException {
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_aggregate_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5507);
			aggregate_with_argtypes();
			setState(5512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5508);
				match(COMMA);
				setState(5509);
				aggregate_with_argtypes();
				}
				}
				setState(5514);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_listContext extends ParserRuleContext {
		public List<Createfunc_opt_itemContext> createfunc_opt_item() {
			return getRuleContexts(Createfunc_opt_itemContext.class);
		}
		public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return getRuleContext(Createfunc_opt_itemContext.class,i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_listContext createfunc_opt_list() throws RecognitionException {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_createfunc_opt_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5516); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5515);
					createfunc_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5518); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );

			                ParseRoutineBody(_localctx);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_func_opt_itemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<TerminalNode> NULL_P() { return getTokens(PostgreSQLParser.NULL_P); }
		public TerminalNode NULL_P(int i) {
			return getToken(PostgreSQLParser.NULL_P, i);
		}
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public FunctionsetresetclauseContext functionsetresetclause() {
			return getRuleContext(FunctionsetresetclauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_func_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_func_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_func_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_func_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_func_opt_itemContext common_func_opt_item() throws RecognitionException {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_common_func_opt_item);
		try {
			setState(5557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5522);
				match(CALLED);
				setState(5523);
				match(ON);
				setState(5524);
				match(NULL_P);
				setState(5525);
				match(INPUT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5526);
				match(RETURNS);
				setState(5527);
				match(NULL_P);
				setState(5528);
				match(ON);
				setState(5529);
				match(NULL_P);
				setState(5530);
				match(INPUT_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5531);
				match(STRICT_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5532);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5533);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5534);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5535);
				match(EXTERNAL);
				setState(5536);
				match(SECURITY);
				setState(5537);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5538);
				match(EXTERNAL);
				setState(5539);
				match(SECURITY);
				setState(5540);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5541);
				match(SECURITY);
				setState(5542);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5543);
				match(SECURITY);
				setState(5544);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5545);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5546);
				match(NOT);
				setState(5547);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5548);
				match(COST);
				setState(5549);
				numericonly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5550);
				match(ROWS);
				setState(5551);
				numericonly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5552);
				match(SUPPORT);
				setState(5553);
				any_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5554);
				functionsetresetclause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5555);
				match(PARALLEL);
				setState(5556);
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createfunc_opt_itemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Func_asContext func_as() {
			return getRuleContext(Func_asContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Transform_type_listContext transform_type_list() {
			return getRuleContext(Transform_type_listContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Common_func_opt_itemContext common_func_opt_item() {
			return getRuleContext(Common_func_opt_itemContext.class,0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfunc_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatefunc_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatefunc_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatefunc_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createfunc_opt_itemContext createfunc_opt_item() throws RecognitionException {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_createfunc_opt_item);
		try {
			setState(5567);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5559);
				match(AS);
				setState(5560);
				func_as();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5561);
				match(LANGUAGE);
				setState(5562);
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(5563);
				match(TRANSFORM);
				setState(5564);
				transform_type_list();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(5565);
				match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5566);
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_asContext extends ParserRuleContext {
		public ParserRuleContext Definition;
		public SconstContext def;
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_asContext func_as() throws RecognitionException {
		Func_asContext _localctx = new Func_asContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_func_as);
		try {
			setState(5574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5569);
				((Func_asContext)_localctx).def = sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5570);
				sconst();
				setState(5571);
				match(COMMA);
				setState(5572);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transform_type_listContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(PostgreSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(PostgreSQLParser.FOR, i);
		}
		public List<TerminalNode> TYPE_P() { return getTokens(PostgreSQLParser.TYPE_P); }
		public TerminalNode TYPE_P(int i) {
			return getToken(PostgreSQLParser.TYPE_P, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transform_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_type_listContext transform_type_list() throws RecognitionException {
		Transform_type_listContext _localctx = new Transform_type_listContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_transform_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5576);
			match(FOR);
			setState(5577);
			match(TYPE_P);
			setState(5578);
			typename();
			setState(5585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5579);
				match(COMMA);
				setState(5580);
				match(FOR);
				setState(5581);
				match(TYPE_P);
				setState(5582);
				typename();
				}
				}
				setState(5587);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_definitionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_definitionContext opt_definition() throws RecognitionException {
		Opt_definitionContext _localctx = new Opt_definitionContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_opt_definition);
		try {
			setState(5591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5588);
				match(WITH);
				setState(5589);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_columnContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_columnContext table_func_column() throws RecognitionException {
		Table_func_columnContext _localctx = new Table_func_columnContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_table_func_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5593);
			param_name();
			setState(5594);
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_func_column_listContext extends ParserRuleContext {
		public List<Table_func_columnContext> table_func_column() {
			return getRuleContexts(Table_func_columnContext.class);
		}
		public Table_func_columnContext table_func_column(int i) {
			return getRuleContext(Table_func_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_func_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_func_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_func_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_func_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_func_column_listContext table_func_column_list() throws RecognitionException {
		Table_func_column_listContext _localctx = new Table_func_column_listContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_table_func_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5596);
			table_func_column();
			setState(5601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5597);
				match(COMMA);
				setState(5598);
				table_func_column();
				}
				}
				setState(5603);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfunctionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Alterfunc_opt_listContext alterfunc_opt_list() {
			return getRuleContext(Alterfunc_opt_listContext.class,0);
		}
		public Opt_restrictContext opt_restrict() {
			return getRuleContext(Opt_restrictContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunctionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunctionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunctionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunctionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfunctionstmtContext alterfunctionstmt() throws RecognitionException {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_alterfunctionstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5604);
			match(ALTER);
			setState(5605);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5606);
			function_with_argtypes();
			setState(5607);
			alterfunc_opt_list();
			setState(5608);
			opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alterfunc_opt_listContext extends ParserRuleContext {
		public List<Common_func_opt_itemContext> common_func_opt_item() {
			return getRuleContexts(Common_func_opt_itemContext.class);
		}
		public Common_func_opt_itemContext common_func_opt_item(int i) {
			return getRuleContext(Common_func_opt_itemContext.class,i);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfunc_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterfunc_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterfunc_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterfunc_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alterfunc_opt_listContext alterfunc_opt_list() throws RecognitionException {
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_alterfunc_opt_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5611); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5610);
					common_func_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5613); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,293,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_restrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_restrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_restrictContext opt_restrict() throws RecognitionException {
		Opt_restrictContext _localctx = new Opt_restrictContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_opt_restrict);
		try {
			setState(5617);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5615);
				match(RESTRICT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemovefuncstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypes_listContext function_with_argtypes_list() {
			return getRuleContext(Function_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removefuncstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemovefuncstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemovefuncstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemovefuncstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemovefuncstmtContext removefuncstmt() throws RecognitionException {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_removefuncstmt);
		try {
			setState(5655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5619);
				match(DROP);
				setState(5620);
				match(FUNCTION);
				setState(5621);
				function_with_argtypes_list();
				setState(5622);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5624);
				match(DROP);
				setState(5625);
				match(FUNCTION);
				setState(5626);
				match(IF_P);
				setState(5627);
				match(EXISTS);
				setState(5628);
				function_with_argtypes_list();
				setState(5629);
				opt_drop_behavior();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5631);
				match(DROP);
				setState(5632);
				match(PROCEDURE);
				setState(5633);
				function_with_argtypes_list();
				setState(5634);
				opt_drop_behavior();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5636);
				match(DROP);
				setState(5637);
				match(PROCEDURE);
				setState(5638);
				match(IF_P);
				setState(5639);
				match(EXISTS);
				setState(5640);
				function_with_argtypes_list();
				setState(5641);
				opt_drop_behavior();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5643);
				match(DROP);
				setState(5644);
				match(ROUTINE);
				setState(5645);
				function_with_argtypes_list();
				setState(5646);
				opt_drop_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5648);
				match(DROP);
				setState(5649);
				match(ROUTINE);
				setState(5650);
				match(IF_P);
				setState(5651);
				match(EXISTS);
				setState(5652);
				function_with_argtypes_list();
				setState(5653);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveaggrstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return getRuleContext(Aggregate_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeaggrstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveaggrstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveaggrstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveaggrstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveaggrstmtContext removeaggrstmt() throws RecognitionException {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_removeaggrstmt);
		try {
			setState(5669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5657);
				match(DROP);
				setState(5658);
				match(AGGREGATE);
				setState(5659);
				aggregate_with_argtypes_list();
				setState(5660);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5662);
				match(DROP);
				setState(5663);
				match(AGGREGATE);
				setState(5664);
				match(IF_P);
				setState(5665);
				match(EXISTS);
				setState(5666);
				aggregate_with_argtypes_list();
				setState(5667);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveoperstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return getRuleContext(Operator_with_argtypes_listContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeoperstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRemoveoperstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRemoveoperstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRemoveoperstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveoperstmtContext removeoperstmt() throws RecognitionException {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_removeoperstmt);
		try {
			setState(5683);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5671);
				match(DROP);
				setState(5672);
				match(OPERATOR);
				setState(5673);
				operator_with_argtypes_list();
				setState(5674);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5676);
				match(DROP);
				setState(5677);
				match(OPERATOR);
				setState(5678);
				match(IF_P);
				setState(5679);
				match(EXISTS);
				setState(5680);
				operator_with_argtypes_list();
				setState(5681);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oper_argtypesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOper_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOper_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOper_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oper_argtypesContext oper_argtypes() throws RecognitionException {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_oper_argtypes);
		try {
			setState(5707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5685);
				match(OPEN_PAREN);
				setState(5686);
				typename();
				setState(5687);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5689);
				match(OPEN_PAREN);
				setState(5690);
				typename();
				setState(5691);
				match(COMMA);
				setState(5692);
				typename();
				setState(5693);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5695);
				match(OPEN_PAREN);
				setState(5696);
				match(NONE);
				setState(5697);
				match(COMMA);
				setState(5698);
				typename();
				setState(5699);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5701);
				match(OPEN_PAREN);
				setState(5702);
				typename();
				setState(5703);
				match(COMMA);
				setState(5704);
				match(NONE);
				setState(5705);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_operatorContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public List<ColidContext> colid() {
			return getRuleContexts(ColidContext.class);
		}
		public ColidContext colid(int i) {
			return getRuleContext(ColidContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PostgreSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PostgreSQLParser.DOT, i);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_operatorContext any_operator() throws RecognitionException {
		Any_operatorContext _localctx = new Any_operatorContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_any_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (TABLE - 92)) | (1L << (IS - 92)) | (1L << (LEFT - 92)) | (1L << (OUTER_P - 92)) | (1L << (OVER - 92)) | (1L << (RIGHT - 92)) | (1L << (ABORT_P - 92)) | (1L << (ABSOLUTE_P - 92)) | (1L << (ACCESS - 92)) | (1L << (ACTION - 92)) | (1L << (ADD_P - 92)) | (1L << (ADMIN - 92)) | (1L << (AFTER - 92)) | (1L << (AGGREGATE - 92)) | (1L << (ALSO - 92)) | (1L << (ALTER - 92)) | (1L << (ALWAYS - 92)) | (1L << (ASSERTION - 92)) | (1L << (ASSIGNMENT - 92)) | (1L << (AT - 92)) | (1L << (ATTRIBUTE - 92)) | (1L << (BACKWARD - 92)) | (1L << (BEFORE - 92)) | (1L << (BEGIN_P - 92)) | (1L << (BY - 92)) | (1L << (CACHE - 92)) | (1L << (CALLED - 92)) | (1L << (CASCADE - 92)) | (1L << (CASCADED - 92)) | (1L << (CATALOG - 92)) | (1L << (CHAIN - 92)) | (1L << (CHARACTERISTICS - 92)) | (1L << (CHECKPOINT - 92)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (CLASS - 156)) | (1L << (CLOSE - 156)) | (1L << (CLUSTER - 156)) | (1L << (COMMENT - 156)) | (1L << (COMMENTS - 156)) | (1L << (COMMIT - 156)) | (1L << (COMMITTED - 156)) | (1L << (CONFIGURATION - 156)) | (1L << (CONNECTION - 156)) | (1L << (CONSTRAINTS - 156)) | (1L << (CONTENT_P - 156)) | (1L << (CONTINUE_P - 156)) | (1L << (CONVERSION_P - 156)) | (1L << (COPY - 156)) | (1L << (COST - 156)) | (1L << (CSV - 156)) | (1L << (CURSOR - 156)) | (1L << (CYCLE - 156)) | (1L << (DATA_P - 156)) | (1L << (DATABASE - 156)) | (1L << (DAY_P - 156)) | (1L << (DEALLOCATE - 156)) | (1L << (DECLARE - 156)) | (1L << (DEFAULTS - 156)) | (1L << (DEFERRED - 156)) | (1L << (DEFINER - 156)) | (1L << (DELETE_P - 156)) | (1L << (DELIMITER - 156)) | (1L << (DELIMITERS - 156)) | (1L << (DICTIONARY - 156)) | (1L << (DISABLE_P - 156)) | (1L << (DISCARD - 156)) | (1L << (DOCUMENT_P - 156)) | (1L << (DOMAIN_P - 156)) | (1L << (DOUBLE_P - 156)) | (1L << (DROP - 156)) | (1L << (EACH - 156)) | (1L << (ENABLE_P - 156)) | (1L << (ENCODING - 156)) | (1L << (ENCRYPTED - 156)) | (1L << (ENUM_P - 156)) | (1L << (ESCAPE - 156)) | (1L << (EVENT - 156)) | (1L << (EXCLUDE - 156)) | (1L << (EXCLUDING - 156)) | (1L << (EXCLUSIVE - 156)) | (1L << (EXECUTE - 156)) | (1L << (EXPLAIN - 156)) | (1L << (EXTENSION - 156)) | (1L << (EXTERNAL - 156)) | (1L << (FAMILY - 156)) | (1L << (FIRST_P - 156)) | (1L << (FOLLOWING - 156)) | (1L << (FORCE - 156)) | (1L << (FORWARD - 156)) | (1L << (FUNCTION - 156)) | (1L << (FUNCTIONS - 156)) | (1L << (GLOBAL - 156)) | (1L << (GRANTED - 156)) | (1L << (HANDLER - 156)) | (1L << (HEADER_P - 156)) | (1L << (HOLD - 156)) | (1L << (HOUR_P - 156)) | (1L << (IDENTITY_P - 156)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (IF_P - 220)) | (1L << (IMMEDIATE - 220)) | (1L << (IMMUTABLE - 220)) | (1L << (IMPLICIT_P - 220)) | (1L << (INCLUDING - 220)) | (1L << (INCREMENT - 220)) | (1L << (INDEX - 220)) | (1L << (INDEXES - 220)) | (1L << (INHERIT - 220)) | (1L << (INHERITS - 220)) | (1L << (INLINE_P - 220)) | (1L << (INSENSITIVE - 220)) | (1L << (INSERT - 220)) | (1L << (INSTEAD - 220)) | (1L << (INVOKER - 220)) | (1L << (ISOLATION - 220)) | (1L << (KEY - 220)) | (1L << (LABEL - 220)) | (1L << (LANGUAGE - 220)) | (1L << (LARGE_P - 220)) | (1L << (LAST_P - 220)) | (1L << (LEAKPROOF - 220)) | (1L << (LEVEL - 220)) | (1L << (LISTEN - 220)) | (1L << (LOAD - 220)) | (1L << (LOCAL - 220)) | (1L << (LOCATION - 220)) | (1L << (LOCK_P - 220)) | (1L << (MAPPING - 220)) | (1L << (MATCH - 220)) | (1L << (MATERIALIZED - 220)) | (1L << (MAXVALUE - 220)) | (1L << (MINUTE_P - 220)) | (1L << (MINVALUE - 220)) | (1L << (MODE - 220)) | (1L << (MONTH_P - 220)) | (1L << (MOVE - 220)) | (1L << (NAME_P - 220)) | (1L << (NAMES - 220)) | (1L << (NEXT - 220)) | (1L << (NO - 220)) | (1L << (NOTHING - 220)) | (1L << (NOTIFY - 220)) | (1L << (NOWAIT - 220)) | (1L << (NULLS_P - 220)) | (1L << (OBJECT_P - 220)) | (1L << (OF - 220)) | (1L << (OFF - 220)) | (1L << (OIDS - 220)) | (1L << (OPERATOR - 220)) | (1L << (OPTION - 220)) | (1L << (OPTIONS - 220)) | (1L << (OWNED - 220)) | (1L << (OWNER - 220)) | (1L << (PARSER - 220)) | (1L << (PARTIAL - 220)) | (1L << (PARTITION - 220)) | (1L << (PASSING - 220)) | (1L << (PASSWORD - 220)) | (1L << (PLANS - 220)) | (1L << (PRECEDING - 220)) | (1L << (PREPARE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (PREPARED - 284)) | (1L << (PRESERVE - 284)) | (1L << (PRIOR - 284)) | (1L << (PRIVILEGES - 284)) | (1L << (PROCEDURAL - 284)) | (1L << (PROCEDURE - 284)) | (1L << (PROGRAM - 284)) | (1L << (QUOTE - 284)) | (1L << (RANGE - 284)) | (1L << (READ - 284)) | (1L << (REASSIGN - 284)) | (1L << (RECHECK - 284)) | (1L << (RECURSIVE - 284)) | (1L << (REF - 284)) | (1L << (REFRESH - 284)) | (1L << (REINDEX - 284)) | (1L << (RELATIVE_P - 284)) | (1L << (RELEASE - 284)) | (1L << (RENAME - 284)) | (1L << (REPEATABLE - 284)) | (1L << (REPLACE - 284)) | (1L << (REPLICA - 284)) | (1L << (RESET - 284)) | (1L << (RESTART - 284)) | (1L << (RESTRICT - 284)) | (1L << (RETURNS - 284)) | (1L << (REVOKE - 284)) | (1L << (ROLE - 284)) | (1L << (ROLLBACK - 284)) | (1L << (ROWS - 284)) | (1L << (RULE - 284)) | (1L << (SAVEPOINT - 284)) | (1L << (SCHEMA - 284)) | (1L << (SCROLL - 284)) | (1L << (SEARCH - 284)) | (1L << (SECOND_P - 284)) | (1L << (SECURITY - 284)) | (1L << (SEQUENCE - 284)) | (1L << (SEQUENCES - 284)) | (1L << (SERIALIZABLE - 284)) | (1L << (SERVER - 284)) | (1L << (SESSION - 284)) | (1L << (SET - 284)) | (1L << (SHARE - 284)) | (1L << (SHOW - 284)) | (1L << (SIMPLE - 284)) | (1L << (SNAPSHOT - 284)) | (1L << (STABLE - 284)) | (1L << (STANDALONE_P - 284)) | (1L << (START - 284)) | (1L << (STATEMENT - 284)) | (1L << (STATISTICS - 284)) | (1L << (STDIN - 284)) | (1L << (STDOUT - 284)) | (1L << (STORAGE - 284)) | (1L << (STRICT_P - 284)) | (1L << (STRIP_P - 284)) | (1L << (SYSID - 284)) | (1L << (SYSTEM_P - 284)) | (1L << (TABLES - 284)) | (1L << (TABLESPACE - 284)) | (1L << (TEMP - 284)) | (1L << (TEMPLATE - 284)) | (1L << (TEMPORARY - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (TEXT_P - 348)) | (1L << (TRANSACTION - 348)) | (1L << (TRIGGER - 348)) | (1L << (TRUNCATE - 348)) | (1L << (TRUSTED - 348)) | (1L << (TYPE_P - 348)) | (1L << (TYPES_P - 348)) | (1L << (UNBOUNDED - 348)) | (1L << (UNCOMMITTED - 348)) | (1L << (UNENCRYPTED - 348)) | (1L << (UNKNOWN - 348)) | (1L << (UNLISTEN - 348)) | (1L << (UNLOGGED - 348)) | (1L << (UNTIL - 348)) | (1L << (UPDATE - 348)) | (1L << (VACUUM - 348)) | (1L << (VALID - 348)) | (1L << (VALIDATE - 348)) | (1L << (VALIDATOR - 348)) | (1L << (VARYING - 348)) | (1L << (VERSION_P - 348)) | (1L << (VIEW - 348)) | (1L << (VOLATILE - 348)) | (1L << (WHITESPACE_P - 348)) | (1L << (WITHOUT - 348)) | (1L << (WORK - 348)) | (1L << (WRAPPER - 348)) | (1L << (WRITE - 348)) | (1L << (XML_P - 348)) | (1L << (YEAR_P - 348)) | (1L << (YES_P - 348)) | (1L << (ZONE - 348)) | (1L << (BETWEEN - 348)) | (1L << (BIGINT - 348)) | (1L << (BIT - 348)) | (1L << (BOOLEAN_P - 348)) | (1L << (CHAR_P - 348)) | (1L << (CHARACTER - 348)) | (1L << (COALESCE - 348)) | (1L << (DEC - 348)) | (1L << (DECIMAL_P - 348)) | (1L << (EXISTS - 348)) | (1L << (EXTRACT - 348)) | (1L << (FLOAT_P - 348)) | (1L << (GREATEST - 348)) | (1L << (INOUT - 348)) | (1L << (INT_P - 348)) | (1L << (INTEGER - 348)) | (1L << (INTERVAL - 348)) | (1L << (LEAST - 348)) | (1L << (NATIONAL - 348)) | (1L << (NCHAR - 348)) | (1L << (NONE - 348)) | (1L << (NULLIF - 348)) | (1L << (NUMERIC - 348)) | (1L << (OVERLAY - 348)) | (1L << (POSITION - 348)) | (1L << (PRECISION - 348)) | (1L << (REAL - 348)) | (1L << (ROW - 348)) | (1L << (SETOF - 348)) | (1L << (SMALLINT - 348)) | (1L << (SUBSTRING - 348)) | (1L << (TIME - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (TIMESTAMP - 412)) | (1L << (TREAT - 412)) | (1L << (TRIM - 412)) | (1L << (VALUES - 412)) | (1L << (VARCHAR - 412)) | (1L << (XMLATTRIBUTES - 412)) | (1L << (XMLCOMMENT - 412)) | (1L << (XMLAGG - 412)) | (1L << (XML_IS_WELL_FORMED - 412)) | (1L << (XML_IS_WELL_FORMED_DOCUMENT - 412)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 412)) | (1L << (XPATH - 412)) | (1L << (XPATH_EXISTS - 412)) | (1L << (XMLCONCAT - 412)) | (1L << (XMLELEMENT - 412)) | (1L << (XMLEXISTS - 412)) | (1L << (XMLFOREST - 412)) | (1L << (XMLPARSE - 412)) | (1L << (XMLPI - 412)) | (1L << (XMLROOT - 412)) | (1L << (XMLSERIALIZE - 412)) | (1L << (CALL - 412)) | (1L << (CURRENT_P - 412)) | (1L << (ATTACH - 412)) | (1L << (DETACH - 412)) | (1L << (EXPRESSION - 412)) | (1L << (GENERATED - 412)) | (1L << (LOGGED - 412)) | (1L << (STORED - 412)) | (1L << (INCLUDE - 412)) | (1L << (ROUTINE - 412)) | (1L << (TRANSFORM - 412)) | (1L << (IMPORT_P - 412)) | (1L << (POLICY - 412)) | (1L << (METHOD - 412)) | (1L << (REFERENCING - 412)) | (1L << (NEW - 412)) | (1L << (OLD - 412)) | (1L << (VALUE_P - 412)) | (1L << (SUBSCRIPTION - 412)) | (1L << (PUBLICATION - 412)) | (1L << (OUT_P - 412)) | (1L << (ROUTINES - 412)) | (1L << (SCHEMAS - 412)) | (1L << (PROCEDURES - 412)) | (1L << (INPUT_P - 412)) | (1L << (SUPPORT - 412)) | (1L << (PARALLEL - 412)) | (1L << (SQL_P - 412)) | (1L << (DEPENDS - 412)) | (1L << (OVERRIDING - 412)) | (1L << (CONFLICT - 412)) | (1L << (SKIP_P - 412)) | (1L << (LOCKED - 412)) | (1L << (TIES - 412)) | (1L << (ROLLUP - 412)) | (1L << (CUBE - 412)) | (1L << (GROUPING - 412)) | (1L << (SETS - 412)) | (1L << (ORDINALITY - 412)) | (1L << (XMLTABLE - 412)) | (1L << (COLUMNS - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (XMLNAMESPACES - 476)) | (1L << (ROWTYPE - 476)) | (1L << (NORMALIZED - 476)) | (1L << (WITHIN - 476)) | (1L << (FILTER - 476)) | (1L << (GROUPS - 476)) | (1L << (OTHERS - 476)) | (1L << (NFC - 476)) | (1L << (NFD - 476)) | (1L << (NFKC - 476)) | (1L << (NFKD - 476)) | (1L << (UESCAPE - 476)) | (1L << (VIEWS - 476)) | (1L << (NORMALIZE - 476)) | (1L << (DUMP - 476)) | (1L << (PRINT_STRICT_PARAMS - 476)) | (1L << (VARIABLE_CONFLICT - 476)) | (1L << (ERROR - 476)) | (1L << (USE_VARIABLE - 476)) | (1L << (USE_COLUMN - 476)) | (1L << (ALIAS - 476)) | (1L << (CONSTANT - 476)) | (1L << (PERFORM - 476)) | (1L << (GET - 476)) | (1L << (DIAGNOSTICS - 476)) | (1L << (STACKED - 476)) | (1L << (ELSIF - 476)) | (1L << (REVERSE - 476)) | (1L << (SLICE - 476)) | (1L << (EXIT - 476)) | (1L << (RETURN - 476)) | (1L << (QUERY - 476)) | (1L << (RAISE - 476)) | (1L << (SQLSTATE - 476)) | (1L << (DEBUG - 476)) | (1L << (LOG - 476)) | (1L << (INFO - 476)) | (1L << (NOTICE - 476)) | (1L << (WARNING - 476)) | (1L << (EXCEPTION - 476)) | (1L << (ASSERT - 476)) | (1L << (OPEN - 476)) | (1L << (ABS - 476)) | (1L << (CBRT - 476)) | (1L << (CEIL - 476)) | (1L << (CEILING - 476)) | (1L << (DEGREES - 476)) | (1L << (DIV - 476)) | (1L << (EXP - 476)) | (1L << (FACTORIAL - 476)) | (1L << (FLOOR - 476)) | (1L << (GCD - 476)) | (1L << (LCM - 476)) | (1L << (LN - 476)) | (1L << (LOG10 - 476)) | (1L << (MIN_SCALE - 476)) | (1L << (MOD - 476)) | (1L << (PI - 476)) | (1L << (POWER - 476)) | (1L << (RADIANS - 476)) | (1L << (ROUND - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (SCALE - 540)) | (1L << (SIGN - 540)) | (1L << (SQRT - 540)) | (1L << (TRIM_SCALE - 540)) | (1L << (TRUNC - 540)) | (1L << (WIDTH_BUCKET - 540)) | (1L << (RANDOM - 540)) | (1L << (SETSEED - 540)) | (1L << (ACOS - 540)) | (1L << (ACOSD - 540)) | (1L << (ASIN - 540)) | (1L << (ASIND - 540)) | (1L << (ATAN - 540)) | (1L << (ATAND - 540)) | (1L << (ATAN2 - 540)) | (1L << (ATAN2D - 540)) | (1L << (COS - 540)) | (1L << (COSD - 540)) | (1L << (COT - 540)) | (1L << (COTD - 540)) | (1L << (SIN - 540)) | (1L << (SIND - 540)) | (1L << (TAN - 540)) | (1L << (TAND - 540)) | (1L << (SINH - 540)) | (1L << (COSH - 540)) | (1L << (TANH - 540)) | (1L << (ASINH - 540)) | (1L << (ACOSH - 540)) | (1L << (ATANH - 540)) | (1L << (BIT_LENGTH - 540)) | (1L << (CHAR_LENGTH - 540)) | (1L << (CHARACTER_LENGTH - 540)) | (1L << (LOWER - 540)) | (1L << (OCTET_LENGTH - 540)) | (1L << (UPPER - 540)) | (1L << (ASCII - 540)) | (1L << (BTRIM - 540)) | (1L << (CHR - 540)) | (1L << (CONCAT - 540)) | (1L << (CONCAT_WS - 540)) | (1L << (FORMAT - 540)) | (1L << (INITCAP - 540)) | (1L << (LENGTH - 540)) | (1L << (LPAD - 540)) | (1L << (LTRIM - 540)) | (1L << (MD5 - 540)) | (1L << (PARSE_IDENT - 540)) | (1L << (PG_CLIENT_ENCODING - 540)) | (1L << (QUOTE_IDENT - 540)) | (1L << (QUOTE_LITERAL - 540)) | (1L << (QUOTE_NULLABLE - 540)) | (1L << (REGEXP_COUNT - 540)) | (1L << (REGEXP_INSTR - 540)) | (1L << (REGEXP_LIKE - 540)) | (1L << (REGEXP_MATCH - 540)) | (1L << (REGEXP_MATCHES - 540)) | (1L << (REGEXP_REPLACE - 540)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 540)) | (1L << (REGEXP_SPLIT_TO_TABLE - 540)) | (1L << (REGEXP_SUBSTR - 540)) | (1L << (REPEAT - 540)) | (1L << (RPAD - 540)) | (1L << (RTRIM - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SPLIT_PART - 604)) | (1L << (STARTS_WITH - 604)) | (1L << (STRING_TO_ARRAY - 604)) | (1L << (STRING_TO_TABLE - 604)) | (1L << (STRPOS - 604)) | (1L << (SUBSTR - 604)) | (1L << (TO_ASCII - 604)) | (1L << (TO_HEX - 604)) | (1L << (TRANSLATE - 604)) | (1L << (UNISTR - 604)) | (1L << (AGE - 604)) | (1L << (CLOCK_TIMESTAMP - 604)) | (1L << (DATE_BIN - 604)) | (1L << (DATE_PART - 604)) | (1L << (DATE_TRUNC - 604)) | (1L << (ISFINITE - 604)) | (1L << (JUSTIFY_DAYS - 604)) | (1L << (JUSTIFY_HOURS - 604)) | (1L << (JUSTIFY_INTERVAL - 604)) | (1L << (MAKE_DATE - 604)) | (1L << (MAKE_INTERVAL - 604)) | (1L << (MAKE_TIME - 604)) | (1L << (MAKE_TIMESTAMP - 604)) | (1L << (MAKE_TIMESTAMPTZ - 604)) | (1L << (NOW - 604)) | (1L << (STATEMENT_TIMESTAMP - 604)) | (1L << (TIMEOFDAY - 604)) | (1L << (TRANSACTION_TIMESTAMP - 604)) | (1L << (TO_TIMESTAMP - 604)) | (1L << (TO_CHAR - 604)) | (1L << (TO_DATE - 604)) | (1L << (TO_NUMBER - 604)) | (1L << (Identifier - 604)) | (1L << (QuotedIdentifier - 604)) | (1L << (UnicodeQuotedIdentifier - 604)) | (1L << (PLSQLVARIABLENAME - 604)) | (1L << (PLSQLIDENTIFIER - 604)))) != 0)) {
				{
				{
				setState(5709);
				colid();
				setState(5710);
				match(DOT);
				}
				}
				setState(5716);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5717);
			all_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_with_argtypes_listContext extends ParserRuleContext {
		public List<Operator_with_argtypesContext> operator_with_argtypes() {
			return getRuleContexts(Operator_with_argtypesContext.class);
		}
		public Operator_with_argtypesContext operator_with_argtypes(int i) {
			return getRuleContext(Operator_with_argtypesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypes_listContext operator_with_argtypes_list() throws RecognitionException {
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_operator_with_argtypes_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5719);
			operator_with_argtypes();
			setState(5724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5720);
				match(COMMA);
				setState(5721);
				operator_with_argtypes();
				}
				}
				setState(5726);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_with_argtypesContext extends ParserRuleContext {
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public Oper_argtypesContext oper_argtypes() {
			return getRuleContext(Oper_argtypesContext.class,0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_with_argtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_with_argtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_with_argtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_with_argtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_with_argtypesContext operator_with_argtypes() throws RecognitionException {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_operator_with_argtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			any_operator();
			setState(5728);
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Dostmt_opt_listContext dostmt_opt_list() {
			return getRuleContext(Dostmt_opt_listContext.class,0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtContext dostmt() throws RecognitionException {
		DostmtContext _localctx = new DostmtContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_dostmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5730);
			match(DO);
			setState(5731);
			dostmt_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_listContext extends ParserRuleContext {
		public List<Dostmt_opt_itemContext> dostmt_opt_item() {
			return getRuleContexts(Dostmt_opt_itemContext.class);
		}
		public Dostmt_opt_itemContext dostmt_opt_item(int i) {
			return getRuleContext(Dostmt_opt_itemContext.class,i);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_listContext dostmt_opt_list() throws RecognitionException {
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_dostmt_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5734); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5733);
				dostmt_opt_item();
				}
				}
				setState(5736); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || ((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & ((1L << (StringConstant - 645)) | (1L << (UnicodeEscapeStringConstant - 645)) | (1L << (BeginDollarStringConstant - 645)) | (1L << (EscapeStringConstant - 645)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dostmt_opt_itemContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return getRuleContext(Nonreservedword_or_sconstContext.class,0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmt_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDostmt_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDostmt_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDostmt_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dostmt_opt_itemContext dostmt_opt_item() throws RecognitionException {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_dostmt_opt_item);
		try {
			setState(5741);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(5738);
				sconst();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5739);
				match(LANGUAGE);
				setState(5740);
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatecaststmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Cast_contextContext cast_context() {
			return getRuleContext(Cast_contextContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatecaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatecaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatecaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatecaststmtContext createcaststmt() throws RecognitionException {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_createcaststmt);
		try {
			setState(5777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5743);
				match(CREATE);
				setState(5744);
				match(CAST);
				setState(5745);
				match(OPEN_PAREN);
				setState(5746);
				typename();
				setState(5747);
				match(AS);
				setState(5748);
				typename();
				setState(5749);
				match(CLOSE_PAREN);
				setState(5750);
				match(WITH);
				setState(5751);
				match(FUNCTION);
				setState(5752);
				function_with_argtypes();
				setState(5753);
				cast_context();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5755);
				match(CREATE);
				setState(5756);
				match(CAST);
				setState(5757);
				match(OPEN_PAREN);
				setState(5758);
				typename();
				setState(5759);
				match(AS);
				setState(5760);
				typename();
				setState(5761);
				match(CLOSE_PAREN);
				setState(5762);
				match(WITHOUT);
				setState(5763);
				match(FUNCTION);
				setState(5764);
				cast_context();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5766);
				match(CREATE);
				setState(5767);
				match(CAST);
				setState(5768);
				match(OPEN_PAREN);
				setState(5769);
				typename();
				setState(5770);
				match(AS);
				setState(5771);
				typename();
				setState(5772);
				match(CLOSE_PAREN);
				setState(5773);
				match(WITH);
				setState(5774);
				match(INOUT);
				setState(5775);
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_contextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_context; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCast_context(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCast_context(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCast_context(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_contextContext cast_context() throws RecognitionException {
		Cast_contextContext _localctx = new Cast_contextContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_cast_context);
		try {
			setState(5784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5779);
				match(AS);
				setState(5780);
				match(IMPLICIT_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5781);
				match(AS);
				setState(5782);
				match(ASSIGNMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropcaststmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropcaststmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropcaststmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropcaststmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropcaststmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropcaststmtContext dropcaststmt() throws RecognitionException {
		DropcaststmtContext _localctx = new DropcaststmtContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_dropcaststmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5786);
			match(DROP);
			setState(5787);
			match(CAST);
			setState(5788);
			opt_if_exists();
			setState(5789);
			match(OPEN_PAREN);
			setState(5790);
			typename();
			setState(5791);
			match(AS);
			setState(5792);
			typename();
			setState(5793);
			match(CLOSE_PAREN);
			setState(5794);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_if_existsContext extends ParserRuleContext {
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_if_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_if_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_if_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_if_existsContext opt_if_exists() throws RecognitionException {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_opt_if_exists);
		try {
			setState(5799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IF_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(5796);
				match(IF_P);
				setState(5797);
				match(EXISTS);
				}
				break;
			case OPEN_PAREN:
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatetransformstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Transform_element_listContext transform_element_list() {
			return getRuleContext(Transform_element_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createtransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatetransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatetransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatetransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatetransformstmtContext createtransformstmt() throws RecognitionException {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_createtransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5801);
			match(CREATE);
			setState(5802);
			opt_or_replace();
			setState(5803);
			match(TRANSFORM);
			setState(5804);
			match(FOR);
			setState(5805);
			typename();
			setState(5806);
			match(LANGUAGE);
			setState(5807);
			name();
			setState(5808);
			match(OPEN_PAREN);
			setState(5809);
			transform_element_list();
			setState(5810);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transform_element_listContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<TerminalNode> SQL_P() { return getTokens(PostgreSQLParser.SQL_P); }
		public TerminalNode SQL_P(int i) {
			return getToken(PostgreSQLParser.SQL_P, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(PostgreSQLParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(PostgreSQLParser.FUNCTION, i);
		}
		public List<Function_with_argtypesContext> function_with_argtypes() {
			return getRuleContexts(Function_with_argtypesContext.class);
		}
		public Function_with_argtypesContext function_with_argtypes(int i) {
			return getRuleContext(Function_with_argtypesContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransform_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransform_element_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransform_element_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transform_element_listContext transform_element_list() throws RecognitionException {
		Transform_element_listContext _localctx = new Transform_element_listContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_transform_element_list);
		try {
			setState(5846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5812);
				match(FROM);
				setState(5813);
				match(SQL_P);
				setState(5814);
				match(WITH);
				setState(5815);
				match(FUNCTION);
				setState(5816);
				function_with_argtypes();
				setState(5817);
				match(COMMA);
				setState(5818);
				match(TO);
				setState(5819);
				match(SQL_P);
				setState(5820);
				match(WITH);
				setState(5821);
				match(FUNCTION);
				setState(5822);
				function_with_argtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5824);
				match(TO);
				setState(5825);
				match(SQL_P);
				setState(5826);
				match(WITH);
				setState(5827);
				match(FUNCTION);
				setState(5828);
				function_with_argtypes();
				setState(5829);
				match(COMMA);
				setState(5830);
				match(FROM);
				setState(5831);
				match(SQL_P);
				setState(5832);
				match(WITH);
				setState(5833);
				match(FUNCTION);
				setState(5834);
				function_with_argtypes();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5836);
				match(FROM);
				setState(5837);
				match(SQL_P);
				setState(5838);
				match(WITH);
				setState(5839);
				match(FUNCTION);
				setState(5840);
				function_with_argtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5841);
				match(TO);
				setState(5842);
				match(SQL_P);
				setState(5843);
				match(WITH);
				setState(5844);
				match(FUNCTION);
				setState(5845);
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DroptransformstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public Opt_if_existsContext opt_if_exists() {
			return getRuleContext(Opt_if_existsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_droptransformstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDroptransformstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDroptransformstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDroptransformstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DroptransformstmtContext droptransformstmt() throws RecognitionException {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_droptransformstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5848);
			match(DROP);
			setState(5849);
			match(TRANSFORM);
			setState(5850);
			opt_if_exists();
			setState(5851);
			match(FOR);
			setState(5852);
			typename();
			setState(5853);
			match(LANGUAGE);
			setState(5854);
			name();
			setState(5855);
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexstmtContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public Reindex_target_typeContext reindex_target_type() {
			return getRuleContext(Reindex_target_typeContext.class,0);
		}
		public Opt_concurrentlyContext opt_concurrently() {
			return getRuleContext(Opt_concurrentlyContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Reindex_target_multitableContext reindex_target_multitable() {
			return getRuleContext(Reindex_target_multitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Reindex_option_listContext reindex_option_list() {
			return getRuleContext(Reindex_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReindexstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindexstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindexstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindexstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexstmtContext reindexstmt() throws RecognitionException {
		ReindexstmtContext _localctx = new ReindexstmtContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_reindexstmt);
		try {
			setState(5883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5857);
				match(REINDEX);
				setState(5858);
				reindex_target_type();
				setState(5859);
				opt_concurrently();
				setState(5860);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5862);
				match(REINDEX);
				setState(5863);
				reindex_target_multitable();
				setState(5864);
				opt_concurrently();
				setState(5865);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5867);
				match(REINDEX);
				setState(5868);
				match(OPEN_PAREN);
				setState(5869);
				reindex_option_list();
				setState(5870);
				match(CLOSE_PAREN);
				setState(5871);
				reindex_target_type();
				setState(5872);
				opt_concurrently();
				setState(5873);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5875);
				match(REINDEX);
				setState(5876);
				match(OPEN_PAREN);
				setState(5877);
				reindex_option_list();
				setState(5878);
				match(CLOSE_PAREN);
				setState(5879);
				reindex_target_multitable();
				setState(5880);
				opt_concurrently();
				setState(5881);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_target_typeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Reindex_target_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_typeContext reindex_target_type() throws RecognitionException {
		Reindex_target_typeContext _localctx = new Reindex_target_typeContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_reindex_target_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5885);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_target_multitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_multitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_target_multitable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_target_multitable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_target_multitable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_target_multitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_target_multitableContext reindex_target_multitable() throws RecognitionException {
		Reindex_target_multitableContext _localctx = new Reindex_target_multitableContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_reindex_target_multitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5887);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_option_listContext extends ParserRuleContext {
		public List<Reindex_option_elemContext> reindex_option_elem() {
			return getRuleContexts(Reindex_option_elemContext.class);
		}
		public Reindex_option_elemContext reindex_option_elem(int i) {
			return getRuleContext(Reindex_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_listContext reindex_option_list() throws RecognitionException {
		Reindex_option_listContext _localctx = new Reindex_option_listContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_reindex_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5889);
			reindex_option_elem();
			setState(5894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5890);
				match(COMMA);
				setState(5891);
				reindex_option_elem();
				}
				}
				setState(5896);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_option_elemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Reindex_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_option_elemContext reindex_option_elem() throws RecognitionException {
		Reindex_option_elemContext _localctx = new Reindex_option_elemContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_reindex_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5897);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertblspcstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertblspcstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertblspcstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertblspcstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertblspcstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertblspcstmtContext altertblspcstmt() throws RecognitionException {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_altertblspcstmt);
		try {
			setState(5911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5899);
				match(ALTER);
				setState(5900);
				match(TABLESPACE);
				setState(5901);
				name();
				setState(5902);
				match(SET);
				setState(5903);
				reloptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5905);
				match(ALTER);
				setState(5906);
				match(TABLESPACE);
				setState(5907);
				name();
				setState(5908);
				match(RESET);
				setState(5909);
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public List<RoleidContext> roleid() {
			return getRuleContexts(RoleidContext.class);
		}
		public RoleidContext roleid(int i) {
			return getRuleContext(RoleidContext.class,i);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Opt_columnContext opt_column() {
			return getRuleContext(Opt_columnContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRenamestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRenamestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRenamestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenamestmtContext renamestmt() throws RecognitionException {
		RenamestmtContext _localctx = new RenamestmtContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_renamestmt);
		try {
			setState(6381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5913);
				match(ALTER);
				setState(5914);
				match(AGGREGATE);
				setState(5915);
				aggregate_with_argtypes();
				setState(5916);
				match(RENAME);
				setState(5917);
				match(TO);
				setState(5918);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5920);
				match(ALTER);
				setState(5921);
				match(COLLATION);
				setState(5922);
				any_name();
				setState(5923);
				match(RENAME);
				setState(5924);
				match(TO);
				setState(5925);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5927);
				match(ALTER);
				setState(5928);
				match(CONVERSION_P);
				setState(5929);
				any_name();
				setState(5930);
				match(RENAME);
				setState(5931);
				match(TO);
				setState(5932);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5934);
				match(ALTER);
				setState(5935);
				match(DATABASE);
				setState(5936);
				name();
				setState(5937);
				match(RENAME);
				setState(5938);
				match(TO);
				setState(5939);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5941);
				match(ALTER);
				setState(5942);
				match(DOMAIN_P);
				setState(5943);
				any_name();
				setState(5944);
				match(RENAME);
				setState(5945);
				match(TO);
				setState(5946);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5948);
				match(ALTER);
				setState(5949);
				match(DOMAIN_P);
				setState(5950);
				any_name();
				setState(5951);
				match(RENAME);
				setState(5952);
				match(CONSTRAINT);
				setState(5953);
				name();
				setState(5954);
				match(TO);
				setState(5955);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5957);
				match(ALTER);
				setState(5958);
				match(FOREIGN);
				setState(5959);
				match(DATA_P);
				setState(5960);
				match(WRAPPER);
				setState(5961);
				name();
				setState(5962);
				match(RENAME);
				setState(5963);
				match(TO);
				setState(5964);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5966);
				match(ALTER);
				setState(5967);
				match(FUNCTION);
				setState(5968);
				function_with_argtypes();
				setState(5969);
				match(RENAME);
				setState(5970);
				match(TO);
				setState(5971);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5973);
				match(ALTER);
				setState(5974);
				match(GROUP_P);
				setState(5975);
				roleid();
				setState(5976);
				match(RENAME);
				setState(5977);
				match(TO);
				setState(5978);
				roleid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5980);
				match(ALTER);
				setState(5981);
				opt_procedural();
				setState(5982);
				match(LANGUAGE);
				setState(5983);
				name();
				setState(5984);
				match(RENAME);
				setState(5985);
				match(TO);
				setState(5986);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5988);
				match(ALTER);
				setState(5989);
				match(OPERATOR);
				setState(5990);
				match(CLASS);
				setState(5991);
				any_name();
				setState(5992);
				match(USING);
				setState(5993);
				name();
				setState(5994);
				match(RENAME);
				setState(5995);
				match(TO);
				setState(5996);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5998);
				match(ALTER);
				setState(5999);
				match(OPERATOR);
				setState(6000);
				match(FAMILY);
				setState(6001);
				any_name();
				setState(6002);
				match(USING);
				setState(6003);
				name();
				setState(6004);
				match(RENAME);
				setState(6005);
				match(TO);
				setState(6006);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6008);
				match(ALTER);
				setState(6009);
				match(POLICY);
				setState(6010);
				name();
				setState(6011);
				match(ON);
				setState(6012);
				qualified_name();
				setState(6013);
				match(RENAME);
				setState(6014);
				match(TO);
				setState(6015);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6017);
				match(ALTER);
				setState(6018);
				match(POLICY);
				setState(6019);
				match(IF_P);
				setState(6020);
				match(EXISTS);
				setState(6021);
				name();
				setState(6022);
				match(ON);
				setState(6023);
				qualified_name();
				setState(6024);
				match(RENAME);
				setState(6025);
				match(TO);
				setState(6026);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6028);
				match(ALTER);
				setState(6029);
				match(PROCEDURE);
				setState(6030);
				function_with_argtypes();
				setState(6031);
				match(RENAME);
				setState(6032);
				match(TO);
				setState(6033);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6035);
				match(ALTER);
				setState(6036);
				match(PUBLICATION);
				setState(6037);
				name();
				setState(6038);
				match(RENAME);
				setState(6039);
				match(TO);
				setState(6040);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6042);
				match(ALTER);
				setState(6043);
				match(ROUTINE);
				setState(6044);
				function_with_argtypes();
				setState(6045);
				match(RENAME);
				setState(6046);
				match(TO);
				setState(6047);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6049);
				match(ALTER);
				setState(6050);
				match(SCHEMA);
				setState(6051);
				name();
				setState(6052);
				match(RENAME);
				setState(6053);
				match(TO);
				setState(6054);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6056);
				match(ALTER);
				setState(6057);
				match(SERVER);
				setState(6058);
				name();
				setState(6059);
				match(RENAME);
				setState(6060);
				match(TO);
				setState(6061);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6063);
				match(ALTER);
				setState(6064);
				match(SUBSCRIPTION);
				setState(6065);
				name();
				setState(6066);
				match(RENAME);
				setState(6067);
				match(TO);
				setState(6068);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6070);
				match(ALTER);
				setState(6071);
				match(TABLE);
				setState(6072);
				relation_expr();
				setState(6073);
				match(RENAME);
				setState(6074);
				match(TO);
				setState(6075);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6077);
				match(ALTER);
				setState(6078);
				match(TABLE);
				setState(6079);
				match(IF_P);
				setState(6080);
				match(EXISTS);
				setState(6081);
				relation_expr();
				setState(6082);
				match(RENAME);
				setState(6083);
				match(TO);
				setState(6084);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6086);
				match(ALTER);
				setState(6087);
				match(SEQUENCE);
				setState(6088);
				qualified_name();
				setState(6089);
				match(RENAME);
				setState(6090);
				match(TO);
				setState(6091);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6093);
				match(ALTER);
				setState(6094);
				match(SEQUENCE);
				setState(6095);
				match(IF_P);
				setState(6096);
				match(EXISTS);
				setState(6097);
				qualified_name();
				setState(6098);
				match(RENAME);
				setState(6099);
				match(TO);
				setState(6100);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6102);
				match(ALTER);
				setState(6103);
				match(VIEW);
				setState(6104);
				qualified_name();
				setState(6105);
				match(RENAME);
				setState(6106);
				match(TO);
				setState(6107);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6109);
				match(ALTER);
				setState(6110);
				match(VIEW);
				setState(6111);
				match(IF_P);
				setState(6112);
				match(EXISTS);
				setState(6113);
				qualified_name();
				setState(6114);
				match(RENAME);
				setState(6115);
				match(TO);
				setState(6116);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6118);
				match(ALTER);
				setState(6119);
				match(MATERIALIZED);
				setState(6120);
				match(VIEW);
				setState(6121);
				qualified_name();
				setState(6122);
				match(RENAME);
				setState(6123);
				match(TO);
				setState(6124);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6126);
				match(ALTER);
				setState(6127);
				match(MATERIALIZED);
				setState(6128);
				match(VIEW);
				setState(6129);
				match(IF_P);
				setState(6130);
				match(EXISTS);
				setState(6131);
				qualified_name();
				setState(6132);
				match(RENAME);
				setState(6133);
				match(TO);
				setState(6134);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6136);
				match(ALTER);
				setState(6137);
				match(INDEX);
				setState(6138);
				qualified_name();
				setState(6139);
				match(RENAME);
				setState(6140);
				match(TO);
				setState(6141);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6143);
				match(ALTER);
				setState(6144);
				match(INDEX);
				setState(6145);
				match(IF_P);
				setState(6146);
				match(EXISTS);
				setState(6147);
				qualified_name();
				setState(6148);
				match(RENAME);
				setState(6149);
				match(TO);
				setState(6150);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6152);
				match(ALTER);
				setState(6153);
				match(FOREIGN);
				setState(6154);
				match(TABLE);
				setState(6155);
				relation_expr();
				setState(6156);
				match(RENAME);
				setState(6157);
				match(TO);
				setState(6158);
				name();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6160);
				match(ALTER);
				setState(6161);
				match(FOREIGN);
				setState(6162);
				match(TABLE);
				setState(6163);
				match(IF_P);
				setState(6164);
				match(EXISTS);
				setState(6165);
				relation_expr();
				setState(6166);
				match(RENAME);
				setState(6167);
				match(TO);
				setState(6168);
				name();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6170);
				match(ALTER);
				setState(6171);
				match(TABLE);
				setState(6172);
				relation_expr();
				setState(6173);
				match(RENAME);
				setState(6174);
				opt_column();
				setState(6175);
				name();
				setState(6176);
				match(TO);
				setState(6177);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6179);
				match(ALTER);
				setState(6180);
				match(TABLE);
				setState(6181);
				match(IF_P);
				setState(6182);
				match(EXISTS);
				setState(6183);
				relation_expr();
				setState(6184);
				match(RENAME);
				setState(6185);
				opt_column();
				setState(6186);
				name();
				setState(6187);
				match(TO);
				setState(6188);
				name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6190);
				match(ALTER);
				setState(6191);
				match(VIEW);
				setState(6192);
				qualified_name();
				setState(6193);
				match(RENAME);
				setState(6194);
				opt_column();
				setState(6195);
				name();
				setState(6196);
				match(TO);
				setState(6197);
				name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6199);
				match(ALTER);
				setState(6200);
				match(VIEW);
				setState(6201);
				match(IF_P);
				setState(6202);
				match(EXISTS);
				setState(6203);
				qualified_name();
				setState(6204);
				match(RENAME);
				setState(6205);
				opt_column();
				setState(6206);
				name();
				setState(6207);
				match(TO);
				setState(6208);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6210);
				match(ALTER);
				setState(6211);
				match(MATERIALIZED);
				setState(6212);
				match(VIEW);
				setState(6213);
				qualified_name();
				setState(6214);
				match(RENAME);
				setState(6215);
				opt_column();
				setState(6216);
				name();
				setState(6217);
				match(TO);
				setState(6218);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6220);
				match(ALTER);
				setState(6221);
				match(MATERIALIZED);
				setState(6222);
				match(VIEW);
				setState(6223);
				match(IF_P);
				setState(6224);
				match(EXISTS);
				setState(6225);
				qualified_name();
				setState(6226);
				match(RENAME);
				setState(6227);
				opt_column();
				setState(6228);
				name();
				setState(6229);
				match(TO);
				setState(6230);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6232);
				match(ALTER);
				setState(6233);
				match(TABLE);
				setState(6234);
				relation_expr();
				setState(6235);
				match(RENAME);
				setState(6236);
				match(CONSTRAINT);
				setState(6237);
				name();
				setState(6238);
				match(TO);
				setState(6239);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6241);
				match(ALTER);
				setState(6242);
				match(TABLE);
				setState(6243);
				match(IF_P);
				setState(6244);
				match(EXISTS);
				setState(6245);
				relation_expr();
				setState(6246);
				match(RENAME);
				setState(6247);
				match(CONSTRAINT);
				setState(6248);
				name();
				setState(6249);
				match(TO);
				setState(6250);
				name();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6252);
				match(ALTER);
				setState(6253);
				match(FOREIGN);
				setState(6254);
				match(TABLE);
				setState(6255);
				relation_expr();
				setState(6256);
				match(RENAME);
				setState(6257);
				opt_column();
				setState(6258);
				name();
				setState(6259);
				match(TO);
				setState(6260);
				name();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6262);
				match(ALTER);
				setState(6263);
				match(FOREIGN);
				setState(6264);
				match(TABLE);
				setState(6265);
				match(IF_P);
				setState(6266);
				match(EXISTS);
				setState(6267);
				relation_expr();
				setState(6268);
				match(RENAME);
				setState(6269);
				opt_column();
				setState(6270);
				name();
				setState(6271);
				match(TO);
				setState(6272);
				name();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6274);
				match(ALTER);
				setState(6275);
				match(RULE);
				setState(6276);
				name();
				setState(6277);
				match(ON);
				setState(6278);
				qualified_name();
				setState(6279);
				match(RENAME);
				setState(6280);
				match(TO);
				setState(6281);
				name();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6283);
				match(ALTER);
				setState(6284);
				match(TRIGGER);
				setState(6285);
				name();
				setState(6286);
				match(ON);
				setState(6287);
				qualified_name();
				setState(6288);
				match(RENAME);
				setState(6289);
				match(TO);
				setState(6290);
				name();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6292);
				match(ALTER);
				setState(6293);
				match(EVENT);
				setState(6294);
				match(TRIGGER);
				setState(6295);
				name();
				setState(6296);
				match(RENAME);
				setState(6297);
				match(TO);
				setState(6298);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6300);
				match(ALTER);
				setState(6301);
				match(ROLE);
				setState(6302);
				roleid();
				setState(6303);
				match(RENAME);
				setState(6304);
				match(TO);
				setState(6305);
				roleid();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6307);
				match(ALTER);
				setState(6308);
				match(USER);
				setState(6309);
				roleid();
				setState(6310);
				match(RENAME);
				setState(6311);
				match(TO);
				setState(6312);
				roleid();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6314);
				match(ALTER);
				setState(6315);
				match(TABLESPACE);
				setState(6316);
				name();
				setState(6317);
				match(RENAME);
				setState(6318);
				match(TO);
				setState(6319);
				name();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6321);
				match(ALTER);
				setState(6322);
				match(STATISTICS);
				setState(6323);
				any_name();
				setState(6324);
				match(RENAME);
				setState(6325);
				match(TO);
				setState(6326);
				name();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6328);
				match(ALTER);
				setState(6329);
				match(TEXT_P);
				setState(6330);
				match(SEARCH);
				setState(6331);
				match(PARSER);
				setState(6332);
				any_name();
				setState(6333);
				match(RENAME);
				setState(6334);
				match(TO);
				setState(6335);
				name();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6337);
				match(ALTER);
				setState(6338);
				match(TEXT_P);
				setState(6339);
				match(SEARCH);
				setState(6340);
				match(DICTIONARY);
				setState(6341);
				any_name();
				setState(6342);
				match(RENAME);
				setState(6343);
				match(TO);
				setState(6344);
				name();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6346);
				match(ALTER);
				setState(6347);
				match(TEXT_P);
				setState(6348);
				match(SEARCH);
				setState(6349);
				match(TEMPLATE);
				setState(6350);
				any_name();
				setState(6351);
				match(RENAME);
				setState(6352);
				match(TO);
				setState(6353);
				name();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(6355);
				match(ALTER);
				setState(6356);
				match(TEXT_P);
				setState(6357);
				match(SEARCH);
				setState(6358);
				match(CONFIGURATION);
				setState(6359);
				any_name();
				setState(6360);
				match(RENAME);
				setState(6361);
				match(TO);
				setState(6362);
				name();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(6364);
				match(ALTER);
				setState(6365);
				match(TYPE_P);
				setState(6366);
				any_name();
				setState(6367);
				match(RENAME);
				setState(6368);
				match(TO);
				setState(6369);
				name();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(6371);
				match(ALTER);
				setState(6372);
				match(TYPE_P);
				setState(6373);
				any_name();
				setState(6374);
				match(RENAME);
				setState(6375);
				match(ATTRIBUTE);
				setState(6376);
				name();
				setState(6377);
				match(TO);
				setState(6378);
				name();
				setState(6379);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_columnContext opt_column() throws RecognitionException {
		Opt_columnContext _localctx = new Opt_columnContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_opt_column);
		try {
			setState(6385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6383);
				match(COLUMN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_set_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_set_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_set_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_set_data(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_set_data(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_set_dataContext opt_set_data() throws RecognitionException {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_opt_set_data);
		try {
			setState(6390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(6387);
				match(SET);
				setState(6388);
				match(DATA_P);
				}
				break;
			case TYPE_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterobjectdependsstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_noContext opt_no() {
			return getRuleContext(Opt_noContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectdependsstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectdependsstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectdependsstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectdependsstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectdependsstmtContext alterobjectdependsstmt() throws RecognitionException {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_alterobjectdependsstmt);
		try {
			setState(6449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6392);
				match(ALTER);
				setState(6393);
				match(FUNCTION);
				setState(6394);
				function_with_argtypes();
				setState(6395);
				opt_no();
				setState(6396);
				match(DEPENDS);
				setState(6397);
				match(ON);
				setState(6398);
				match(EXTENSION);
				setState(6399);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6401);
				match(ALTER);
				setState(6402);
				match(PROCEDURE);
				setState(6403);
				function_with_argtypes();
				setState(6404);
				opt_no();
				setState(6405);
				match(DEPENDS);
				setState(6406);
				match(ON);
				setState(6407);
				match(EXTENSION);
				setState(6408);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6410);
				match(ALTER);
				setState(6411);
				match(ROUTINE);
				setState(6412);
				function_with_argtypes();
				setState(6413);
				opt_no();
				setState(6414);
				match(DEPENDS);
				setState(6415);
				match(ON);
				setState(6416);
				match(EXTENSION);
				setState(6417);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6419);
				match(ALTER);
				setState(6420);
				match(TRIGGER);
				setState(6421);
				name();
				setState(6422);
				match(ON);
				setState(6423);
				qualified_name();
				setState(6424);
				opt_no();
				setState(6425);
				match(DEPENDS);
				setState(6426);
				match(ON);
				setState(6427);
				match(EXTENSION);
				setState(6428);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6430);
				match(ALTER);
				setState(6431);
				match(MATERIALIZED);
				setState(6432);
				match(VIEW);
				setState(6433);
				qualified_name();
				setState(6434);
				opt_no();
				setState(6435);
				match(DEPENDS);
				setState(6436);
				match(ON);
				setState(6437);
				match(EXTENSION);
				setState(6438);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6440);
				match(ALTER);
				setState(6441);
				match(INDEX);
				setState(6442);
				qualified_name();
				setState(6443);
				opt_no();
				setState(6444);
				match(DEPENDS);
				setState(6445);
				match(ON);
				setState(6446);
				match(EXTENSION);
				setState(6447);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_noContext opt_no() throws RecognitionException {
		Opt_noContext _localctx = new Opt_noContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_opt_no);
		try {
			setState(6453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(6451);
				match(NO);
				}
				break;
			case DEPENDS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterobjectschemastmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterobjectschemastmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterobjectschemastmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterobjectschemastmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterobjectschemastmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterobjectschemastmtContext alterobjectschemastmt() throws RecognitionException {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_alterobjectschemastmt);
		try {
			setState(6672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6455);
				match(ALTER);
				setState(6456);
				match(AGGREGATE);
				setState(6457);
				aggregate_with_argtypes();
				setState(6458);
				match(SET);
				setState(6459);
				match(SCHEMA);
				setState(6460);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6462);
				match(ALTER);
				setState(6463);
				match(COLLATION);
				setState(6464);
				any_name();
				setState(6465);
				match(SET);
				setState(6466);
				match(SCHEMA);
				setState(6467);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6469);
				match(ALTER);
				setState(6470);
				match(CONVERSION_P);
				setState(6471);
				any_name();
				setState(6472);
				match(SET);
				setState(6473);
				match(SCHEMA);
				setState(6474);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6476);
				match(ALTER);
				setState(6477);
				match(DOMAIN_P);
				setState(6478);
				any_name();
				setState(6479);
				match(SET);
				setState(6480);
				match(SCHEMA);
				setState(6481);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6483);
				match(ALTER);
				setState(6484);
				match(EXTENSION);
				setState(6485);
				name();
				setState(6486);
				match(SET);
				setState(6487);
				match(SCHEMA);
				setState(6488);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6490);
				match(ALTER);
				setState(6491);
				match(FUNCTION);
				setState(6492);
				function_with_argtypes();
				setState(6493);
				match(SET);
				setState(6494);
				match(SCHEMA);
				setState(6495);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6497);
				match(ALTER);
				setState(6498);
				match(OPERATOR);
				setState(6499);
				operator_with_argtypes();
				setState(6500);
				match(SET);
				setState(6501);
				match(SCHEMA);
				setState(6502);
				name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6504);
				match(ALTER);
				setState(6505);
				match(OPERATOR);
				setState(6506);
				match(CLASS);
				setState(6507);
				any_name();
				setState(6508);
				match(USING);
				setState(6509);
				name();
				setState(6510);
				match(SET);
				setState(6511);
				match(SCHEMA);
				setState(6512);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6514);
				match(ALTER);
				setState(6515);
				match(OPERATOR);
				setState(6516);
				match(FAMILY);
				setState(6517);
				any_name();
				setState(6518);
				match(USING);
				setState(6519);
				name();
				setState(6520);
				match(SET);
				setState(6521);
				match(SCHEMA);
				setState(6522);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6524);
				match(ALTER);
				setState(6525);
				match(PROCEDURE);
				setState(6526);
				function_with_argtypes();
				setState(6527);
				match(SET);
				setState(6528);
				match(SCHEMA);
				setState(6529);
				name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6531);
				match(ALTER);
				setState(6532);
				match(ROUTINE);
				setState(6533);
				function_with_argtypes();
				setState(6534);
				match(SET);
				setState(6535);
				match(SCHEMA);
				setState(6536);
				name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6538);
				match(ALTER);
				setState(6539);
				match(TABLE);
				setState(6540);
				relation_expr();
				setState(6541);
				match(SET);
				setState(6542);
				match(SCHEMA);
				setState(6543);
				name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6545);
				match(ALTER);
				setState(6546);
				match(TABLE);
				setState(6547);
				match(IF_P);
				setState(6548);
				match(EXISTS);
				setState(6549);
				relation_expr();
				setState(6550);
				match(SET);
				setState(6551);
				match(SCHEMA);
				setState(6552);
				name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6554);
				match(ALTER);
				setState(6555);
				match(STATISTICS);
				setState(6556);
				any_name();
				setState(6557);
				match(SET);
				setState(6558);
				match(SCHEMA);
				setState(6559);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6561);
				match(ALTER);
				setState(6562);
				match(TEXT_P);
				setState(6563);
				match(SEARCH);
				setState(6564);
				match(PARSER);
				setState(6565);
				any_name();
				setState(6566);
				match(SET);
				setState(6567);
				match(SCHEMA);
				setState(6568);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6570);
				match(ALTER);
				setState(6571);
				match(TEXT_P);
				setState(6572);
				match(SEARCH);
				setState(6573);
				match(DICTIONARY);
				setState(6574);
				any_name();
				setState(6575);
				match(SET);
				setState(6576);
				match(SCHEMA);
				setState(6577);
				name();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6579);
				match(ALTER);
				setState(6580);
				match(TEXT_P);
				setState(6581);
				match(SEARCH);
				setState(6582);
				match(TEMPLATE);
				setState(6583);
				any_name();
				setState(6584);
				match(SET);
				setState(6585);
				match(SCHEMA);
				setState(6586);
				name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6588);
				match(ALTER);
				setState(6589);
				match(TEXT_P);
				setState(6590);
				match(SEARCH);
				setState(6591);
				match(CONFIGURATION);
				setState(6592);
				any_name();
				setState(6593);
				match(SET);
				setState(6594);
				match(SCHEMA);
				setState(6595);
				name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6597);
				match(ALTER);
				setState(6598);
				match(SEQUENCE);
				setState(6599);
				qualified_name();
				setState(6600);
				match(SET);
				setState(6601);
				match(SCHEMA);
				setState(6602);
				name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6604);
				match(ALTER);
				setState(6605);
				match(SEQUENCE);
				setState(6606);
				match(IF_P);
				setState(6607);
				match(EXISTS);
				setState(6608);
				qualified_name();
				setState(6609);
				match(SET);
				setState(6610);
				match(SCHEMA);
				setState(6611);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6613);
				match(ALTER);
				setState(6614);
				match(VIEW);
				setState(6615);
				qualified_name();
				setState(6616);
				match(SET);
				setState(6617);
				match(SCHEMA);
				setState(6618);
				name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6620);
				match(ALTER);
				setState(6621);
				match(VIEW);
				setState(6622);
				match(IF_P);
				setState(6623);
				match(EXISTS);
				setState(6624);
				qualified_name();
				setState(6625);
				match(SET);
				setState(6626);
				match(SCHEMA);
				setState(6627);
				name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6629);
				match(ALTER);
				setState(6630);
				match(MATERIALIZED);
				setState(6631);
				match(VIEW);
				setState(6632);
				qualified_name();
				setState(6633);
				match(SET);
				setState(6634);
				match(SCHEMA);
				setState(6635);
				name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6637);
				match(ALTER);
				setState(6638);
				match(MATERIALIZED);
				setState(6639);
				match(VIEW);
				setState(6640);
				match(IF_P);
				setState(6641);
				match(EXISTS);
				setState(6642);
				qualified_name();
				setState(6643);
				match(SET);
				setState(6644);
				match(SCHEMA);
				setState(6645);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6647);
				match(ALTER);
				setState(6648);
				match(FOREIGN);
				setState(6649);
				match(TABLE);
				setState(6650);
				relation_expr();
				setState(6651);
				match(SET);
				setState(6652);
				match(SCHEMA);
				setState(6653);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6655);
				match(ALTER);
				setState(6656);
				match(FOREIGN);
				setState(6657);
				match(TABLE);
				setState(6658);
				match(IF_P);
				setState(6659);
				match(EXISTS);
				setState(6660);
				relation_expr();
				setState(6661);
				match(SET);
				setState(6662);
				match(SCHEMA);
				setState(6663);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6665);
				match(ALTER);
				setState(6666);
				match(TYPE_P);
				setState(6667);
				any_name();
				setState(6668);
				match(SET);
				setState(6669);
				match(SCHEMA);
				setState(6670);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlteroperatorstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alteroperatorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlteroperatorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlteroperatorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlteroperatorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlteroperatorstmtContext alteroperatorstmt() throws RecognitionException {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_alteroperatorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6674);
			match(ALTER);
			setState(6675);
			match(OPERATOR);
			setState(6676);
			operator_with_argtypes();
			setState(6677);
			match(SET);
			setState(6678);
			match(OPEN_PAREN);
			setState(6679);
			operator_def_list();
			setState(6680);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_listContext extends ParserRuleContext {
		public List<Operator_def_elemContext> operator_def_elem() {
			return getRuleContexts(Operator_def_elemContext.class);
		}
		public Operator_def_elemContext operator_def_elem(int i) {
			return getRuleContext(Operator_def_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_listContext operator_def_list() throws RecognitionException {
		Operator_def_listContext _localctx = new Operator_def_listContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_operator_def_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6682);
			operator_def_elem();
			setState(6687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6683);
				match(COMMA);
				setState(6684);
				operator_def_elem();
				}
				}
				setState(6689);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_elemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Operator_def_argContext operator_def_arg() {
			return getRuleContext(Operator_def_argContext.class,0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_elemContext operator_def_elem() throws RecognitionException {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_operator_def_elem);
		try {
			setState(6698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6690);
				collabel();
				setState(6691);
				match(EQUAL);
				setState(6692);
				match(NONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6694);
				collabel();
				setState(6695);
				match(EQUAL);
				setState(6696);
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Operator_def_argContext extends ParserRuleContext {
		public Func_typeContext func_type() {
			return getRuleContext(Func_typeContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator_def_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOperator_def_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOperator_def_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOperator_def_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Operator_def_argContext operator_def_arg() throws RecognitionException {
		Operator_def_argContext _localctx = new Operator_def_argContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_operator_def_arg);
		try {
			setState(6705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6700);
				func_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6701);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6702);
				qual_all_op();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6703);
				numericonly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6704);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertypestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Operator_def_listContext operator_def_list() {
			return getRuleContext(Operator_def_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertypestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertypestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertypestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertypestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertypestmtContext altertypestmt() throws RecognitionException {
		AltertypestmtContext _localctx = new AltertypestmtContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_altertypestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6707);
			match(ALTER);
			setState(6708);
			match(TYPE_P);
			setState(6709);
			any_name();
			setState(6710);
			match(SET);
			setState(6711);
			match(OPEN_PAREN);
			setState(6712);
			operator_def_list();
			setState(6713);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterownerstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return getRuleContext(Aggregate_with_argtypesContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Function_with_argtypesContext function_with_argtypes() {
			return getRuleContext(Function_with_argtypesContext.class,0);
		}
		public Opt_proceduralContext opt_procedural() {
			return getRuleContext(Opt_proceduralContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public Operator_with_argtypesContext operator_with_argtypes() {
			return getRuleContext(Operator_with_argtypesContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterownerstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterownerstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterownerstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterownerstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterownerstmtContext alterownerstmt() throws RecognitionException {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_alterownerstmt);
		try {
			setState(6898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6715);
				match(ALTER);
				setState(6716);
				match(AGGREGATE);
				setState(6717);
				aggregate_with_argtypes();
				setState(6718);
				match(OWNER);
				setState(6719);
				match(TO);
				setState(6720);
				rolespec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6722);
				match(ALTER);
				setState(6723);
				match(COLLATION);
				setState(6724);
				any_name();
				setState(6725);
				match(OWNER);
				setState(6726);
				match(TO);
				setState(6727);
				rolespec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6729);
				match(ALTER);
				setState(6730);
				match(CONVERSION_P);
				setState(6731);
				any_name();
				setState(6732);
				match(OWNER);
				setState(6733);
				match(TO);
				setState(6734);
				rolespec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6736);
				match(ALTER);
				setState(6737);
				match(DATABASE);
				setState(6738);
				name();
				setState(6739);
				match(OWNER);
				setState(6740);
				match(TO);
				setState(6741);
				rolespec();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6743);
				match(ALTER);
				setState(6744);
				match(DOMAIN_P);
				setState(6745);
				any_name();
				setState(6746);
				match(OWNER);
				setState(6747);
				match(TO);
				setState(6748);
				rolespec();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6750);
				match(ALTER);
				setState(6751);
				match(FUNCTION);
				setState(6752);
				function_with_argtypes();
				setState(6753);
				match(OWNER);
				setState(6754);
				match(TO);
				setState(6755);
				rolespec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6757);
				match(ALTER);
				setState(6758);
				opt_procedural();
				setState(6759);
				match(LANGUAGE);
				setState(6760);
				name();
				setState(6761);
				match(OWNER);
				setState(6762);
				match(TO);
				setState(6763);
				rolespec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6765);
				match(ALTER);
				setState(6766);
				match(LARGE_P);
				setState(6767);
				match(OBJECT_P);
				setState(6768);
				numericonly();
				setState(6769);
				match(OWNER);
				setState(6770);
				match(TO);
				setState(6771);
				rolespec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6773);
				match(ALTER);
				setState(6774);
				match(OPERATOR);
				setState(6775);
				operator_with_argtypes();
				setState(6776);
				match(OWNER);
				setState(6777);
				match(TO);
				setState(6778);
				rolespec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6780);
				match(ALTER);
				setState(6781);
				match(OPERATOR);
				setState(6782);
				match(CLASS);
				setState(6783);
				any_name();
				setState(6784);
				match(USING);
				setState(6785);
				name();
				setState(6786);
				match(OWNER);
				setState(6787);
				match(TO);
				setState(6788);
				rolespec();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6790);
				match(ALTER);
				setState(6791);
				match(OPERATOR);
				setState(6792);
				match(FAMILY);
				setState(6793);
				any_name();
				setState(6794);
				match(USING);
				setState(6795);
				name();
				setState(6796);
				match(OWNER);
				setState(6797);
				match(TO);
				setState(6798);
				rolespec();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6800);
				match(ALTER);
				setState(6801);
				match(PROCEDURE);
				setState(6802);
				function_with_argtypes();
				setState(6803);
				match(OWNER);
				setState(6804);
				match(TO);
				setState(6805);
				rolespec();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6807);
				match(ALTER);
				setState(6808);
				match(ROUTINE);
				setState(6809);
				function_with_argtypes();
				setState(6810);
				match(OWNER);
				setState(6811);
				match(TO);
				setState(6812);
				rolespec();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6814);
				match(ALTER);
				setState(6815);
				match(SCHEMA);
				setState(6816);
				name();
				setState(6817);
				match(OWNER);
				setState(6818);
				match(TO);
				setState(6819);
				rolespec();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6821);
				match(ALTER);
				setState(6822);
				match(TYPE_P);
				setState(6823);
				any_name();
				setState(6824);
				match(OWNER);
				setState(6825);
				match(TO);
				setState(6826);
				rolespec();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6828);
				match(ALTER);
				setState(6829);
				match(TABLESPACE);
				setState(6830);
				name();
				setState(6831);
				match(OWNER);
				setState(6832);
				match(TO);
				setState(6833);
				rolespec();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6835);
				match(ALTER);
				setState(6836);
				match(STATISTICS);
				setState(6837);
				any_name();
				setState(6838);
				match(OWNER);
				setState(6839);
				match(TO);
				setState(6840);
				rolespec();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6842);
				match(ALTER);
				setState(6843);
				match(TEXT_P);
				setState(6844);
				match(SEARCH);
				setState(6845);
				match(DICTIONARY);
				setState(6846);
				any_name();
				setState(6847);
				match(OWNER);
				setState(6848);
				match(TO);
				setState(6849);
				rolespec();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6851);
				match(ALTER);
				setState(6852);
				match(TEXT_P);
				setState(6853);
				match(SEARCH);
				setState(6854);
				match(CONFIGURATION);
				setState(6855);
				any_name();
				setState(6856);
				match(OWNER);
				setState(6857);
				match(TO);
				setState(6858);
				rolespec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6860);
				match(ALTER);
				setState(6861);
				match(FOREIGN);
				setState(6862);
				match(DATA_P);
				setState(6863);
				match(WRAPPER);
				setState(6864);
				name();
				setState(6865);
				match(OWNER);
				setState(6866);
				match(TO);
				setState(6867);
				rolespec();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6869);
				match(ALTER);
				setState(6870);
				match(SERVER);
				setState(6871);
				name();
				setState(6872);
				match(OWNER);
				setState(6873);
				match(TO);
				setState(6874);
				rolespec();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6876);
				match(ALTER);
				setState(6877);
				match(EVENT);
				setState(6878);
				match(TRIGGER);
				setState(6879);
				name();
				setState(6880);
				match(OWNER);
				setState(6881);
				match(TO);
				setState(6882);
				rolespec();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6884);
				match(ALTER);
				setState(6885);
				match(PUBLICATION);
				setState(6886);
				name();
				setState(6887);
				match(OWNER);
				setState(6888);
				match(TO);
				setState(6889);
				rolespec();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6891);
				match(ALTER);
				setState(6892);
				match(SUBSCRIPTION);
				setState(6893);
				name();
				setState(6894);
				match(OWNER);
				setState(6895);
				match(TO);
				setState(6896);
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatepublicationstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_publication_for_tablesContext opt_publication_for_tables() {
			return getRuleContext(Opt_publication_for_tablesContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatepublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatepublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatepublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatepublicationstmtContext createpublicationstmt() throws RecognitionException {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_createpublicationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6900);
			match(CREATE);
			setState(6901);
			match(PUBLICATION);
			setState(6902);
			name();
			setState(6903);
			opt_publication_for_tables();
			setState(6904);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_publication_for_tablesContext extends ParserRuleContext {
		public Publication_for_tablesContext publication_for_tables() {
			return getRuleContext(Publication_for_tablesContext.class,0);
		}
		public Opt_publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_publication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_publication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_publication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_publication_for_tablesContext opt_publication_for_tables() throws RecognitionException {
		Opt_publication_for_tablesContext _localctx = new Opt_publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_opt_publication_for_tables);
		try {
			setState(6908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(6906);
				publication_for_tables();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_for_tablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_for_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_for_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_for_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_for_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_for_tablesContext publication_for_tables() throws RecognitionException {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_publication_for_tables);
		try {
			setState(6916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6910);
				match(FOR);
				setState(6911);
				match(TABLE);
				setState(6912);
				relation_expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6913);
				match(FOR);
				setState(6914);
				match(ALL);
				setState(6915);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterpublicationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterpublicationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterpublicationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterpublicationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterpublicationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterpublicationstmtContext alterpublicationstmt() throws RecognitionException {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_alterpublicationstmt);
		try {
			setState(6945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6918);
				match(ALTER);
				setState(6919);
				match(PUBLICATION);
				setState(6920);
				name();
				setState(6921);
				match(SET);
				setState(6922);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6924);
				match(ALTER);
				setState(6925);
				match(PUBLICATION);
				setState(6926);
				name();
				setState(6927);
				match(ADD_P);
				setState(6928);
				match(TABLE);
				setState(6929);
				relation_expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6931);
				match(ALTER);
				setState(6932);
				match(PUBLICATION);
				setState(6933);
				name();
				setState(6934);
				match(SET);
				setState(6935);
				match(TABLE);
				setState(6936);
				relation_expr_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6938);
				match(ALTER);
				setState(6939);
				match(PUBLICATION);
				setState(6940);
				name();
				setState(6941);
				match(DROP);
				setState(6942);
				match(TABLE);
				setState(6943);
				relation_expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatesubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatesubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatesubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatesubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatesubscriptionstmtContext createsubscriptionstmt() throws RecognitionException {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_createsubscriptionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6947);
			match(CREATE);
			setState(6948);
			match(SUBSCRIPTION);
			setState(6949);
			name();
			setState(6950);
			match(CONNECTION);
			setState(6951);
			sconst();
			setState(6952);
			match(PUBLICATION);
			setState(6953);
			publication_name_list();
			setState(6954);
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_name_listContext extends ParserRuleContext {
		public List<Publication_name_itemContext> publication_name_item() {
			return getRuleContexts(Publication_name_itemContext.class);
		}
		public Publication_name_itemContext publication_name_item(int i) {
			return getRuleContext(Publication_name_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Publication_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_listContext publication_name_list() throws RecognitionException {
		Publication_name_listContext _localctx = new Publication_name_listContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_publication_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6956);
			publication_name_item();
			setState(6961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6957);
				match(COMMA);
				setState(6958);
				publication_name_item();
				}
				}
				setState(6963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Publication_name_itemContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publication_name_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPublication_name_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPublication_name_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPublication_name_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Publication_name_itemContext publication_name_item() throws RecognitionException {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_publication_name_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6964);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltersubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Opt_definitionContext opt_definition() {
			return getRuleContext(Opt_definitionContext.class,0);
		}
		public Publication_name_listContext publication_name_list() {
			return getRuleContext(Publication_name_listContext.class,0);
		}
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersubscriptionstmtContext altersubscriptionstmt() throws RecognitionException {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_altersubscriptionstmt);
		try {
			setState(7003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6966);
				match(ALTER);
				setState(6967);
				match(SUBSCRIPTION);
				setState(6968);
				name();
				setState(6969);
				match(SET);
				setState(6970);
				definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6972);
				match(ALTER);
				setState(6973);
				match(SUBSCRIPTION);
				setState(6974);
				name();
				setState(6975);
				match(CONNECTION);
				setState(6976);
				sconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6978);
				match(ALTER);
				setState(6979);
				match(SUBSCRIPTION);
				setState(6980);
				name();
				setState(6981);
				match(REFRESH);
				setState(6982);
				match(PUBLICATION);
				setState(6983);
				opt_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6985);
				match(ALTER);
				setState(6986);
				match(SUBSCRIPTION);
				setState(6987);
				name();
				setState(6988);
				match(SET);
				setState(6989);
				match(PUBLICATION);
				setState(6990);
				publication_name_list();
				setState(6991);
				opt_definition();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6993);
				match(ALTER);
				setState(6994);
				match(SUBSCRIPTION);
				setState(6995);
				name();
				setState(6996);
				match(ENABLE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6998);
				match(ALTER);
				setState(6999);
				match(SUBSCRIPTION);
				setState(7000);
				name();
				setState(7001);
				match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropsubscriptionstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropsubscriptionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropsubscriptionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropsubscriptionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropsubscriptionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropsubscriptionstmtContext dropsubscriptionstmt() throws RecognitionException {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_dropsubscriptionstmt);
		try {
			setState(7017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7005);
				match(DROP);
				setState(7006);
				match(SUBSCRIPTION);
				setState(7007);
				name();
				setState(7008);
				opt_drop_behavior();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7010);
				match(DROP);
				setState(7011);
				match(SUBSCRIPTION);
				setState(7012);
				match(IF_P);
				setState(7013);
				match(EXISTS);
				setState(7014);
				name();
				setState(7015);
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RulestmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_or_replaceContext opt_or_replace() {
			return getRuleContext(Opt_or_replaceContext.class,0);
		}
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Opt_insteadContext opt_instead() {
			return getRuleContext(Opt_insteadContext.class,0);
		}
		public RuleactionlistContext ruleactionlist() {
			return getRuleContext(RuleactionlistContext.class,0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rulestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRulestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRulestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRulestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RulestmtContext rulestmt() throws RecognitionException {
		RulestmtContext _localctx = new RulestmtContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_rulestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7019);
			match(CREATE);
			setState(7020);
			opt_or_replace();
			setState(7021);
			match(RULE);
			setState(7022);
			name();
			setState(7023);
			match(AS);
			setState(7024);
			match(ON);
			setState(7025);
			event();
			setState(7026);
			match(TO);
			setState(7027);
			qualified_name();
			setState(7028);
			where_clause();
			setState(7029);
			match(DO);
			setState(7030);
			opt_instead();
			setState(7031);
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionlistContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public RuleactionmultiContext ruleactionmulti() {
			return getRuleContext(RuleactionmultiContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionlistContext ruleactionlist() throws RecognitionException {
		RuleactionlistContext _localctx = new RuleactionlistContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_ruleactionlist);
		try {
			setState(7039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7033);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7034);
				ruleactionstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7035);
				match(OPEN_PAREN);
				setState(7036);
				ruleactionmulti();
				setState(7037);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionmultiContext extends ParserRuleContext {
		public List<RuleactionstmtOrEmptyContext> ruleactionstmtOrEmpty() {
			return getRuleContexts(RuleactionstmtOrEmptyContext.class);
		}
		public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty(int i) {
			return getRuleContext(RuleactionstmtOrEmptyContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionmulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionmulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionmulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionmulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionmultiContext ruleactionmulti() throws RecognitionException {
		RuleactionmultiContext _localctx = new RuleactionmultiContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_ruleactionmulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7041);
			ruleactionstmtOrEmpty();
			setState(7046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI) {
				{
				{
				setState(7042);
				match(SEMI);
				setState(7043);
				ruleactionstmtOrEmpty();
				}
				}
				setState(7048);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionstmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public NotifystmtContext notifystmt() {
			return getRuleContext(NotifystmtContext.class,0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtContext ruleactionstmt() throws RecognitionException {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_ruleactionstmt);
		try {
			setState(7054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7049);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7050);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7051);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7052);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7053);
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleactionstmtOrEmptyContext extends ParserRuleContext {
		public RuleactionstmtContext ruleactionstmt() {
			return getRuleContext(RuleactionstmtContext.class,0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleactionstmtOrEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRuleactionstmtOrEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRuleactionstmtOrEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRuleactionstmtOrEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() throws RecognitionException {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_ruleactionstmtOrEmpty);
		try {
			setState(7058);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(7056);
				ruleactionstmt();
				}
				break;
			case CLOSE_PAREN:
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7060);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_insteadContext extends ParserRuleContext {
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_instead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_instead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_instead(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_instead(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_insteadContext opt_instead() throws RecognitionException {
		Opt_insteadContext _localctx = new Opt_insteadContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_opt_instead);
		try {
			setState(7065);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSTEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7062);
				match(INSTEAD);
				}
				break;
			case ALSO:
				enterOuterAlt(_localctx, 2);
				{
				setState(7063);
				match(ALSO);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifystmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Notify_payloadContext notify_payload() {
			return getRuleContext(Notify_payloadContext.class,0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotifystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotifystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotifystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifystmtContext notifystmt() throws RecognitionException {
		NotifystmtContext _localctx = new NotifystmtContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_notifystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7067);
			match(NOTIFY);
			setState(7068);
			colid();
			setState(7069);
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_payloadContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_payload; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotify_payload(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotify_payload(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotify_payload(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_payloadContext notify_payload() throws RecognitionException {
		Notify_payloadContext _localctx = new Notify_payloadContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_notify_payload);
		try {
			setState(7074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(7071);
				match(COMMA);
				setState(7072);
				sconst();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenstmtContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterListenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitListenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitListenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenstmtContext listenstmt() throws RecognitionException {
		ListenstmtContext _localctx = new ListenstmtContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_listenstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7076);
			match(LISTEN);
			setState(7077);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenstmtContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlistenstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnlistenstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnlistenstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnlistenstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenstmtContext unlistenstmt() throws RecognitionException {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_unlistenstmt);
		try {
			setState(7083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7079);
				match(UNLISTEN);
				setState(7080);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7081);
				match(UNLISTEN);
				setState(7082);
				match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionstmtContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public Opt_transactionContext opt_transaction() {
			return getRuleContext(Opt_transactionContext.class,0);
		}
		public Opt_transaction_chainContext opt_transaction_chain() {
			return getRuleContext(Opt_transaction_chainContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return getRuleContext(Transaction_mode_list_or_emptyContext.class,0);
		}
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransactionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransactionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransactionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionstmtContext transactionstmt() throws RecognitionException {
		TransactionstmtContext _localctx = new TransactionstmtContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_transactionstmt);
		try {
			setState(7135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7085);
				match(ABORT_P);
				setState(7086);
				opt_transaction();
				setState(7087);
				opt_transaction_chain();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7089);
				match(BEGIN_P);
				setState(7090);
				opt_transaction();
				setState(7091);
				transaction_mode_list_or_empty();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7093);
				match(START);
				setState(7094);
				match(TRANSACTION);
				setState(7095);
				transaction_mode_list_or_empty();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7096);
				match(COMMIT);
				setState(7097);
				opt_transaction();
				setState(7098);
				opt_transaction_chain();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7100);
				match(END_P);
				setState(7101);
				opt_transaction();
				setState(7102);
				opt_transaction_chain();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7104);
				match(ROLLBACK);
				setState(7105);
				opt_transaction();
				setState(7106);
				opt_transaction_chain();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7108);
				match(SAVEPOINT);
				setState(7109);
				colid();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7110);
				match(RELEASE);
				setState(7111);
				match(SAVEPOINT);
				setState(7112);
				colid();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7113);
				match(RELEASE);
				setState(7114);
				colid();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7115);
				match(ROLLBACK);
				setState(7116);
				opt_transaction();
				setState(7117);
				match(TO);
				setState(7118);
				match(SAVEPOINT);
				setState(7119);
				colid();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7121);
				match(ROLLBACK);
				setState(7122);
				opt_transaction();
				setState(7123);
				match(TO);
				setState(7124);
				colid();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7126);
				match(PREPARE);
				setState(7127);
				match(TRANSACTION);
				setState(7128);
				sconst();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7129);
				match(COMMIT);
				setState(7130);
				match(PREPARED);
				setState(7131);
				sconst();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7132);
				match(ROLLBACK);
				setState(7133);
				match(PREPARED);
				setState(7134);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transactionContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transactionContext opt_transaction() throws RecognitionException {
		Opt_transactionContext _localctx = new Opt_transactionContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_opt_transaction);
		try {
			setState(7140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WORK:
				enterOuterAlt(_localctx, 1);
				{
				setState(7137);
				match(WORK);
				}
				break;
			case TRANSACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7138);
				match(TRANSACTION);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case TO:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case ISOLATION:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case READ:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_itemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public Iso_levelContext iso_level() {
			return getRuleContext(Iso_levelContext.class,0);
		}
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_itemContext transaction_mode_item() throws RecognitionException {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_transaction_mode_item);
		try {
			setState(7152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7142);
				match(ISOLATION);
				setState(7143);
				match(LEVEL);
				setState(7144);
				iso_level();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7145);
				match(READ);
				setState(7146);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7147);
				match(READ);
				setState(7148);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7149);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7150);
				match(NOT);
				setState(7151);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_listContext extends ParserRuleContext {
		public List<Transaction_mode_itemContext> transaction_mode_item() {
			return getRuleContexts(Transaction_mode_itemContext.class);
		}
		public Transaction_mode_itemContext transaction_mode_item(int i) {
			return getRuleContext(Transaction_mode_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_transaction_mode_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7154);
			transaction_mode_item();
			setState(7161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA || _la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
				{
				{
				setState(7156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7155);
					match(COMMA);
					}
				}

				setState(7158);
				transaction_mode_item();
				}
				}
				setState(7163);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list_or_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list_or_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list_or_empty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list_or_empty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() throws RecognitionException {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_transaction_mode_list_or_empty);
		try {
			setState(7166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRABLE:
			case NOT:
			case ISOLATION:
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(7164);
				transaction_mode_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_transaction_chainContext opt_transaction_chain() throws RecognitionException {
		Opt_transaction_chainContext _localctx = new Opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_opt_transaction_chain);
		int _la;
		try {
			setState(7174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(7168);
				match(AND);
				setState(7170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7169);
					match(NO);
					}
				}

				setState(7172);
				match(CHAIN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Opt_check_optionContext opt_check_option() {
			return getRuleContext(Opt_check_optionContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_column_listContext opt_column_list() {
			return getRuleContext(Opt_column_listContext.class,0);
		}
		public Opt_reloptionsContext opt_reloptions() {
			return getRuleContext(Opt_reloptionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ColumnlistContext columnlist() {
			return getRuleContext(ColumnlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public ViewstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterViewstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitViewstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitViewstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewstmtContext viewstmt() throws RecognitionException {
		ViewstmtContext _localctx = new ViewstmtContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_viewstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7176);
			match(CREATE);
			setState(7179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7177);
				match(OR);
				setState(7178);
				match(REPLACE);
				}
			}

			setState(7181);
			opttemp();
			setState(7195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VIEW:
				{
				setState(7182);
				match(VIEW);
				setState(7183);
				qualified_name();
				setState(7184);
				opt_column_list();
				setState(7185);
				opt_reloptions();
				}
				break;
			case RECURSIVE:
				{
				setState(7187);
				match(RECURSIVE);
				setState(7188);
				match(VIEW);
				setState(7189);
				qualified_name();
				setState(7190);
				match(OPEN_PAREN);
				setState(7191);
				columnlist();
				setState(7192);
				match(CLOSE_PAREN);
				setState(7193);
				opt_reloptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7197);
			match(AS);
			setState(7198);
			selectstmt();
			setState(7199);
			opt_check_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_check_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_check_optionContext opt_check_option() throws RecognitionException {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_opt_check_option);
		int _la;
		try {
			setState(7208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7201);
				match(WITH);
				setState(7203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(7202);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7205);
				match(CHECK);
				setState(7206);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadstmtContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoadstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoadstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoadstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadstmtContext loadstmt() throws RecognitionException {
		LoadstmtContext _localctx = new LoadstmtContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_loadstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7210);
			match(LOAD);
			setState(7211);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbstmtContext createdbstmt() throws RecognitionException {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_createdbstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7213);
			match(CREATE);
			setState(7214);
			match(DATABASE);
			setState(7215);
			name();
			setState(7216);
			opt_with();
			setState(7217);
			createdb_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_listContext extends ParserRuleContext {
		public Createdb_opt_itemsContext createdb_opt_items() {
			return getRuleContext(Createdb_opt_itemsContext.class,0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_listContext createdb_opt_list() throws RecognitionException {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_createdb_opt_list);
		try {
			setState(7221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7219);
				createdb_opt_items();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_itemsContext extends ParserRuleContext {
		public List<Createdb_opt_itemContext> createdb_opt_item() {
			return getRuleContexts(Createdb_opt_itemContext.class);
		}
		public Createdb_opt_itemContext createdb_opt_item(int i) {
			return getRuleContext(Createdb_opt_itemContext.class,i);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemsContext createdb_opt_items() throws RecognitionException {
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_createdb_opt_items);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7224); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7223);
					createdb_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7226); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_itemContext extends ParserRuleContext {
		public Createdb_opt_nameContext createdb_opt_name() {
			return getRuleContext(Createdb_opt_nameContext.class,0);
		}
		public Opt_equalContext opt_equal() {
			return getRuleContext(Opt_equalContext.class,0);
		}
		public SignediconstContext signediconst() {
			return getRuleContext(SignediconstContext.class,0);
		}
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_itemContext createdb_opt_item() throws RecognitionException {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_createdb_opt_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7228);
			createdb_opt_name();
			setState(7229);
			opt_equal();
			setState(7233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(7230);
				signediconst();
				}
				break;
			case 2:
				{
				setState(7231);
				opt_boolean_or_string();
				}
				break;
			case 3:
				{
				setState(7232);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Createdb_opt_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdb_opt_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedb_opt_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedb_opt_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedb_opt_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Createdb_opt_nameContext createdb_opt_name() throws RecognitionException {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_createdb_opt_name);
		try {
			setState(7243);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7235);
				identifier();
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7236);
				match(CONNECTION);
				setState(7237);
				match(LIMIT);
				}
				break;
			case ENCODING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7238);
				match(ENCODING);
				}
				break;
			case LOCATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(7239);
				match(LOCATION);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 5);
				{
				setState(7240);
				match(OWNER);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 6);
				{
				setState(7241);
				match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7242);
				match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Opt_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_equalContext opt_equal() throws RecognitionException {
		Opt_equalContext _localctx = new Opt_equalContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_opt_equal);
		try {
			setState(7247);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7245);
				match(EQUAL);
				}
				break;
			case PLUS:
			case MINUS:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdatabasestmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Createdb_opt_listContext createdb_opt_list() {
			return getRuleContext(Createdb_opt_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasestmtContext alterdatabasestmt() throws RecognitionException {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_alterdatabasestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7249);
			match(ALTER);
			setState(7250);
			match(DATABASE);
			setState(7251);
			name();
			setState(7258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				setState(7252);
				match(WITH);
				setState(7253);
				createdb_opt_list();
				}
				break;
			case 2:
				{
				setState(7254);
				createdb_opt_list();
				}
				break;
			case 3:
				{
				setState(7255);
				match(SET);
				setState(7256);
				match(TABLESPACE);
				setState(7257);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdatabasesetstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetresetclauseContext setresetclause() {
			return getRuleContext(SetresetclauseContext.class,0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdatabasesetstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdatabasesetstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdatabasesetstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdatabasesetstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdatabasesetstmtContext alterdatabasesetstmt() throws RecognitionException {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_alterdatabasesetstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7260);
			match(ALTER);
			setState(7261);
			match(DATABASE);
			setState(7262);
			name();
			setState(7263);
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropdbstmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_withContext opt_with() {
			return getRuleContext(Opt_withContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Drop_option_listContext drop_option_list() {
			return getRuleContext(Drop_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DropdbstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropdbstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDropdbstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDropdbstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDropdbstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropdbstmtContext dropdbstmt() throws RecognitionException {
		DropdbstmtContext _localctx = new DropdbstmtContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_dropdbstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7265);
			match(DROP);
			setState(7266);
			match(DATABASE);
			setState(7269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				setState(7267);
				match(IF_P);
				setState(7268);
				match(EXISTS);
				}
				break;
			}
			setState(7271);
			name();
			setState(7277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				setState(7272);
				opt_with();
				setState(7273);
				match(OPEN_PAREN);
				setState(7274);
				drop_option_list();
				setState(7275);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_option_listContext extends ParserRuleContext {
		public List<Drop_optionContext> drop_option() {
			return getRuleContexts(Drop_optionContext.class);
		}
		public Drop_optionContext drop_option(int i) {
			return getRuleContext(Drop_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Drop_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_option_listContext drop_option_list() throws RecognitionException {
		Drop_option_listContext _localctx = new Drop_option_listContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_drop_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7279);
			drop_option();
			setState(7284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7280);
				match(COMMA);
				setState(7281);
				drop_option();
				}
				}
				setState(7286);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_optionContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_optionContext drop_option() throws RecognitionException {
		Drop_optionContext _localctx = new Drop_optionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_drop_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7287);
			match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltercollationstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altercollationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltercollationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltercollationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltercollationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltercollationstmtContext altercollationstmt() throws RecognitionException {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_altercollationstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7289);
			match(ALTER);
			setState(7290);
			match(COLLATION);
			setState(7291);
			any_name();
			setState(7292);
			match(REFRESH);
			setState(7293);
			match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltersystemstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Generic_setContext generic_set() {
			return getRuleContext(Generic_setContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altersystemstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltersystemstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltersystemstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltersystemstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltersystemstmtContext altersystemstmt() throws RecognitionException {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_altersystemstmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7295);
			match(ALTER);
			setState(7296);
			match(SYSTEM_P);
			setState(7297);
			_la = _input.LA(1);
			if ( !(_la==RESET || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7298);
			generic_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedomainstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Opt_asContext opt_as() {
			return getRuleContext(Opt_asContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public ColquallistContext colquallist() {
			return getRuleContext(ColquallistContext.class,0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreatedomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreatedomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreatedomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedomainstmtContext createdomainstmt() throws RecognitionException {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_createdomainstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7300);
			match(CREATE);
			setState(7301);
			match(DOMAIN_P);
			setState(7302);
			any_name();
			setState(7303);
			opt_as();
			setState(7304);
			typename();
			setState(7305);
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterdomainstmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Alter_column_defaultContext alter_column_default() {
			return getRuleContext(Alter_column_defaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TableconstraintContext tableconstraint() {
			return getRuleContext(TableconstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_drop_behaviorContext opt_drop_behavior() {
			return getRuleContext(Opt_drop_behaviorContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterdomainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlterdomainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlterdomainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlterdomainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterdomainstmtContext alterdomainstmt() throws RecognitionException {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_alterdomainstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7307);
			match(ALTER);
			setState(7308);
			match(DOMAIN_P);
			setState(7309);
			any_name();
			setState(7331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(7310);
				alter_column_default();
				}
				break;
			case 2:
				{
				setState(7311);
				match(DROP);
				setState(7312);
				match(NOT);
				setState(7313);
				match(NULL_P);
				}
				break;
			case 3:
				{
				setState(7314);
				match(SET);
				setState(7315);
				match(NOT);
				setState(7316);
				match(NULL_P);
				}
				break;
			case 4:
				{
				setState(7317);
				match(ADD_P);
				setState(7318);
				tableconstraint();
				}
				break;
			case 5:
				{
				setState(7319);
				match(DROP);
				setState(7320);
				match(CONSTRAINT);
				setState(7323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(7321);
					match(IF_P);
					setState(7322);
					match(EXISTS);
					}
					break;
				}
				setState(7325);
				name();
				setState(7326);
				opt_drop_behavior();
				}
				break;
			case 6:
				{
				setState(7328);
				match(VALIDATE);
				setState(7329);
				match(CONSTRAINT);
				setState(7330);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_asContext opt_as() throws RecognitionException {
		Opt_asContext _localctx = new Opt_asContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_opt_as);
		try {
			setState(7335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7333);
				match(AS);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertsdictionarystmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsdictionarystmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsdictionarystmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsdictionarystmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsdictionarystmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsdictionarystmtContext altertsdictionarystmt() throws RecognitionException {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_altertsdictionarystmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7337);
			match(ALTER);
			setState(7338);
			match(TEXT_P);
			setState(7339);
			match(SEARCH);
			setState(7340);
			match(DICTIONARY);
			setState(7341);
			any_name();
			setState(7342);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AltertsconfigurationstmtContext extends ParserRuleContext {
		public List<TerminalNode> ALTER() { return getTokens(PostgreSQLParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PostgreSQLParser.ALTER, i);
		}
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Any_withContext any_with() {
			return getRuleContext(Any_withContext.class,0);
		}
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_altertsconfigurationstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAltertsconfigurationstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAltertsconfigurationstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAltertsconfigurationstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AltertsconfigurationstmtContext altertsconfigurationstmt() throws RecognitionException {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_altertsconfigurationstmt);
		try {
			setState(7416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7344);
				match(ALTER);
				setState(7345);
				match(TEXT_P);
				setState(7346);
				match(SEARCH);
				setState(7347);
				match(CONFIGURATION);
				setState(7348);
				any_name();
				setState(7349);
				match(ADD_P);
				setState(7350);
				match(MAPPING);
				setState(7351);
				match(FOR);
				setState(7352);
				name_list();
				setState(7353);
				any_with();
				setState(7354);
				any_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7356);
				match(ALTER);
				setState(7357);
				match(TEXT_P);
				setState(7358);
				match(SEARCH);
				setState(7359);
				match(CONFIGURATION);
				setState(7360);
				any_name();
				setState(7361);
				match(ALTER);
				setState(7362);
				match(MAPPING);
				setState(7363);
				match(FOR);
				setState(7364);
				name_list();
				setState(7365);
				any_with();
				setState(7366);
				any_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7368);
				match(ALTER);
				setState(7369);
				match(TEXT_P);
				setState(7370);
				match(SEARCH);
				setState(7371);
				match(CONFIGURATION);
				setState(7372);
				any_name();
				setState(7373);
				match(ALTER);
				setState(7374);
				match(MAPPING);
				setState(7375);
				match(REPLACE);
				setState(7376);
				any_name();
				setState(7377);
				any_with();
				setState(7378);
				any_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7380);
				match(ALTER);
				setState(7381);
				match(TEXT_P);
				setState(7382);
				match(SEARCH);
				setState(7383);
				match(CONFIGURATION);
				setState(7384);
				any_name();
				setState(7385);
				match(ALTER);
				setState(7386);
				match(MAPPING);
				setState(7387);
				match(FOR);
				setState(7388);
				name_list();
				setState(7389);
				match(REPLACE);
				setState(7390);
				any_name();
				setState(7391);
				any_with();
				setState(7392);
				any_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7394);
				match(ALTER);
				setState(7395);
				match(TEXT_P);
				setState(7396);
				match(SEARCH);
				setState(7397);
				match(CONFIGURATION);
				setState(7398);
				any_name();
				setState(7399);
				match(DROP);
				setState(7400);
				match(MAPPING);
				setState(7401);
				match(FOR);
				setState(7402);
				name_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7404);
				match(ALTER);
				setState(7405);
				match(TEXT_P);
				setState(7406);
				match(SEARCH);
				setState(7407);
				match(CONFIGURATION);
				setState(7408);
				any_name();
				setState(7409);
				match(DROP);
				setState(7410);
				match(MAPPING);
				setState(7411);
				match(IF_P);
				setState(7412);
				match(EXISTS);
				setState(7413);
				match(FOR);
				setState(7414);
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_withContext any_with() throws RecognitionException {
		Any_withContext _localctx = new Any_withContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_any_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7418);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateconversionstmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public Opt_defaultContext opt_default() {
			return getRuleContext(Opt_defaultContext.class,0);
		}
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public List<Any_nameContext> any_name() {
			return getRuleContexts(Any_nameContext.class);
		}
		public Any_nameContext any_name(int i) {
			return getRuleContext(Any_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public List<SconstContext> sconst() {
			return getRuleContexts(SconstContext.class);
		}
		public SconstContext sconst(int i) {
			return getRuleContext(SconstContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createconversionstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreateconversionstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreateconversionstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreateconversionstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateconversionstmtContext createconversionstmt() throws RecognitionException {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_createconversionstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7420);
			match(CREATE);
			setState(7421);
			opt_default();
			setState(7422);
			match(CONVERSION_P);
			setState(7423);
			any_name();
			setState(7424);
			match(FOR);
			setState(7425);
			sconst();
			setState(7426);
			match(TO);
			setState(7427);
			sconst();
			setState(7428);
			match(FROM);
			setState(7429);
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterstmtContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Cluster_index_specificationContext cluster_index_specification() {
			return getRuleContext(Cluster_index_specificationContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterClusterstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitClusterstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitClusterstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterstmtContext clusterstmt() throws RecognitionException {
		ClusterstmtContext _localctx = new ClusterstmtContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_clusterstmt);
		try {
			setState(7444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7431);
				match(CLUSTER);
				setState(7432);
				opt_verbose();
				setState(7433);
				qualified_name();
				setState(7434);
				cluster_index_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7436);
				match(CLUSTER);
				setState(7437);
				opt_verbose();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7438);
				match(CLUSTER);
				setState(7439);
				opt_verbose();
				setState(7440);
				name();
				setState(7441);
				match(ON);
				setState(7442);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_specificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCluster_index_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCluster_index_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCluster_index_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_specificationContext cluster_index_specification() throws RecognitionException {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_cluster_index_specification);
		try {
			setState(7449);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7446);
				match(USING);
				setState(7447);
				name();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumstmtContext extends ParserRuleContext {
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public Opt_fullContext opt_full() {
			return getRuleContext(Opt_fullContext.class,0);
		}
		public Opt_freezeContext opt_freeze() {
			return getRuleContext(Opt_freezeContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_analyzeContext opt_analyze() {
			return getRuleContext(Opt_analyzeContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuumstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuumstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuumstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumstmtContext vacuumstmt() throws RecognitionException {
		VacuumstmtContext _localctx = new VacuumstmtContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_vacuumstmt);
		try {
			setState(7464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7451);
				match(VACUUM);
				setState(7452);
				opt_full();
				setState(7453);
				opt_freeze();
				setState(7454);
				opt_verbose();
				setState(7455);
				opt_analyze();
				setState(7456);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7458);
				match(VACUUM);
				setState(7459);
				match(OPEN_PAREN);
				setState(7460);
				vac_analyze_option_list();
				setState(7461);
				match(CLOSE_PAREN);
				setState(7462);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzestmtContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return getRuleContext(Opt_vacuum_relation_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Vac_analyze_option_listContext vac_analyze_option_list() {
			return getRuleContext(Vac_analyze_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyzestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyzestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyzestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzestmtContext analyzestmt() throws RecognitionException {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_analyzestmt);
		try {
			setState(7476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7466);
				analyze_keyword();
				setState(7467);
				opt_verbose();
				setState(7468);
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7470);
				analyze_keyword();
				setState(7471);
				match(OPEN_PAREN);
				setState(7472);
				vac_analyze_option_list();
				setState(7473);
				match(CLOSE_PAREN);
				setState(7474);
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_listContext extends ParserRuleContext {
		public List<Vac_analyze_option_elemContext> vac_analyze_option_elem() {
			return getRuleContexts(Vac_analyze_option_elemContext.class);
		}
		public Vac_analyze_option_elemContext vac_analyze_option_elem(int i) {
			return getRuleContext(Vac_analyze_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_listContext vac_analyze_option_list() throws RecognitionException {
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_vac_analyze_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7478);
			vac_analyze_option_elem();
			setState(7483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7479);
				match(COMMA);
				setState(7480);
				vac_analyze_option_elem();
				}
				}
				setState(7485);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_keywordContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyze_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyze_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyze_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_keywordContext analyze_keyword() throws RecognitionException {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_analyze_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7486);
			_la = _input.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_elemContext extends ParserRuleContext {
		public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return getRuleContext(Vac_analyze_option_nameContext.class,0);
		}
		public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return getRuleContext(Vac_analyze_option_argContext.class,0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_elemContext vac_analyze_option_elem() throws RecognitionException {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_vac_analyze_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7488);
			vac_analyze_option_name();
			setState(7489);
			vac_analyze_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_nameContext vac_analyze_option_name() throws RecognitionException {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_vac_analyze_option_name);
		try {
			setState(7493);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7491);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7492);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vac_analyze_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vac_analyze_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVac_analyze_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVac_analyze_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVac_analyze_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vac_analyze_option_argContext vac_analyze_option_arg() throws RecognitionException {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_vac_analyze_option_arg);
		try {
			setState(7498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7495);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7496);
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_analyzeContext extends ParserRuleContext {
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_analyzeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_analyze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_analyze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_analyze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_analyze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_analyzeContext opt_analyze() throws RecognitionException {
		Opt_analyzeContext _localctx = new Opt_analyzeContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_opt_analyze);
		try {
			setState(7502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7500);
				analyze_keyword();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_verboseContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_verbose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_verbose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_verbose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_verbose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_verboseContext opt_verbose() throws RecognitionException {
		Opt_verboseContext _localctx = new Opt_verboseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_opt_verbose);
		try {
			setState(7506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERBOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7504);
				match(VERBOSE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_full; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_full(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_full(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_full(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fullContext opt_full() throws RecognitionException {
		Opt_fullContext _localctx = new Opt_fullContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_opt_full);
		try {
			setState(7510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7508);
				match(FULL);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case FREEZE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_freezeContext extends ParserRuleContext {
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_freeze; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_freeze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_freeze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_freeze(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_freezeContext opt_freeze() throws RecognitionException {
		Opt_freezeContext _localctx = new Opt_freezeContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_opt_freeze);
		try {
			setState(7514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7512);
				match(FREEZE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_name_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_name_listContext opt_name_list() throws RecognitionException {
		Opt_name_listContext _localctx = new Opt_name_listContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_opt_name_list);
		try {
			setState(7521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7516);
				match(OPEN_PAREN);
				setState(7517);
				name_list();
				setState(7518);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_relationContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relationContext vacuum_relation() throws RecognitionException {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_vacuum_relation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7523);
			qualified_name();
			setState(7524);
			opt_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_relation_listContext extends ParserRuleContext {
		public List<Vacuum_relationContext> vacuum_relation() {
			return getRuleContexts(Vacuum_relationContext.class);
		}
		public Vacuum_relationContext vacuum_relation(int i) {
			return getRuleContext(Vacuum_relationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_relation_listContext vacuum_relation_list() throws RecognitionException {
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_vacuum_relation_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7526);
			vacuum_relation();
			setState(7531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7527);
				match(COMMA);
				setState(7528);
				vacuum_relation();
				}
				}
				setState(7533);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_vacuum_relation_listContext extends ParserRuleContext {
		public Vacuum_relation_listContext vacuum_relation_list() {
			return getRuleContext(Vacuum_relation_listContext.class,0);
		}
		public Opt_vacuum_relation_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_vacuum_relation_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_vacuum_relation_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_vacuum_relation_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_vacuum_relation_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_vacuum_relation_listContext opt_vacuum_relation_list() throws RecognitionException {
		Opt_vacuum_relation_listContext _localctx = new Opt_vacuum_relation_listContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_opt_vacuum_relation_list);
		try {
			setState(7536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7534);
				vacuum_relation_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainstmtContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public ExplainablestmtContext explainablestmt() {
			return getRuleContext(ExplainablestmtContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Opt_verboseContext opt_verbose() {
			return getRuleContext(Opt_verboseContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Explain_option_listContext explain_option_list() {
			return getRuleContext(Explain_option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainstmtContext explainstmt() throws RecognitionException {
		ExplainstmtContext _localctx = new ExplainstmtContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_explainstmt);
		try {
			setState(7554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7538);
				match(EXPLAIN);
				setState(7539);
				explainablestmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7540);
				match(EXPLAIN);
				setState(7541);
				analyze_keyword();
				setState(7542);
				opt_verbose();
				setState(7543);
				explainablestmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7545);
				match(EXPLAIN);
				setState(7546);
				match(VERBOSE);
				setState(7547);
				explainablestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7548);
				match(EXPLAIN);
				setState(7549);
				match(OPEN_PAREN);
				setState(7550);
				explain_option_list();
				setState(7551);
				match(CLOSE_PAREN);
				setState(7552);
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public DeclarecursorstmtContext declarecursorstmt() {
			return getRuleContext(DeclarecursorstmtContext.class,0);
		}
		public CreateasstmtContext createasstmt() {
			return getRuleContext(CreateasstmtContext.class,0);
		}
		public CreatematviewstmtContext creatematviewstmt() {
			return getRuleContext(CreatematviewstmtContext.class,0);
		}
		public RefreshmatviewstmtContext refreshmatviewstmt() {
			return getRuleContext(RefreshmatviewstmtContext.class,0);
		}
		public ExecutestmtContext executestmt() {
			return getRuleContext(ExecutestmtContext.class,0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplainablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplainablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplainablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainablestmtContext explainablestmt() throws RecognitionException {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_explainablestmt);
		try {
			setState(7565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7556);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7557);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7558);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7559);
				deletestmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7560);
				declarecursorstmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7561);
				createasstmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7562);
				creatematviewstmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7563);
				refreshmatviewstmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7564);
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_listContext extends ParserRuleContext {
		public List<Explain_option_elemContext> explain_option_elem() {
			return getRuleContexts(Explain_option_elemContext.class);
		}
		public Explain_option_elemContext explain_option_elem(int i) {
			return getRuleContext(Explain_option_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_listContext explain_option_list() throws RecognitionException {
		Explain_option_listContext _localctx = new Explain_option_listContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_explain_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7567);
			explain_option_elem();
			setState(7572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7568);
				match(COMMA);
				setState(7569);
				explain_option_elem();
				}
				}
				setState(7574);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_elemContext extends ParserRuleContext {
		public Explain_option_nameContext explain_option_name() {
			return getRuleContext(Explain_option_nameContext.class,0);
		}
		public Explain_option_argContext explain_option_arg() {
			return getRuleContext(Explain_option_argContext.class,0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_elemContext explain_option_elem() throws RecognitionException {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_explain_option_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7575);
			explain_option_name();
			setState(7576);
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_nameContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public Analyze_keywordContext analyze_keyword() {
			return getRuleContext(Analyze_keywordContext.class,0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_nameContext explain_option_name() throws RecognitionException {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_explain_option_name);
		try {
			setState(7580);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7578);
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7579);
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_option_argContext extends ParserRuleContext {
		public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return getRuleContext(Opt_boolean_or_stringContext.class,0);
		}
		public NumericonlyContext numericonly() {
			return getRuleContext(NumericonlyContext.class,0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_option_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_option_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_option_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_option_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_option_argContext explain_option_arg() throws RecognitionException {
		Explain_option_argContext _localctx = new Explain_option_argContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_explain_option_arg);
		try {
			setState(7585);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(7582);
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(7583);
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparestmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Prep_type_clauseContext prep_type_clause() {
			return getRuleContext(Prep_type_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparestmtContext preparestmt() throws RecognitionException {
		PreparestmtContext _localctx = new PreparestmtContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_preparestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7587);
			match(PREPARE);
			setState(7588);
			name();
			setState(7589);
			prep_type_clause();
			setState(7590);
			match(AS);
			setState(7591);
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prep_type_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prep_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrep_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrep_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrep_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prep_type_clauseContext prep_type_clause() throws RecognitionException {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_prep_type_clause);
		try {
			setState(7598);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7593);
				match(OPEN_PAREN);
				setState(7594);
				type_list();
				setState(7595);
				match(CLOSE_PAREN);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparablestmtContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public InsertstmtContext insertstmt() {
			return getRuleContext(InsertstmtContext.class,0);
		}
		public UpdatestmtContext updatestmt() {
			return getRuleContext(UpdatestmtContext.class,0);
		}
		public DeletestmtContext deletestmt() {
			return getRuleContext(DeletestmtContext.class,0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparablestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPreparablestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPreparablestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPreparablestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparablestmtContext preparablestmt() throws RecognitionException {
		PreparablestmtContext _localctx = new PreparablestmtContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_preparablestmt);
		try {
			setState(7604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7600);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7601);
				insertstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7602);
				updatestmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7603);
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecutestmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Execute_param_clauseContext execute_param_clause() {
			return getRuleContext(Execute_param_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public OpttempContext opttemp() {
			return getRuleContext(OpttempContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Create_as_targetContext create_as_target() {
			return getRuleContext(Create_as_targetContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_with_dataContext opt_with_data() {
			return getRuleContext(Opt_with_dataContext.class,0);
		}
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecutestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecutestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecutestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecutestmtContext executestmt() throws RecognitionException {
		ExecutestmtContext _localctx = new ExecutestmtContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_executestmt);
		try {
			setState(7633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7606);
				match(EXECUTE);
				setState(7607);
				name();
				setState(7608);
				execute_param_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7610);
				match(CREATE);
				setState(7611);
				opttemp();
				setState(7612);
				match(TABLE);
				setState(7613);
				create_as_target();
				setState(7614);
				match(AS);
				setState(7615);
				match(EXECUTE);
				setState(7616);
				name();
				setState(7617);
				execute_param_clause();
				setState(7618);
				opt_with_data();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7620);
				match(CREATE);
				setState(7621);
				opttemp();
				setState(7622);
				match(TABLE);
				setState(7623);
				match(IF_P);
				setState(7624);
				match(NOT);
				setState(7625);
				match(EXISTS);
				setState(7626);
				create_as_target();
				setState(7627);
				match(AS);
				setState(7628);
				match(EXECUTE);
				setState(7629);
				name();
				setState(7630);
				execute_param_clause();
				setState(7631);
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_param_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecute_param_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecute_param_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecute_param_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_param_clauseContext execute_param_clause() throws RecognitionException {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_execute_param_clause);
		try {
			setState(7640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7635);
				match(OPEN_PAREN);
				setState(7636);
				expr_list();
				setState(7637);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatestmtContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeallocatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeallocatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeallocatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatestmtContext deallocatestmt() throws RecognitionException {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_deallocatestmt);
		try {
			setState(7652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7642);
				match(DEALLOCATE);
				setState(7643);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7644);
				match(DEALLOCATE);
				setState(7645);
				match(PREPARE);
				setState(7646);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7647);
				match(DEALLOCATE);
				setState(7648);
				match(ALL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7649);
				match(DEALLOCATE);
				setState(7650);
				match(PREPARE);
				setState(7651);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertstmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Insert_targetContext insert_target() {
			return getRuleContext(Insert_targetContext.class,0);
		}
		public Insert_restContext insert_rest() {
			return getRuleContext(Insert_restContext.class,0);
		}
		public Opt_on_conflictContext opt_on_conflict() {
			return getRuleContext(Opt_on_conflictContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsertstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsertstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsertstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertstmtContext insertstmt() throws RecognitionException {
		InsertstmtContext _localctx = new InsertstmtContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_insertstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7654);
			opt_with_clause();
			setState(7655);
			match(INSERT);
			setState(7656);
			match(INTO);
			setState(7657);
			insert_target();
			setState(7658);
			insert_rest();
			setState(7659);
			opt_on_conflict();
			setState(7660);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_targetContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_targetContext insert_target() throws RecognitionException {
		Insert_targetContext _localctx = new Insert_targetContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_insert_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7662);
			qualified_name();
			setState(7665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7663);
				match(AS);
				setState(7664);
				colid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_restContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public Override_kindContext override_kind() {
			return getRuleContext(Override_kindContext.class,0);
		}
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_restContext insert_rest() throws RecognitionException {
		Insert_restContext _localctx = new Insert_restContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_insert_rest);
		int _la;
		try {
			setState(7686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7667);
				selectstmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7668);
				match(OVERRIDING);
				setState(7669);
				override_kind();
				setState(7670);
				match(VALUE_P);
				setState(7671);
				selectstmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7673);
				match(OPEN_PAREN);
				setState(7674);
				insert_column_list();
				setState(7675);
				match(CLOSE_PAREN);
				setState(7680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERRIDING) {
					{
					setState(7676);
					match(OVERRIDING);
					setState(7677);
					override_kind();
					setState(7678);
					match(VALUE_P);
					}
				}

				setState(7682);
				selectstmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7684);
				match(DEFAULT);
				setState(7685);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Override_kindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_override_kind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverride_kind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverride_kind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverride_kind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Override_kindContext override_kind() throws RecognitionException {
		Override_kindContext _localctx = new Override_kindContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_override_kind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7688);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_listContext extends ParserRuleContext {
		public List<Insert_column_itemContext> insert_column_item() {
			return getRuleContexts(Insert_column_itemContext.class);
		}
		public Insert_column_itemContext insert_column_item(int i) {
			return getRuleContext(Insert_column_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_listContext insert_column_list() throws RecognitionException {
		Insert_column_listContext _localctx = new Insert_column_listContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_insert_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7690);
			insert_column_item();
			setState(7695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7691);
				match(COMMA);
				setState(7692);
				insert_column_item();
				}
				}
				setState(7697);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_column_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_column_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_column_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_column_itemContext insert_column_item() throws RecognitionException {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_insert_column_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7698);
			colid();
			setState(7699);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_on_conflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public Opt_conf_exprContext opt_conf_expr() {
			return getRuleContext(Opt_conf_exprContext.class,0);
		}
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public Opt_on_conflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_on_conflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_on_conflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_on_conflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_on_conflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_on_conflictContext opt_on_conflict() throws RecognitionException {
		Opt_on_conflictContext _localctx = new Opt_on_conflictContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_opt_on_conflict);
		try {
			setState(7714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(7701);
				match(ON);
				setState(7702);
				match(CONFLICT);
				setState(7703);
				opt_conf_expr();
				setState(7704);
				match(DO);
				setState(7711);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(7705);
					match(UPDATE);
					setState(7706);
					match(SET);
					setState(7707);
					set_clause_list();
					setState(7708);
					where_clause();
					}
					break;
				case NOTHING:
					{
					setState(7710);
					match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_conf_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Index_paramsContext index_params() {
			return getRuleContext(Index_paramsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_conf_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_conf_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_conf_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_conf_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_conf_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_conf_exprContext opt_conf_expr() throws RecognitionException {
		Opt_conf_exprContext _localctx = new Opt_conf_exprContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_opt_conf_expr);
		try {
			setState(7725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7716);
				match(OPEN_PAREN);
				setState(7717);
				index_params();
				setState(7718);
				match(CLOSE_PAREN);
				setState(7719);
				where_clause();
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7721);
				match(ON);
				setState(7722);
				match(CONSTRAINT);
				setState(7723);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReturning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_returning_clause);
		try {
			setState(7730);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7727);
				match(RETURNING);
				setState(7728);
				target_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergestmtContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PostgreSQLParser.MERGE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public List<Alias_clauseContext> alias_clause() {
			return getRuleContexts(Alias_clauseContext.class);
		}
		public Alias_clauseContext alias_clause(int i) {
			return getRuleContext(Alias_clauseContext.class,i);
		}
		public Merge_delete_clauseContext merge_delete_clause() {
			return getRuleContext(Merge_delete_clauseContext.class,0);
		}
		public MergestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMergestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMergestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMergestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergestmtContext mergestmt() throws RecognitionException {
		MergestmtContext _localctx = new MergestmtContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_mergestmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7732);
			match(MERGE);
			setState(7734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(7733);
				match(INTO);
				}
			}

			setState(7736);
			qualified_name();
			setState(7738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << AS) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (TABLE - 92)) | (1L << (IS - 92)) | (1L << (LEFT - 92)) | (1L << (OUTER_P - 92)) | (1L << (OVER - 92)) | (1L << (RIGHT - 92)) | (1L << (ABORT_P - 92)) | (1L << (ABSOLUTE_P - 92)) | (1L << (ACCESS - 92)) | (1L << (ACTION - 92)) | (1L << (ADD_P - 92)) | (1L << (ADMIN - 92)) | (1L << (AFTER - 92)) | (1L << (AGGREGATE - 92)) | (1L << (ALSO - 92)) | (1L << (ALTER - 92)) | (1L << (ALWAYS - 92)) | (1L << (ASSERTION - 92)) | (1L << (ASSIGNMENT - 92)) | (1L << (AT - 92)) | (1L << (ATTRIBUTE - 92)) | (1L << (BACKWARD - 92)) | (1L << (BEFORE - 92)) | (1L << (BEGIN_P - 92)) | (1L << (BY - 92)) | (1L << (CACHE - 92)) | (1L << (CALLED - 92)) | (1L << (CASCADE - 92)) | (1L << (CASCADED - 92)) | (1L << (CATALOG - 92)) | (1L << (CHAIN - 92)) | (1L << (CHARACTERISTICS - 92)) | (1L << (CHECKPOINT - 92)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (CLASS - 156)) | (1L << (CLOSE - 156)) | (1L << (CLUSTER - 156)) | (1L << (COMMENT - 156)) | (1L << (COMMENTS - 156)) | (1L << (COMMIT - 156)) | (1L << (COMMITTED - 156)) | (1L << (CONFIGURATION - 156)) | (1L << (CONNECTION - 156)) | (1L << (CONSTRAINTS - 156)) | (1L << (CONTENT_P - 156)) | (1L << (CONTINUE_P - 156)) | (1L << (CONVERSION_P - 156)) | (1L << (COPY - 156)) | (1L << (COST - 156)) | (1L << (CSV - 156)) | (1L << (CURSOR - 156)) | (1L << (CYCLE - 156)) | (1L << (DATA_P - 156)) | (1L << (DATABASE - 156)) | (1L << (DAY_P - 156)) | (1L << (DEALLOCATE - 156)) | (1L << (DECLARE - 156)) | (1L << (DEFAULTS - 156)) | (1L << (DEFERRED - 156)) | (1L << (DEFINER - 156)) | (1L << (DELETE_P - 156)) | (1L << (DELIMITER - 156)) | (1L << (DELIMITERS - 156)) | (1L << (DICTIONARY - 156)) | (1L << (DISABLE_P - 156)) | (1L << (DISCARD - 156)) | (1L << (DOCUMENT_P - 156)) | (1L << (DOMAIN_P - 156)) | (1L << (DOUBLE_P - 156)) | (1L << (DROP - 156)) | (1L << (EACH - 156)) | (1L << (ENABLE_P - 156)) | (1L << (ENCODING - 156)) | (1L << (ENCRYPTED - 156)) | (1L << (ENUM_P - 156)) | (1L << (ESCAPE - 156)) | (1L << (EVENT - 156)) | (1L << (EXCLUDE - 156)) | (1L << (EXCLUDING - 156)) | (1L << (EXCLUSIVE - 156)) | (1L << (EXECUTE - 156)) | (1L << (EXPLAIN - 156)) | (1L << (EXTENSION - 156)) | (1L << (EXTERNAL - 156)) | (1L << (FAMILY - 156)) | (1L << (FIRST_P - 156)) | (1L << (FOLLOWING - 156)) | (1L << (FORCE - 156)) | (1L << (FORWARD - 156)) | (1L << (FUNCTION - 156)) | (1L << (FUNCTIONS - 156)) | (1L << (GLOBAL - 156)) | (1L << (GRANTED - 156)) | (1L << (HANDLER - 156)) | (1L << (HEADER_P - 156)) | (1L << (HOLD - 156)) | (1L << (HOUR_P - 156)) | (1L << (IDENTITY_P - 156)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (IF_P - 220)) | (1L << (IMMEDIATE - 220)) | (1L << (IMMUTABLE - 220)) | (1L << (IMPLICIT_P - 220)) | (1L << (INCLUDING - 220)) | (1L << (INCREMENT - 220)) | (1L << (INDEX - 220)) | (1L << (INDEXES - 220)) | (1L << (INHERIT - 220)) | (1L << (INHERITS - 220)) | (1L << (INLINE_P - 220)) | (1L << (INSENSITIVE - 220)) | (1L << (INSERT - 220)) | (1L << (INSTEAD - 220)) | (1L << (INVOKER - 220)) | (1L << (ISOLATION - 220)) | (1L << (KEY - 220)) | (1L << (LABEL - 220)) | (1L << (LANGUAGE - 220)) | (1L << (LARGE_P - 220)) | (1L << (LAST_P - 220)) | (1L << (LEAKPROOF - 220)) | (1L << (LEVEL - 220)) | (1L << (LISTEN - 220)) | (1L << (LOAD - 220)) | (1L << (LOCAL - 220)) | (1L << (LOCATION - 220)) | (1L << (LOCK_P - 220)) | (1L << (MAPPING - 220)) | (1L << (MATCH - 220)) | (1L << (MATERIALIZED - 220)) | (1L << (MAXVALUE - 220)) | (1L << (MINUTE_P - 220)) | (1L << (MINVALUE - 220)) | (1L << (MODE - 220)) | (1L << (MONTH_P - 220)) | (1L << (MOVE - 220)) | (1L << (NAME_P - 220)) | (1L << (NAMES - 220)) | (1L << (NEXT - 220)) | (1L << (NO - 220)) | (1L << (NOTHING - 220)) | (1L << (NOTIFY - 220)) | (1L << (NOWAIT - 220)) | (1L << (NULLS_P - 220)) | (1L << (OBJECT_P - 220)) | (1L << (OF - 220)) | (1L << (OFF - 220)) | (1L << (OIDS - 220)) | (1L << (OPERATOR - 220)) | (1L << (OPTION - 220)) | (1L << (OPTIONS - 220)) | (1L << (OWNED - 220)) | (1L << (OWNER - 220)) | (1L << (PARSER - 220)) | (1L << (PARTIAL - 220)) | (1L << (PARTITION - 220)) | (1L << (PASSING - 220)) | (1L << (PASSWORD - 220)) | (1L << (PLANS - 220)) | (1L << (PRECEDING - 220)) | (1L << (PREPARE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (PREPARED - 284)) | (1L << (PRESERVE - 284)) | (1L << (PRIOR - 284)) | (1L << (PRIVILEGES - 284)) | (1L << (PROCEDURAL - 284)) | (1L << (PROCEDURE - 284)) | (1L << (PROGRAM - 284)) | (1L << (QUOTE - 284)) | (1L << (RANGE - 284)) | (1L << (READ - 284)) | (1L << (REASSIGN - 284)) | (1L << (RECHECK - 284)) | (1L << (RECURSIVE - 284)) | (1L << (REF - 284)) | (1L << (REFRESH - 284)) | (1L << (REINDEX - 284)) | (1L << (RELATIVE_P - 284)) | (1L << (RELEASE - 284)) | (1L << (RENAME - 284)) | (1L << (REPEATABLE - 284)) | (1L << (REPLACE - 284)) | (1L << (REPLICA - 284)) | (1L << (RESET - 284)) | (1L << (RESTART - 284)) | (1L << (RESTRICT - 284)) | (1L << (RETURNS - 284)) | (1L << (REVOKE - 284)) | (1L << (ROLE - 284)) | (1L << (ROLLBACK - 284)) | (1L << (ROWS - 284)) | (1L << (RULE - 284)) | (1L << (SAVEPOINT - 284)) | (1L << (SCHEMA - 284)) | (1L << (SCROLL - 284)) | (1L << (SEARCH - 284)) | (1L << (SECOND_P - 284)) | (1L << (SECURITY - 284)) | (1L << (SEQUENCE - 284)) | (1L << (SEQUENCES - 284)) | (1L << (SERIALIZABLE - 284)) | (1L << (SERVER - 284)) | (1L << (SESSION - 284)) | (1L << (SET - 284)) | (1L << (SHARE - 284)) | (1L << (SHOW - 284)) | (1L << (SIMPLE - 284)) | (1L << (SNAPSHOT - 284)) | (1L << (STABLE - 284)) | (1L << (STANDALONE_P - 284)) | (1L << (START - 284)) | (1L << (STATEMENT - 284)) | (1L << (STATISTICS - 284)) | (1L << (STDIN - 284)) | (1L << (STDOUT - 284)) | (1L << (STORAGE - 284)) | (1L << (STRICT_P - 284)) | (1L << (STRIP_P - 284)) | (1L << (SYSID - 284)) | (1L << (SYSTEM_P - 284)) | (1L << (TABLES - 284)) | (1L << (TABLESPACE - 284)) | (1L << (TEMP - 284)) | (1L << (TEMPLATE - 284)) | (1L << (TEMPORARY - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (TEXT_P - 348)) | (1L << (TRANSACTION - 348)) | (1L << (TRIGGER - 348)) | (1L << (TRUNCATE - 348)) | (1L << (TRUSTED - 348)) | (1L << (TYPE_P - 348)) | (1L << (TYPES_P - 348)) | (1L << (UNBOUNDED - 348)) | (1L << (UNCOMMITTED - 348)) | (1L << (UNENCRYPTED - 348)) | (1L << (UNKNOWN - 348)) | (1L << (UNLISTEN - 348)) | (1L << (UNLOGGED - 348)) | (1L << (UNTIL - 348)) | (1L << (UPDATE - 348)) | (1L << (VACUUM - 348)) | (1L << (VALID - 348)) | (1L << (VALIDATE - 348)) | (1L << (VALIDATOR - 348)) | (1L << (VARYING - 348)) | (1L << (VERSION_P - 348)) | (1L << (VIEW - 348)) | (1L << (VOLATILE - 348)) | (1L << (WHITESPACE_P - 348)) | (1L << (WITHOUT - 348)) | (1L << (WORK - 348)) | (1L << (WRAPPER - 348)) | (1L << (WRITE - 348)) | (1L << (XML_P - 348)) | (1L << (YEAR_P - 348)) | (1L << (YES_P - 348)) | (1L << (ZONE - 348)) | (1L << (BETWEEN - 348)) | (1L << (BIGINT - 348)) | (1L << (BIT - 348)) | (1L << (BOOLEAN_P - 348)) | (1L << (CHAR_P - 348)) | (1L << (CHARACTER - 348)) | (1L << (COALESCE - 348)) | (1L << (DEC - 348)) | (1L << (DECIMAL_P - 348)) | (1L << (EXISTS - 348)) | (1L << (EXTRACT - 348)) | (1L << (FLOAT_P - 348)) | (1L << (GREATEST - 348)) | (1L << (INOUT - 348)) | (1L << (INT_P - 348)) | (1L << (INTEGER - 348)) | (1L << (INTERVAL - 348)) | (1L << (LEAST - 348)) | (1L << (NATIONAL - 348)) | (1L << (NCHAR - 348)) | (1L << (NONE - 348)) | (1L << (NULLIF - 348)) | (1L << (NUMERIC - 348)) | (1L << (OVERLAY - 348)) | (1L << (POSITION - 348)) | (1L << (PRECISION - 348)) | (1L << (REAL - 348)) | (1L << (ROW - 348)) | (1L << (SETOF - 348)) | (1L << (SMALLINT - 348)) | (1L << (SUBSTRING - 348)) | (1L << (TIME - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (TIMESTAMP - 412)) | (1L << (TREAT - 412)) | (1L << (TRIM - 412)) | (1L << (VALUES - 412)) | (1L << (VARCHAR - 412)) | (1L << (XMLATTRIBUTES - 412)) | (1L << (XMLCOMMENT - 412)) | (1L << (XMLAGG - 412)) | (1L << (XML_IS_WELL_FORMED - 412)) | (1L << (XML_IS_WELL_FORMED_DOCUMENT - 412)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 412)) | (1L << (XPATH - 412)) | (1L << (XPATH_EXISTS - 412)) | (1L << (XMLCONCAT - 412)) | (1L << (XMLELEMENT - 412)) | (1L << (XMLEXISTS - 412)) | (1L << (XMLFOREST - 412)) | (1L << (XMLPARSE - 412)) | (1L << (XMLPI - 412)) | (1L << (XMLROOT - 412)) | (1L << (XMLSERIALIZE - 412)) | (1L << (CALL - 412)) | (1L << (CURRENT_P - 412)) | (1L << (ATTACH - 412)) | (1L << (DETACH - 412)) | (1L << (EXPRESSION - 412)) | (1L << (GENERATED - 412)) | (1L << (LOGGED - 412)) | (1L << (STORED - 412)) | (1L << (INCLUDE - 412)) | (1L << (ROUTINE - 412)) | (1L << (TRANSFORM - 412)) | (1L << (IMPORT_P - 412)) | (1L << (POLICY - 412)) | (1L << (METHOD - 412)) | (1L << (REFERENCING - 412)) | (1L << (NEW - 412)) | (1L << (OLD - 412)) | (1L << (VALUE_P - 412)) | (1L << (SUBSCRIPTION - 412)) | (1L << (PUBLICATION - 412)) | (1L << (OUT_P - 412)) | (1L << (ROUTINES - 412)) | (1L << (SCHEMAS - 412)) | (1L << (PROCEDURES - 412)) | (1L << (INPUT_P - 412)) | (1L << (SUPPORT - 412)) | (1L << (PARALLEL - 412)) | (1L << (SQL_P - 412)) | (1L << (DEPENDS - 412)) | (1L << (OVERRIDING - 412)) | (1L << (CONFLICT - 412)) | (1L << (SKIP_P - 412)) | (1L << (LOCKED - 412)) | (1L << (TIES - 412)) | (1L << (ROLLUP - 412)) | (1L << (CUBE - 412)) | (1L << (GROUPING - 412)) | (1L << (SETS - 412)) | (1L << (ORDINALITY - 412)) | (1L << (XMLTABLE - 412)) | (1L << (COLUMNS - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (XMLNAMESPACES - 476)) | (1L << (ROWTYPE - 476)) | (1L << (NORMALIZED - 476)) | (1L << (WITHIN - 476)) | (1L << (FILTER - 476)) | (1L << (GROUPS - 476)) | (1L << (OTHERS - 476)) | (1L << (NFC - 476)) | (1L << (NFD - 476)) | (1L << (NFKC - 476)) | (1L << (NFKD - 476)) | (1L << (UESCAPE - 476)) | (1L << (VIEWS - 476)) | (1L << (NORMALIZE - 476)) | (1L << (DUMP - 476)) | (1L << (PRINT_STRICT_PARAMS - 476)) | (1L << (VARIABLE_CONFLICT - 476)) | (1L << (ERROR - 476)) | (1L << (USE_VARIABLE - 476)) | (1L << (USE_COLUMN - 476)) | (1L << (ALIAS - 476)) | (1L << (CONSTANT - 476)) | (1L << (PERFORM - 476)) | (1L << (GET - 476)) | (1L << (DIAGNOSTICS - 476)) | (1L << (STACKED - 476)) | (1L << (ELSIF - 476)) | (1L << (REVERSE - 476)) | (1L << (SLICE - 476)) | (1L << (EXIT - 476)) | (1L << (RETURN - 476)) | (1L << (QUERY - 476)) | (1L << (RAISE - 476)) | (1L << (SQLSTATE - 476)) | (1L << (DEBUG - 476)) | (1L << (LOG - 476)) | (1L << (INFO - 476)) | (1L << (NOTICE - 476)) | (1L << (WARNING - 476)) | (1L << (EXCEPTION - 476)) | (1L << (ASSERT - 476)) | (1L << (OPEN - 476)) | (1L << (ABS - 476)) | (1L << (CBRT - 476)) | (1L << (CEIL - 476)) | (1L << (CEILING - 476)) | (1L << (DEGREES - 476)) | (1L << (DIV - 476)) | (1L << (EXP - 476)) | (1L << (FACTORIAL - 476)) | (1L << (FLOOR - 476)) | (1L << (GCD - 476)) | (1L << (LCM - 476)) | (1L << (LN - 476)) | (1L << (LOG10 - 476)) | (1L << (MIN_SCALE - 476)) | (1L << (MOD - 476)) | (1L << (PI - 476)) | (1L << (POWER - 476)) | (1L << (RADIANS - 476)) | (1L << (ROUND - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (SCALE - 540)) | (1L << (SIGN - 540)) | (1L << (SQRT - 540)) | (1L << (TRIM_SCALE - 540)) | (1L << (TRUNC - 540)) | (1L << (WIDTH_BUCKET - 540)) | (1L << (RANDOM - 540)) | (1L << (SETSEED - 540)) | (1L << (ACOS - 540)) | (1L << (ACOSD - 540)) | (1L << (ASIN - 540)) | (1L << (ASIND - 540)) | (1L << (ATAN - 540)) | (1L << (ATAND - 540)) | (1L << (ATAN2 - 540)) | (1L << (ATAN2D - 540)) | (1L << (COS - 540)) | (1L << (COSD - 540)) | (1L << (COT - 540)) | (1L << (COTD - 540)) | (1L << (SIN - 540)) | (1L << (SIND - 540)) | (1L << (TAN - 540)) | (1L << (TAND - 540)) | (1L << (SINH - 540)) | (1L << (COSH - 540)) | (1L << (TANH - 540)) | (1L << (ASINH - 540)) | (1L << (ACOSH - 540)) | (1L << (ATANH - 540)) | (1L << (BIT_LENGTH - 540)) | (1L << (CHAR_LENGTH - 540)) | (1L << (CHARACTER_LENGTH - 540)) | (1L << (LOWER - 540)) | (1L << (OCTET_LENGTH - 540)) | (1L << (UPPER - 540)) | (1L << (ASCII - 540)) | (1L << (BTRIM - 540)) | (1L << (CHR - 540)) | (1L << (CONCAT - 540)) | (1L << (CONCAT_WS - 540)) | (1L << (FORMAT - 540)) | (1L << (INITCAP - 540)) | (1L << (LENGTH - 540)) | (1L << (LPAD - 540)) | (1L << (LTRIM - 540)) | (1L << (MD5 - 540)) | (1L << (PARSE_IDENT - 540)) | (1L << (PG_CLIENT_ENCODING - 540)) | (1L << (QUOTE_IDENT - 540)) | (1L << (QUOTE_LITERAL - 540)) | (1L << (QUOTE_NULLABLE - 540)) | (1L << (REGEXP_COUNT - 540)) | (1L << (REGEXP_INSTR - 540)) | (1L << (REGEXP_LIKE - 540)) | (1L << (REGEXP_MATCH - 540)) | (1L << (REGEXP_MATCHES - 540)) | (1L << (REGEXP_REPLACE - 540)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 540)) | (1L << (REGEXP_SPLIT_TO_TABLE - 540)) | (1L << (REGEXP_SUBSTR - 540)) | (1L << (REPEAT - 540)) | (1L << (RPAD - 540)) | (1L << (RTRIM - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SPLIT_PART - 604)) | (1L << (STARTS_WITH - 604)) | (1L << (STRING_TO_ARRAY - 604)) | (1L << (STRING_TO_TABLE - 604)) | (1L << (STRPOS - 604)) | (1L << (SUBSTR - 604)) | (1L << (TO_ASCII - 604)) | (1L << (TO_HEX - 604)) | (1L << (TRANSLATE - 604)) | (1L << (UNISTR - 604)) | (1L << (AGE - 604)) | (1L << (CLOCK_TIMESTAMP - 604)) | (1L << (DATE_BIN - 604)) | (1L << (DATE_PART - 604)) | (1L << (DATE_TRUNC - 604)) | (1L << (ISFINITE - 604)) | (1L << (JUSTIFY_DAYS - 604)) | (1L << (JUSTIFY_HOURS - 604)) | (1L << (JUSTIFY_INTERVAL - 604)) | (1L << (MAKE_DATE - 604)) | (1L << (MAKE_INTERVAL - 604)) | (1L << (MAKE_TIME - 604)) | (1L << (MAKE_TIMESTAMP - 604)) | (1L << (MAKE_TIMESTAMPTZ - 604)) | (1L << (NOW - 604)) | (1L << (STATEMENT_TIMESTAMP - 604)) | (1L << (TIMEOFDAY - 604)) | (1L << (TRANSACTION_TIMESTAMP - 604)) | (1L << (TO_TIMESTAMP - 604)) | (1L << (TO_CHAR - 604)) | (1L << (TO_DATE - 604)) | (1L << (TO_NUMBER - 604)) | (1L << (Identifier - 604)) | (1L << (QuotedIdentifier - 604)) | (1L << (UnicodeQuotedIdentifier - 604)) | (1L << (PLSQLVARIABLENAME - 604)) | (1L << (PLSQLIDENTIFIER - 604)))) != 0)) {
				{
				setState(7737);
				alias_clause();
				}
			}

			setState(7740);
			match(USING);
			setState(7743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(7741);
				select_with_parens();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(7742);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << AS) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (TABLE - 92)) | (1L << (IS - 92)) | (1L << (LEFT - 92)) | (1L << (OUTER_P - 92)) | (1L << (OVER - 92)) | (1L << (RIGHT - 92)) | (1L << (ABORT_P - 92)) | (1L << (ABSOLUTE_P - 92)) | (1L << (ACCESS - 92)) | (1L << (ACTION - 92)) | (1L << (ADD_P - 92)) | (1L << (ADMIN - 92)) | (1L << (AFTER - 92)) | (1L << (AGGREGATE - 92)) | (1L << (ALSO - 92)) | (1L << (ALTER - 92)) | (1L << (ALWAYS - 92)) | (1L << (ASSERTION - 92)) | (1L << (ASSIGNMENT - 92)) | (1L << (AT - 92)) | (1L << (ATTRIBUTE - 92)) | (1L << (BACKWARD - 92)) | (1L << (BEFORE - 92)) | (1L << (BEGIN_P - 92)) | (1L << (BY - 92)) | (1L << (CACHE - 92)) | (1L << (CALLED - 92)) | (1L << (CASCADE - 92)) | (1L << (CASCADED - 92)) | (1L << (CATALOG - 92)) | (1L << (CHAIN - 92)) | (1L << (CHARACTERISTICS - 92)) | (1L << (CHECKPOINT - 92)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (CLASS - 156)) | (1L << (CLOSE - 156)) | (1L << (CLUSTER - 156)) | (1L << (COMMENT - 156)) | (1L << (COMMENTS - 156)) | (1L << (COMMIT - 156)) | (1L << (COMMITTED - 156)) | (1L << (CONFIGURATION - 156)) | (1L << (CONNECTION - 156)) | (1L << (CONSTRAINTS - 156)) | (1L << (CONTENT_P - 156)) | (1L << (CONTINUE_P - 156)) | (1L << (CONVERSION_P - 156)) | (1L << (COPY - 156)) | (1L << (COST - 156)) | (1L << (CSV - 156)) | (1L << (CURSOR - 156)) | (1L << (CYCLE - 156)) | (1L << (DATA_P - 156)) | (1L << (DATABASE - 156)) | (1L << (DAY_P - 156)) | (1L << (DEALLOCATE - 156)) | (1L << (DECLARE - 156)) | (1L << (DEFAULTS - 156)) | (1L << (DEFERRED - 156)) | (1L << (DEFINER - 156)) | (1L << (DELETE_P - 156)) | (1L << (DELIMITER - 156)) | (1L << (DELIMITERS - 156)) | (1L << (DICTIONARY - 156)) | (1L << (DISABLE_P - 156)) | (1L << (DISCARD - 156)) | (1L << (DOCUMENT_P - 156)) | (1L << (DOMAIN_P - 156)) | (1L << (DOUBLE_P - 156)) | (1L << (DROP - 156)) | (1L << (EACH - 156)) | (1L << (ENABLE_P - 156)) | (1L << (ENCODING - 156)) | (1L << (ENCRYPTED - 156)) | (1L << (ENUM_P - 156)) | (1L << (ESCAPE - 156)) | (1L << (EVENT - 156)) | (1L << (EXCLUDE - 156)) | (1L << (EXCLUDING - 156)) | (1L << (EXCLUSIVE - 156)) | (1L << (EXECUTE - 156)) | (1L << (EXPLAIN - 156)) | (1L << (EXTENSION - 156)) | (1L << (EXTERNAL - 156)) | (1L << (FAMILY - 156)) | (1L << (FIRST_P - 156)) | (1L << (FOLLOWING - 156)) | (1L << (FORCE - 156)) | (1L << (FORWARD - 156)) | (1L << (FUNCTION - 156)) | (1L << (FUNCTIONS - 156)) | (1L << (GLOBAL - 156)) | (1L << (GRANTED - 156)) | (1L << (HANDLER - 156)) | (1L << (HEADER_P - 156)) | (1L << (HOLD - 156)) | (1L << (HOUR_P - 156)) | (1L << (IDENTITY_P - 156)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (IF_P - 220)) | (1L << (IMMEDIATE - 220)) | (1L << (IMMUTABLE - 220)) | (1L << (IMPLICIT_P - 220)) | (1L << (INCLUDING - 220)) | (1L << (INCREMENT - 220)) | (1L << (INDEX - 220)) | (1L << (INDEXES - 220)) | (1L << (INHERIT - 220)) | (1L << (INHERITS - 220)) | (1L << (INLINE_P - 220)) | (1L << (INSENSITIVE - 220)) | (1L << (INSERT - 220)) | (1L << (INSTEAD - 220)) | (1L << (INVOKER - 220)) | (1L << (ISOLATION - 220)) | (1L << (KEY - 220)) | (1L << (LABEL - 220)) | (1L << (LANGUAGE - 220)) | (1L << (LARGE_P - 220)) | (1L << (LAST_P - 220)) | (1L << (LEAKPROOF - 220)) | (1L << (LEVEL - 220)) | (1L << (LISTEN - 220)) | (1L << (LOAD - 220)) | (1L << (LOCAL - 220)) | (1L << (LOCATION - 220)) | (1L << (LOCK_P - 220)) | (1L << (MAPPING - 220)) | (1L << (MATCH - 220)) | (1L << (MATERIALIZED - 220)) | (1L << (MAXVALUE - 220)) | (1L << (MINUTE_P - 220)) | (1L << (MINVALUE - 220)) | (1L << (MODE - 220)) | (1L << (MONTH_P - 220)) | (1L << (MOVE - 220)) | (1L << (NAME_P - 220)) | (1L << (NAMES - 220)) | (1L << (NEXT - 220)) | (1L << (NO - 220)) | (1L << (NOTHING - 220)) | (1L << (NOTIFY - 220)) | (1L << (NOWAIT - 220)) | (1L << (NULLS_P - 220)) | (1L << (OBJECT_P - 220)) | (1L << (OF - 220)) | (1L << (OFF - 220)) | (1L << (OIDS - 220)) | (1L << (OPERATOR - 220)) | (1L << (OPTION - 220)) | (1L << (OPTIONS - 220)) | (1L << (OWNED - 220)) | (1L << (OWNER - 220)) | (1L << (PARSER - 220)) | (1L << (PARTIAL - 220)) | (1L << (PARTITION - 220)) | (1L << (PASSING - 220)) | (1L << (PASSWORD - 220)) | (1L << (PLANS - 220)) | (1L << (PRECEDING - 220)) | (1L << (PREPARE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (PREPARED - 284)) | (1L << (PRESERVE - 284)) | (1L << (PRIOR - 284)) | (1L << (PRIVILEGES - 284)) | (1L << (PROCEDURAL - 284)) | (1L << (PROCEDURE - 284)) | (1L << (PROGRAM - 284)) | (1L << (QUOTE - 284)) | (1L << (RANGE - 284)) | (1L << (READ - 284)) | (1L << (REASSIGN - 284)) | (1L << (RECHECK - 284)) | (1L << (RECURSIVE - 284)) | (1L << (REF - 284)) | (1L << (REFRESH - 284)) | (1L << (REINDEX - 284)) | (1L << (RELATIVE_P - 284)) | (1L << (RELEASE - 284)) | (1L << (RENAME - 284)) | (1L << (REPEATABLE - 284)) | (1L << (REPLACE - 284)) | (1L << (REPLICA - 284)) | (1L << (RESET - 284)) | (1L << (RESTART - 284)) | (1L << (RESTRICT - 284)) | (1L << (RETURNS - 284)) | (1L << (REVOKE - 284)) | (1L << (ROLE - 284)) | (1L << (ROLLBACK - 284)) | (1L << (ROWS - 284)) | (1L << (RULE - 284)) | (1L << (SAVEPOINT - 284)) | (1L << (SCHEMA - 284)) | (1L << (SCROLL - 284)) | (1L << (SEARCH - 284)) | (1L << (SECOND_P - 284)) | (1L << (SECURITY - 284)) | (1L << (SEQUENCE - 284)) | (1L << (SEQUENCES - 284)) | (1L << (SERIALIZABLE - 284)) | (1L << (SERVER - 284)) | (1L << (SESSION - 284)) | (1L << (SET - 284)) | (1L << (SHARE - 284)) | (1L << (SHOW - 284)) | (1L << (SIMPLE - 284)) | (1L << (SNAPSHOT - 284)) | (1L << (STABLE - 284)) | (1L << (STANDALONE_P - 284)) | (1L << (START - 284)) | (1L << (STATEMENT - 284)) | (1L << (STATISTICS - 284)) | (1L << (STDIN - 284)) | (1L << (STDOUT - 284)) | (1L << (STORAGE - 284)) | (1L << (STRICT_P - 284)) | (1L << (STRIP_P - 284)) | (1L << (SYSID - 284)) | (1L << (SYSTEM_P - 284)) | (1L << (TABLES - 284)) | (1L << (TABLESPACE - 284)) | (1L << (TEMP - 284)) | (1L << (TEMPLATE - 284)) | (1L << (TEMPORARY - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (TEXT_P - 348)) | (1L << (TRANSACTION - 348)) | (1L << (TRIGGER - 348)) | (1L << (TRUNCATE - 348)) | (1L << (TRUSTED - 348)) | (1L << (TYPE_P - 348)) | (1L << (TYPES_P - 348)) | (1L << (UNBOUNDED - 348)) | (1L << (UNCOMMITTED - 348)) | (1L << (UNENCRYPTED - 348)) | (1L << (UNKNOWN - 348)) | (1L << (UNLISTEN - 348)) | (1L << (UNLOGGED - 348)) | (1L << (UNTIL - 348)) | (1L << (UPDATE - 348)) | (1L << (VACUUM - 348)) | (1L << (VALID - 348)) | (1L << (VALIDATE - 348)) | (1L << (VALIDATOR - 348)) | (1L << (VARYING - 348)) | (1L << (VERSION_P - 348)) | (1L << (VIEW - 348)) | (1L << (VOLATILE - 348)) | (1L << (WHITESPACE_P - 348)) | (1L << (WITHOUT - 348)) | (1L << (WORK - 348)) | (1L << (WRAPPER - 348)) | (1L << (WRITE - 348)) | (1L << (XML_P - 348)) | (1L << (YEAR_P - 348)) | (1L << (YES_P - 348)) | (1L << (ZONE - 348)) | (1L << (BETWEEN - 348)) | (1L << (BIGINT - 348)) | (1L << (BIT - 348)) | (1L << (BOOLEAN_P - 348)) | (1L << (CHAR_P - 348)) | (1L << (CHARACTER - 348)) | (1L << (COALESCE - 348)) | (1L << (DEC - 348)) | (1L << (DECIMAL_P - 348)) | (1L << (EXISTS - 348)) | (1L << (EXTRACT - 348)) | (1L << (FLOAT_P - 348)) | (1L << (GREATEST - 348)) | (1L << (INOUT - 348)) | (1L << (INT_P - 348)) | (1L << (INTEGER - 348)) | (1L << (INTERVAL - 348)) | (1L << (LEAST - 348)) | (1L << (NATIONAL - 348)) | (1L << (NCHAR - 348)) | (1L << (NONE - 348)) | (1L << (NULLIF - 348)) | (1L << (NUMERIC - 348)) | (1L << (OVERLAY - 348)) | (1L << (POSITION - 348)) | (1L << (PRECISION - 348)) | (1L << (REAL - 348)) | (1L << (ROW - 348)) | (1L << (SETOF - 348)) | (1L << (SMALLINT - 348)) | (1L << (SUBSTRING - 348)) | (1L << (TIME - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (TIMESTAMP - 412)) | (1L << (TREAT - 412)) | (1L << (TRIM - 412)) | (1L << (VALUES - 412)) | (1L << (VARCHAR - 412)) | (1L << (XMLATTRIBUTES - 412)) | (1L << (XMLCOMMENT - 412)) | (1L << (XMLAGG - 412)) | (1L << (XML_IS_WELL_FORMED - 412)) | (1L << (XML_IS_WELL_FORMED_DOCUMENT - 412)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 412)) | (1L << (XPATH - 412)) | (1L << (XPATH_EXISTS - 412)) | (1L << (XMLCONCAT - 412)) | (1L << (XMLELEMENT - 412)) | (1L << (XMLEXISTS - 412)) | (1L << (XMLFOREST - 412)) | (1L << (XMLPARSE - 412)) | (1L << (XMLPI - 412)) | (1L << (XMLROOT - 412)) | (1L << (XMLSERIALIZE - 412)) | (1L << (CALL - 412)) | (1L << (CURRENT_P - 412)) | (1L << (ATTACH - 412)) | (1L << (DETACH - 412)) | (1L << (EXPRESSION - 412)) | (1L << (GENERATED - 412)) | (1L << (LOGGED - 412)) | (1L << (STORED - 412)) | (1L << (INCLUDE - 412)) | (1L << (ROUTINE - 412)) | (1L << (TRANSFORM - 412)) | (1L << (IMPORT_P - 412)) | (1L << (POLICY - 412)) | (1L << (METHOD - 412)) | (1L << (REFERENCING - 412)) | (1L << (NEW - 412)) | (1L << (OLD - 412)) | (1L << (VALUE_P - 412)) | (1L << (SUBSCRIPTION - 412)) | (1L << (PUBLICATION - 412)) | (1L << (OUT_P - 412)) | (1L << (ROUTINES - 412)) | (1L << (SCHEMAS - 412)) | (1L << (PROCEDURES - 412)) | (1L << (INPUT_P - 412)) | (1L << (SUPPORT - 412)) | (1L << (PARALLEL - 412)) | (1L << (SQL_P - 412)) | (1L << (DEPENDS - 412)) | (1L << (OVERRIDING - 412)) | (1L << (CONFLICT - 412)) | (1L << (SKIP_P - 412)) | (1L << (LOCKED - 412)) | (1L << (TIES - 412)) | (1L << (ROLLUP - 412)) | (1L << (CUBE - 412)) | (1L << (GROUPING - 412)) | (1L << (SETS - 412)) | (1L << (ORDINALITY - 412)) | (1L << (XMLTABLE - 412)) | (1L << (COLUMNS - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (XMLNAMESPACES - 476)) | (1L << (ROWTYPE - 476)) | (1L << (NORMALIZED - 476)) | (1L << (WITHIN - 476)) | (1L << (FILTER - 476)) | (1L << (GROUPS - 476)) | (1L << (OTHERS - 476)) | (1L << (NFC - 476)) | (1L << (NFD - 476)) | (1L << (NFKC - 476)) | (1L << (NFKD - 476)) | (1L << (UESCAPE - 476)) | (1L << (VIEWS - 476)) | (1L << (NORMALIZE - 476)) | (1L << (DUMP - 476)) | (1L << (PRINT_STRICT_PARAMS - 476)) | (1L << (VARIABLE_CONFLICT - 476)) | (1L << (ERROR - 476)) | (1L << (USE_VARIABLE - 476)) | (1L << (USE_COLUMN - 476)) | (1L << (ALIAS - 476)) | (1L << (CONSTANT - 476)) | (1L << (PERFORM - 476)) | (1L << (GET - 476)) | (1L << (DIAGNOSTICS - 476)) | (1L << (STACKED - 476)) | (1L << (ELSIF - 476)) | (1L << (REVERSE - 476)) | (1L << (SLICE - 476)) | (1L << (EXIT - 476)) | (1L << (RETURN - 476)) | (1L << (QUERY - 476)) | (1L << (RAISE - 476)) | (1L << (SQLSTATE - 476)) | (1L << (DEBUG - 476)) | (1L << (LOG - 476)) | (1L << (INFO - 476)) | (1L << (NOTICE - 476)) | (1L << (WARNING - 476)) | (1L << (EXCEPTION - 476)) | (1L << (ASSERT - 476)) | (1L << (OPEN - 476)) | (1L << (ABS - 476)) | (1L << (CBRT - 476)) | (1L << (CEIL - 476)) | (1L << (CEILING - 476)) | (1L << (DEGREES - 476)) | (1L << (DIV - 476)) | (1L << (EXP - 476)) | (1L << (FACTORIAL - 476)) | (1L << (FLOOR - 476)) | (1L << (GCD - 476)) | (1L << (LCM - 476)) | (1L << (LN - 476)) | (1L << (LOG10 - 476)) | (1L << (MIN_SCALE - 476)) | (1L << (MOD - 476)) | (1L << (PI - 476)) | (1L << (POWER - 476)) | (1L << (RADIANS - 476)) | (1L << (ROUND - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (SCALE - 540)) | (1L << (SIGN - 540)) | (1L << (SQRT - 540)) | (1L << (TRIM_SCALE - 540)) | (1L << (TRUNC - 540)) | (1L << (WIDTH_BUCKET - 540)) | (1L << (RANDOM - 540)) | (1L << (SETSEED - 540)) | (1L << (ACOS - 540)) | (1L << (ACOSD - 540)) | (1L << (ASIN - 540)) | (1L << (ASIND - 540)) | (1L << (ATAN - 540)) | (1L << (ATAND - 540)) | (1L << (ATAN2 - 540)) | (1L << (ATAN2D - 540)) | (1L << (COS - 540)) | (1L << (COSD - 540)) | (1L << (COT - 540)) | (1L << (COTD - 540)) | (1L << (SIN - 540)) | (1L << (SIND - 540)) | (1L << (TAN - 540)) | (1L << (TAND - 540)) | (1L << (SINH - 540)) | (1L << (COSH - 540)) | (1L << (TANH - 540)) | (1L << (ASINH - 540)) | (1L << (ACOSH - 540)) | (1L << (ATANH - 540)) | (1L << (BIT_LENGTH - 540)) | (1L << (CHAR_LENGTH - 540)) | (1L << (CHARACTER_LENGTH - 540)) | (1L << (LOWER - 540)) | (1L << (OCTET_LENGTH - 540)) | (1L << (UPPER - 540)) | (1L << (ASCII - 540)) | (1L << (BTRIM - 540)) | (1L << (CHR - 540)) | (1L << (CONCAT - 540)) | (1L << (CONCAT_WS - 540)) | (1L << (FORMAT - 540)) | (1L << (INITCAP - 540)) | (1L << (LENGTH - 540)) | (1L << (LPAD - 540)) | (1L << (LTRIM - 540)) | (1L << (MD5 - 540)) | (1L << (PARSE_IDENT - 540)) | (1L << (PG_CLIENT_ENCODING - 540)) | (1L << (QUOTE_IDENT - 540)) | (1L << (QUOTE_LITERAL - 540)) | (1L << (QUOTE_NULLABLE - 540)) | (1L << (REGEXP_COUNT - 540)) | (1L << (REGEXP_INSTR - 540)) | (1L << (REGEXP_LIKE - 540)) | (1L << (REGEXP_MATCH - 540)) | (1L << (REGEXP_MATCHES - 540)) | (1L << (REGEXP_REPLACE - 540)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 540)) | (1L << (REGEXP_SPLIT_TO_TABLE - 540)) | (1L << (REGEXP_SUBSTR - 540)) | (1L << (REPEAT - 540)) | (1L << (RPAD - 540)) | (1L << (RTRIM - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SPLIT_PART - 604)) | (1L << (STARTS_WITH - 604)) | (1L << (STRING_TO_ARRAY - 604)) | (1L << (STRING_TO_TABLE - 604)) | (1L << (STRPOS - 604)) | (1L << (SUBSTR - 604)) | (1L << (TO_ASCII - 604)) | (1L << (TO_HEX - 604)) | (1L << (TRANSLATE - 604)) | (1L << (UNISTR - 604)) | (1L << (AGE - 604)) | (1L << (CLOCK_TIMESTAMP - 604)) | (1L << (DATE_BIN - 604)) | (1L << (DATE_PART - 604)) | (1L << (DATE_TRUNC - 604)) | (1L << (ISFINITE - 604)) | (1L << (JUSTIFY_DAYS - 604)) | (1L << (JUSTIFY_HOURS - 604)) | (1L << (JUSTIFY_INTERVAL - 604)) | (1L << (MAKE_DATE - 604)) | (1L << (MAKE_INTERVAL - 604)) | (1L << (MAKE_TIME - 604)) | (1L << (MAKE_TIMESTAMP - 604)) | (1L << (MAKE_TIMESTAMPTZ - 604)) | (1L << (NOW - 604)) | (1L << (STATEMENT_TIMESTAMP - 604)) | (1L << (TIMEOFDAY - 604)) | (1L << (TRANSACTION_TIMESTAMP - 604)) | (1L << (TO_TIMESTAMP - 604)) | (1L << (TO_CHAR - 604)) | (1L << (TO_DATE - 604)) | (1L << (TO_NUMBER - 604)) | (1L << (Identifier - 604)) | (1L << (QuotedIdentifier - 604)) | (1L << (UnicodeQuotedIdentifier - 604)) | (1L << (PLSQLVARIABLENAME - 604)) | (1L << (PLSQLIDENTIFIER - 604)))) != 0)) {
				{
				setState(7745);
				alias_clause();
				}
			}

			setState(7748);
			match(ON);
			setState(7749);
			a_expr();
			setState(7758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(7750);
				merge_insert_clause();
				setState(7752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(7751);
					merge_update_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7754);
				merge_update_clause();
				setState(7756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(7755);
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			}
			setState(7761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(7760);
				merge_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Insert_column_listContext insert_column_list() {
			return getRuleContext(Insert_column_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7763);
			match(WHEN);
			setState(7764);
			match(NOT);
			setState(7765);
			match(MATCHED);
			setState(7768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(7766);
				match(AND);
				setState(7767);
				a_expr();
				}
			}

			setState(7771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(7770);
				match(THEN);
				}
			}

			setState(7773);
			match(INSERT);
			setState(7778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(7774);
				match(OPEN_PAREN);
				setState(7775);
				insert_column_list();
				setState(7776);
				match(CLOSE_PAREN);
				}
			}

			setState(7780);
			values_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7782);
			match(WHEN);
			setState(7783);
			match(MATCHED);
			setState(7786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(7784);
				match(AND);
				setState(7785);
				a_expr();
				}
			}

			setState(7789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(7788);
				match(THEN);
				}
			}

			setState(7791);
			match(UPDATE);
			setState(7792);
			match(SET);
			setState(7793);
			set_clause_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_delete_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Merge_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMerge_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMerge_delete_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMerge_delete_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_delete_clauseContext merge_delete_clause() throws RecognitionException {
		Merge_delete_clauseContext _localctx = new Merge_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_merge_delete_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7795);
			match(WHEN);
			setState(7796);
			match(MATCHED);
			setState(7798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(7797);
				match(THEN);
				}
			}

			setState(7800);
			match(DELETE_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeletestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deletestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeletestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeletestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeletestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeletestmtContext deletestmt() throws RecognitionException {
		DeletestmtContext _localctx = new DeletestmtContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_deletestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7802);
			opt_with_clause();
			setState(7803);
			match(DELETE_P);
			setState(7804);
			match(FROM);
			setState(7805);
			relation_expr_opt_alias();
			setState(7806);
			using_clause();
			setState(7807);
			where_or_current_clause();
			setState(7808);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_using_clause);
		try {
			setState(7813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7810);
				match(USING);
				setState(7811);
				from_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockstmtContext extends ParserRuleContext {
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Relation_expr_listContext relation_expr_list() {
			return getRuleContext(Relation_expr_listContext.class,0);
		}
		public Opt_lockContext opt_lock() {
			return getRuleContext(Opt_lockContext.class,0);
		}
		public Opt_nowaitContext opt_nowait() {
			return getRuleContext(Opt_nowaitContext.class,0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLockstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLockstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLockstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockstmtContext lockstmt() throws RecognitionException {
		LockstmtContext _localctx = new LockstmtContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_lockstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7815);
			match(LOCK_P);
			setState(7816);
			opt_table();
			setState(7817);
			relation_expr_list();
			setState(7818);
			opt_lock();
			setState(7819);
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lockContext extends ParserRuleContext {
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_lock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_lock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_lock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_lockContext opt_lock() throws RecognitionException {
		Opt_lockContext _localctx = new Opt_lockContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_opt_lock);
		try {
			setState(7826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(7821);
				match(IN_P);
				setState(7822);
				lock_type();
				setState(7823);
				match(MODE);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLock_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLock_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLock_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_lock_type);
		int _la;
		try {
			setState(7840);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7828);
				match(ACCESS);
				setState(7829);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(7830);
				match(ROW);
				setState(7831);
				_la = _input.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7832);
				match(SHARE);
				setState(7837);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(7833);
					match(UPDATE);
					setState(7834);
					match(EXCLUSIVE);
					}
					break;
				case ROW:
					{
					setState(7835);
					match(ROW);
					setState(7836);
					match(EXCLUSIVE);
					}
					break;
				case MODE:
					break;
				default:
					break;
				}
				}
				break;
			case EXCLUSIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7839);
				match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowaitContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowaitContext opt_nowait() throws RecognitionException {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_opt_nowait);
		try {
			setState(7844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7842);
				match(NOWAIT);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_nowait_or_skipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public Opt_nowait_or_skipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_nowait_or_skip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_nowait_or_skip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_nowait_or_skip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_nowait_or_skip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_nowait_or_skipContext opt_nowait_or_skip() throws RecognitionException {
		Opt_nowait_or_skipContext _localctx = new Opt_nowait_or_skipContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_opt_nowait_or_skip);
		try {
			setState(7850);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7846);
				match(NOWAIT);
				}
				break;
			case SKIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(7847);
				match(SKIP_P);
				setState(7848);
				match(LOCKED);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatestmtContext extends ParserRuleContext {
		public Opt_with_clauseContext opt_with_clause() {
			return getRuleContext(Opt_with_clauseContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return getRuleContext(Relation_expr_opt_aliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Set_clause_listContext set_clause_list() {
			return getRuleContext(Set_clause_listContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_or_current_clauseContext where_or_current_clause() {
			return getRuleContext(Where_or_current_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdatestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdatestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdatestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatestmtContext updatestmt() throws RecognitionException {
		UpdatestmtContext _localctx = new UpdatestmtContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_updatestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7852);
			opt_with_clause();
			setState(7853);
			match(UPDATE);
			setState(7854);
			relation_expr_opt_alias();
			setState(7855);
			match(SET);
			setState(7856);
			set_clause_list();
			setState(7857);
			from_clause();
			setState(7858);
			where_or_current_clause();
			setState(7859);
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clause_listContext extends ParserRuleContext {
		public List<Set_clauseContext> set_clause() {
			return getRuleContexts(Set_clauseContext.class);
		}
		public Set_clauseContext set_clause(int i) {
			return getRuleContext(Set_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clause_listContext set_clause_list() throws RecognitionException {
		Set_clause_listContext _localctx = new Set_clause_listContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_set_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7861);
			set_clause();
			setState(7866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7862);
				match(COMMA);
				setState(7863);
				set_clause();
				}
				}
				setState(7868);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_clauseContext extends ParserRuleContext {
		public Set_targetContext set_target() {
			return getRuleContext(Set_targetContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Set_target_listContext set_target_list() {
			return getRuleContext(Set_target_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_clauseContext set_clause() throws RecognitionException {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_set_clause);
		try {
			setState(7879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7869);
				set_target();
				setState(7870);
				match(EQUAL);
				setState(7871);
				a_expr();
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(7873);
				match(OPEN_PAREN);
				setState(7874);
				set_target_list();
				setState(7875);
				match(CLOSE_PAREN);
				setState(7876);
				match(EQUAL);
				setState(7877);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_targetContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_targetContext set_target() throws RecognitionException {
		Set_targetContext _localctx = new Set_targetContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_set_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7881);
			colid();
			setState(7882);
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_target_listContext extends ParserRuleContext {
		public List<Set_targetContext> set_target() {
			return getRuleContexts(Set_targetContext.class);
		}
		public Set_targetContext set_target(int i) {
			return getRuleContext(Set_targetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_target_listContext set_target_list() throws RecognitionException {
		Set_target_listContext _localctx = new Set_target_listContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_set_target_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7884);
			set_target();
			setState(7889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7885);
				match(COMMA);
				setState(7886);
				set_target();
				}
				}
				setState(7891);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarecursorstmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Cursor_optionsContext cursor_options() {
			return getRuleContext(Cursor_optionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Opt_holdContext opt_hold() {
			return getRuleContext(Opt_holdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarecursorstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeclarecursorstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeclarecursorstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeclarecursorstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclarecursorstmtContext declarecursorstmt() throws RecognitionException {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_declarecursorstmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7892);
			match(DECLARE);
			setState(7893);
			cursor_name();
			setState(7894);
			cursor_options();
			setState(7895);
			match(CURSOR);
			setState(7896);
			opt_hold();
			setState(7897);
			match(FOR);
			setState(7898);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7900);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionsContext extends ParserRuleContext {
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public List<TerminalNode> SCROLL() { return getTokens(PostgreSQLParser.SCROLL); }
		public TerminalNode SCROLL(int i) {
			return getToken(PostgreSQLParser.SCROLL, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(PostgreSQLParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(PostgreSQLParser.BINARY, i);
		}
		public List<TerminalNode> INSENSITIVE() { return getTokens(PostgreSQLParser.INSENSITIVE); }
		public TerminalNode INSENSITIVE(int i) {
			return getToken(PostgreSQLParser.INSENSITIVE, i);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionsContext cursor_options() throws RecognitionException {
		Cursor_optionsContext _localctx = new Cursor_optionsContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_cursor_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BINARY || _la==INSENSITIVE || _la==NO || _la==SCROLL) {
				{
				setState(7907);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(7902);
					match(NO);
					setState(7903);
					match(SCROLL);
					}
					break;
				case SCROLL:
					{
					setState(7904);
					match(SCROLL);
					}
					break;
				case BINARY:
					{
					setState(7905);
					match(BINARY);
					}
					break;
				case INSENSITIVE:
					{
					setState(7906);
					match(INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(7911);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_holdContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hold; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_hold(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_hold(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_hold(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_holdContext opt_hold() throws RecognitionException {
		Opt_holdContext _localctx = new Opt_holdContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_opt_hold);
		try {
			setState(7917);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(7913);
				match(WITH);
				setState(7914);
				match(HOLD);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7915);
				match(WITHOUT);
				setState(7916);
				match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectstmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectstmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelectstmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelectstmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelectstmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectstmtContext selectstmt() throws RecognitionException {
		SelectstmtContext _localctx = new SelectstmtContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_selectstmt);
		try {
			setState(7921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7919);
				select_no_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7920);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_with_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_with_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_with_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_select_with_parens);
		try {
			setState(7931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7923);
				match(OPEN_PAREN);
				setState(7924);
				select_no_parens();
				setState(7925);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7927);
				match(OPEN_PAREN);
				setState(7928);
				select_with_parens();
				setState(7929);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_select_limitContext opt_select_limit() {
			return getRuleContext(Opt_select_limitContext.class,0);
		}
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return getRuleContext(Opt_for_locking_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_select_no_parens);
		try {
			setState(7954);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(7933);
				select_clause();
				setState(7934);
				opt_sort_clause();
				setState(7941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(7935);
					for_locking_clause();
					setState(7936);
					opt_select_limit();
					}
					break;
				case 2:
					{
					setState(7938);
					select_limit();
					setState(7939);
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(7943);
				with_clause();
				setState(7944);
				select_clause();
				setState(7945);
				opt_sort_clause();
				setState(7952);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(7946);
					for_locking_clause();
					setState(7947);
					opt_select_limit();
					}
					break;
				case 2:
					{
					setState(7949);
					select_limit();
					setState(7950);
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_select_clause);
		try {
			setState(7958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7956);
				simple_select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7957);
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public List<Into_clauseContext> into_clause() {
			return getRuleContexts(Into_clauseContext.class);
		}
		public Into_clauseContext into_clause(int i) {
			return getRuleContext(Into_clauseContext.class,i);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public List<Select_with_parensContext> select_with_parens() {
			return getRuleContexts(Select_with_parensContext.class);
		}
		public Select_with_parensContext select_with_parens(int i) {
			return getRuleContext(Select_with_parensContext.class,i);
		}
		public List<Set_operator_with_all_or_distinctContext> set_operator_with_all_or_distinct() {
			return getRuleContexts(Set_operator_with_all_or_distinctContext.class);
		}
		public Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct(int i) {
			return getRuleContext(Set_operator_with_all_or_distinctContext.class,i);
		}
		public Opt_all_clauseContext opt_all_clause() {
			return getRuleContext(Opt_all_clauseContext.class,0);
		}
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public Distinct_clauseContext distinct_clause() {
			return getRuleContext(Distinct_clauseContext.class,0);
		}
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public List<Simple_selectContext> simple_select() {
			return getRuleContexts(Simple_selectContext.class);
		}
		public Simple_selectContext simple_select(int i) {
			return getRuleContext(Simple_selectContext.class,i);
		}
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimple_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimple_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimple_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_simple_select);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7986);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(7960);
				match(SELECT);
				setState(7968);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EOF:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case SEMI:
				case STAR:
				case PLUS:
				case MINUS:
				case PARAM:
				case Operator:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ARRAY:
				case CASE:
				case CAST:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DO:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case TABLE:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case LOOP:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case BinaryStringConstant:
				case HexadecimalStringConstant:
				case Integral:
				case Numeric:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
				case MetaCommand:
				case EscapeStringConstant:
					{
					setState(7961);
					opt_all_clause();
					setState(7962);
					into_clause();
					setState(7963);
					opt_target_list();
					}
					break;
				case DISTINCT:
					{
					setState(7965);
					distinct_clause();
					setState(7966);
					target_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7970);
				into_clause();
				setState(7971);
				from_clause();
				setState(7972);
				where_clause();
				setState(7973);
				group_clause();
				setState(7974);
				having_clause();
				setState(7975);
				window_clause();
				}
				break;
			case VALUES:
				{
				setState(7977);
				values_clause();
				}
				break;
			case TABLE:
				{
				setState(7978);
				match(TABLE);
				setState(7979);
				relation_expr();
				}
				break;
			case OPEN_PAREN:
				{
				setState(7980);
				select_with_parens();
				setState(7981);
				set_operator_with_all_or_distinct();
				setState(7984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(7982);
					simple_select();
					}
					break;
				case 2:
					{
					setState(7983);
					select_with_parens();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7995);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7988);
					set_operator_with_all_or_distinct();
					setState(7991);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
					case 1:
						{
						setState(7989);
						simple_select();
						}
						break;
					case 2:
						{
						setState(7990);
						select_with_parens();
						}
						break;
					}
					}
					} 
				}
				setState(7997);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_operatorContext extends ParserRuleContext {
		public Set_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator; }
	 
		public Set_operatorContext() { }
		public void copyFrom(Set_operatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IntersectContext extends Set_operatorContext {
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public IntersectContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIntersect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIntersect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIntersect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExceptContext extends Set_operatorContext {
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public ExceptContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExcept(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExcept(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExcept(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionContext extends Set_operatorContext {
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public UnionContext(Set_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operatorContext set_operator() throws RecognitionException {
		Set_operatorContext _localctx = new Set_operatorContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_set_operator);
		try {
			setState(8001);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				_localctx = new UnionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(7998);
				match(UNION);
				}
				break;
			case INTERSECT:
				_localctx = new IntersectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7999);
				match(INTERSECT);
				}
				break;
			case EXCEPT:
				_localctx = new ExceptContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(8000);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_operator_with_all_or_distinctContext extends ParserRuleContext {
		public Set_operatorContext set_operator() {
			return getRuleContext(Set_operatorContext.class,0);
		}
		public All_or_distinctContext all_or_distinct() {
			return getRuleContext(All_or_distinctContext.class,0);
		}
		public Set_operator_with_all_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operator_with_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_operator_with_all_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_operator_with_all_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_operator_with_all_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operator_with_all_or_distinctContext set_operator_with_all_or_distinct() throws RecognitionException {
		Set_operator_with_all_or_distinctContext _localctx = new Set_operator_with_all_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_set_operator_with_all_or_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8003);
			set_operator();
			setState(8004);
			all_or_distinct();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Cte_listContext cte_list() {
			return getRuleContext(Cte_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8006);
			match(WITH);
			setState(8008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(8007);
				match(RECURSIVE);
				}
				break;
			}
			setState(8010);
			cte_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cte_listContext extends ParserRuleContext {
		public List<Common_table_exprContext> common_table_expr() {
			return getRuleContexts(Common_table_exprContext.class);
		}
		public Common_table_exprContext common_table_expr(int i) {
			return getRuleContext(Common_table_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCte_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCte_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCte_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cte_listContext cte_list() throws RecognitionException {
		Cte_listContext _localctx = new Cte_listContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_cte_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8012);
			common_table_expr();
			setState(8017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8013);
				match(COMMA);
				setState(8014);
				common_table_expr();
				}
				}
				setState(8019);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public Opt_name_listContext opt_name_list() {
			return getRuleContext(Opt_name_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Opt_materializedContext opt_materialized() {
			return getRuleContext(Opt_materializedContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public PreparablestmtContext preparablestmt() {
			return getRuleContext(PreparablestmtContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommon_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommon_table_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommon_table_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_common_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8020);
			name();
			setState(8021);
			opt_name_list();
			setState(8022);
			match(AS);
			setState(8023);
			opt_materialized();
			setState(8024);
			match(OPEN_PAREN);
			setState(8025);
			preparablestmt();
			setState(8026);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_materializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Opt_materializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_materialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_materialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_materialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_materialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_materializedContext opt_materialized() throws RecognitionException {
		Opt_materializedContext _localctx = new Opt_materializedContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_opt_materialized);
		try {
			setState(8032);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8028);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8029);
				match(NOT);
				setState(8030);
				match(MATERIALIZED);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_with_clauseContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_with_clauseContext opt_with_clause() throws RecognitionException {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_opt_with_clause);
		try {
			setState(8036);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(8034);
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public OpttempTableNameContext opttempTableName() {
			return getRuleContext(OpttempTableNameContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_into_clause);
		try {
			setState(8046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8038);
				match(INTO);
				setState(8043);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(8039);
					opt_strict();
					setState(8040);
					opttempTableName();
					}
					break;
				case 2:
					{
					setState(8042);
					into_target();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_strictContext extends ParserRuleContext {
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_strictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_strict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_strict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_strict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_strict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_strictContext opt_strict() throws RecognitionException {
		Opt_strictContext _localctx = new Opt_strictContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_opt_strict);
		try {
			setState(8050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8049);
				match(STRICT_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttempTableNameContext extends ParserRuleContext {
		public Opt_tableContext opt_table() {
			return getRuleContext(Opt_tableContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttempTableNameContext opttempTableName() throws RecognitionException {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_opttempTableName);
		int _la;
		try {
			setState(8066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(8052);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8055);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8056);
				opt_table();
				setState(8057);
				qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8059);
				match(UNLOGGED);
				setState(8060);
				opt_table();
				setState(8061);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8063);
				match(TABLE);
				setState(8064);
				qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8065);
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_tableContext opt_table() throws RecognitionException {
		Opt_tableContext _localctx = new Opt_tableContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_opt_table);
		try {
			setState(8070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8068);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_or_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_or_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_or_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_or_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_or_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_or_distinctContext all_or_distinct() throws RecognitionException {
		All_or_distinctContext _localctx = new All_or_distinctContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_all_or_distinct);
		try {
			setState(8075);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8072);
				match(ALL);
				}
				break;
			case DISTINCT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8073);
				match(DISTINCT);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distinct_clauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDistinct_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDistinct_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDistinct_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Distinct_clauseContext distinct_clause() throws RecognitionException {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_distinct_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8077);
			match(DISTINCT);
			setState(8083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(8078);
				match(ON);
				setState(8079);
				match(OPEN_PAREN);
				setState(8080);
				expr_list();
				setState(8081);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_all_clauseContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Opt_all_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_all_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_all_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_all_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_all_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_all_clauseContext opt_all_clause() throws RecognitionException {
		Opt_all_clauseContext _localctx = new Opt_all_clauseContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_opt_all_clause);
		try {
			setState(8087);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8085);
				match(ALL);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case STAR:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case LOOP:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sort_clauseContext extends ParserRuleContext {
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_sort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_sort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_sort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_sort_clauseContext opt_sort_clause() throws RecognitionException {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_opt_sort_clause);
		try {
			setState(8091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8089);
				sort_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Sortby_listContext sortby_list() {
			return getRuleContext(Sortby_listContext.class,0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSort_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSort_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSort_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_clauseContext sort_clause() throws RecognitionException {
		Sort_clauseContext _localctx = new Sort_clauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_sort_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8093);
			match(ORDER);
			setState(8094);
			match(BY);
			setState(8095);
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sortby_listContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sortby_listContext sortby_list() throws RecognitionException {
		Sortby_listContext _localctx = new Sortby_listContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_sortby_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8097);
			sortby();
			setState(8102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8098);
				match(COMMA);
				setState(8099);
				sortby();
				}
				}
				setState(8104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_nulls_orderContext opt_nulls_order() {
			return getRuleContext(Opt_nulls_orderContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Qual_all_opContext qual_all_op() {
			return getRuleContext(Qual_all_opContext.class,0);
		}
		public Opt_asc_descContext opt_asc_desc() {
			return getRuleContext(Opt_asc_descContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_sortby);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8105);
			a_expr();
			setState(8109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				setState(8106);
				match(USING);
				setState(8107);
				qual_all_op();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case ASC:
			case CREATE:
			case DESC:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				{
				setState(8108);
				opt_asc_desc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8111);
			opt_nulls_order();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limitContext extends ParserRuleContext {
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limitContext select_limit() throws RecognitionException {
		Select_limitContext _localctx = new Select_limitContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_select_limit);
		int _la;
		try {
			setState(8121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FETCH:
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8113);
				limit_clause();
				setState(8115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(8114);
					offset_clause();
					}
				}

				}
				break;
			case OFFSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8117);
				offset_clause();
				setState(8119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(8118);
					limit_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_select_limitContext extends ParserRuleContext {
		public Select_limitContext select_limit() {
			return getRuleContext(Select_limitContext.class,0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_select_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_select_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_select_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_select_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_select_limitContext opt_select_limit() throws RecognitionException {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_opt_select_limit);
		try {
			setState(8125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8123);
				select_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public Select_limit_valueContext select_limit_value() {
			return getRuleContext(Select_limit_valueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public First_or_nextContext first_or_next() {
			return getRuleContext(First_or_nextContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_limit_clause);
		int _la;
		try {
			setState(8150);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8127);
				match(LIMIT);
				setState(8128);
				select_limit_value();
				setState(8131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8129);
					match(COMMA);
					setState(8130);
					select_offset_value();
					}
				}

				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 2);
				{
				setState(8133);
				match(FETCH);
				setState(8134);
				first_or_next();
				setState(8148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(8135);
					select_fetch_first_value();
					setState(8136);
					row_or_rows();
					setState(8140);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8137);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8138);
						match(WITH);
						setState(8139);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					setState(8142);
					row_or_rows();
					setState(8146);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ONLY:
						{
						setState(8143);
						match(ONLY);
						}
						break;
					case WITH:
						{
						setState(8144);
						match(WITH);
						setState(8145);
						match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public Select_offset_valueContext select_offset_value() {
			return getRuleContext(Select_offset_valueContext.class,0);
		}
		public Select_fetch_first_valueContext select_fetch_first_value() {
			return getRuleContext(Select_fetch_first_valueContext.class,0);
		}
		public Row_or_rowsContext row_or_rows() {
			return getRuleContext(Row_or_rowsContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_offset_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8152);
			match(OFFSET);
			setState(8157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				setState(8153);
				select_offset_value();
				}
				break;
			case 2:
				{
				setState(8154);
				select_fetch_first_value();
				setState(8155);
				row_or_rows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_limit_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_limit_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_limit_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_limit_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_limit_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_limit_valueContext select_limit_value() throws RecognitionException {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_select_limit_value);
		try {
			setState(8161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8159);
				a_expr();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8160);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_offset_valueContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_offset_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_offset_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_offset_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_offset_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_offset_valueContext select_offset_value() throws RecognitionException {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_select_offset_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8163);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_fetch_first_valueContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public I_or_f_constContext i_or_f_const() {
			return getRuleContext(I_or_f_constContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_fetch_first_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_fetch_first_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_fetch_first_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_fetch_first_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_fetch_first_valueContext select_fetch_first_value() throws RecognitionException {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_select_fetch_first_value);
		try {
			setState(8170);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(8165);
				c_expr();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8166);
				match(PLUS);
				setState(8167);
				i_or_f_const();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(8168);
				match(MINUS);
				setState(8169);
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class I_or_f_constContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_or_f_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterI_or_f_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitI_or_f_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitI_or_f_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final I_or_f_constContext i_or_f_const() throws RecognitionException {
		I_or_f_constContext _localctx = new I_or_f_constContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_i_or_f_const);
		try {
			setState(8174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(8172);
				iconst();
				}
				break;
			case Numeric:
				enterOuterAlt(_localctx, 2);
				{
				setState(8173);
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow_or_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow_or_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow_or_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_rowsContext row_or_rows() throws RecognitionException {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_row_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8176);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_nextContext extends ParserRuleContext {
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFirst_or_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFirst_or_next(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFirst_or_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_or_nextContext first_or_next() throws RecognitionException {
		First_or_nextContext _localctx = new First_or_nextContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_first_or_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8178);
			_la = _input.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_clauseContext group_clause() throws RecognitionException {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_group_clause);
		try {
			setState(8184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8180);
				match(GROUP_P);
				setState(8181);
				match(BY);
				setState(8182);
				group_by_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_listContext extends ParserRuleContext {
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_listContext group_by_list() throws RecognitionException {
		Group_by_listContext _localctx = new Group_by_listContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_group_by_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8186);
			group_by_item();
			setState(8191);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,458,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8187);
					match(COMMA);
					setState(8188);
					group_by_item();
					}
					} 
				}
				setState(8193);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,458,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Cube_clauseContext cube_clause() {
			return getRuleContext(Cube_clauseContext.class,0);
		}
		public Rollup_clauseContext rollup_clause() {
			return getRuleContext(Rollup_clauseContext.class,0);
		}
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_group_by_item);
		try {
			setState(8199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8194);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8195);
				empty_grouping_set();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8196);
				cube_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8197);
				rollup_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8198);
				grouping_sets_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterEmpty_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitEmpty_grouping_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitEmpty_grouping_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8201);
			match(OPEN_PAREN);
			setState(8202);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_clauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollup_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollup_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollup_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_clauseContext rollup_clause() throws RecognitionException {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_rollup_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8204);
			match(ROLLUP);
			setState(8205);
			match(OPEN_PAREN);
			setState(8206);
			expr_list();
			setState(8207);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cube_clauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cube_clauseContext cube_clause() throws RecognitionException {
		Cube_clauseContext _localctx = new Cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_cube_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8209);
			match(CUBE);
			setState(8210);
			match(OPEN_PAREN);
			setState(8211);
			expr_list();
			setState(8212);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_grouping_sets_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8214);
			match(GROUPING);
			setState(8215);
			match(SETS);
			setState(8216);
			match(OPEN_PAREN);
			setState(8217);
			group_by_list();
			setState(8218);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_having_clause);
		try {
			setState(8223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HAVING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8220);
				match(HAVING);
				setState(8221);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_clauseContext extends ParserRuleContext {
		public For_locking_itemsContext for_locking_items() {
			return getRuleContext(For_locking_itemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_clauseContext for_locking_clause() throws RecognitionException {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_for_locking_clause);
		try {
			setState(8229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8225);
				for_locking_items();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8226);
				match(FOR);
				setState(8227);
				match(READ);
				setState(8228);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_locking_clauseContext extends ParserRuleContext {
		public For_locking_clauseContext for_locking_clause() {
			return getRuleContext(For_locking_clauseContext.class,0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_locking_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_locking_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_locking_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_locking_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_locking_clauseContext opt_for_locking_clause() throws RecognitionException {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_opt_for_locking_clause);
		try {
			setState(8233);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8231);
				for_locking_clause();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemsContext extends ParserRuleContext {
		public List<For_locking_itemContext> for_locking_item() {
			return getRuleContexts(For_locking_itemContext.class);
		}
		public For_locking_itemContext for_locking_item(int i) {
			return getRuleContext(For_locking_itemContext.class,i);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_items; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_items(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_items(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_items(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemsContext for_locking_items() throws RecognitionException {
		For_locking_itemsContext _localctx = new For_locking_itemsContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_for_locking_items);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8236); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8235);
				for_locking_item();
				}
				}
				setState(8238); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_itemContext extends ParserRuleContext {
		public For_locking_strengthContext for_locking_strength() {
			return getRuleContext(For_locking_strengthContext.class,0);
		}
		public Locked_rels_listContext locked_rels_list() {
			return getRuleContext(Locked_rels_listContext.class,0);
		}
		public Opt_nowait_or_skipContext opt_nowait_or_skip() {
			return getRuleContext(Opt_nowait_or_skipContext.class,0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_itemContext for_locking_item() throws RecognitionException {
		For_locking_itemContext _localctx = new For_locking_itemContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_for_locking_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8240);
			for_locking_strength();
			setState(8241);
			locked_rels_list();
			setState(8242);
			opt_nowait_or_skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_locking_strengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_locking_strength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_locking_strength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_locking_strength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_locking_strength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_locking_strengthContext for_locking_strength() throws RecognitionException {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_for_locking_strength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8244);
			match(FOR);
			setState(8254);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
			case UPDATE:
				{
				setState(8247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(8245);
					match(NO);
					setState(8246);
					match(KEY);
					}
				}

				setState(8249);
				match(UPDATE);
				}
				break;
			case KEY:
			case SHARE:
				{
				setState(8251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(8250);
					match(KEY);
					}
				}

				setState(8253);
				match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locked_rels_listContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Qualified_name_listContext qualified_name_list() {
			return getRuleContext(Qualified_name_listContext.class,0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locked_rels_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLocked_rels_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLocked_rels_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLocked_rels_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Locked_rels_listContext locked_rels_list() throws RecognitionException {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_locked_rels_list);
		try {
			setState(8259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OF:
				enterOuterAlt(_localctx, 1);
				{
				setState(8256);
				match(OF);
				setState(8257);
				qualified_name_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case SKIP_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8261);
			match(VALUES);
			setState(8262);
			match(OPEN_PAREN);
			setState(8263);
			expr_list();
			setState(8264);
			match(CLOSE_PAREN);
			setState(8272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8265);
				match(COMMA);
				setState(8266);
				match(OPEN_PAREN);
				setState(8267);
				expr_list();
				setState(8268);
				match(CLOSE_PAREN);
				}
				}
				setState(8274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_from_clause);
		try {
			setState(8278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(8275);
				match(FROM);
				setState(8276);
				from_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public Non_ansi_joinContext non_ansi_join() {
			return getRuleContext(Non_ansi_joinContext.class,0);
		}
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		From_listContext _localctx = new From_listContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_from_list);
		try {
			int _alt;
			setState(8289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8280);
				non_ansi_join();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8281);
				table_ref();
				setState(8286);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8282);
						match(COMMA);
						setState(8283);
						table_ref();
						}
						} 
					}
					setState(8288);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_ansi_joinContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Non_ansi_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_ansi_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNon_ansi_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNon_ansi_join(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNon_ansi_join(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_ansi_joinContext non_ansi_join() throws RecognitionException {
		Non_ansi_joinContext _localctx = new Non_ansi_joinContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_non_ansi_join);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8291);
			table_ref();
			setState(8294); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(8292);
					match(COMMA);
					setState(8293);
					table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8296); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,472,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public Opt_alias_clauseContext opt_alias_clause() {
			return getRuleContext(Opt_alias_clauseContext.class,0);
		}
		public Func_tableContext func_table() {
			return getRuleContext(Func_tableContext.class,0);
		}
		public Func_alias_clauseContext func_alias_clause() {
			return getRuleContext(Func_alias_clauseContext.class,0);
		}
		public XmltableContext xmltable() {
			return getRuleContext(XmltableContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> CROSS() { return getTokens(PostgreSQLParser.CROSS); }
		public TerminalNode CROSS(int i) {
			return getToken(PostgreSQLParser.CROSS, i);
		}
		public List<TerminalNode> JOIN() { return getTokens(PostgreSQLParser.JOIN); }
		public TerminalNode JOIN(int i) {
			return getToken(PostgreSQLParser.JOIN, i);
		}
		public List<TerminalNode> NATURAL() { return getTokens(PostgreSQLParser.NATURAL); }
		public TerminalNode NATURAL(int i) {
			return getToken(PostgreSQLParser.NATURAL, i);
		}
		public List<Join_qualContext> join_qual() {
			return getRuleContexts(Join_qualContext.class);
		}
		public Join_qualContext join_qual(int i) {
			return getRuleContext(Join_qualContext.class,i);
		}
		public Tablesample_clauseContext tablesample_clause() {
			return getRuleContext(Tablesample_clauseContext.class,0);
		}
		public List<Join_typeContext> join_type() {
			return getRuleContexts(Join_typeContext.class);
		}
		public Join_typeContext join_type(int i) {
			return getRuleContext(Join_typeContext.class,i);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_table_ref);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(8298);
				relation_expr();
				setState(8299);
				opt_alias_clause();
				setState(8301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESAMPLE) {
					{
					setState(8300);
					tablesample_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(8303);
				func_table();
				setState(8304);
				func_alias_clause();
				}
				break;
			case 3:
				{
				setState(8306);
				xmltable();
				setState(8307);
				opt_alias_clause();
				}
				break;
			case 4:
				{
				setState(8309);
				select_with_parens();
				setState(8310);
				opt_alias_clause();
				}
				break;
			case 5:
				{
				setState(8312);
				match(LATERAL_P);
				setState(8322);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(8313);
					xmltable();
					setState(8314);
					opt_alias_clause();
					}
					break;
				case 2:
					{
					setState(8316);
					func_table();
					setState(8317);
					func_alias_clause();
					}
					break;
				case 3:
					{
					setState(8319);
					select_with_parens();
					setState(8320);
					opt_alias_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(8324);
				match(OPEN_PAREN);
				setState(8325);
				table_ref();
				setState(8342);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CROSS:
					{
					setState(8326);
					match(CROSS);
					setState(8327);
					match(JOIN);
					setState(8328);
					table_ref();
					}
					break;
				case NATURAL:
					{
					setState(8329);
					match(NATURAL);
					setState(8331);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (FULL - 113)) | (1L << (INNER_P - 113)) | (1L << (LEFT - 113)) | (1L << (RIGHT - 113)))) != 0)) {
						{
						setState(8330);
						join_type();
						}
					}

					setState(8333);
					match(JOIN);
					setState(8334);
					table_ref();
					}
					break;
				case FULL:
				case INNER_P:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					setState(8336);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (FULL - 113)) | (1L << (INNER_P - 113)) | (1L << (LEFT - 113)) | (1L << (RIGHT - 113)))) != 0)) {
						{
						setState(8335);
						join_type();
						}
					}

					setState(8338);
					match(JOIN);
					setState(8339);
					table_ref();
					setState(8340);
					join_qual();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				setState(8344);
				match(CLOSE_PAREN);
				setState(8345);
				opt_alias_clause();
				}
				break;
			}
			setState(8367);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(8365);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CROSS:
						{
						setState(8349);
						match(CROSS);
						setState(8350);
						match(JOIN);
						setState(8351);
						table_ref();
						}
						break;
					case NATURAL:
						{
						setState(8352);
						match(NATURAL);
						setState(8354);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (FULL - 113)) | (1L << (INNER_P - 113)) | (1L << (LEFT - 113)) | (1L << (RIGHT - 113)))) != 0)) {
							{
							setState(8353);
							join_type();
							}
						}

						setState(8356);
						match(JOIN);
						setState(8357);
						table_ref();
						}
						break;
					case FULL:
					case INNER_P:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						setState(8359);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (FULL - 113)) | (1L << (INNER_P - 113)) | (1L << (LEFT - 113)) | (1L << (RIGHT - 113)))) != 0)) {
							{
							setState(8358);
							join_type();
							}
						}

						setState(8361);
						match(JOIN);
						setState(8362);
						table_ref();
						setState(8363);
						join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(8369);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_clauseContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_clauseContext alias_clause() throws RecognitionException {
		Alias_clauseContext _localctx = new Alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_alias_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8370);
				match(AS);
				}
			}

			setState(8373);
			colid();
			setState(8378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(8374);
				match(OPEN_PAREN);
				setState(8375);
				name_list();
				setState(8376);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public Opt_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_alias_clauseContext opt_alias_clause() throws RecognitionException {
		Opt_alias_clauseContext _localctx = new Opt_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_opt_alias_clause);
		try {
			setState(8382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8380);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_alias_clauseContext extends ParserRuleContext {
		public Alias_clauseContext alias_clause() {
			return getRuleContext(Alias_clauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_alias_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_alias_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_alias_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_alias_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_alias_clauseContext func_alias_clause() throws RecognitionException {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_func_alias_clause);
		int _la;
		try {
			setState(8397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8384);
				alias_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8390);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
					{
					setState(8385);
					match(AS);
					setState(8387);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (TABLE - 92)) | (1L << (IS - 92)) | (1L << (LEFT - 92)) | (1L << (OUTER_P - 92)) | (1L << (OVER - 92)) | (1L << (RIGHT - 92)) | (1L << (ABORT_P - 92)) | (1L << (ABSOLUTE_P - 92)) | (1L << (ACCESS - 92)) | (1L << (ACTION - 92)) | (1L << (ADD_P - 92)) | (1L << (ADMIN - 92)) | (1L << (AFTER - 92)) | (1L << (AGGREGATE - 92)) | (1L << (ALSO - 92)) | (1L << (ALTER - 92)) | (1L << (ALWAYS - 92)) | (1L << (ASSERTION - 92)) | (1L << (ASSIGNMENT - 92)) | (1L << (AT - 92)) | (1L << (ATTRIBUTE - 92)) | (1L << (BACKWARD - 92)) | (1L << (BEFORE - 92)) | (1L << (BEGIN_P - 92)) | (1L << (BY - 92)) | (1L << (CACHE - 92)) | (1L << (CALLED - 92)) | (1L << (CASCADE - 92)) | (1L << (CASCADED - 92)) | (1L << (CATALOG - 92)) | (1L << (CHAIN - 92)) | (1L << (CHARACTERISTICS - 92)) | (1L << (CHECKPOINT - 92)))) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (CLASS - 156)) | (1L << (CLOSE - 156)) | (1L << (CLUSTER - 156)) | (1L << (COMMENT - 156)) | (1L << (COMMENTS - 156)) | (1L << (COMMIT - 156)) | (1L << (COMMITTED - 156)) | (1L << (CONFIGURATION - 156)) | (1L << (CONNECTION - 156)) | (1L << (CONSTRAINTS - 156)) | (1L << (CONTENT_P - 156)) | (1L << (CONTINUE_P - 156)) | (1L << (CONVERSION_P - 156)) | (1L << (COPY - 156)) | (1L << (COST - 156)) | (1L << (CSV - 156)) | (1L << (CURSOR - 156)) | (1L << (CYCLE - 156)) | (1L << (DATA_P - 156)) | (1L << (DATABASE - 156)) | (1L << (DAY_P - 156)) | (1L << (DEALLOCATE - 156)) | (1L << (DECLARE - 156)) | (1L << (DEFAULTS - 156)) | (1L << (DEFERRED - 156)) | (1L << (DEFINER - 156)) | (1L << (DELETE_P - 156)) | (1L << (DELIMITER - 156)) | (1L << (DELIMITERS - 156)) | (1L << (DICTIONARY - 156)) | (1L << (DISABLE_P - 156)) | (1L << (DISCARD - 156)) | (1L << (DOCUMENT_P - 156)) | (1L << (DOMAIN_P - 156)) | (1L << (DOUBLE_P - 156)) | (1L << (DROP - 156)) | (1L << (EACH - 156)) | (1L << (ENABLE_P - 156)) | (1L << (ENCODING - 156)) | (1L << (ENCRYPTED - 156)) | (1L << (ENUM_P - 156)) | (1L << (ESCAPE - 156)) | (1L << (EVENT - 156)) | (1L << (EXCLUDE - 156)) | (1L << (EXCLUDING - 156)) | (1L << (EXCLUSIVE - 156)) | (1L << (EXECUTE - 156)) | (1L << (EXPLAIN - 156)) | (1L << (EXTENSION - 156)) | (1L << (EXTERNAL - 156)) | (1L << (FAMILY - 156)) | (1L << (FIRST_P - 156)) | (1L << (FOLLOWING - 156)) | (1L << (FORCE - 156)) | (1L << (FORWARD - 156)) | (1L << (FUNCTION - 156)) | (1L << (FUNCTIONS - 156)) | (1L << (GLOBAL - 156)) | (1L << (GRANTED - 156)) | (1L << (HANDLER - 156)) | (1L << (HEADER_P - 156)) | (1L << (HOLD - 156)) | (1L << (HOUR_P - 156)) | (1L << (IDENTITY_P - 156)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (IF_P - 220)) | (1L << (IMMEDIATE - 220)) | (1L << (IMMUTABLE - 220)) | (1L << (IMPLICIT_P - 220)) | (1L << (INCLUDING - 220)) | (1L << (INCREMENT - 220)) | (1L << (INDEX - 220)) | (1L << (INDEXES - 220)) | (1L << (INHERIT - 220)) | (1L << (INHERITS - 220)) | (1L << (INLINE_P - 220)) | (1L << (INSENSITIVE - 220)) | (1L << (INSERT - 220)) | (1L << (INSTEAD - 220)) | (1L << (INVOKER - 220)) | (1L << (ISOLATION - 220)) | (1L << (KEY - 220)) | (1L << (LABEL - 220)) | (1L << (LANGUAGE - 220)) | (1L << (LARGE_P - 220)) | (1L << (LAST_P - 220)) | (1L << (LEAKPROOF - 220)) | (1L << (LEVEL - 220)) | (1L << (LISTEN - 220)) | (1L << (LOAD - 220)) | (1L << (LOCAL - 220)) | (1L << (LOCATION - 220)) | (1L << (LOCK_P - 220)) | (1L << (MAPPING - 220)) | (1L << (MATCH - 220)) | (1L << (MATERIALIZED - 220)) | (1L << (MAXVALUE - 220)) | (1L << (MINUTE_P - 220)) | (1L << (MINVALUE - 220)) | (1L << (MODE - 220)) | (1L << (MONTH_P - 220)) | (1L << (MOVE - 220)) | (1L << (NAME_P - 220)) | (1L << (NAMES - 220)) | (1L << (NEXT - 220)) | (1L << (NO - 220)) | (1L << (NOTHING - 220)) | (1L << (NOTIFY - 220)) | (1L << (NOWAIT - 220)) | (1L << (NULLS_P - 220)) | (1L << (OBJECT_P - 220)) | (1L << (OF - 220)) | (1L << (OFF - 220)) | (1L << (OIDS - 220)) | (1L << (OPERATOR - 220)) | (1L << (OPTION - 220)) | (1L << (OPTIONS - 220)) | (1L << (OWNED - 220)) | (1L << (OWNER - 220)) | (1L << (PARSER - 220)) | (1L << (PARTIAL - 220)) | (1L << (PARTITION - 220)) | (1L << (PASSING - 220)) | (1L << (PASSWORD - 220)) | (1L << (PLANS - 220)) | (1L << (PRECEDING - 220)) | (1L << (PREPARE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (PREPARED - 284)) | (1L << (PRESERVE - 284)) | (1L << (PRIOR - 284)) | (1L << (PRIVILEGES - 284)) | (1L << (PROCEDURAL - 284)) | (1L << (PROCEDURE - 284)) | (1L << (PROGRAM - 284)) | (1L << (QUOTE - 284)) | (1L << (RANGE - 284)) | (1L << (READ - 284)) | (1L << (REASSIGN - 284)) | (1L << (RECHECK - 284)) | (1L << (RECURSIVE - 284)) | (1L << (REF - 284)) | (1L << (REFRESH - 284)) | (1L << (REINDEX - 284)) | (1L << (RELATIVE_P - 284)) | (1L << (RELEASE - 284)) | (1L << (RENAME - 284)) | (1L << (REPEATABLE - 284)) | (1L << (REPLACE - 284)) | (1L << (REPLICA - 284)) | (1L << (RESET - 284)) | (1L << (RESTART - 284)) | (1L << (RESTRICT - 284)) | (1L << (RETURNS - 284)) | (1L << (REVOKE - 284)) | (1L << (ROLE - 284)) | (1L << (ROLLBACK - 284)) | (1L << (ROWS - 284)) | (1L << (RULE - 284)) | (1L << (SAVEPOINT - 284)) | (1L << (SCHEMA - 284)) | (1L << (SCROLL - 284)) | (1L << (SEARCH - 284)) | (1L << (SECOND_P - 284)) | (1L << (SECURITY - 284)) | (1L << (SEQUENCE - 284)) | (1L << (SEQUENCES - 284)) | (1L << (SERIALIZABLE - 284)) | (1L << (SERVER - 284)) | (1L << (SESSION - 284)) | (1L << (SET - 284)) | (1L << (SHARE - 284)) | (1L << (SHOW - 284)) | (1L << (SIMPLE - 284)) | (1L << (SNAPSHOT - 284)) | (1L << (STABLE - 284)) | (1L << (STANDALONE_P - 284)) | (1L << (START - 284)) | (1L << (STATEMENT - 284)) | (1L << (STATISTICS - 284)) | (1L << (STDIN - 284)) | (1L << (STDOUT - 284)) | (1L << (STORAGE - 284)) | (1L << (STRICT_P - 284)) | (1L << (STRIP_P - 284)) | (1L << (SYSID - 284)) | (1L << (SYSTEM_P - 284)) | (1L << (TABLES - 284)) | (1L << (TABLESPACE - 284)) | (1L << (TEMP - 284)) | (1L << (TEMPLATE - 284)) | (1L << (TEMPORARY - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (TEXT_P - 348)) | (1L << (TRANSACTION - 348)) | (1L << (TRIGGER - 348)) | (1L << (TRUNCATE - 348)) | (1L << (TRUSTED - 348)) | (1L << (TYPE_P - 348)) | (1L << (TYPES_P - 348)) | (1L << (UNBOUNDED - 348)) | (1L << (UNCOMMITTED - 348)) | (1L << (UNENCRYPTED - 348)) | (1L << (UNKNOWN - 348)) | (1L << (UNLISTEN - 348)) | (1L << (UNLOGGED - 348)) | (1L << (UNTIL - 348)) | (1L << (UPDATE - 348)) | (1L << (VACUUM - 348)) | (1L << (VALID - 348)) | (1L << (VALIDATE - 348)) | (1L << (VALIDATOR - 348)) | (1L << (VARYING - 348)) | (1L << (VERSION_P - 348)) | (1L << (VIEW - 348)) | (1L << (VOLATILE - 348)) | (1L << (WHITESPACE_P - 348)) | (1L << (WITHOUT - 348)) | (1L << (WORK - 348)) | (1L << (WRAPPER - 348)) | (1L << (WRITE - 348)) | (1L << (XML_P - 348)) | (1L << (YEAR_P - 348)) | (1L << (YES_P - 348)) | (1L << (ZONE - 348)) | (1L << (BETWEEN - 348)) | (1L << (BIGINT - 348)) | (1L << (BIT - 348)) | (1L << (BOOLEAN_P - 348)) | (1L << (CHAR_P - 348)) | (1L << (CHARACTER - 348)) | (1L << (COALESCE - 348)) | (1L << (DEC - 348)) | (1L << (DECIMAL_P - 348)) | (1L << (EXISTS - 348)) | (1L << (EXTRACT - 348)) | (1L << (FLOAT_P - 348)) | (1L << (GREATEST - 348)) | (1L << (INOUT - 348)) | (1L << (INT_P - 348)) | (1L << (INTEGER - 348)) | (1L << (INTERVAL - 348)) | (1L << (LEAST - 348)) | (1L << (NATIONAL - 348)) | (1L << (NCHAR - 348)) | (1L << (NONE - 348)) | (1L << (NULLIF - 348)) | (1L << (NUMERIC - 348)) | (1L << (OVERLAY - 348)) | (1L << (POSITION - 348)) | (1L << (PRECISION - 348)) | (1L << (REAL - 348)) | (1L << (ROW - 348)) | (1L << (SETOF - 348)) | (1L << (SMALLINT - 348)) | (1L << (SUBSTRING - 348)) | (1L << (TIME - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (TIMESTAMP - 412)) | (1L << (TREAT - 412)) | (1L << (TRIM - 412)) | (1L << (VALUES - 412)) | (1L << (VARCHAR - 412)) | (1L << (XMLATTRIBUTES - 412)) | (1L << (XMLCOMMENT - 412)) | (1L << (XMLAGG - 412)) | (1L << (XML_IS_WELL_FORMED - 412)) | (1L << (XML_IS_WELL_FORMED_DOCUMENT - 412)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 412)) | (1L << (XPATH - 412)) | (1L << (XPATH_EXISTS - 412)) | (1L << (XMLCONCAT - 412)) | (1L << (XMLELEMENT - 412)) | (1L << (XMLEXISTS - 412)) | (1L << (XMLFOREST - 412)) | (1L << (XMLPARSE - 412)) | (1L << (XMLPI - 412)) | (1L << (XMLROOT - 412)) | (1L << (XMLSERIALIZE - 412)) | (1L << (CALL - 412)) | (1L << (CURRENT_P - 412)) | (1L << (ATTACH - 412)) | (1L << (DETACH - 412)) | (1L << (EXPRESSION - 412)) | (1L << (GENERATED - 412)) | (1L << (LOGGED - 412)) | (1L << (STORED - 412)) | (1L << (INCLUDE - 412)) | (1L << (ROUTINE - 412)) | (1L << (TRANSFORM - 412)) | (1L << (IMPORT_P - 412)) | (1L << (POLICY - 412)) | (1L << (METHOD - 412)) | (1L << (REFERENCING - 412)) | (1L << (NEW - 412)) | (1L << (OLD - 412)) | (1L << (VALUE_P - 412)) | (1L << (SUBSCRIPTION - 412)) | (1L << (PUBLICATION - 412)) | (1L << (OUT_P - 412)) | (1L << (ROUTINES - 412)) | (1L << (SCHEMAS - 412)) | (1L << (PROCEDURES - 412)) | (1L << (INPUT_P - 412)) | (1L << (SUPPORT - 412)) | (1L << (PARALLEL - 412)) | (1L << (SQL_P - 412)) | (1L << (DEPENDS - 412)) | (1L << (OVERRIDING - 412)) | (1L << (CONFLICT - 412)) | (1L << (SKIP_P - 412)) | (1L << (LOCKED - 412)) | (1L << (TIES - 412)) | (1L << (ROLLUP - 412)) | (1L << (CUBE - 412)) | (1L << (GROUPING - 412)) | (1L << (SETS - 412)) | (1L << (ORDINALITY - 412)) | (1L << (XMLTABLE - 412)) | (1L << (COLUMNS - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (XMLNAMESPACES - 476)) | (1L << (ROWTYPE - 476)) | (1L << (NORMALIZED - 476)) | (1L << (WITHIN - 476)) | (1L << (FILTER - 476)) | (1L << (GROUPS - 476)) | (1L << (OTHERS - 476)) | (1L << (NFC - 476)) | (1L << (NFD - 476)) | (1L << (NFKC - 476)) | (1L << (NFKD - 476)) | (1L << (UESCAPE - 476)) | (1L << (VIEWS - 476)) | (1L << (NORMALIZE - 476)) | (1L << (DUMP - 476)) | (1L << (PRINT_STRICT_PARAMS - 476)) | (1L << (VARIABLE_CONFLICT - 476)) | (1L << (ERROR - 476)) | (1L << (USE_VARIABLE - 476)) | (1L << (USE_COLUMN - 476)) | (1L << (ALIAS - 476)) | (1L << (CONSTANT - 476)) | (1L << (PERFORM - 476)) | (1L << (GET - 476)) | (1L << (DIAGNOSTICS - 476)) | (1L << (STACKED - 476)) | (1L << (ELSIF - 476)) | (1L << (REVERSE - 476)) | (1L << (SLICE - 476)) | (1L << (EXIT - 476)) | (1L << (RETURN - 476)) | (1L << (QUERY - 476)) | (1L << (RAISE - 476)) | (1L << (SQLSTATE - 476)) | (1L << (DEBUG - 476)) | (1L << (LOG - 476)) | (1L << (INFO - 476)) | (1L << (NOTICE - 476)) | (1L << (WARNING - 476)) | (1L << (EXCEPTION - 476)) | (1L << (ASSERT - 476)) | (1L << (OPEN - 476)) | (1L << (ABS - 476)) | (1L << (CBRT - 476)) | (1L << (CEIL - 476)) | (1L << (CEILING - 476)) | (1L << (DEGREES - 476)) | (1L << (DIV - 476)) | (1L << (EXP - 476)) | (1L << (FACTORIAL - 476)) | (1L << (FLOOR - 476)) | (1L << (GCD - 476)) | (1L << (LCM - 476)) | (1L << (LN - 476)) | (1L << (LOG10 - 476)) | (1L << (MIN_SCALE - 476)) | (1L << (MOD - 476)) | (1L << (PI - 476)) | (1L << (POWER - 476)) | (1L << (RADIANS - 476)) | (1L << (ROUND - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (SCALE - 540)) | (1L << (SIGN - 540)) | (1L << (SQRT - 540)) | (1L << (TRIM_SCALE - 540)) | (1L << (TRUNC - 540)) | (1L << (WIDTH_BUCKET - 540)) | (1L << (RANDOM - 540)) | (1L << (SETSEED - 540)) | (1L << (ACOS - 540)) | (1L << (ACOSD - 540)) | (1L << (ASIN - 540)) | (1L << (ASIND - 540)) | (1L << (ATAN - 540)) | (1L << (ATAND - 540)) | (1L << (ATAN2 - 540)) | (1L << (ATAN2D - 540)) | (1L << (COS - 540)) | (1L << (COSD - 540)) | (1L << (COT - 540)) | (1L << (COTD - 540)) | (1L << (SIN - 540)) | (1L << (SIND - 540)) | (1L << (TAN - 540)) | (1L << (TAND - 540)) | (1L << (SINH - 540)) | (1L << (COSH - 540)) | (1L << (TANH - 540)) | (1L << (ASINH - 540)) | (1L << (ACOSH - 540)) | (1L << (ATANH - 540)) | (1L << (BIT_LENGTH - 540)) | (1L << (CHAR_LENGTH - 540)) | (1L << (CHARACTER_LENGTH - 540)) | (1L << (LOWER - 540)) | (1L << (OCTET_LENGTH - 540)) | (1L << (UPPER - 540)) | (1L << (ASCII - 540)) | (1L << (BTRIM - 540)) | (1L << (CHR - 540)) | (1L << (CONCAT - 540)) | (1L << (CONCAT_WS - 540)) | (1L << (FORMAT - 540)) | (1L << (INITCAP - 540)) | (1L << (LENGTH - 540)) | (1L << (LPAD - 540)) | (1L << (LTRIM - 540)) | (1L << (MD5 - 540)) | (1L << (PARSE_IDENT - 540)) | (1L << (PG_CLIENT_ENCODING - 540)) | (1L << (QUOTE_IDENT - 540)) | (1L << (QUOTE_LITERAL - 540)) | (1L << (QUOTE_NULLABLE - 540)) | (1L << (REGEXP_COUNT - 540)) | (1L << (REGEXP_INSTR - 540)) | (1L << (REGEXP_LIKE - 540)) | (1L << (REGEXP_MATCH - 540)) | (1L << (REGEXP_MATCHES - 540)) | (1L << (REGEXP_REPLACE - 540)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 540)) | (1L << (REGEXP_SPLIT_TO_TABLE - 540)) | (1L << (REGEXP_SUBSTR - 540)) | (1L << (REPEAT - 540)) | (1L << (RPAD - 540)) | (1L << (RTRIM - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SPLIT_PART - 604)) | (1L << (STARTS_WITH - 604)) | (1L << (STRING_TO_ARRAY - 604)) | (1L << (STRING_TO_TABLE - 604)) | (1L << (STRPOS - 604)) | (1L << (SUBSTR - 604)) | (1L << (TO_ASCII - 604)) | (1L << (TO_HEX - 604)) | (1L << (TRANSLATE - 604)) | (1L << (UNISTR - 604)) | (1L << (AGE - 604)) | (1L << (CLOCK_TIMESTAMP - 604)) | (1L << (DATE_BIN - 604)) | (1L << (DATE_PART - 604)) | (1L << (DATE_TRUNC - 604)) | (1L << (ISFINITE - 604)) | (1L << (JUSTIFY_DAYS - 604)) | (1L << (JUSTIFY_HOURS - 604)) | (1L << (JUSTIFY_INTERVAL - 604)) | (1L << (MAKE_DATE - 604)) | (1L << (MAKE_INTERVAL - 604)) | (1L << (MAKE_TIME - 604)) | (1L << (MAKE_TIMESTAMP - 604)) | (1L << (MAKE_TIMESTAMPTZ - 604)) | (1L << (NOW - 604)) | (1L << (STATEMENT_TIMESTAMP - 604)) | (1L << (TIMEOFDAY - 604)) | (1L << (TRANSACTION_TIMESTAMP - 604)) | (1L << (TO_TIMESTAMP - 604)) | (1L << (TO_CHAR - 604)) | (1L << (TO_DATE - 604)) | (1L << (TO_NUMBER - 604)) | (1L << (Identifier - 604)) | (1L << (QuotedIdentifier - 604)) | (1L << (UnicodeQuotedIdentifier - 604)) | (1L << (PLSQLVARIABLENAME - 604)) | (1L << (PLSQLIDENTIFIER - 604)))) != 0)) {
						{
						setState(8386);
						colid();
						}
					}

					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(8389);
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8392);
				match(OPEN_PAREN);
				setState(8393);
				tablefuncelementlist();
				setState(8394);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8399);
			_la = _input.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (FULL - 113)) | (1L << (INNER_P - 113)) | (1L << (LEFT - 113)) | (1L << (RIGHT - 113)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_P) {
				{
				setState(8400);
				match(OUTER_P);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_qualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_qualContext join_qual() throws RecognitionException {
		Join_qualContext _localctx = new Join_qualContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_join_qual);
		try {
			setState(8410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8403);
				match(USING);
				setState(8404);
				match(OPEN_PAREN);
				setState(8405);
				name_list();
				setState(8406);
				match(CLOSE_PAREN);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8408);
				match(ON);
				setState(8409);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_exprContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_exprContext relation_expr() throws RecognitionException {
		Relation_exprContext _localctx = new Relation_exprContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_relation_expr);
		int _la;
		try {
			setState(8424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8412);
				qualified_name();
				setState(8414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(8413);
					match(STAR);
					}
				}

				}
				break;
			case ONLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(8416);
				match(ONLY);
				setState(8422);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(8417);
					qualified_name();
					}
					break;
				case OPEN_PAREN:
					{
					setState(8418);
					match(OPEN_PAREN);
					setState(8419);
					qualified_name();
					setState(8420);
					match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_listContext extends ParserRuleContext {
		public List<Relation_exprContext> relation_expr() {
			return getRuleContexts(Relation_exprContext.class);
		}
		public Relation_exprContext relation_expr(int i) {
			return getRuleContext(Relation_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_listContext relation_expr_list() throws RecognitionException {
		Relation_expr_listContext _localctx = new Relation_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_relation_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8426);
			relation_expr();
			setState(8431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8427);
				match(COMMA);
				setState(8428);
				relation_expr();
				}
				}
				setState(8433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_expr_opt_aliasContext extends ParserRuleContext {
		public Relation_exprContext relation_expr() {
			return getRuleContext(Relation_exprContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_expr_opt_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelation_expr_opt_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelation_expr_opt_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelation_expr_opt_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relation_expr_opt_aliasContext relation_expr_opt_alias() throws RecognitionException {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_relation_expr_opt_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8434);
			relation_expr();
			setState(8439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(8436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8435);
					match(AS);
					}
				}

				setState(8438);
				colid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablesample_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext opt_repeatable_clause() {
			return getRuleContext(Opt_repeatable_clauseContext.class,0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablesample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablesample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablesample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tablesample_clauseContext tablesample_clause() throws RecognitionException {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_tablesample_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8441);
			match(TABLESAMPLE);
			setState(8442);
			func_name();
			setState(8443);
			match(OPEN_PAREN);
			setState(8444);
			expr_list();
			setState(8445);
			match(CLOSE_PAREN);
			setState(8446);
			opt_repeatable_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_repeatable_clauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_repeatable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_repeatable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_repeatable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_repeatable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_repeatable_clauseContext opt_repeatable_clause() throws RecognitionException {
		Opt_repeatable_clauseContext _localctx = new Opt_repeatable_clauseContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_opt_repeatable_clause);
		try {
			setState(8454);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8448);
				match(REPEATABLE);
				setState(8449);
				match(OPEN_PAREN);
				setState(8450);
				a_expr();
				setState(8451);
				match(CLOSE_PAREN);
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case CROSS:
			case FULL:
			case INNER_P:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_tableContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_ordinalityContext opt_ordinality() {
			return getRuleContext(Opt_ordinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Rowsfrom_listContext rowsfrom_list() {
			return getRuleContext(Rowsfrom_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_tableContext func_table() throws RecognitionException {
		Func_tableContext _localctx = new Func_tableContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_func_table);
		try {
			setState(8466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8456);
				func_expr_windowless();
				setState(8457);
				opt_ordinality();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8459);
				match(ROWS);
				setState(8460);
				match(FROM);
				setState(8461);
				match(OPEN_PAREN);
				setState(8462);
				rowsfrom_list();
				setState(8463);
				match(CLOSE_PAREN);
				setState(8464);
				opt_ordinality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowsfrom_itemContext extends ParserRuleContext {
		public Func_expr_windowlessContext func_expr_windowless() {
			return getRuleContext(Func_expr_windowlessContext.class,0);
		}
		public Opt_col_def_listContext opt_col_def_list() {
			return getRuleContext(Opt_col_def_listContext.class,0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_itemContext rowsfrom_item() throws RecognitionException {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_rowsfrom_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8468);
			func_expr_windowless();
			setState(8469);
			opt_col_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowsfrom_listContext extends ParserRuleContext {
		public List<Rowsfrom_itemContext> rowsfrom_item() {
			return getRuleContexts(Rowsfrom_itemContext.class);
		}
		public Rowsfrom_itemContext rowsfrom_item(int i) {
			return getRuleContext(Rowsfrom_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsfrom_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRowsfrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRowsfrom_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRowsfrom_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowsfrom_listContext rowsfrom_list() throws RecognitionException {
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_rowsfrom_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8471);
			rowsfrom_item();
			setState(8476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8472);
				match(COMMA);
				setState(8473);
				rowsfrom_item();
				}
				}
				setState(8478);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_col_def_listContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_col_def_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_col_def_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_col_def_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_col_def_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_col_def_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_col_def_listContext opt_col_def_list() throws RecognitionException {
		Opt_col_def_listContext _localctx = new Opt_col_def_listContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_opt_col_def_list);
		try {
			setState(8485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8479);
				match(AS);
				setState(8480);
				match(OPEN_PAREN);
				setState(8481);
				tablefuncelementlist();
				setState(8482);
				match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ordinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Opt_ordinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_ordinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_ordinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_ordinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_ordinalityContext opt_ordinality() throws RecognitionException {
		Opt_ordinalityContext _localctx = new Opt_ordinalityContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_opt_ordinality);
		try {
			setState(8490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8487);
				match(WITH);
				setState(8488);
				match(ORDINALITY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_where_clause);
		try {
			setState(8495);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8492);
				match(WHERE);
				setState(8493);
				a_expr();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_or_current_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_or_current_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_or_current_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_or_current_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_or_current_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_or_current_clauseContext where_or_current_clause() throws RecognitionException {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_where_or_current_clause);
		try {
			setState(8505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8497);
				match(WHERE);
				setState(8502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					setState(8498);
					match(CURRENT_P);
					setState(8499);
					match(OF);
					setState(8500);
					cursor_name();
					}
					break;
				case 2:
					{
					setState(8501);
					a_expr();
					}
					break;
				}
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpttablefuncelementlistContext extends ParserRuleContext {
		public TablefuncelementlistContext tablefuncelementlist() {
			return getRuleContext(TablefuncelementlistContext.class,0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opttablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpttablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpttablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpttablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpttablefuncelementlistContext opttablefuncelementlist() throws RecognitionException {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_opttablefuncelementlist);
		try {
			setState(8509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8507);
				tablefuncelementlist();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablefuncelementlistContext extends ParserRuleContext {
		public List<TablefuncelementContext> tablefuncelement() {
			return getRuleContexts(TablefuncelementContext.class);
		}
		public TablefuncelementContext tablefuncelement(int i) {
			return getRuleContext(TablefuncelementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelementlist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelementlist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelementlist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelementlist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementlistContext tablefuncelementlist() throws RecognitionException {
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_tablefuncelementlist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8511);
			tablefuncelement();
			setState(8516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8512);
				match(COMMA);
				setState(8513);
				tablefuncelement();
				}
				}
				setState(8518);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablefuncelementContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Opt_collate_clauseContext opt_collate_clause() {
			return getRuleContext(Opt_collate_clauseContext.class,0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablefuncelement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTablefuncelement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTablefuncelement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTablefuncelement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablefuncelementContext tablefuncelement() throws RecognitionException {
		TablefuncelementContext _localctx = new TablefuncelementContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_tablefuncelement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8519);
			colid();
			setState(8520);
			typename();
			setState(8521);
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmltableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public Xmltable_column_listContext xmltable_column_list() {
			return getRuleContext(Xmltable_column_listContext.class,0);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public Xml_namespace_listContext xml_namespace_list() {
			return getRuleContext(Xml_namespace_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmltableContext xmltable() throws RecognitionException {
		XmltableContext _localctx = new XmltableContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_xmltable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8523);
			match(XMLTABLE);
			setState(8524);
			match(OPEN_PAREN);
			setState(8540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(8525);
				c_expr();
				setState(8526);
				xmlexists_argument();
				setState(8527);
				match(COLUMNS);
				setState(8528);
				xmltable_column_list();
				}
				break;
			case 2:
				{
				setState(8530);
				match(XMLNAMESPACES);
				setState(8531);
				match(OPEN_PAREN);
				setState(8532);
				xml_namespace_list();
				setState(8533);
				match(CLOSE_PAREN);
				setState(8534);
				match(COMMA);
				setState(8535);
				c_expr();
				setState(8536);
				xmlexists_argument();
				setState(8537);
				match(COLUMNS);
				setState(8538);
				xmltable_column_list();
				}
				break;
			}
			setState(8542);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_listContext extends ParserRuleContext {
		public List<Xmltable_column_elContext> xmltable_column_el() {
			return getRuleContexts(Xmltable_column_elContext.class);
		}
		public Xmltable_column_elContext xmltable_column_el(int i) {
			return getRuleContext(Xmltable_column_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_listContext xmltable_column_list() throws RecognitionException {
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_xmltable_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8544);
			xmltable_column_el();
			setState(8549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8545);
				match(COMMA);
				setState(8546);
				xmltable_column_el();
				}
				}
				setState(8551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_elContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public Xmltable_column_option_listContext xmltable_column_option_list() {
			return getRuleContext(Xmltable_column_option_listContext.class,0);
		}
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_elContext xmltable_column_el() throws RecognitionException {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_xmltable_column_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8552);
			colid();
			setState(8559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(8553);
				typename();
				setState(8555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (AND - 33)) | (1L << (ARRAY - 33)) | (1L << (COLLATE - 33)) | (1L << (COLUMN - 33)) | (1L << (CONSTRAINT - 33)) | (1L << (DEFAULT - 33)) | (1L << (DO - 33)) | (1L << (FETCH - 33)) | (1L << (NOT - 33)) | (1L << (NULL_P - 33)) | (1L << (TABLE - 33)))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (IS - 116)) | (1L << (OUTER_P - 116)) | (1L << (ABSOLUTE_P - 116)) | (1L << (BACKWARD - 116)) | (1L << (CHAIN - 116)) | (1L << (CLOSE - 116)) | (1L << (COMMIT - 116)) | (1L << (CONTINUE_P - 116)) | (1L << (CURSOR - 116)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (FIRST_P - 207)) | (1L << (FORWARD - 207)) | (1L << (INSERT - 207)) | (1L << (LAST_P - 207)) | (1L << (MOVE - 207)) | (1L << (NEXT - 207)) | (1L << (NO - 207)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (OPTION - 272)) | (1L << (PRIOR - 272)) | (1L << (RELATIVE_P - 272)) | (1L << (RESET - 272)) | (1L << (ROLLBACK - 272)) | (1L << (SCHEMA - 272)) | (1L << (SCROLL - 272)) | (1L << (SET - 272)))) != 0) || _la==TYPE_P || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALL - 433)) | (1L << (CURRENT_P - 433)) | (1L << (ROWTYPE - 433)) | (1L << (DUMP - 433)) | (1L << (PRINT_STRICT_PARAMS - 433)) | (1L << (VARIABLE_CONFLICT - 433)) | (1L << (ERROR - 433)) | (1L << (USE_VARIABLE - 433)) | (1L << (USE_COLUMN - 433)) | (1L << (ALIAS - 433)))) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & ((1L << (CONSTANT - 497)) | (1L << (PERFORM - 497)) | (1L << (GET - 497)) | (1L << (DIAGNOSTICS - 497)) | (1L << (STACKED - 497)) | (1L << (ELSIF - 497)) | (1L << (SLICE - 497)) | (1L << (EXIT - 497)) | (1L << (RETURN - 497)) | (1L << (QUERY - 497)) | (1L << (RAISE - 497)) | (1L << (SQLSTATE - 497)) | (1L << (DEBUG - 497)) | (1L << (INFO - 497)) | (1L << (NOTICE - 497)) | (1L << (WARNING - 497)) | (1L << (EXCEPTION - 497)) | (1L << (ASSERT - 497)) | (1L << (OPEN - 497)))) != 0) || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & ((1L << (Identifier - 636)) | (1L << (QuotedIdentifier - 636)) | (1L << (UnicodeQuotedIdentifier - 636)) | (1L << (PLSQLVARIABLENAME - 636)) | (1L << (PLSQLIDENTIFIER - 636)))) != 0)) {
					{
					setState(8554);
					xmltable_column_option_list();
					}
				}

				}
				break;
			case FOR:
				{
				setState(8557);
				match(FOR);
				setState(8558);
				match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_option_listContext extends ParserRuleContext {
		public List<Xmltable_column_option_elContext> xmltable_column_option_el() {
			return getRuleContexts(Xmltable_column_option_elContext.class);
		}
		public Xmltable_column_option_elContext xmltable_column_option_el(int i) {
			return getRuleContext(Xmltable_column_option_elContext.class,i);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_listContext xmltable_column_option_list() throws RecognitionException {
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_xmltable_column_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8562); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8561);
				xmltable_column_option_el();
				}
				}
				setState(8564); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (AND - 33)) | (1L << (ARRAY - 33)) | (1L << (COLLATE - 33)) | (1L << (COLUMN - 33)) | (1L << (CONSTRAINT - 33)) | (1L << (DEFAULT - 33)) | (1L << (DO - 33)) | (1L << (FETCH - 33)) | (1L << (NOT - 33)) | (1L << (NULL_P - 33)) | (1L << (TABLE - 33)))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (IS - 116)) | (1L << (OUTER_P - 116)) | (1L << (ABSOLUTE_P - 116)) | (1L << (BACKWARD - 116)) | (1L << (CHAIN - 116)) | (1L << (CLOSE - 116)) | (1L << (COMMIT - 116)) | (1L << (CONTINUE_P - 116)) | (1L << (CURSOR - 116)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (FIRST_P - 207)) | (1L << (FORWARD - 207)) | (1L << (INSERT - 207)) | (1L << (LAST_P - 207)) | (1L << (MOVE - 207)) | (1L << (NEXT - 207)) | (1L << (NO - 207)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (OPTION - 272)) | (1L << (PRIOR - 272)) | (1L << (RELATIVE_P - 272)) | (1L << (RESET - 272)) | (1L << (ROLLBACK - 272)) | (1L << (SCHEMA - 272)) | (1L << (SCROLL - 272)) | (1L << (SET - 272)))) != 0) || _la==TYPE_P || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALL - 433)) | (1L << (CURRENT_P - 433)) | (1L << (ROWTYPE - 433)) | (1L << (DUMP - 433)) | (1L << (PRINT_STRICT_PARAMS - 433)) | (1L << (VARIABLE_CONFLICT - 433)) | (1L << (ERROR - 433)) | (1L << (USE_VARIABLE - 433)) | (1L << (USE_COLUMN - 433)) | (1L << (ALIAS - 433)))) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & ((1L << (CONSTANT - 497)) | (1L << (PERFORM - 497)) | (1L << (GET - 497)) | (1L << (DIAGNOSTICS - 497)) | (1L << (STACKED - 497)) | (1L << (ELSIF - 497)) | (1L << (SLICE - 497)) | (1L << (EXIT - 497)) | (1L << (RETURN - 497)) | (1L << (QUERY - 497)) | (1L << (RAISE - 497)) | (1L << (SQLSTATE - 497)) | (1L << (DEBUG - 497)) | (1L << (INFO - 497)) | (1L << (NOTICE - 497)) | (1L << (WARNING - 497)) | (1L << (EXCEPTION - 497)) | (1L << (ASSERT - 497)) | (1L << (OPEN - 497)))) != 0) || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & ((1L << (Identifier - 636)) | (1L << (QuotedIdentifier - 636)) | (1L << (UnicodeQuotedIdentifier - 636)) | (1L << (PLSQLVARIABLENAME - 636)) | (1L << (PLSQLIDENTIFIER - 636)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_column_option_elContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_column_option_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmltable_column_option_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmltable_column_option_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmltable_column_option_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltable_column_option_elContext xmltable_column_option_el() throws RecognitionException {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_xmltable_column_option_el);
		try {
			setState(8574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8566);
				match(DEFAULT);
				setState(8567);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8568);
				identifier();
				setState(8569);
				a_expr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8571);
				match(NOT);
				setState(8572);
				match(NULL_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8573);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespace_listContext extends ParserRuleContext {
		public List<Xml_namespace_elContext> xml_namespace_el() {
			return getRuleContexts(Xml_namespace_elContext.class);
		}
		public Xml_namespace_elContext xml_namespace_el(int i) {
			return getRuleContext(Xml_namespace_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_listContext xml_namespace_list() throws RecognitionException {
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_xml_namespace_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8576);
			xml_namespace_el();
			setState(8581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8577);
				match(COMMA);
				setState(8578);
				xml_namespace_el();
				}
				}
				setState(8583);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespace_elContext extends ParserRuleContext {
		public B_exprContext b_expr() {
			return getRuleContext(B_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespace_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_namespace_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_namespace_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_namespace_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespace_elContext xml_namespace_el() throws RecognitionException {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_xml_namespace_el);
		try {
			setState(8590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8584);
				b_expr(0);
				setState(8585);
				match(AS);
				setState(8586);
				collabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8588);
				match(DEFAULT);
				setState(8589);
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypenameContext extends ParserRuleContext {
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Opt_array_boundsContext opt_array_bounds() {
			return getRuleContext(Opt_array_boundsContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypenameContext typename() throws RecognitionException {
		TypenameContext _localctx = new TypenameContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_typename);
		int _la;
		try {
			setState(8610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SETOF) {
					{
					setState(8592);
					match(SETOF);
					}
				}

				setState(8595);
				simpletypename();
				setState(8604);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(8596);
					opt_array_bounds();
					}
					break;
				case 2:
					{
					setState(8597);
					match(ARRAY);
					setState(8602);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
					case 1:
						{
						setState(8598);
						match(OPEN_BRACKET);
						setState(8599);
						iconst();
						setState(8600);
						match(CLOSE_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8606);
				qualified_name();
				setState(8607);
				match(PERCENT);
				setState(8608);
				_la = _input.LA(1);
				if ( !(_la==TYPE_P || _la==ROWTYPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_array_boundsContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public List<IconstContext> iconst() {
			return getRuleContexts(IconstContext.class);
		}
		public IconstContext iconst(int i) {
			return getRuleContext(IconstContext.class,i);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_array_bounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_array_bounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_array_bounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_array_bounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_array_boundsContext opt_array_bounds() throws RecognitionException {
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_opt_array_bounds);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8619);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,520,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8612);
					match(OPEN_BRACKET);
					setState(8614);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Integral) {
						{
						setState(8613);
						iconst();
						}
					}

					setState(8616);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(8621);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,520,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpletypenameContext extends ParserRuleContext {
		public GenerictypeContext generictype() {
			return getRuleContext(GenerictypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public SimpletypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpletypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSimpletypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSimpletypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSimpletypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpletypenameContext simpletypename() throws RecognitionException {
		SimpletypenameContext _localctx = new SimpletypenameContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_simpletypename);
		try {
			setState(8635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8622);
				generictype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8623);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8624);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8625);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8626);
				constdatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8627);
				constinterval();
				setState(8633);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(8628);
					opt_interval();
					}
					break;
				case 2:
					{
					setState(8629);
					match(OPEN_PAREN);
					setState(8630);
					iconst();
					setState(8631);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsttypenameContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public ConstbitContext constbit() {
			return getRuleContext(ConstbitContext.class,0);
		}
		public ConstcharacterContext constcharacter() {
			return getRuleContext(ConstcharacterContext.class,0);
		}
		public ConstdatetimeContext constdatetime() {
			return getRuleContext(ConstdatetimeContext.class,0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consttypename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConsttypename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConsttypename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConsttypename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsttypenameContext consttypename() throws RecognitionException {
		ConsttypenameContext _localctx = new ConsttypenameContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_consttypename);
		try {
			setState(8641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8637);
				numeric();
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8638);
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(8639);
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(8640);
				constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenerictypeContext extends ParserRuleContext {
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generictype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGenerictype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGenerictype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGenerictype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenerictypeContext generictype() throws RecognitionException {
		GenerictypeContext _localctx = new GenerictypeContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_generictype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				{
				setState(8643);
				builtin_function_name();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(8644);
				type_function_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(8647);
				attrs();
				}
				break;
			}
			setState(8650);
			opt_type_modifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_type_modifiersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_type_modifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_type_modifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_type_modifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_type_modifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_type_modifiersContext opt_type_modifiers() throws RecognitionException {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_opt_type_modifiers);
		try {
			setState(8657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8652);
				match(OPEN_PAREN);
				setState(8653);
				expr_list();
				setState(8654);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public Opt_floatContext opt_float() {
			return getRuleContext(Opt_floatContext.class,0);
		}
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public Opt_type_modifiersContext opt_type_modifiers() {
			return getRuleContext(Opt_type_modifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_numeric);
		try {
			setState(8675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(8659);
				match(INT_P);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8660);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8661);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(8662);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8663);
				match(REAL);
				}
				break;
			case FLOAT_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(8664);
				match(FLOAT_P);
				setState(8665);
				opt_float();
				}
				break;
			case DOUBLE_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(8666);
				match(DOUBLE_P);
				setState(8667);
				match(PRECISION);
				}
				break;
			case DECIMAL_P:
				enterOuterAlt(_localctx, 8);
				{
				setState(8668);
				match(DECIMAL_P);
				setState(8669);
				opt_type_modifiers();
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(8670);
				match(DEC);
				setState(8671);
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(8672);
				match(NUMERIC);
				setState(8673);
				opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				enterOuterAlt(_localctx, 11);
				{
				setState(8674);
				match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_floatContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_floatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_float; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_float(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_float(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_float(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_floatContext opt_float() throws RecognitionException {
		Opt_floatContext _localctx = new Opt_floatContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_opt_float);
		try {
			setState(8682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8677);
				match(OPEN_PAREN);
				setState(8678);
				iconst();
				setState(8679);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_bit);
		try {
			setState(8686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8684);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8685);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstbitContext extends ParserRuleContext {
		public BitwithlengthContext bitwithlength() {
			return getRuleContext(BitwithlengthContext.class,0);
		}
		public BitwithoutlengthContext bitwithoutlength() {
			return getRuleContext(BitwithoutlengthContext.class,0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constbit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstbit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstbit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstbit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstbitContext constbit() throws RecognitionException {
		ConstbitContext _localctx = new ConstbitContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_constbit);
		try {
			setState(8690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8688);
				bitwithlength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8689);
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitwithlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public BitwithlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithlengthContext bitwithlength() throws RecognitionException {
		BitwithlengthContext _localctx = new BitwithlengthContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_bitwithlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8692);
			match(BIT);
			setState(8693);
			opt_varying();
			setState(8694);
			match(OPEN_PAREN);
			setState(8695);
			expr_list();
			setState(8696);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitwithoutlengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwithoutlength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBitwithoutlength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBitwithoutlength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBitwithoutlength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwithoutlengthContext bitwithoutlength() throws RecognitionException {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_bitwithoutlength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8698);
			match(BIT);
			setState(8699);
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_character);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8701);
			character_c();
			setState(8706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(8702);
				match(OPEN_PAREN);
				setState(8703);
				iconst();
				setState(8704);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstcharacterContext extends ParserRuleContext {
		public Character_cContext character_c() {
			return getRuleContext(Character_cContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constcharacter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstcharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstcharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstcharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstcharacterContext constcharacter() throws RecognitionException {
		ConstcharacterContext _localctx = new ConstcharacterContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_constcharacter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8708);
			character_c();
			setState(8713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(8709);
				match(OPEN_PAREN);
				setState(8710);
				iconst();
				setState(8711);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_cContext extends ParserRuleContext {
		public Opt_varyingContext opt_varying() {
			return getRuleContext(Opt_varyingContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_c; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCharacter_c(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCharacter_c(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCharacter_c(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Character_cContext character_c() throws RecognitionException {
		Character_cContext _localctx = new Character_cContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_character_c);
		int _la;
		try {
			setState(8721);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_P:
			case CHARACTER:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8715);
				_la = _input.LA(1);
				if ( !(((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CHAR_P - 384)) | (1L << (CHARACTER - 384)) | (1L << (NCHAR - 384)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8716);
				opt_varying();
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8717);
				match(VARCHAR);
				}
				break;
			case NATIONAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8718);
				match(NATIONAL);
				setState(8719);
				_la = _input.LA(1);
				if ( !(_la==CHAR_P || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8720);
				opt_varying();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_varying; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_varying(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_varying(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_varying(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_varyingContext opt_varying() throws RecognitionException {
		Opt_varyingContext _localctx = new Opt_varyingContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_opt_varying);
		try {
			setState(8725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8723);
				match(VARYING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstdatetimeContext extends ParserRuleContext {
		public Opt_timezoneContext opt_timezone() {
			return getRuleContext(Opt_timezoneContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constdatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstdatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstdatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstdatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstdatetimeContext constdatetime() throws RecognitionException {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_constdatetime);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8727);
			_la = _input.LA(1);
			if ( !(_la==TIME || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(8728);
				match(OPEN_PAREN);
				setState(8729);
				iconst();
				setState(8730);
				match(CLOSE_PAREN);
				}
				break;
			}
			setState(8734);
			opt_timezone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstintervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constinterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterConstinterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitConstinterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitConstinterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstintervalContext constinterval() throws RecognitionException {
		ConstintervalContext _localctx = new ConstintervalContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_constinterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8736);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_timezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_timezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_timezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_timezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_timezoneContext opt_timezone() throws RecognitionException {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_opt_timezone);
		try {
			setState(8745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8738);
				match(WITH);
				setState(8739);
				match(TIME);
				setState(8740);
				match(ZONE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8741);
				match(WITHOUT);
				setState(8742);
				match(TIME);
				setState(8743);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_intervalContext extends ParserRuleContext {
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public Interval_secondContext interval_second() {
			return getRuleContext(Interval_secondContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_interval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_intervalContext opt_interval() throws RecognitionException {
		Opt_intervalContext _localctx = new Opt_intervalContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_opt_interval);
		try {
			setState(8773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8747);
				match(YEAR_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8748);
				match(MONTH_P);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8749);
				match(DAY_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8750);
				match(HOUR_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8751);
				match(MINUTE_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8752);
				interval_second();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8753);
				match(YEAR_P);
				setState(8754);
				match(TO);
				setState(8755);
				match(MONTH_P);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8756);
				match(DAY_P);
				setState(8757);
				match(TO);
				setState(8761);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOUR_P:
					{
					setState(8758);
					match(HOUR_P);
					}
					break;
				case MINUTE_P:
					{
					setState(8759);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8760);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8763);
				match(HOUR_P);
				setState(8764);
				match(TO);
				setState(8767);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINUTE_P:
					{
					setState(8765);
					match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					setState(8766);
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8769);
				match(MINUTE_P);
				setState(8770);
				match(TO);
				setState(8771);
				interval_second();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_secondContext extends ParserRuleContext {
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_second; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInterval_second(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInterval_second(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInterval_second(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_secondContext interval_second() throws RecognitionException {
		Interval_secondContext _localctx = new Interval_secondContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_interval_second);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8775);
			match(SECOND_P);
			setState(8780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(8776);
				match(OPEN_PAREN);
				setState(8777);
				iconst();
				setState(8778);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_escapeContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_escapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_escape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_escape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_escape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_escape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_escapeContext opt_escape() throws RecognitionException {
		Opt_escapeContext _localctx = new Opt_escapeContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_opt_escape);
		try {
			setState(8785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8782);
				match(ESCAPE);
				setState(8783);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_exprContext extends ParserRuleContext {
		public A_expr_qualContext a_expr_qual() {
			return getRuleContext(A_expr_qualContext.class,0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_exprContext a_expr() throws RecognitionException {
		A_exprContext _localctx = new A_exprContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_a_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8787);
			a_expr_qual();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_qualContext extends ParserRuleContext {
		public A_expr_lesslessContext a_expr_lessless() {
			return getRuleContext(A_expr_lesslessContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_qualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_qual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_qual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_qual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_qualContext a_expr_qual() throws RecognitionException {
		A_expr_qualContext _localctx = new A_expr_qualContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_a_expr_qual);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8789);
			a_expr_lessless();
			setState(8791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(8790);
				qual_op();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_lesslessContext extends ParserRuleContext {
		public List<A_expr_orContext> a_expr_or() {
			return getRuleContexts(A_expr_orContext.class);
		}
		public A_expr_orContext a_expr_or(int i) {
			return getRuleContext(A_expr_orContext.class,i);
		}
		public List<TerminalNode> LESS_LESS() { return getTokens(PostgreSQLParser.LESS_LESS); }
		public TerminalNode LESS_LESS(int i) {
			return getToken(PostgreSQLParser.LESS_LESS, i);
		}
		public List<TerminalNode> GREATER_GREATER() { return getTokens(PostgreSQLParser.GREATER_GREATER); }
		public TerminalNode GREATER_GREATER(int i) {
			return getToken(PostgreSQLParser.GREATER_GREATER, i);
		}
		public A_expr_lesslessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_lessless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_lessless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_lessless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_lessless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_lesslessContext a_expr_lessless() throws RecognitionException {
		A_expr_lesslessContext _localctx = new A_expr_lesslessContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_a_expr_lessless);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8793);
			a_expr_or();
			setState(8798);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,543,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8794);
					_la = _input.LA(1);
					if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8795);
					a_expr_or();
					}
					} 
				}
				setState(8800);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,543,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_orContext extends ParserRuleContext {
		public List<A_expr_andContext> a_expr_and() {
			return getRuleContexts(A_expr_andContext.class);
		}
		public A_expr_andContext a_expr_and(int i) {
			return getRuleContext(A_expr_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public A_expr_orContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_or; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_or(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_or(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_or(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_orContext a_expr_or() throws RecognitionException {
		A_expr_orContext _localctx = new A_expr_orContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_a_expr_or);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8801);
			a_expr_and();
			setState(8806);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8802);
					match(OR);
					setState(8803);
					a_expr_and();
					}
					} 
				}
				setState(8808);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_andContext extends ParserRuleContext {
		public List<A_expr_betweenContext> a_expr_between() {
			return getRuleContexts(A_expr_betweenContext.class);
		}
		public A_expr_betweenContext a_expr_between(int i) {
			return getRuleContext(A_expr_betweenContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public A_expr_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_andContext a_expr_and() throws RecognitionException {
		A_expr_andContext _localctx = new A_expr_andContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_a_expr_and);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8809);
			a_expr_between();
			setState(8814);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8810);
					match(AND);
					setState(8811);
					a_expr_between();
					}
					} 
				}
				setState(8816);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_betweenContext extends ParserRuleContext {
		public List<A_expr_inContext> a_expr_in() {
			return getRuleContexts(A_expr_inContext.class);
		}
		public A_expr_inContext a_expr_in(int i) {
			return getRuleContext(A_expr_inContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public A_expr_betweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_between; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_between(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_between(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_between(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_betweenContext a_expr_between() throws RecognitionException {
		A_expr_betweenContext _localctx = new A_expr_betweenContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_a_expr_between);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8817);
			a_expr_in();
			setState(8829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(8819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8818);
					match(NOT);
					}
				}

				setState(8821);
				match(BETWEEN);
				setState(8823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYMMETRIC) {
					{
					setState(8822);
					match(SYMMETRIC);
					}
				}

				setState(8825);
				a_expr_in();
				setState(8826);
				match(AND);
				setState(8827);
				a_expr_in();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_inContext extends ParserRuleContext {
		public A_expr_unary_notContext a_expr_unary_not() {
			return getRuleContext(A_expr_unary_notContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_inContext a_expr_in() throws RecognitionException {
		A_expr_inContext _localctx = new A_expr_inContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_a_expr_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8831);
			a_expr_unary_not();
			setState(8837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(8833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8832);
					match(NOT);
					}
				}

				setState(8835);
				match(IN_P);
				setState(8836);
				in_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_unary_notContext extends ParserRuleContext {
		public A_expr_isnullContext a_expr_isnull() {
			return getRuleContext(A_expr_isnullContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_unary_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_notContext a_expr_unary_not() throws RecognitionException {
		A_expr_unary_notContext _localctx = new A_expr_unary_notContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_a_expr_unary_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8839);
				match(NOT);
				}
			}

			setState(8842);
			a_expr_isnull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_isnullContext extends ParserRuleContext {
		public A_expr_is_notContext a_expr_is_not() {
			return getRuleContext(A_expr_is_notContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public A_expr_isnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_isnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_isnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_isnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_isnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_isnullContext a_expr_isnull() throws RecognitionException {
		A_expr_isnullContext _localctx = new A_expr_isnullContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_a_expr_isnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8844);
			a_expr_is_not();
			setState(8846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(8845);
				_la = _input.LA(1);
				if ( !(_la==ISNULL || _la==NOTNULL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_is_notContext extends ParserRuleContext {
		public A_expr_compareContext a_expr_compare() {
			return getRuleContext(A_expr_compareContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public A_expr_is_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_is_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_is_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_is_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_is_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_is_notContext a_expr_is_not() throws RecognitionException {
		A_expr_is_notContext _localctx = new A_expr_is_notContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_a_expr_is_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8848);
			a_expr_compare();
			setState(8872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(8849);
				match(IS);
				setState(8851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8850);
					match(NOT);
					}
				}

				setState(8870);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL_P:
					{
					setState(8853);
					match(NULL_P);
					}
					break;
				case TRUE_P:
					{
					setState(8854);
					match(TRUE_P);
					}
					break;
				case FALSE_P:
					{
					setState(8855);
					match(FALSE_P);
					}
					break;
				case UNKNOWN:
					{
					setState(8856);
					match(UNKNOWN);
					}
					break;
				case DISTINCT:
					{
					setState(8857);
					match(DISTINCT);
					setState(8858);
					match(FROM);
					setState(8859);
					a_expr();
					}
					break;
				case OF:
					{
					setState(8860);
					match(OF);
					setState(8861);
					match(OPEN_PAREN);
					setState(8862);
					type_list();
					setState(8863);
					match(CLOSE_PAREN);
					}
					break;
				case DOCUMENT_P:
					{
					setState(8865);
					match(DOCUMENT_P);
					}
					break;
				case NORMALIZED:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
					{
					setState(8867);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (NFC - 483)) | (1L << (NFD - 483)) | (1L << (NFKC - 483)) | (1L << (NFKD - 483)))) != 0)) {
						{
						setState(8866);
						unicode_normal_form();
						}
					}

					setState(8869);
					match(NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_compareContext extends ParserRuleContext {
		public List<A_expr_likeContext> a_expr_like() {
			return getRuleContexts(A_expr_likeContext.class);
		}
		public A_expr_likeContext a_expr_like(int i) {
			return getRuleContext(A_expr_likeContext.class,i);
		}
		public Subquery_OpContext subquery_Op() {
			return getRuleContext(Subquery_OpContext.class,0);
		}
		public Sub_typeContext sub_type() {
			return getRuleContext(Sub_typeContext.class,0);
		}
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public A_expr_compareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_compare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_compare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_compare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_compare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_compareContext a_expr_compare() throws RecognitionException {
		A_expr_compareContext _localctx = new A_expr_compareContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_a_expr_compare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8874);
			a_expr_like();
			setState(8886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(8875);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8876);
				a_expr_like();
				}
				break;
			case 2:
				{
				setState(8877);
				subquery_Op();
				setState(8878);
				sub_type();
				setState(8884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(8879);
					select_with_parens();
					}
					break;
				case 2:
					{
					setState(8880);
					match(OPEN_PAREN);
					setState(8881);
					a_expr();
					setState(8882);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_likeContext extends ParserRuleContext {
		public List<A_expr_qual_opContext> a_expr_qual_op() {
			return getRuleContexts(A_expr_qual_opContext.class);
		}
		public A_expr_qual_opContext a_expr_qual_op(int i) {
			return getRuleContext(A_expr_qual_opContext.class,i);
		}
		public Opt_escapeContext opt_escape() {
			return getRuleContext(Opt_escapeContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public A_expr_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_like(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_like(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_likeContext a_expr_like() throws RecognitionException {
		A_expr_likeContext _localctx = new A_expr_likeContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_a_expr_like);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8888);
			a_expr_qual_op();
			setState(8901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(8890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8889);
					match(NOT);
					}
				}

				setState(8896);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(8892);
					match(LIKE);
					}
					break;
				case ILIKE:
					{
					setState(8893);
					match(ILIKE);
					}
					break;
				case SIMILAR:
					{
					setState(8894);
					match(SIMILAR);
					setState(8895);
					match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8898);
				a_expr_qual_op();
				setState(8899);
				opt_escape();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_qual_opContext extends ParserRuleContext {
		public List<A_expr_unary_qualopContext> a_expr_unary_qualop() {
			return getRuleContexts(A_expr_unary_qualopContext.class);
		}
		public A_expr_unary_qualopContext a_expr_unary_qualop(int i) {
			return getRuleContext(A_expr_unary_qualopContext.class,i);
		}
		public List<Qual_opContext> qual_op() {
			return getRuleContexts(Qual_opContext.class);
		}
		public Qual_opContext qual_op(int i) {
			return getRuleContext(Qual_opContext.class,i);
		}
		public A_expr_qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_qual_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_qual_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_qual_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_qual_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_qual_opContext a_expr_qual_op() throws RecognitionException {
		A_expr_qual_opContext _localctx = new A_expr_qual_opContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_a_expr_qual_op);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8903);
			a_expr_unary_qualop();
			setState(8909);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8904);
					qual_op();
					setState(8905);
					a_expr_unary_qualop();
					}
					} 
				}
				setState(8911);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_unary_qualopContext extends ParserRuleContext {
		public A_expr_addContext a_expr_add() {
			return getRuleContext(A_expr_addContext.class,0);
		}
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public A_expr_unary_qualopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_qualop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_qualop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_qualop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_qualop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_qualopContext a_expr_unary_qualop() throws RecognitionException {
		A_expr_unary_qualopContext _localctx = new A_expr_unary_qualopContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_a_expr_unary_qualop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				{
				setState(8912);
				qual_op();
				}
				break;
			}
			setState(8915);
			a_expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_addContext extends ParserRuleContext {
		public List<A_expr_mulContext> a_expr_mul() {
			return getRuleContexts(A_expr_mulContext.class);
		}
		public A_expr_mulContext a_expr_mul(int i) {
			return getRuleContext(A_expr_mulContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(PostgreSQLParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(PostgreSQLParser.MINUS, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(PostgreSQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(PostgreSQLParser.PLUS, i);
		}
		public A_expr_addContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_add; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_add(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_add(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_add(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_addContext a_expr_add() throws RecognitionException {
		A_expr_addContext _localctx = new A_expr_addContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_a_expr_add);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8917);
			a_expr_mul();
			setState(8922);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8918);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8919);
					a_expr_mul();
					}
					} 
				}
				setState(8924);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_mulContext extends ParserRuleContext {
		public List<A_expr_caretContext> a_expr_caret() {
			return getRuleContexts(A_expr_caretContext.class);
		}
		public A_expr_caretContext a_expr_caret(int i) {
			return getRuleContext(A_expr_caretContext.class,i);
		}
		public List<TerminalNode> STAR() { return getTokens(PostgreSQLParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(PostgreSQLParser.STAR, i);
		}
		public List<TerminalNode> SLASH() { return getTokens(PostgreSQLParser.SLASH); }
		public TerminalNode SLASH(int i) {
			return getToken(PostgreSQLParser.SLASH, i);
		}
		public List<TerminalNode> PERCENT() { return getTokens(PostgreSQLParser.PERCENT); }
		public TerminalNode PERCENT(int i) {
			return getToken(PostgreSQLParser.PERCENT, i);
		}
		public A_expr_mulContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_mul; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_mul(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_mul(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_mul(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_mulContext a_expr_mul() throws RecognitionException {
		A_expr_mulContext _localctx = new A_expr_mulContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_a_expr_mul);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8925);
			a_expr_caret();
			setState(8930);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8926);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8927);
					a_expr_caret();
					}
					} 
				}
				setState(8932);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_caretContext extends ParserRuleContext {
		public A_expr_unary_signContext a_expr_unary_sign() {
			return getRuleContext(A_expr_unary_signContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public A_expr_caretContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_caret; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_caret(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_caret(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_caret(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_caretContext a_expr_caret() throws RecognitionException {
		A_expr_caretContext _localctx = new A_expr_caretContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_a_expr_caret);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8933);
			a_expr_unary_sign();
			setState(8936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				setState(8934);
				match(CARET);
				setState(8935);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_unary_signContext extends ParserRuleContext {
		public A_expr_at_time_zoneContext a_expr_at_time_zone() {
			return getRuleContext(A_expr_at_time_zoneContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public A_expr_unary_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_unary_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_unary_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_unary_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_unary_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_unary_signContext a_expr_unary_sign() throws RecognitionException {
		A_expr_unary_signContext _localctx = new A_expr_unary_signContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_a_expr_unary_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(8938);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8941);
			a_expr_at_time_zone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_at_time_zoneContext extends ParserRuleContext {
		public A_expr_collateContext a_expr_collate() {
			return getRuleContext(A_expr_collateContext.class,0);
		}
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public A_expr_at_time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_at_time_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_at_time_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_at_time_zone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_at_time_zone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_at_time_zoneContext a_expr_at_time_zone() throws RecognitionException {
		A_expr_at_time_zoneContext _localctx = new A_expr_at_time_zoneContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_a_expr_at_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8943);
			a_expr_collate();
			setState(8948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				{
				setState(8944);
				match(AT);
				setState(8945);
				match(TIME);
				setState(8946);
				match(ZONE);
				setState(8947);
				a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_collateContext extends ParserRuleContext {
		public A_expr_typecastContext a_expr_typecast() {
			return getRuleContext(A_expr_typecastContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public A_expr_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_collateContext a_expr_collate() throws RecognitionException {
		A_expr_collateContext _localctx = new A_expr_collateContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_a_expr_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8950);
			a_expr_typecast();
			setState(8953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				setState(8951);
				match(COLLATE);
				setState(8952);
				any_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class A_expr_typecastContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<TerminalNode> TYPECAST() { return getTokens(PostgreSQLParser.TYPECAST); }
		public TerminalNode TYPECAST(int i) {
			return getToken(PostgreSQLParser.TYPECAST, i);
		}
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public A_expr_typecastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_a_expr_typecast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterA_expr_typecast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitA_expr_typecast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitA_expr_typecast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final A_expr_typecastContext a_expr_typecast() throws RecognitionException {
		A_expr_typecastContext _localctx = new A_expr_typecastContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_a_expr_typecast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8955);
			c_expr();
			setState(8960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TYPECAST) {
				{
				{
				setState(8956);
				match(TYPECAST);
				setState(8957);
				typename();
				}
				}
				setState(8962);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class B_exprContext extends ParserRuleContext {
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public Qual_opContext qual_op() {
			return getRuleContext(Qual_opContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public TerminalNode TYPECAST() { return getToken(PostgreSQLParser.TYPECAST, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_b_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterB_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitB_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitB_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final B_exprContext b_expr() throws RecognitionException {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		B_exprContext _localctx = new B_exprContext(_ctx, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1204;
		enterRecursionRule(_localctx, 1204, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				setState(8964);
				c_expr();
				}
				break;
			case 2:
				{
				setState(8965);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8966);
				b_expr(9);
				}
				break;
			case 3:
				{
				setState(8967);
				qual_op();
				setState(8968);
				b_expr(3);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9011);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9009);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8972);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(8973);
						match(CARET);
						setState(8974);
						b_expr(9);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8975);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(8976);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8977);
						b_expr(8);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8978);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(8979);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8980);
						b_expr(7);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8981);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8982);
						qual_op();
						setState(8983);
						b_expr(6);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8985);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8986);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8987);
						b_expr(5);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8988);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(8989);
						match(TYPECAST);
						setState(8990);
						typename();
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8991);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8992);
						qual_op();
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						setState(8993);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8994);
						match(IS);
						setState(8996);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(8995);
							match(NOT);
							}
						}

						setState(9007);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DISTINCT:
							{
							setState(8998);
							match(DISTINCT);
							setState(8999);
							match(FROM);
							setState(9000);
							b_expr(0);
							}
							break;
						case OF:
							{
							setState(9001);
							match(OF);
							setState(9002);
							match(OPEN_PAREN);
							setState(9003);
							type_list();
							setState(9004);
							match(CLOSE_PAREN);
							}
							break;
						case DOCUMENT_P:
							{
							setState(9006);
							match(DOCUMENT_P);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(9013);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class C_exprContext extends ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_expr; }
	 
		public C_exprContext() { }
		public void copyFrom(C_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class C_expr_existsContext extends C_exprContext {
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public C_expr_existsContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_exists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_expr_caseContext extends C_exprContext {
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public C_expr_caseContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_case(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class C_expr_exprContext extends C_exprContext {
		public A_exprContext a_expr_in_parens;
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Array_exprContext array_expr() {
			return getRuleContext(Array_exprContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Opt_indirectionContext opt_indirection() {
			return getRuleContext(Opt_indirectionContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprconstContext aexprconst() {
			return getRuleContext(AexprconstContext.class,0);
		}
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Explicit_rowContext explicit_row() {
			return getRuleContext(Explicit_rowContext.class,0);
		}
		public Implicit_rowContext implicit_row() {
			return getRuleContext(Implicit_rowContext.class,0);
		}
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public C_expr_exprContext(C_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterC_expr_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitC_expr_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitC_expr_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_exprContext c_expr() throws RecognitionException {
		C_exprContext _localctx = new C_exprContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_c_expr);
		try {
			setState(9050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9014);
				match(EXISTS);
				setState(9015);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9016);
				match(ARRAY);
				setState(9019);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(9017);
					select_with_parens();
					}
					break;
				case OPEN_BRACKET:
					{
					setState(9018);
					array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9021);
				match(PARAM);
				setState(9022);
				opt_indirection();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9023);
				match(GROUPING);
				setState(9024);
				match(OPEN_PAREN);
				setState(9025);
				expr_list();
				setState(9026);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9028);
				match(UNIQUE);
				setState(9029);
				select_with_parens();
				}
				break;
			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9030);
				columnref();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9031);
				aexprconst();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9032);
				plsqlvariablename();
				}
				break;
			case 9:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9033);
				match(OPEN_PAREN);
				setState(9034);
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr();
				setState(9035);
				match(CLOSE_PAREN);
				setState(9036);
				opt_indirection();
				}
				break;
			case 10:
				_localctx = new C_expr_caseContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9038);
				case_expr();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9039);
				func_expr();
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9040);
				select_with_parens();
				setState(9042);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(9041);
					indirection();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9044);
				explicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9045);
				implicit_row();
				}
				break;
			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(9046);
				row();
				setState(9047);
				match(OVERLAPS);
				setState(9048);
				row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlvariablenameContext extends ParserRuleContext {
		public TerminalNode PLSQLVARIABLENAME() { return getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlvariablename; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlvariablename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlvariablename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlvariablename(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlvariablenameContext plsqlvariablename() throws RecognitionException {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_plsqlvariablename);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9052);
			match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_applicationContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_arg_exprContext func_arg_expr() {
			return getRuleContext(Func_arg_exprContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Func_applicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_application; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_application(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_application(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_application(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_applicationContext func_application() throws RecognitionException {
		Func_applicationContext _localctx = new Func_applicationContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_func_application);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9054);
			func_name();
			setState(9055);
			match(OPEN_PAREN);
			setState(9074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(9056);
				func_arg_list();
				setState(9060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9057);
					match(COMMA);
					setState(9058);
					match(VARIADIC);
					setState(9059);
					func_arg_expr();
					}
				}

				setState(9062);
				opt_sort_clause();
				}
				break;
			case VARIADIC:
				{
				setState(9064);
				match(VARIADIC);
				setState(9065);
				func_arg_expr();
				setState(9066);
				opt_sort_clause();
				}
				break;
			case ALL:
			case DISTINCT:
				{
				setState(9068);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9069);
				func_arg_list();
				setState(9070);
				opt_sort_clause();
				}
				break;
			case STAR:
				{
				setState(9072);
				match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9076);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Within_group_clauseContext within_group_clause() {
			return getRuleContext(Within_group_clauseContext.class,0);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_func_expr);
		try {
			setState(9084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9078);
				func_application();
				setState(9079);
				within_group_clause();
				setState(9080);
				filter_clause();
				setState(9081);
				over_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9083);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_expr_windowlessContext extends ParserRuleContext {
		public Func_applicationContext func_application() {
			return getRuleContext(Func_applicationContext.class,0);
		}
		public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return getRuleContext(Func_expr_common_subexprContext.class,0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_windowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_windowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_windowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_windowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_windowlessContext func_expr_windowless() throws RecognitionException {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_func_expr_windowless);
		try {
			setState(9088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9086);
				func_application();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9087);
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_expr_common_subexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public Extract_listContext extract_list() {
			return getRuleContext(Extract_listContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Unicode_normal_formContext unicode_normal_form() {
			return getRuleContext(Unicode_normal_formContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public Overlay_listContext overlay_list() {
			return getRuleContext(Overlay_listContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public Position_listContext position_list() {
			return getRuleContext(Position_listContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public Substr_listContext substr_list() {
			return getRuleContext(Substr_listContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public Trim_listContext trim_list() {
			return getRuleContext(Trim_listContext.class,0);
		}
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attributesContext xml_attributes() {
			return getRuleContext(Xml_attributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public Xmlexists_argumentContext xmlexists_argument() {
			return getRuleContext(Xmlexists_argumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public Document_or_contentContext document_or_content() {
			return getRuleContext(Document_or_contentContext.class,0);
		}
		public Xml_whitespace_optionContext xml_whitespace_option() {
			return getRuleContext(Xml_whitespace_optionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public Xml_root_versionContext xml_root_version() {
			return getRuleContext(Xml_root_versionContext.class,0);
		}
		public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return getRuleContext(Opt_xml_root_standaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public SimpletypenameContext simpletypename() {
			return getRuleContext(SimpletypenameContext.class,0);
		}
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr_common_subexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_expr_common_subexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_expr_common_subexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_expr_common_subexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_expr_common_subexprContext func_expr_common_subexpr() throws RecognitionException {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_func_expr_common_subexpr);
		int _la;
		try {
			setState(9267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9090);
				match(COLLATION);
				setState(9091);
				match(FOR);
				setState(9092);
				match(OPEN_PAREN);
				setState(9093);
				a_expr();
				setState(9094);
				match(CLOSE_PAREN);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9096);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(9097);
				match(CURRENT_TIME);
				setState(9102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(9098);
					match(OPEN_PAREN);
					setState(9099);
					iconst();
					setState(9100);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(9104);
				match(CURRENT_TIMESTAMP);
				setState(9109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(9105);
					match(OPEN_PAREN);
					setState(9106);
					iconst();
					setState(9107);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(9111);
				match(LOCALTIME);
				setState(9116);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
				case 1:
					{
					setState(9112);
					match(OPEN_PAREN);
					setState(9113);
					iconst();
					setState(9114);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(9118);
				match(LOCALTIMESTAMP);
				setState(9123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(9119);
					match(OPEN_PAREN);
					setState(9120);
					iconst();
					setState(9121);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_ROLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(9125);
				match(CURRENT_ROLE);
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 8);
				{
				setState(9126);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 9);
				{
				setState(9127);
				match(SESSION_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 10);
				{
				setState(9128);
				match(USER);
				}
				break;
			case CURRENT_CATALOG:
				enterOuterAlt(_localctx, 11);
				{
				setState(9129);
				match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				enterOuterAlt(_localctx, 12);
				{
				setState(9130);
				match(CURRENT_SCHEMA);
				}
				break;
			case CAST:
				enterOuterAlt(_localctx, 13);
				{
				setState(9131);
				match(CAST);
				setState(9132);
				match(OPEN_PAREN);
				setState(9133);
				a_expr();
				setState(9134);
				match(AS);
				setState(9135);
				typename();
				setState(9136);
				match(CLOSE_PAREN);
				}
				break;
			case EXTRACT:
				enterOuterAlt(_localctx, 14);
				{
				setState(9138);
				match(EXTRACT);
				setState(9139);
				match(OPEN_PAREN);
				setState(9140);
				extract_list();
				setState(9141);
				match(CLOSE_PAREN);
				}
				break;
			case NORMALIZE:
				enterOuterAlt(_localctx, 15);
				{
				setState(9143);
				match(NORMALIZE);
				setState(9144);
				match(OPEN_PAREN);
				setState(9145);
				a_expr();
				setState(9148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9146);
					match(COMMA);
					setState(9147);
					unicode_normal_form();
					}
				}

				setState(9150);
				match(CLOSE_PAREN);
				}
				break;
			case OVERLAY:
				enterOuterAlt(_localctx, 16);
				{
				setState(9152);
				match(OVERLAY);
				setState(9153);
				match(OPEN_PAREN);
				setState(9154);
				overlay_list();
				setState(9155);
				match(CLOSE_PAREN);
				}
				break;
			case POSITION:
				enterOuterAlt(_localctx, 17);
				{
				setState(9157);
				match(POSITION);
				setState(9158);
				match(OPEN_PAREN);
				setState(9159);
				position_list();
				setState(9160);
				match(CLOSE_PAREN);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(9162);
				match(SUBSTRING);
				setState(9163);
				match(OPEN_PAREN);
				setState(9164);
				substr_list();
				setState(9165);
				match(CLOSE_PAREN);
				}
				break;
			case TREAT:
				enterOuterAlt(_localctx, 19);
				{
				setState(9167);
				match(TREAT);
				setState(9168);
				match(OPEN_PAREN);
				setState(9169);
				a_expr();
				setState(9170);
				match(AS);
				setState(9171);
				typename();
				setState(9172);
				match(CLOSE_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(9174);
				match(TRIM);
				setState(9175);
				match(OPEN_PAREN);
				setState(9177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (BOTH - 39)) | (1L << (LEADING - 39)) | (1L << (TRAILING - 39)))) != 0)) {
					{
					setState(9176);
					_la = _input.LA(1);
					if ( !(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (BOTH - 39)) | (1L << (LEADING - 39)) | (1L << (TRAILING - 39)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9179);
				trim_list();
				setState(9180);
				match(CLOSE_PAREN);
				}
				break;
			case NULLIF:
				enterOuterAlt(_localctx, 21);
				{
				setState(9182);
				match(NULLIF);
				setState(9183);
				match(OPEN_PAREN);
				setState(9184);
				a_expr();
				setState(9185);
				match(COMMA);
				setState(9186);
				a_expr();
				setState(9187);
				match(CLOSE_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 22);
				{
				setState(9189);
				match(COALESCE);
				setState(9190);
				match(OPEN_PAREN);
				setState(9191);
				expr_list();
				setState(9192);
				match(CLOSE_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 23);
				{
				setState(9194);
				match(GREATEST);
				setState(9195);
				match(OPEN_PAREN);
				setState(9196);
				expr_list();
				setState(9197);
				match(CLOSE_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 24);
				{
				setState(9199);
				match(LEAST);
				setState(9200);
				match(OPEN_PAREN);
				setState(9201);
				expr_list();
				setState(9202);
				match(CLOSE_PAREN);
				}
				break;
			case XMLCONCAT:
				enterOuterAlt(_localctx, 25);
				{
				setState(9204);
				match(XMLCONCAT);
				setState(9205);
				match(OPEN_PAREN);
				setState(9206);
				expr_list();
				setState(9207);
				match(CLOSE_PAREN);
				}
				break;
			case XMLELEMENT:
				enterOuterAlt(_localctx, 26);
				{
				setState(9209);
				match(XMLELEMENT);
				setState(9210);
				match(OPEN_PAREN);
				setState(9211);
				match(NAME_P);
				setState(9212);
				collabel();
				setState(9218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9213);
					match(COMMA);
					setState(9216);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
					case 1:
						{
						setState(9214);
						xml_attributes();
						}
						break;
					case 2:
						{
						setState(9215);
						expr_list();
						}
						break;
					}
					}
				}

				setState(9220);
				match(CLOSE_PAREN);
				}
				break;
			case XMLEXISTS:
				enterOuterAlt(_localctx, 27);
				{
				setState(9222);
				match(XMLEXISTS);
				setState(9223);
				match(OPEN_PAREN);
				setState(9224);
				c_expr();
				setState(9225);
				xmlexists_argument();
				setState(9226);
				match(CLOSE_PAREN);
				}
				break;
			case XMLFOREST:
				enterOuterAlt(_localctx, 28);
				{
				setState(9228);
				match(XMLFOREST);
				setState(9229);
				match(OPEN_PAREN);
				setState(9230);
				xml_attribute_list();
				setState(9231);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPARSE:
				enterOuterAlt(_localctx, 29);
				{
				setState(9233);
				match(XMLPARSE);
				setState(9234);
				match(OPEN_PAREN);
				setState(9235);
				document_or_content();
				setState(9236);
				a_expr();
				setState(9237);
				xml_whitespace_option();
				setState(9238);
				match(CLOSE_PAREN);
				}
				break;
			case XMLPI:
				enterOuterAlt(_localctx, 30);
				{
				setState(9240);
				match(XMLPI);
				setState(9241);
				match(OPEN_PAREN);
				setState(9242);
				match(NAME_P);
				setState(9243);
				collabel();
				setState(9246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9244);
					match(COMMA);
					setState(9245);
					a_expr();
					}
				}

				setState(9248);
				match(CLOSE_PAREN);
				}
				break;
			case XMLROOT:
				enterOuterAlt(_localctx, 31);
				{
				setState(9250);
				match(XMLROOT);
				setState(9251);
				match(OPEN_PAREN);
				setState(9252);
				match(XML_P);
				setState(9253);
				a_expr();
				setState(9254);
				match(COMMA);
				setState(9255);
				xml_root_version();
				setState(9256);
				opt_xml_root_standalone();
				setState(9257);
				match(CLOSE_PAREN);
				}
				break;
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 32);
				{
				setState(9259);
				match(XMLSERIALIZE);
				setState(9260);
				match(OPEN_PAREN);
				setState(9261);
				document_or_content();
				setState(9262);
				a_expr();
				setState(9263);
				match(AS);
				setState(9264);
				simpletypename();
				setState(9265);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_root_versionContext extends ParserRuleContext {
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_root_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_root_version(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_root_version(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_root_version(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_root_versionContext xml_root_version() throws RecognitionException {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_xml_root_version);
		try {
			setState(9274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9269);
				match(VERSION_P);
				setState(9270);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9271);
				match(VERSION_P);
				setState(9272);
				match(NO);
				setState(9273);
				match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_xml_root_standaloneContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_xml_root_standalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_xml_root_standalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_xml_root_standalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_xml_root_standalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_xml_root_standaloneContext opt_xml_root_standalone() throws RecognitionException {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_opt_xml_root_standalone);
		try {
			setState(9287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9276);
				match(COMMA);
				setState(9277);
				match(STANDALONE_P);
				setState(9278);
				match(YES_P);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9279);
				match(COMMA);
				setState(9280);
				match(STANDALONE_P);
				setState(9281);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9282);
				match(COMMA);
				setState(9283);
				match(STANDALONE_P);
				setState(9284);
				match(NO);
				setState(9285);
				match(VALUE_P);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Xml_attribute_listContext xml_attribute_list() {
			return getRuleContext(Xml_attribute_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributesContext xml_attributes() throws RecognitionException {
		Xml_attributesContext _localctx = new Xml_attributesContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_xml_attributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9289);
			match(XMLATTRIBUTES);
			setState(9290);
			match(OPEN_PAREN);
			setState(9291);
			xml_attribute_list();
			setState(9292);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_listContext extends ParserRuleContext {
		public List<Xml_attribute_elContext> xml_attribute_el() {
			return getRuleContexts(Xml_attribute_elContext.class);
		}
		public Xml_attribute_elContext xml_attribute_el(int i) {
			return getRuleContext(Xml_attribute_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_listContext xml_attribute_list() throws RecognitionException {
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_xml_attribute_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9294);
			xml_attribute_el();
			setState(9299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9295);
				match(COMMA);
				setState(9296);
				xml_attribute_el();
				}
				}
				setState(9301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attribute_elContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attribute_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_attribute_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_attribute_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_attribute_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attribute_elContext xml_attribute_el() throws RecognitionException {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_xml_attribute_el);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9302);
			a_expr();
			setState(9305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9303);
				match(AS);
				setState(9304);
				collabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Document_or_contentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_document_or_content; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDocument_or_content(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDocument_or_content(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDocument_or_content(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Document_or_contentContext document_or_content() throws RecognitionException {
		Document_or_contentContext _localctx = new Document_or_contentContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_document_or_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9307);
			_la = _input.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_whitespace_optionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_whitespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_whitespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_whitespace_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_whitespace_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_whitespace_optionContext xml_whitespace_option() throws RecognitionException {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_xml_whitespace_option);
		try {
			setState(9314);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9309);
				match(PRESERVE);
				setState(9310);
				match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9311);
				match(STRIP_P);
				setState(9312);
				match(WHITESPACE_P);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlexists_argumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public C_exprContext c_expr() {
			return getRuleContext(C_exprContext.class,0);
		}
		public List<Xml_passing_mechContext> xml_passing_mech() {
			return getRuleContexts(Xml_passing_mechContext.class);
		}
		public Xml_passing_mechContext xml_passing_mech(int i) {
			return getRuleContext(Xml_passing_mechContext.class,i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlexists_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXmlexists_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXmlexists_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXmlexists_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlexists_argumentContext xmlexists_argument() throws RecognitionException {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_xmlexists_argument);
		try {
			setState(9331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9316);
				match(PASSING);
				setState(9317);
				c_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9318);
				match(PASSING);
				setState(9319);
				c_expr();
				setState(9320);
				xml_passing_mech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9322);
				match(PASSING);
				setState(9323);
				xml_passing_mech();
				setState(9324);
				c_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9326);
				match(PASSING);
				setState(9327);
				xml_passing_mech();
				setState(9328);
				c_expr();
				setState(9329);
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_mechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_mech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXml_passing_mech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXml_passing_mech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXml_passing_mech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_mechContext xml_passing_mech() throws RecognitionException {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_xml_passing_mech);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9333);
			match(BY);
			setState(9334);
			_la = _input.LA(1);
			if ( !(_la==REF || _la==VALUE_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_group_clauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Sort_clauseContext sort_clause() {
			return getRuleContext(Sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWithin_group_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWithin_group_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWithin_group_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_group_clauseContext within_group_clause() throws RecognitionException {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_within_group_clause);
		try {
			setState(9343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9336);
				match(WITHIN);
				setState(9337);
				match(GROUP_P);
				setState(9338);
				match(OPEN_PAREN);
				setState(9339);
				sort_clause();
				setState(9340);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFilter_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFilter_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFilter_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_filter_clause);
		try {
			setState(9352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9345);
				match(FILTER);
				setState(9346);
				match(OPEN_PAREN);
				setState(9347);
				match(WHERE);
				setState(9348);
				a_expr();
				setState(9349);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Window_definition_listContext window_definition_list() {
			return getRuleContext(Window_definition_listContext.class,0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_window_clause);
		try {
			setState(9357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WINDOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(9354);
				match(WINDOW);
				setState(9355);
				window_definition_list();
				}
				break;
			case EOF:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definition_listContext extends ParserRuleContext {
		public List<Window_definitionContext> window_definition() {
			return getRuleContexts(Window_definitionContext.class);
		}
		public Window_definitionContext window_definition(int i) {
			return getRuleContext(Window_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definition_listContext window_definition_list() throws RecognitionException {
		Window_definition_listContext _localctx = new Window_definition_listContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_window_definition_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9359);
			window_definition();
			setState(9364);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,602,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9360);
					match(COMMA);
					setState(9361);
					window_definition();
					}
					} 
				}
				setState(9366);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,602,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_window_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9367);
			colid();
			setState(9368);
			match(AS);
			setState(9369);
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public Window_specificationContext window_specification() {
			return getRuleContext(Window_specificationContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_over_clause);
		try {
			setState(9377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9371);
				match(OVER);
				setState(9374);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
					{
					setState(9372);
					window_specification();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(9373);
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_specificationContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_existing_window_nameContext opt_existing_window_name() {
			return getRuleContext(Opt_existing_window_nameContext.class,0);
		}
		public Opt_partition_clauseContext opt_partition_clause() {
			return getRuleContext(Opt_partition_clauseContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public Opt_frame_clauseContext opt_frame_clause() {
			return getRuleContext(Opt_frame_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_specificationContext window_specification() throws RecognitionException {
		Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_window_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9379);
			match(OPEN_PAREN);
			setState(9380);
			opt_existing_window_name();
			setState(9381);
			opt_partition_clause();
			setState(9382);
			opt_sort_clause();
			setState(9383);
			opt_frame_clause();
			setState(9384);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_existing_window_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_existing_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_existing_window_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_existing_window_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_existing_window_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_existing_window_nameContext opt_existing_window_name() throws RecognitionException {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_opt_existing_window_name);
		try {
			setState(9388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9386);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_partition_clauseContext opt_partition_clause() throws RecognitionException {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_opt_partition_clause);
		try {
			setState(9394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(9390);
				match(PARTITION);
				setState(9391);
				match(BY);
				setState(9392);
				expr_list();
				}
				break;
			case CLOSE_PAREN:
			case ORDER:
			case RANGE:
			case ROWS:
			case GROUPS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_frame_clauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public Frame_extentContext frame_extent() {
			return getRuleContext(Frame_extentContext.class,0);
		}
		public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
			return getRuleContext(Opt_window_exclusion_clauseContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_frame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_frame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_frame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_frame_clauseContext opt_frame_clause() throws RecognitionException {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_opt_frame_clause);
		try {
			setState(9409);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9396);
				match(RANGE);
				setState(9397);
				frame_extent();
				setState(9398);
				opt_window_exclusion_clause();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9400);
				match(ROWS);
				setState(9401);
				frame_extent();
				setState(9402);
				opt_window_exclusion_clause();
				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9404);
				match(GROUPS);
				setState(9405);
				frame_extent();
				setState(9406);
				opt_window_exclusion_clause();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_extentContext extends ParserRuleContext {
		public List<Frame_boundContext> frame_bound() {
			return getRuleContexts(Frame_boundContext.class);
		}
		public Frame_boundContext frame_bound(int i) {
			return getRuleContext(Frame_boundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_extentContext frame_extent() throws RecognitionException {
		Frame_extentContext _localctx = new Frame_extentContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_frame_extent);
		try {
			setState(9417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9411);
				frame_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9412);
				match(BETWEEN);
				setState(9413);
				frame_bound();
				setState(9414);
				match(AND);
				setState(9415);
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_boundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_boundContext frame_bound() throws RecognitionException {
		Frame_boundContext _localctx = new Frame_boundContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_frame_bound);
		int _la;
		try {
			setState(9426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9419);
				match(UNBOUNDED);
				setState(9420);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9421);
				match(CURRENT_P);
				setState(9422);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9423);
				a_expr();
				setState(9424);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_window_exclusion_clauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public Opt_window_exclusion_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_window_exclusion_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_window_exclusion_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_window_exclusion_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_window_exclusion_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_window_exclusion_clauseContext opt_window_exclusion_clause() throws RecognitionException {
		Opt_window_exclusion_clauseContext _localctx = new Opt_window_exclusion_clauseContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_opt_window_exclusion_clause);
		try {
			setState(9438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCLUDE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9428);
				match(EXCLUDE);
				setState(9435);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT_P:
					{
					setState(9429);
					match(CURRENT_P);
					setState(9430);
					match(ROW);
					}
					break;
				case GROUP_P:
					{
					setState(9431);
					match(GROUP_P);
					}
					break;
				case TIES:
					{
					setState(9432);
					match(TIES);
					}
					break;
				case NO:
					{
					setState(9433);
					match(NO);
					setState(9434);
					match(OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_row);
		int _la;
		try {
			setState(9452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(9440);
				match(ROW);
				setState(9441);
				match(OPEN_PAREN);
				setState(9443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAREN) | (1L << PLUS) | (1L << MINUS) | (1L << PARAM) | (1L << Operator) | (1L << AND) | (1L << ARRAY) | (1L << CASE) | (1L << CAST) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << DO) | (1L << FALSE_P) | (1L << FETCH))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (LOCALTIME - 75)) | (1L << (LOCALTIMESTAMP - 75)) | (1L << (NOT - 75)) | (1L << (NULL_P - 75)) | (1L << (SESSION_USER - 75)) | (1L << (TABLE - 75)) | (1L << (TRUE_P - 75)) | (1L << (UNIQUE - 75)) | (1L << (USER - 75)) | (1L << (AUTHORIZATION - 75)) | (1L << (BINARY - 75)) | (1L << (COLLATION - 75)) | (1L << (CONCURRENTLY - 75)) | (1L << (CROSS - 75)) | (1L << (CURRENT_SCHEMA - 75)) | (1L << (FREEZE - 75)) | (1L << (FULL - 75)) | (1L << (ILIKE - 75)) | (1L << (INNER_P - 75)) | (1L << (IS - 75)) | (1L << (ISNULL - 75)) | (1L << (JOIN - 75)) | (1L << (LEFT - 75)) | (1L << (LIKE - 75)) | (1L << (NATURAL - 75)) | (1L << (NOTNULL - 75)) | (1L << (OUTER_P - 75)) | (1L << (OVER - 75)) | (1L << (OVERLAPS - 75)) | (1L << (RIGHT - 75)) | (1L << (SIMILAR - 75)) | (1L << (VERBOSE - 75)) | (1L << (ABORT_P - 75)) | (1L << (ABSOLUTE_P - 75)) | (1L << (ACCESS - 75)) | (1L << (ACTION - 75)) | (1L << (ADD_P - 75)) | (1L << (ADMIN - 75)) | (1L << (AFTER - 75)) | (1L << (AGGREGATE - 75)) | (1L << (ALSO - 75)) | (1L << (ALTER - 75)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (ALWAYS - 139)) | (1L << (ASSERTION - 139)) | (1L << (ASSIGNMENT - 139)) | (1L << (AT - 139)) | (1L << (ATTRIBUTE - 139)) | (1L << (BACKWARD - 139)) | (1L << (BEFORE - 139)) | (1L << (BEGIN_P - 139)) | (1L << (BY - 139)) | (1L << (CACHE - 139)) | (1L << (CALLED - 139)) | (1L << (CASCADE - 139)) | (1L << (CASCADED - 139)) | (1L << (CATALOG - 139)) | (1L << (CHAIN - 139)) | (1L << (CHARACTERISTICS - 139)) | (1L << (CHECKPOINT - 139)) | (1L << (CLASS - 139)) | (1L << (CLOSE - 139)) | (1L << (CLUSTER - 139)) | (1L << (COMMENT - 139)) | (1L << (COMMENTS - 139)) | (1L << (COMMIT - 139)) | (1L << (COMMITTED - 139)) | (1L << (CONFIGURATION - 139)) | (1L << (CONNECTION - 139)) | (1L << (CONSTRAINTS - 139)) | (1L << (CONTENT_P - 139)) | (1L << (CONTINUE_P - 139)) | (1L << (CONVERSION_P - 139)) | (1L << (COPY - 139)) | (1L << (COST - 139)) | (1L << (CSV - 139)) | (1L << (CURSOR - 139)) | (1L << (CYCLE - 139)) | (1L << (DATA_P - 139)) | (1L << (DATABASE - 139)) | (1L << (DAY_P - 139)) | (1L << (DEALLOCATE - 139)) | (1L << (DECLARE - 139)) | (1L << (DEFAULTS - 139)) | (1L << (DEFERRED - 139)) | (1L << (DEFINER - 139)) | (1L << (DELETE_P - 139)) | (1L << (DELIMITER - 139)) | (1L << (DELIMITERS - 139)) | (1L << (DICTIONARY - 139)) | (1L << (DISABLE_P - 139)) | (1L << (DISCARD - 139)) | (1L << (DOCUMENT_P - 139)) | (1L << (DOMAIN_P - 139)) | (1L << (DOUBLE_P - 139)) | (1L << (DROP - 139)) | (1L << (EACH - 139)) | (1L << (ENABLE_P - 139)) | (1L << (ENCODING - 139)) | (1L << (ENCRYPTED - 139)) | (1L << (ENUM_P - 139)) | (1L << (ESCAPE - 139)) | (1L << (EVENT - 139)) | (1L << (EXCLUDE - 139)) | (1L << (EXCLUDING - 139)) | (1L << (EXCLUSIVE - 139)) | (1L << (EXECUTE - 139)))) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & ((1L << (EXPLAIN - 203)) | (1L << (EXTENSION - 203)) | (1L << (EXTERNAL - 203)) | (1L << (FAMILY - 203)) | (1L << (FIRST_P - 203)) | (1L << (FOLLOWING - 203)) | (1L << (FORCE - 203)) | (1L << (FORWARD - 203)) | (1L << (FUNCTION - 203)) | (1L << (FUNCTIONS - 203)) | (1L << (GLOBAL - 203)) | (1L << (GRANTED - 203)) | (1L << (HANDLER - 203)) | (1L << (HEADER_P - 203)) | (1L << (HOLD - 203)) | (1L << (HOUR_P - 203)) | (1L << (IDENTITY_P - 203)) | (1L << (IF_P - 203)) | (1L << (IMMEDIATE - 203)) | (1L << (IMMUTABLE - 203)) | (1L << (IMPLICIT_P - 203)) | (1L << (INCLUDING - 203)) | (1L << (INCREMENT - 203)) | (1L << (INDEX - 203)) | (1L << (INDEXES - 203)) | (1L << (INHERIT - 203)) | (1L << (INHERITS - 203)) | (1L << (INLINE_P - 203)) | (1L << (INSENSITIVE - 203)) | (1L << (INSERT - 203)) | (1L << (INSTEAD - 203)) | (1L << (INVOKER - 203)) | (1L << (ISOLATION - 203)) | (1L << (KEY - 203)) | (1L << (LABEL - 203)) | (1L << (LANGUAGE - 203)) | (1L << (LARGE_P - 203)) | (1L << (LAST_P - 203)) | (1L << (LEAKPROOF - 203)) | (1L << (LEVEL - 203)) | (1L << (LISTEN - 203)) | (1L << (LOAD - 203)) | (1L << (LOCAL - 203)) | (1L << (LOCATION - 203)) | (1L << (LOCK_P - 203)) | (1L << (MAPPING - 203)) | (1L << (MATCH - 203)) | (1L << (MATERIALIZED - 203)) | (1L << (MAXVALUE - 203)) | (1L << (MINUTE_P - 203)) | (1L << (MINVALUE - 203)) | (1L << (MODE - 203)) | (1L << (MONTH_P - 203)) | (1L << (MOVE - 203)) | (1L << (NAME_P - 203)) | (1L << (NAMES - 203)) | (1L << (NEXT - 203)) | (1L << (NO - 203)) | (1L << (NOTHING - 203)) | (1L << (NOTIFY - 203)) | (1L << (NOWAIT - 203)) | (1L << (NULLS_P - 203)))) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (OBJECT_P - 267)) | (1L << (OF - 267)) | (1L << (OFF - 267)) | (1L << (OIDS - 267)) | (1L << (OPERATOR - 267)) | (1L << (OPTION - 267)) | (1L << (OPTIONS - 267)) | (1L << (OWNED - 267)) | (1L << (OWNER - 267)) | (1L << (PARSER - 267)) | (1L << (PARTIAL - 267)) | (1L << (PARTITION - 267)) | (1L << (PASSING - 267)) | (1L << (PASSWORD - 267)) | (1L << (PLANS - 267)) | (1L << (PRECEDING - 267)) | (1L << (PREPARE - 267)) | (1L << (PREPARED - 267)) | (1L << (PRESERVE - 267)) | (1L << (PRIOR - 267)) | (1L << (PRIVILEGES - 267)) | (1L << (PROCEDURAL - 267)) | (1L << (PROCEDURE - 267)) | (1L << (PROGRAM - 267)) | (1L << (QUOTE - 267)) | (1L << (RANGE - 267)) | (1L << (READ - 267)) | (1L << (REASSIGN - 267)) | (1L << (RECHECK - 267)) | (1L << (RECURSIVE - 267)) | (1L << (REF - 267)) | (1L << (REFRESH - 267)) | (1L << (REINDEX - 267)) | (1L << (RELATIVE_P - 267)) | (1L << (RELEASE - 267)) | (1L << (RENAME - 267)) | (1L << (REPEATABLE - 267)) | (1L << (REPLACE - 267)) | (1L << (REPLICA - 267)) | (1L << (RESET - 267)) | (1L << (RESTART - 267)) | (1L << (RESTRICT - 267)) | (1L << (RETURNS - 267)) | (1L << (REVOKE - 267)) | (1L << (ROLE - 267)) | (1L << (ROLLBACK - 267)) | (1L << (ROWS - 267)) | (1L << (RULE - 267)) | (1L << (SAVEPOINT - 267)) | (1L << (SCHEMA - 267)) | (1L << (SCROLL - 267)) | (1L << (SEARCH - 267)) | (1L << (SECOND_P - 267)) | (1L << (SECURITY - 267)) | (1L << (SEQUENCE - 267)) | (1L << (SEQUENCES - 267)) | (1L << (SERIALIZABLE - 267)) | (1L << (SERVER - 267)) | (1L << (SESSION - 267)) | (1L << (SET - 267)) | (1L << (SHARE - 267)) | (1L << (SHOW - 267)) | (1L << (SIMPLE - 267)) | (1L << (SNAPSHOT - 267)))) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (STABLE - 331)) | (1L << (STANDALONE_P - 331)) | (1L << (START - 331)) | (1L << (STATEMENT - 331)) | (1L << (STATISTICS - 331)) | (1L << (STDIN - 331)) | (1L << (STDOUT - 331)) | (1L << (STORAGE - 331)) | (1L << (STRICT_P - 331)) | (1L << (STRIP_P - 331)) | (1L << (SYSID - 331)) | (1L << (SYSTEM_P - 331)) | (1L << (TABLES - 331)) | (1L << (TABLESPACE - 331)) | (1L << (TEMP - 331)) | (1L << (TEMPLATE - 331)) | (1L << (TEMPORARY - 331)) | (1L << (TEXT_P - 331)) | (1L << (TRANSACTION - 331)) | (1L << (TRIGGER - 331)) | (1L << (TRUNCATE - 331)) | (1L << (TRUSTED - 331)) | (1L << (TYPE_P - 331)) | (1L << (TYPES_P - 331)) | (1L << (UNBOUNDED - 331)) | (1L << (UNCOMMITTED - 331)) | (1L << (UNENCRYPTED - 331)) | (1L << (UNKNOWN - 331)) | (1L << (UNLISTEN - 331)) | (1L << (UNLOGGED - 331)) | (1L << (UNTIL - 331)) | (1L << (UPDATE - 331)) | (1L << (VACUUM - 331)) | (1L << (VALID - 331)) | (1L << (VALIDATE - 331)) | (1L << (VALIDATOR - 331)) | (1L << (VARYING - 331)) | (1L << (VERSION_P - 331)) | (1L << (VIEW - 331)) | (1L << (VOLATILE - 331)) | (1L << (WHITESPACE_P - 331)) | (1L << (WITHOUT - 331)) | (1L << (WORK - 331)) | (1L << (WRAPPER - 331)) | (1L << (WRITE - 331)) | (1L << (XML_P - 331)) | (1L << (YEAR_P - 331)) | (1L << (YES_P - 331)) | (1L << (ZONE - 331)) | (1L << (BETWEEN - 331)) | (1L << (BIGINT - 331)) | (1L << (BIT - 331)) | (1L << (BOOLEAN_P - 331)) | (1L << (CHAR_P - 331)) | (1L << (CHARACTER - 331)) | (1L << (COALESCE - 331)) | (1L << (DEC - 331)) | (1L << (DECIMAL_P - 331)) | (1L << (EXISTS - 331)) | (1L << (EXTRACT - 331)) | (1L << (FLOAT_P - 331)) | (1L << (GREATEST - 331)) | (1L << (INOUT - 331)) | (1L << (INT_P - 331)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (INTEGER - 395)) | (1L << (INTERVAL - 395)) | (1L << (LEAST - 395)) | (1L << (NATIONAL - 395)) | (1L << (NCHAR - 395)) | (1L << (NONE - 395)) | (1L << (NULLIF - 395)) | (1L << (NUMERIC - 395)) | (1L << (OVERLAY - 395)) | (1L << (POSITION - 395)) | (1L << (PRECISION - 395)) | (1L << (REAL - 395)) | (1L << (ROW - 395)) | (1L << (SETOF - 395)) | (1L << (SMALLINT - 395)) | (1L << (SUBSTRING - 395)) | (1L << (TIME - 395)) | (1L << (TIMESTAMP - 395)) | (1L << (TREAT - 395)) | (1L << (TRIM - 395)) | (1L << (VALUES - 395)) | (1L << (VARCHAR - 395)) | (1L << (XMLATTRIBUTES - 395)) | (1L << (XMLCOMMENT - 395)) | (1L << (XMLAGG - 395)) | (1L << (XML_IS_WELL_FORMED - 395)) | (1L << (XML_IS_WELL_FORMED_DOCUMENT - 395)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 395)) | (1L << (XPATH - 395)) | (1L << (XPATH_EXISTS - 395)) | (1L << (XMLCONCAT - 395)) | (1L << (XMLELEMENT - 395)) | (1L << (XMLEXISTS - 395)) | (1L << (XMLFOREST - 395)) | (1L << (XMLPARSE - 395)) | (1L << (XMLPI - 395)) | (1L << (XMLROOT - 395)) | (1L << (XMLSERIALIZE - 395)) | (1L << (CALL - 395)) | (1L << (CURRENT_P - 395)) | (1L << (ATTACH - 395)) | (1L << (DETACH - 395)) | (1L << (EXPRESSION - 395)) | (1L << (GENERATED - 395)) | (1L << (LOGGED - 395)) | (1L << (STORED - 395)) | (1L << (INCLUDE - 395)) | (1L << (ROUTINE - 395)) | (1L << (TRANSFORM - 395)) | (1L << (IMPORT_P - 395)) | (1L << (POLICY - 395)) | (1L << (METHOD - 395)) | (1L << (REFERENCING - 395)) | (1L << (NEW - 395)) | (1L << (OLD - 395)) | (1L << (VALUE_P - 395)) | (1L << (SUBSCRIPTION - 395)) | (1L << (PUBLICATION - 395)) | (1L << (OUT_P - 395)) | (1L << (ROUTINES - 395)) | (1L << (SCHEMAS - 395)) | (1L << (PROCEDURES - 395)) | (1L << (INPUT_P - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (SUPPORT - 459)) | (1L << (PARALLEL - 459)) | (1L << (SQL_P - 459)) | (1L << (DEPENDS - 459)) | (1L << (OVERRIDING - 459)) | (1L << (CONFLICT - 459)) | (1L << (SKIP_P - 459)) | (1L << (LOCKED - 459)) | (1L << (TIES - 459)) | (1L << (ROLLUP - 459)) | (1L << (CUBE - 459)) | (1L << (GROUPING - 459)) | (1L << (SETS - 459)) | (1L << (TABLESAMPLE - 459)) | (1L << (ORDINALITY - 459)) | (1L << (XMLTABLE - 459)) | (1L << (COLUMNS - 459)) | (1L << (XMLNAMESPACES - 459)) | (1L << (ROWTYPE - 459)) | (1L << (NORMALIZED - 459)) | (1L << (WITHIN - 459)) | (1L << (FILTER - 459)) | (1L << (GROUPS - 459)) | (1L << (OTHERS - 459)) | (1L << (NFC - 459)) | (1L << (NFD - 459)) | (1L << (NFKC - 459)) | (1L << (NFKD - 459)) | (1L << (UESCAPE - 459)) | (1L << (VIEWS - 459)) | (1L << (NORMALIZE - 459)) | (1L << (DUMP - 459)) | (1L << (PRINT_STRICT_PARAMS - 459)) | (1L << (VARIABLE_CONFLICT - 459)) | (1L << (ERROR - 459)) | (1L << (USE_VARIABLE - 459)) | (1L << (USE_COLUMN - 459)) | (1L << (ALIAS - 459)) | (1L << (CONSTANT - 459)) | (1L << (PERFORM - 459)) | (1L << (GET - 459)) | (1L << (DIAGNOSTICS - 459)) | (1L << (STACKED - 459)) | (1L << (ELSIF - 459)) | (1L << (REVERSE - 459)) | (1L << (SLICE - 459)) | (1L << (EXIT - 459)) | (1L << (RETURN - 459)) | (1L << (QUERY - 459)) | (1L << (RAISE - 459)) | (1L << (SQLSTATE - 459)) | (1L << (DEBUG - 459)) | (1L << (LOG - 459)) | (1L << (INFO - 459)) | (1L << (NOTICE - 459)) | (1L << (WARNING - 459)) | (1L << (EXCEPTION - 459)) | (1L << (ASSERT - 459)) | (1L << (OPEN - 459)) | (1L << (ABS - 459)) | (1L << (CBRT - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (CEIL - 523)) | (1L << (CEILING - 523)) | (1L << (DEGREES - 523)) | (1L << (DIV - 523)) | (1L << (EXP - 523)) | (1L << (FACTORIAL - 523)) | (1L << (FLOOR - 523)) | (1L << (GCD - 523)) | (1L << (LCM - 523)) | (1L << (LN - 523)) | (1L << (LOG10 - 523)) | (1L << (MIN_SCALE - 523)) | (1L << (MOD - 523)) | (1L << (PI - 523)) | (1L << (POWER - 523)) | (1L << (RADIANS - 523)) | (1L << (ROUND - 523)) | (1L << (SCALE - 523)) | (1L << (SIGN - 523)) | (1L << (SQRT - 523)) | (1L << (TRIM_SCALE - 523)) | (1L << (TRUNC - 523)) | (1L << (WIDTH_BUCKET - 523)) | (1L << (RANDOM - 523)) | (1L << (SETSEED - 523)) | (1L << (ACOS - 523)) | (1L << (ACOSD - 523)) | (1L << (ASIN - 523)) | (1L << (ASIND - 523)) | (1L << (ATAN - 523)) | (1L << (ATAND - 523)) | (1L << (ATAN2 - 523)) | (1L << (ATAN2D - 523)) | (1L << (COS - 523)) | (1L << (COSD - 523)) | (1L << (COT - 523)) | (1L << (COTD - 523)) | (1L << (SIN - 523)) | (1L << (SIND - 523)) | (1L << (TAN - 523)) | (1L << (TAND - 523)) | (1L << (SINH - 523)) | (1L << (COSH - 523)) | (1L << (TANH - 523)) | (1L << (ASINH - 523)) | (1L << (ACOSH - 523)) | (1L << (ATANH - 523)) | (1L << (BIT_LENGTH - 523)) | (1L << (CHAR_LENGTH - 523)) | (1L << (CHARACTER_LENGTH - 523)) | (1L << (LOWER - 523)) | (1L << (OCTET_LENGTH - 523)) | (1L << (UPPER - 523)) | (1L << (ASCII - 523)) | (1L << (BTRIM - 523)) | (1L << (CHR - 523)) | (1L << (CONCAT - 523)) | (1L << (CONCAT_WS - 523)) | (1L << (FORMAT - 523)) | (1L << (INITCAP - 523)) | (1L << (LENGTH - 523)) | (1L << (LPAD - 523)) | (1L << (LTRIM - 523)) | (1L << (MD5 - 523)))) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (PARSE_IDENT - 587)) | (1L << (PG_CLIENT_ENCODING - 587)) | (1L << (QUOTE_IDENT - 587)) | (1L << (QUOTE_LITERAL - 587)) | (1L << (QUOTE_NULLABLE - 587)) | (1L << (REGEXP_COUNT - 587)) | (1L << (REGEXP_INSTR - 587)) | (1L << (REGEXP_LIKE - 587)) | (1L << (REGEXP_MATCH - 587)) | (1L << (REGEXP_MATCHES - 587)) | (1L << (REGEXP_REPLACE - 587)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 587)) | (1L << (REGEXP_SPLIT_TO_TABLE - 587)) | (1L << (REGEXP_SUBSTR - 587)) | (1L << (REPEAT - 587)) | (1L << (RPAD - 587)) | (1L << (RTRIM - 587)) | (1L << (SPLIT_PART - 587)) | (1L << (STARTS_WITH - 587)) | (1L << (STRING_TO_ARRAY - 587)) | (1L << (STRING_TO_TABLE - 587)) | (1L << (STRPOS - 587)) | (1L << (SUBSTR - 587)) | (1L << (TO_ASCII - 587)) | (1L << (TO_HEX - 587)) | (1L << (TRANSLATE - 587)) | (1L << (UNISTR - 587)) | (1L << (AGE - 587)) | (1L << (CLOCK_TIMESTAMP - 587)) | (1L << (DATE_BIN - 587)) | (1L << (DATE_PART - 587)) | (1L << (DATE_TRUNC - 587)) | (1L << (ISFINITE - 587)) | (1L << (JUSTIFY_DAYS - 587)) | (1L << (JUSTIFY_HOURS - 587)) | (1L << (JUSTIFY_INTERVAL - 587)) | (1L << (MAKE_DATE - 587)) | (1L << (MAKE_INTERVAL - 587)) | (1L << (MAKE_TIME - 587)) | (1L << (MAKE_TIMESTAMP - 587)) | (1L << (MAKE_TIMESTAMPTZ - 587)) | (1L << (NOW - 587)) | (1L << (STATEMENT_TIMESTAMP - 587)) | (1L << (TIMEOFDAY - 587)) | (1L << (TRANSACTION_TIMESTAMP - 587)) | (1L << (TO_TIMESTAMP - 587)) | (1L << (TO_CHAR - 587)) | (1L << (TO_DATE - 587)) | (1L << (TO_NUMBER - 587)) | (1L << (Identifier - 587)) | (1L << (QuotedIdentifier - 587)) | (1L << (UnicodeQuotedIdentifier - 587)) | (1L << (StringConstant - 587)) | (1L << (UnicodeEscapeStringConstant - 587)) | (1L << (BeginDollarStringConstant - 587)) | (1L << (BinaryStringConstant - 587)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (HexadecimalStringConstant - 654)) | (1L << (Integral - 654)) | (1L << (Numeric - 654)) | (1L << (PLSQLVARIABLENAME - 654)) | (1L << (PLSQLIDENTIFIER - 654)) | (1L << (EscapeStringConstant - 654)))) != 0)) {
					{
					setState(9442);
					expr_list();
					}
				}

				setState(9445);
				match(CLOSE_PAREN);
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9446);
				match(OPEN_PAREN);
				setState(9447);
				expr_list();
				setState(9448);
				match(COMMA);
				setState(9449);
				a_expr();
				setState(9450);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_rowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Explicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explicit_rowContext explicit_row() throws RecognitionException {
		Explicit_rowContext _localctx = new Explicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_explicit_row);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9454);
			match(ROW);
			setState(9455);
			match(OPEN_PAREN);
			setState(9457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAREN) | (1L << PLUS) | (1L << MINUS) | (1L << PARAM) | (1L << Operator) | (1L << AND) | (1L << ARRAY) | (1L << CASE) | (1L << CAST) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << DO) | (1L << FALSE_P) | (1L << FETCH))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (LOCALTIME - 75)) | (1L << (LOCALTIMESTAMP - 75)) | (1L << (NOT - 75)) | (1L << (NULL_P - 75)) | (1L << (SESSION_USER - 75)) | (1L << (TABLE - 75)) | (1L << (TRUE_P - 75)) | (1L << (UNIQUE - 75)) | (1L << (USER - 75)) | (1L << (AUTHORIZATION - 75)) | (1L << (BINARY - 75)) | (1L << (COLLATION - 75)) | (1L << (CONCURRENTLY - 75)) | (1L << (CROSS - 75)) | (1L << (CURRENT_SCHEMA - 75)) | (1L << (FREEZE - 75)) | (1L << (FULL - 75)) | (1L << (ILIKE - 75)) | (1L << (INNER_P - 75)) | (1L << (IS - 75)) | (1L << (ISNULL - 75)) | (1L << (JOIN - 75)) | (1L << (LEFT - 75)) | (1L << (LIKE - 75)) | (1L << (NATURAL - 75)) | (1L << (NOTNULL - 75)) | (1L << (OUTER_P - 75)) | (1L << (OVER - 75)) | (1L << (OVERLAPS - 75)) | (1L << (RIGHT - 75)) | (1L << (SIMILAR - 75)) | (1L << (VERBOSE - 75)) | (1L << (ABORT_P - 75)) | (1L << (ABSOLUTE_P - 75)) | (1L << (ACCESS - 75)) | (1L << (ACTION - 75)) | (1L << (ADD_P - 75)) | (1L << (ADMIN - 75)) | (1L << (AFTER - 75)) | (1L << (AGGREGATE - 75)) | (1L << (ALSO - 75)) | (1L << (ALTER - 75)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (ALWAYS - 139)) | (1L << (ASSERTION - 139)) | (1L << (ASSIGNMENT - 139)) | (1L << (AT - 139)) | (1L << (ATTRIBUTE - 139)) | (1L << (BACKWARD - 139)) | (1L << (BEFORE - 139)) | (1L << (BEGIN_P - 139)) | (1L << (BY - 139)) | (1L << (CACHE - 139)) | (1L << (CALLED - 139)) | (1L << (CASCADE - 139)) | (1L << (CASCADED - 139)) | (1L << (CATALOG - 139)) | (1L << (CHAIN - 139)) | (1L << (CHARACTERISTICS - 139)) | (1L << (CHECKPOINT - 139)) | (1L << (CLASS - 139)) | (1L << (CLOSE - 139)) | (1L << (CLUSTER - 139)) | (1L << (COMMENT - 139)) | (1L << (COMMENTS - 139)) | (1L << (COMMIT - 139)) | (1L << (COMMITTED - 139)) | (1L << (CONFIGURATION - 139)) | (1L << (CONNECTION - 139)) | (1L << (CONSTRAINTS - 139)) | (1L << (CONTENT_P - 139)) | (1L << (CONTINUE_P - 139)) | (1L << (CONVERSION_P - 139)) | (1L << (COPY - 139)) | (1L << (COST - 139)) | (1L << (CSV - 139)) | (1L << (CURSOR - 139)) | (1L << (CYCLE - 139)) | (1L << (DATA_P - 139)) | (1L << (DATABASE - 139)) | (1L << (DAY_P - 139)) | (1L << (DEALLOCATE - 139)) | (1L << (DECLARE - 139)) | (1L << (DEFAULTS - 139)) | (1L << (DEFERRED - 139)) | (1L << (DEFINER - 139)) | (1L << (DELETE_P - 139)) | (1L << (DELIMITER - 139)) | (1L << (DELIMITERS - 139)) | (1L << (DICTIONARY - 139)) | (1L << (DISABLE_P - 139)) | (1L << (DISCARD - 139)) | (1L << (DOCUMENT_P - 139)) | (1L << (DOMAIN_P - 139)) | (1L << (DOUBLE_P - 139)) | (1L << (DROP - 139)) | (1L << (EACH - 139)) | (1L << (ENABLE_P - 139)) | (1L << (ENCODING - 139)) | (1L << (ENCRYPTED - 139)) | (1L << (ENUM_P - 139)) | (1L << (ESCAPE - 139)) | (1L << (EVENT - 139)) | (1L << (EXCLUDE - 139)) | (1L << (EXCLUDING - 139)) | (1L << (EXCLUSIVE - 139)) | (1L << (EXECUTE - 139)))) != 0) || ((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & ((1L << (EXPLAIN - 203)) | (1L << (EXTENSION - 203)) | (1L << (EXTERNAL - 203)) | (1L << (FAMILY - 203)) | (1L << (FIRST_P - 203)) | (1L << (FOLLOWING - 203)) | (1L << (FORCE - 203)) | (1L << (FORWARD - 203)) | (1L << (FUNCTION - 203)) | (1L << (FUNCTIONS - 203)) | (1L << (GLOBAL - 203)) | (1L << (GRANTED - 203)) | (1L << (HANDLER - 203)) | (1L << (HEADER_P - 203)) | (1L << (HOLD - 203)) | (1L << (HOUR_P - 203)) | (1L << (IDENTITY_P - 203)) | (1L << (IF_P - 203)) | (1L << (IMMEDIATE - 203)) | (1L << (IMMUTABLE - 203)) | (1L << (IMPLICIT_P - 203)) | (1L << (INCLUDING - 203)) | (1L << (INCREMENT - 203)) | (1L << (INDEX - 203)) | (1L << (INDEXES - 203)) | (1L << (INHERIT - 203)) | (1L << (INHERITS - 203)) | (1L << (INLINE_P - 203)) | (1L << (INSENSITIVE - 203)) | (1L << (INSERT - 203)) | (1L << (INSTEAD - 203)) | (1L << (INVOKER - 203)) | (1L << (ISOLATION - 203)) | (1L << (KEY - 203)) | (1L << (LABEL - 203)) | (1L << (LANGUAGE - 203)) | (1L << (LARGE_P - 203)) | (1L << (LAST_P - 203)) | (1L << (LEAKPROOF - 203)) | (1L << (LEVEL - 203)) | (1L << (LISTEN - 203)) | (1L << (LOAD - 203)) | (1L << (LOCAL - 203)) | (1L << (LOCATION - 203)) | (1L << (LOCK_P - 203)) | (1L << (MAPPING - 203)) | (1L << (MATCH - 203)) | (1L << (MATERIALIZED - 203)) | (1L << (MAXVALUE - 203)) | (1L << (MINUTE_P - 203)) | (1L << (MINVALUE - 203)) | (1L << (MODE - 203)) | (1L << (MONTH_P - 203)) | (1L << (MOVE - 203)) | (1L << (NAME_P - 203)) | (1L << (NAMES - 203)) | (1L << (NEXT - 203)) | (1L << (NO - 203)) | (1L << (NOTHING - 203)) | (1L << (NOTIFY - 203)) | (1L << (NOWAIT - 203)) | (1L << (NULLS_P - 203)))) != 0) || ((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (OBJECT_P - 267)) | (1L << (OF - 267)) | (1L << (OFF - 267)) | (1L << (OIDS - 267)) | (1L << (OPERATOR - 267)) | (1L << (OPTION - 267)) | (1L << (OPTIONS - 267)) | (1L << (OWNED - 267)) | (1L << (OWNER - 267)) | (1L << (PARSER - 267)) | (1L << (PARTIAL - 267)) | (1L << (PARTITION - 267)) | (1L << (PASSING - 267)) | (1L << (PASSWORD - 267)) | (1L << (PLANS - 267)) | (1L << (PRECEDING - 267)) | (1L << (PREPARE - 267)) | (1L << (PREPARED - 267)) | (1L << (PRESERVE - 267)) | (1L << (PRIOR - 267)) | (1L << (PRIVILEGES - 267)) | (1L << (PROCEDURAL - 267)) | (1L << (PROCEDURE - 267)) | (1L << (PROGRAM - 267)) | (1L << (QUOTE - 267)) | (1L << (RANGE - 267)) | (1L << (READ - 267)) | (1L << (REASSIGN - 267)) | (1L << (RECHECK - 267)) | (1L << (RECURSIVE - 267)) | (1L << (REF - 267)) | (1L << (REFRESH - 267)) | (1L << (REINDEX - 267)) | (1L << (RELATIVE_P - 267)) | (1L << (RELEASE - 267)) | (1L << (RENAME - 267)) | (1L << (REPEATABLE - 267)) | (1L << (REPLACE - 267)) | (1L << (REPLICA - 267)) | (1L << (RESET - 267)) | (1L << (RESTART - 267)) | (1L << (RESTRICT - 267)) | (1L << (RETURNS - 267)) | (1L << (REVOKE - 267)) | (1L << (ROLE - 267)) | (1L << (ROLLBACK - 267)) | (1L << (ROWS - 267)) | (1L << (RULE - 267)) | (1L << (SAVEPOINT - 267)) | (1L << (SCHEMA - 267)) | (1L << (SCROLL - 267)) | (1L << (SEARCH - 267)) | (1L << (SECOND_P - 267)) | (1L << (SECURITY - 267)) | (1L << (SEQUENCE - 267)) | (1L << (SEQUENCES - 267)) | (1L << (SERIALIZABLE - 267)) | (1L << (SERVER - 267)) | (1L << (SESSION - 267)) | (1L << (SET - 267)) | (1L << (SHARE - 267)) | (1L << (SHOW - 267)) | (1L << (SIMPLE - 267)) | (1L << (SNAPSHOT - 267)))) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (STABLE - 331)) | (1L << (STANDALONE_P - 331)) | (1L << (START - 331)) | (1L << (STATEMENT - 331)) | (1L << (STATISTICS - 331)) | (1L << (STDIN - 331)) | (1L << (STDOUT - 331)) | (1L << (STORAGE - 331)) | (1L << (STRICT_P - 331)) | (1L << (STRIP_P - 331)) | (1L << (SYSID - 331)) | (1L << (SYSTEM_P - 331)) | (1L << (TABLES - 331)) | (1L << (TABLESPACE - 331)) | (1L << (TEMP - 331)) | (1L << (TEMPLATE - 331)) | (1L << (TEMPORARY - 331)) | (1L << (TEXT_P - 331)) | (1L << (TRANSACTION - 331)) | (1L << (TRIGGER - 331)) | (1L << (TRUNCATE - 331)) | (1L << (TRUSTED - 331)) | (1L << (TYPE_P - 331)) | (1L << (TYPES_P - 331)) | (1L << (UNBOUNDED - 331)) | (1L << (UNCOMMITTED - 331)) | (1L << (UNENCRYPTED - 331)) | (1L << (UNKNOWN - 331)) | (1L << (UNLISTEN - 331)) | (1L << (UNLOGGED - 331)) | (1L << (UNTIL - 331)) | (1L << (UPDATE - 331)) | (1L << (VACUUM - 331)) | (1L << (VALID - 331)) | (1L << (VALIDATE - 331)) | (1L << (VALIDATOR - 331)) | (1L << (VARYING - 331)) | (1L << (VERSION_P - 331)) | (1L << (VIEW - 331)) | (1L << (VOLATILE - 331)) | (1L << (WHITESPACE_P - 331)) | (1L << (WITHOUT - 331)) | (1L << (WORK - 331)) | (1L << (WRAPPER - 331)) | (1L << (WRITE - 331)) | (1L << (XML_P - 331)) | (1L << (YEAR_P - 331)) | (1L << (YES_P - 331)) | (1L << (ZONE - 331)) | (1L << (BETWEEN - 331)) | (1L << (BIGINT - 331)) | (1L << (BIT - 331)) | (1L << (BOOLEAN_P - 331)) | (1L << (CHAR_P - 331)) | (1L << (CHARACTER - 331)) | (1L << (COALESCE - 331)) | (1L << (DEC - 331)) | (1L << (DECIMAL_P - 331)) | (1L << (EXISTS - 331)) | (1L << (EXTRACT - 331)) | (1L << (FLOAT_P - 331)) | (1L << (GREATEST - 331)) | (1L << (INOUT - 331)) | (1L << (INT_P - 331)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (INTEGER - 395)) | (1L << (INTERVAL - 395)) | (1L << (LEAST - 395)) | (1L << (NATIONAL - 395)) | (1L << (NCHAR - 395)) | (1L << (NONE - 395)) | (1L << (NULLIF - 395)) | (1L << (NUMERIC - 395)) | (1L << (OVERLAY - 395)) | (1L << (POSITION - 395)) | (1L << (PRECISION - 395)) | (1L << (REAL - 395)) | (1L << (ROW - 395)) | (1L << (SETOF - 395)) | (1L << (SMALLINT - 395)) | (1L << (SUBSTRING - 395)) | (1L << (TIME - 395)) | (1L << (TIMESTAMP - 395)) | (1L << (TREAT - 395)) | (1L << (TRIM - 395)) | (1L << (VALUES - 395)) | (1L << (VARCHAR - 395)) | (1L << (XMLATTRIBUTES - 395)) | (1L << (XMLCOMMENT - 395)) | (1L << (XMLAGG - 395)) | (1L << (XML_IS_WELL_FORMED - 395)) | (1L << (XML_IS_WELL_FORMED_DOCUMENT - 395)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 395)) | (1L << (XPATH - 395)) | (1L << (XPATH_EXISTS - 395)) | (1L << (XMLCONCAT - 395)) | (1L << (XMLELEMENT - 395)) | (1L << (XMLEXISTS - 395)) | (1L << (XMLFOREST - 395)) | (1L << (XMLPARSE - 395)) | (1L << (XMLPI - 395)) | (1L << (XMLROOT - 395)) | (1L << (XMLSERIALIZE - 395)) | (1L << (CALL - 395)) | (1L << (CURRENT_P - 395)) | (1L << (ATTACH - 395)) | (1L << (DETACH - 395)) | (1L << (EXPRESSION - 395)) | (1L << (GENERATED - 395)) | (1L << (LOGGED - 395)) | (1L << (STORED - 395)) | (1L << (INCLUDE - 395)) | (1L << (ROUTINE - 395)) | (1L << (TRANSFORM - 395)) | (1L << (IMPORT_P - 395)) | (1L << (POLICY - 395)) | (1L << (METHOD - 395)) | (1L << (REFERENCING - 395)) | (1L << (NEW - 395)) | (1L << (OLD - 395)) | (1L << (VALUE_P - 395)) | (1L << (SUBSCRIPTION - 395)) | (1L << (PUBLICATION - 395)) | (1L << (OUT_P - 395)) | (1L << (ROUTINES - 395)) | (1L << (SCHEMAS - 395)) | (1L << (PROCEDURES - 395)) | (1L << (INPUT_P - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (SUPPORT - 459)) | (1L << (PARALLEL - 459)) | (1L << (SQL_P - 459)) | (1L << (DEPENDS - 459)) | (1L << (OVERRIDING - 459)) | (1L << (CONFLICT - 459)) | (1L << (SKIP_P - 459)) | (1L << (LOCKED - 459)) | (1L << (TIES - 459)) | (1L << (ROLLUP - 459)) | (1L << (CUBE - 459)) | (1L << (GROUPING - 459)) | (1L << (SETS - 459)) | (1L << (TABLESAMPLE - 459)) | (1L << (ORDINALITY - 459)) | (1L << (XMLTABLE - 459)) | (1L << (COLUMNS - 459)) | (1L << (XMLNAMESPACES - 459)) | (1L << (ROWTYPE - 459)) | (1L << (NORMALIZED - 459)) | (1L << (WITHIN - 459)) | (1L << (FILTER - 459)) | (1L << (GROUPS - 459)) | (1L << (OTHERS - 459)) | (1L << (NFC - 459)) | (1L << (NFD - 459)) | (1L << (NFKC - 459)) | (1L << (NFKD - 459)) | (1L << (UESCAPE - 459)) | (1L << (VIEWS - 459)) | (1L << (NORMALIZE - 459)) | (1L << (DUMP - 459)) | (1L << (PRINT_STRICT_PARAMS - 459)) | (1L << (VARIABLE_CONFLICT - 459)) | (1L << (ERROR - 459)) | (1L << (USE_VARIABLE - 459)) | (1L << (USE_COLUMN - 459)) | (1L << (ALIAS - 459)) | (1L << (CONSTANT - 459)) | (1L << (PERFORM - 459)) | (1L << (GET - 459)) | (1L << (DIAGNOSTICS - 459)) | (1L << (STACKED - 459)) | (1L << (ELSIF - 459)) | (1L << (REVERSE - 459)) | (1L << (SLICE - 459)) | (1L << (EXIT - 459)) | (1L << (RETURN - 459)) | (1L << (QUERY - 459)) | (1L << (RAISE - 459)) | (1L << (SQLSTATE - 459)) | (1L << (DEBUG - 459)) | (1L << (LOG - 459)) | (1L << (INFO - 459)) | (1L << (NOTICE - 459)) | (1L << (WARNING - 459)) | (1L << (EXCEPTION - 459)) | (1L << (ASSERT - 459)) | (1L << (OPEN - 459)) | (1L << (ABS - 459)) | (1L << (CBRT - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (CEIL - 523)) | (1L << (CEILING - 523)) | (1L << (DEGREES - 523)) | (1L << (DIV - 523)) | (1L << (EXP - 523)) | (1L << (FACTORIAL - 523)) | (1L << (FLOOR - 523)) | (1L << (GCD - 523)) | (1L << (LCM - 523)) | (1L << (LN - 523)) | (1L << (LOG10 - 523)) | (1L << (MIN_SCALE - 523)) | (1L << (MOD - 523)) | (1L << (PI - 523)) | (1L << (POWER - 523)) | (1L << (RADIANS - 523)) | (1L << (ROUND - 523)) | (1L << (SCALE - 523)) | (1L << (SIGN - 523)) | (1L << (SQRT - 523)) | (1L << (TRIM_SCALE - 523)) | (1L << (TRUNC - 523)) | (1L << (WIDTH_BUCKET - 523)) | (1L << (RANDOM - 523)) | (1L << (SETSEED - 523)) | (1L << (ACOS - 523)) | (1L << (ACOSD - 523)) | (1L << (ASIN - 523)) | (1L << (ASIND - 523)) | (1L << (ATAN - 523)) | (1L << (ATAND - 523)) | (1L << (ATAN2 - 523)) | (1L << (ATAN2D - 523)) | (1L << (COS - 523)) | (1L << (COSD - 523)) | (1L << (COT - 523)) | (1L << (COTD - 523)) | (1L << (SIN - 523)) | (1L << (SIND - 523)) | (1L << (TAN - 523)) | (1L << (TAND - 523)) | (1L << (SINH - 523)) | (1L << (COSH - 523)) | (1L << (TANH - 523)) | (1L << (ASINH - 523)) | (1L << (ACOSH - 523)) | (1L << (ATANH - 523)) | (1L << (BIT_LENGTH - 523)) | (1L << (CHAR_LENGTH - 523)) | (1L << (CHARACTER_LENGTH - 523)) | (1L << (LOWER - 523)) | (1L << (OCTET_LENGTH - 523)) | (1L << (UPPER - 523)) | (1L << (ASCII - 523)) | (1L << (BTRIM - 523)) | (1L << (CHR - 523)) | (1L << (CONCAT - 523)) | (1L << (CONCAT_WS - 523)) | (1L << (FORMAT - 523)) | (1L << (INITCAP - 523)) | (1L << (LENGTH - 523)) | (1L << (LPAD - 523)) | (1L << (LTRIM - 523)) | (1L << (MD5 - 523)))) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (PARSE_IDENT - 587)) | (1L << (PG_CLIENT_ENCODING - 587)) | (1L << (QUOTE_IDENT - 587)) | (1L << (QUOTE_LITERAL - 587)) | (1L << (QUOTE_NULLABLE - 587)) | (1L << (REGEXP_COUNT - 587)) | (1L << (REGEXP_INSTR - 587)) | (1L << (REGEXP_LIKE - 587)) | (1L << (REGEXP_MATCH - 587)) | (1L << (REGEXP_MATCHES - 587)) | (1L << (REGEXP_REPLACE - 587)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 587)) | (1L << (REGEXP_SPLIT_TO_TABLE - 587)) | (1L << (REGEXP_SUBSTR - 587)) | (1L << (REPEAT - 587)) | (1L << (RPAD - 587)) | (1L << (RTRIM - 587)) | (1L << (SPLIT_PART - 587)) | (1L << (STARTS_WITH - 587)) | (1L << (STRING_TO_ARRAY - 587)) | (1L << (STRING_TO_TABLE - 587)) | (1L << (STRPOS - 587)) | (1L << (SUBSTR - 587)) | (1L << (TO_ASCII - 587)) | (1L << (TO_HEX - 587)) | (1L << (TRANSLATE - 587)) | (1L << (UNISTR - 587)) | (1L << (AGE - 587)) | (1L << (CLOCK_TIMESTAMP - 587)) | (1L << (DATE_BIN - 587)) | (1L << (DATE_PART - 587)) | (1L << (DATE_TRUNC - 587)) | (1L << (ISFINITE - 587)) | (1L << (JUSTIFY_DAYS - 587)) | (1L << (JUSTIFY_HOURS - 587)) | (1L << (JUSTIFY_INTERVAL - 587)) | (1L << (MAKE_DATE - 587)) | (1L << (MAKE_INTERVAL - 587)) | (1L << (MAKE_TIME - 587)) | (1L << (MAKE_TIMESTAMP - 587)) | (1L << (MAKE_TIMESTAMPTZ - 587)) | (1L << (NOW - 587)) | (1L << (STATEMENT_TIMESTAMP - 587)) | (1L << (TIMEOFDAY - 587)) | (1L << (TRANSACTION_TIMESTAMP - 587)) | (1L << (TO_TIMESTAMP - 587)) | (1L << (TO_CHAR - 587)) | (1L << (TO_DATE - 587)) | (1L << (TO_NUMBER - 587)) | (1L << (Identifier - 587)) | (1L << (QuotedIdentifier - 587)) | (1L << (UnicodeQuotedIdentifier - 587)) | (1L << (StringConstant - 587)) | (1L << (UnicodeEscapeStringConstant - 587)) | (1L << (BeginDollarStringConstant - 587)) | (1L << (BinaryStringConstant - 587)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (HexadecimalStringConstant - 654)) | (1L << (Integral - 654)) | (1L << (Numeric - 654)) | (1L << (PLSQLVARIABLENAME - 654)) | (1L << (PLSQLIDENTIFIER - 654)) | (1L << (EscapeStringConstant - 654)))) != 0)) {
				{
				setState(9456);
				expr_list();
				}
			}

			setState(9459);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implicit_rowContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImplicit_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImplicit_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImplicit_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_rowContext implicit_row() throws RecognitionException {
		Implicit_rowContext _localctx = new Implicit_rowContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_implicit_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9461);
			match(OPEN_PAREN);
			setState(9462);
			expr_list();
			setState(9463);
			match(COMMA);
			setState(9464);
			a_expr();
			setState(9465);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_typeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSub_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSub_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSub_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sub_typeContext sub_type() throws RecognitionException {
		Sub_typeContext _localctx = new Sub_typeContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_sub_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9467);
			_la = _input.LA(1);
			if ( !(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (ALL - 30)) | (1L << (ANY - 30)) | (1L << (SOME - 30)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public MathopContext mathop() {
			return getRuleContext(MathopContext.class,0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAll_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAll_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAll_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_opContext all_op() throws RecognitionException {
		All_opContext _localctx = new All_opContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_all_op);
		try {
			setState(9471);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9469);
				match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9470);
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathopContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LESS_EQUALS() { return getToken(PostgreSQLParser.LESS_EQUALS, 0); }
		public TerminalNode GREATER_EQUALS() { return getToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		public TerminalNode NOT_EQUALS() { return getToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMathop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMathop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMathop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathopContext mathop() throws RecognitionException {
		MathopContext _localctx = new MathopContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_mathop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9473);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << EQUAL) | (1L << PLUS) | (1L << MINUS) | (1L << SLASH) | (1L << CARET) | (1L << LT) | (1L << GT) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << NOT_EQUALS) | (1L << PERCENT))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_opContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_opContext qual_op() throws RecognitionException {
		Qual_opContext _localctx = new Qual_opContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_qual_op);
		try {
			setState(9481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9475);
				match(Operator);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9476);
				match(OPERATOR);
				setState(9477);
				match(OPEN_PAREN);
				setState(9478);
				any_operator();
				setState(9479);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qual_all_opContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qual_all_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQual_all_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQual_all_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQual_all_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qual_all_opContext qual_all_op() throws RecognitionException {
		Qual_all_opContext _localctx = new Qual_all_opContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_qual_all_op);
		try {
			setState(9489);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				enterOuterAlt(_localctx, 1);
				{
				setState(9483);
				all_op();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(9484);
				match(OPERATOR);
				setState(9485);
				match(OPEN_PAREN);
				setState(9486);
				any_operator();
				setState(9487);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_OpContext extends ParserRuleContext {
		public All_opContext all_op() {
			return getRuleContext(All_opContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Any_operatorContext any_operator() {
			return getRuleContext(Any_operatorContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_Op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubquery_Op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubquery_Op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubquery_Op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_OpContext subquery_Op() throws RecognitionException {
		Subquery_OpContext _localctx = new Subquery_OpContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_subquery_Op);
		try {
			setState(9503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9491);
				all_op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9492);
				match(OPERATOR);
				setState(9493);
				match(OPEN_PAREN);
				setState(9494);
				any_operator();
				setState(9495);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9497);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9498);
				match(NOT);
				setState(9499);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9500);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9501);
				match(NOT);
				setState(9502);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_expr_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9505);
			a_expr();
			setState(9510);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9506);
					match(COMMA);
					setState(9507);
					a_expr();
					}
					} 
				}
				setState(9512);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_listContext extends ParserRuleContext {
		public List<Func_arg_exprContext> func_arg_expr() {
			return getRuleContexts(Func_arg_exprContext.class);
		}
		public Func_arg_exprContext func_arg_expr(int i) {
			return getRuleContext(Func_arg_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_listContext func_arg_list() throws RecognitionException {
		Func_arg_listContext _localctx = new Func_arg_listContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_func_arg_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9513);
			func_arg_expr();
			setState(9518);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,620,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9514);
					match(COMMA);
					setState(9515);
					func_arg_expr();
					}
					} 
				}
				setState(9520);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,620,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_arg_exprContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public TerminalNode EQUALS_GREATER() { return getToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_arg_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_arg_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_arg_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_arg_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_arg_exprContext func_arg_expr() throws RecognitionException {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_func_arg_expr);
		int _la;
		try {
			setState(9526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9521);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9522);
				param_name();
				setState(9523);
				_la = _input.LA(1);
				if ( !(_la==COLON_EQUALS || _la==EQUALS_GREATER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9524);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public List<TypenameContext> typename() {
			return getRuleContexts(TypenameContext.class);
		}
		public TypenameContext typename(int i) {
			return getRuleContext(TypenameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		Type_listContext _localctx = new Type_listContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9528);
			typename();
			setState(9533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9529);
				match(COMMA);
				setState(9530);
				typename();
				}
				}
				setState(9535);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_exprContext extends ParserRuleContext {
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Array_expr_listContext array_expr_list() {
			return getRuleContext(Array_expr_listContext.class,0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_exprContext array_expr() throws RecognitionException {
		Array_exprContext _localctx = new Array_exprContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_array_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9536);
			match(OPEN_BRACKET);
			setState(9539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				setState(9537);
				expr_list();
				}
				break;
			case OPEN_BRACKET:
				{
				setState(9538);
				array_expr_list();
				}
				break;
			case CLOSE_BRACKET:
				break;
			default:
				break;
			}
			setState(9541);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expr_listContext extends ParserRuleContext {
		public List<Array_exprContext> array_expr() {
			return getRuleContexts(Array_exprContext.class);
		}
		public Array_exprContext array_expr(int i) {
			return getRuleContext(Array_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_expr_listContext array_expr_list() throws RecognitionException {
		Array_expr_listContext _localctx = new Array_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_array_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9543);
			array_expr();
			setState(9548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9544);
				match(COMMA);
				setState(9545);
				array_expr();
				}
				}
				setState(9550);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_listContext extends ParserRuleContext {
		public Extract_argContext extract_arg() {
			return getRuleContext(Extract_argContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_listContext extract_list() throws RecognitionException {
		Extract_listContext _localctx = new Extract_listContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_extract_list);
		try {
			setState(9556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case DAY_P:
			case FIRST_P:
			case FORWARD:
			case HOUR_P:
			case INSERT:
			case LAST_P:
			case MINUTE_P:
			case MONTH_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SECOND_P:
			case SET:
			case TYPE_P:
			case YEAR_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9551);
				extract_arg();
				setState(9552);
				match(FROM);
				setState(9553);
				a_expr();
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_argContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExtract_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExtract_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExtract_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Extract_argContext extract_arg() throws RecognitionException {
		Extract_argContext _localctx = new Extract_argContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_extract_arg);
		try {
			setState(9566);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9558);
				identifier();
				}
				break;
			case YEAR_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(9559);
				match(YEAR_P);
				}
				break;
			case MONTH_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(9560);
				match(MONTH_P);
				}
				break;
			case DAY_P:
				enterOuterAlt(_localctx, 4);
				{
				setState(9561);
				match(DAY_P);
				}
				break;
			case HOUR_P:
				enterOuterAlt(_localctx, 5);
				{
				setState(9562);
				match(HOUR_P);
				}
				break;
			case MINUTE_P:
				enterOuterAlt(_localctx, 6);
				{
				setState(9563);
				match(MINUTE_P);
				}
				break;
			case SECOND_P:
				enterOuterAlt(_localctx, 7);
				{
				setState(9564);
				match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 8);
				{
				setState(9565);
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unicode_normal_formContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode_normal_form; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnicode_normal_form(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnicode_normal_form(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnicode_normal_form(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unicode_normal_formContext unicode_normal_form() throws RecognitionException {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_unicode_normal_form);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9568);
			_la = _input.LA(1);
			if ( !(((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (NFC - 483)) | (1L << (NFD - 483)) | (1L << (NFKC - 483)) | (1L << (NFKD - 483)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Overlay_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlay_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOverlay_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOverlay_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOverlay_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Overlay_listContext overlay_list() throws RecognitionException {
		Overlay_listContext _localctx = new Overlay_listContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_overlay_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9570);
			a_expr();
			setState(9571);
			match(PLACING);
			setState(9572);
			a_expr();
			setState(9573);
			match(FROM);
			setState(9574);
			a_expr();
			setState(9577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(9575);
				match(FOR);
				setState(9576);
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Position_listContext extends ParserRuleContext {
		public List<B_exprContext> b_expr() {
			return getRuleContexts(B_exprContext.class);
		}
		public B_exprContext b_expr(int i) {
			return getRuleContext(B_exprContext.class,i);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_position_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPosition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPosition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPosition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Position_listContext position_list() throws RecognitionException {
		Position_listContext _localctx = new Position_listContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_position_list);
		try {
			setState(9584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9579);
				b_expr(0);
				setState(9580);
				match(IN_P);
				setState(9581);
				b_expr(0);
				}
				break;
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSubstr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSubstr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSubstr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substr_listContext substr_list() throws RecognitionException {
		Substr_listContext _localctx = new Substr_listContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_substr_list);
		try {
			setState(9614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9586);
				a_expr();
				setState(9587);
				match(FROM);
				setState(9588);
				a_expr();
				setState(9589);
				match(FOR);
				setState(9590);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9592);
				a_expr();
				setState(9593);
				match(FOR);
				setState(9594);
				a_expr();
				setState(9595);
				match(FROM);
				setState(9596);
				a_expr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9598);
				a_expr();
				setState(9599);
				match(FROM);
				setState(9600);
				a_expr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9602);
				a_expr();
				setState(9603);
				match(FOR);
				setState(9604);
				a_expr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9606);
				a_expr();
				setState(9607);
				match(SIMILAR);
				setState(9608);
				a_expr();
				setState(9609);
				match(ESCAPE);
				setState(9610);
				a_expr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9612);
				expr_list();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_listContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTrim_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTrim_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTrim_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_listContext trim_list() throws RecognitionException {
		Trim_listContext _localctx = new Trim_listContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_trim_list);
		try {
			setState(9623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9616);
				a_expr();
				setState(9617);
				match(FROM);
				setState(9618);
				expr_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9620);
				match(FROM);
				setState(9621);
				expr_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9622);
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
	 
		public In_exprContext() { }
		public void copyFrom(In_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class In_expr_listContext extends In_exprContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class In_expr_selectContext extends In_exprContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public In_expr_selectContext(In_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIn_expr_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIn_expr_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIn_expr_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_in_expr);
		try {
			setState(9630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9625);
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9626);
				match(OPEN_PAREN);
				setState(9627);
				expr_list();
				setState(9628);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public Case_argContext case_arg() {
			return getRuleContext(Case_argContext.class,0);
		}
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_case_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9632);
			match(CASE);
			setState(9633);
			case_arg();
			setState(9634);
			when_clause_list();
			setState(9635);
			case_default();
			setState(9636);
			match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public List<When_clauseContext> when_clause() {
			return getRuleContexts(When_clauseContext.class);
		}
		public When_clauseContext when_clause(int i) {
			return getRuleContext(When_clauseContext.class,i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_when_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9639); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(9638);
				when_clause();
				}
				}
				setState(9641); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhen_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhen_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhen_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9643);
			match(WHEN);
			setState(9644);
			a_expr();
			setState(9645);
			match(THEN);
			setState(9646);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_case_default);
		try {
			setState(9651);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9648);
				match(ELSE);
				setState(9649);
				a_expr();
				}
				break;
			case END_P:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_argContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_argContext case_arg() throws RecognitionException {
		Case_argContext _localctx = new Case_argContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_case_arg);
		try {
			setState(9655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9653);
				a_expr();
				}
				break;
			case WHEN:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_columnref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9657);
			colid();
			setState(9659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				setState(9658);
				indirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indirection_elContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Attr_nameContext attr_name() {
			return getRuleContext(Attr_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public List<Opt_slice_boundContext> opt_slice_bound() {
			return getRuleContexts(Opt_slice_boundContext.class);
		}
		public Opt_slice_boundContext opt_slice_bound(int i) {
			return getRuleContext(Opt_slice_boundContext.class,i);
		}
		public TerminalNode COLON() { return getToken(PostgreSQLParser.COLON, 0); }
		public Indirection_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection_el(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection_el(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection_el(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Indirection_elContext indirection_el() throws RecognitionException {
		Indirection_elContext _localctx = new Indirection_elContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_indirection_el);
		try {
			setState(9676);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9661);
				match(DOT);
				setState(9664);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FOREIGN:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case IN_P:
				case INITIALLY:
				case INTERSECT:
				case LATERAL_P:
				case LEADING:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ONLY:
				case OR:
				case ORDER:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TO:
				case TRAILING:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(9662);
					attr_name();
					}
					break;
				case STAR:
					{
					setState(9663);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPEN_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9666);
				match(OPEN_BRACKET);
				setState(9672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
				case 1:
					{
					setState(9667);
					a_expr();
					}
					break;
				case 2:
					{
					setState(9668);
					opt_slice_bound();
					setState(9669);
					match(COLON);
					setState(9670);
					opt_slice_bound();
					}
					break;
				}
				setState(9674);
				match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_slice_boundContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_slice_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_slice_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_slice_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_slice_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_slice_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_slice_boundContext opt_slice_bound() throws RecognitionException {
		Opt_slice_boundContext _localctx = new Opt_slice_boundContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_opt_slice_bound);
		try {
			setState(9680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9678);
				a_expr();
				}
				break;
			case CLOSE_BRACKET:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		IndirectionContext _localctx = new IndirectionContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9683); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(9682);
					indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9685); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,640,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_indirectionContext extends ParserRuleContext {
		public List<Indirection_elContext> indirection_el() {
			return getRuleContexts(Indirection_elContext.class);
		}
		public Indirection_elContext indirection_el(int i) {
			return getRuleContext(Indirection_elContext.class,i);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_indirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_indirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_indirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_indirectionContext opt_indirection() throws RecognitionException {
		Opt_indirectionContext _localctx = new Opt_indirectionContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_opt_indirection);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9690);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9687);
					indirection_el();
					}
					} 
				}
				setState(9692);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_target_listContext extends ParserRuleContext {
		public Target_listContext target_list() {
			return getRuleContext(Target_listContext.class,0);
		}
		public Opt_target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_target_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_target_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_target_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_target_listContext opt_target_list() throws RecognitionException {
		Opt_target_listContext _localctx = new Opt_target_listContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_opt_target_list);
		try {
			setState(9695);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9693);
				target_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_listContext extends ParserRuleContext {
		public List<Target_elContext> target_el() {
			return getRuleContexts(Target_elContext.class);
		}
		public Target_elContext target_el(int i) {
			return getRuleContext(Target_elContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_listContext target_list() throws RecognitionException {
		Target_listContext _localctx = new Target_listContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_target_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9697);
			target_el();
			setState(9702);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,643,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9698);
					match(COMMA);
					setState(9699);
					target_el();
					}
					} 
				}
				setState(9704);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,643,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_elContext extends ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_el; }
	 
		public Target_elContext() { }
		public void copyFrom(Target_elContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Target_labelContext extends Target_elContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Target_labelContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_label(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Target_starContext extends Target_elContext {
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTarget_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTarget_star(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTarget_star(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_elContext target_el() throws RecognitionException {
		Target_elContext _localctx = new Target_elContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_target_el);
		try {
			setState(9713);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9705);
				a_expr();
				setState(9710);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
				case 1:
					{
					setState(9706);
					match(AS);
					setState(9707);
					collabel();
					}
					break;
				case 2:
					{
					setState(9708);
					identifier();
					}
					break;
				case 3:
					{
					}
					break;
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9712);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_name_listContext extends ParserRuleContext {
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_name_listContext qualified_name_list() throws RecognitionException {
		Qualified_name_listContext _localctx = new Qualified_name_listContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_qualified_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9715);
			qualified_name();
			setState(9720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9716);
				match(COMMA);
				setState(9717);
				qualified_name();
				}
				}
				setState(9722);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_qualified_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9723);
			colid();
			setState(9725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_BRACKET || _la==DOT) {
				{
				setState(9724);
				indirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		Name_listContext _localctx = new Name_listContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9727);
			name();
			setState(9732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9728);
				match(COMMA);
				setState(9729);
				name();
				}
				}
				setState(9734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9735);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attr_nameContext extends ParserRuleContext {
		public CollabelContext collabel() {
			return getRuleContext(CollabelContext.class,0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attr_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAttr_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAttr_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAttr_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attr_nameContext attr_name() throws RecognitionException {
		Attr_nameContext _localctx = new Attr_nameContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_attr_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9737);
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFile_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFile_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9739);
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Type_function_nameContext type_function_name() {
			return getRuleContext(Type_function_nameContext.class,0);
		}
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_func_name);
		try {
			setState(9746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9741);
				builtin_function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9742);
				type_function_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9743);
				colid();
				setState(9744);
				indirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public FconstContext fconst() {
			return getRuleContext(FconstContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public BconstContext bconst() {
			return getRuleContext(BconstContext.class,0);
		}
		public XconstContext xconst() {
			return getRuleContext(XconstContext.class,0);
		}
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_arg_listContext func_arg_list() {
			return getRuleContext(Func_arg_listContext.class,0);
		}
		public Opt_sort_clauseContext opt_sort_clause() {
			return getRuleContext(Opt_sort_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConsttypenameContext consttypename() {
			return getRuleContext(ConsttypenameContext.class,0);
		}
		public ConstintervalContext constinterval() {
			return getRuleContext(ConstintervalContext.class,0);
		}
		public Opt_intervalContext opt_interval() {
			return getRuleContext(Opt_intervalContext.class,0);
		}
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAexprconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAexprconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAexprconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprconstContext aexprconst() throws RecognitionException {
		AexprconstContext _localctx = new AexprconstContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_aexprconst);
		try {
			setState(9780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9748);
				iconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9749);
				fconst();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9750);
				sconst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9751);
				bconst();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9752);
				xconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9753);
				func_name();
				setState(9761);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(9754);
					sconst();
					}
					break;
				case OPEN_PAREN:
					{
					setState(9755);
					match(OPEN_PAREN);
					setState(9756);
					func_arg_list();
					setState(9757);
					opt_sort_clause();
					setState(9758);
					match(CLOSE_PAREN);
					setState(9759);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9763);
				consttypename();
				setState(9764);
				sconst();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9766);
				constinterval();
				setState(9775);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					setState(9767);
					sconst();
					setState(9768);
					opt_interval();
					}
					break;
				case OPEN_PAREN:
					{
					setState(9770);
					match(OPEN_PAREN);
					setState(9771);
					iconst();
					setState(9772);
					match(CLOSE_PAREN);
					setState(9773);
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9777);
				match(TRUE_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9778);
				match(FALSE_P);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9779);
				match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XconstContext extends ParserRuleContext {
		public TerminalNode HexadecimalStringConstant() { return getToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterXconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitXconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitXconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XconstContext xconst() throws RecognitionException {
		XconstContext _localctx = new XconstContext(_ctx, getState());
		enterRule(_localctx, 1350, RULE_xconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9782);
			match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BconstContext extends ParserRuleContext {
		public TerminalNode BinaryStringConstant() { return getToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BconstContext bconst() throws RecognitionException {
		BconstContext _localctx = new BconstContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_bconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9784);
			match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FconstContext extends ParserRuleContext {
		public TerminalNode Numeric() { return getToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FconstContext fconst() throws RecognitionException {
		FconstContext _localctx = new FconstContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_fconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9786);
			match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IconstContext extends ParserRuleContext {
		public TerminalNode Integral() { return getToken(PostgreSQLParser.Integral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IconstContext iconst() throws RecognitionException {
		IconstContext _localctx = new IconstContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_iconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9788);
			match(Integral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SconstContext extends ParserRuleContext {
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SconstContext sconst() throws RecognitionException {
		SconstContext _localctx = new SconstContext(_ctx, getState());
		enterRule(_localctx, 1358, RULE_sconst);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9790);
			anysconst();
			setState(9791);
			opt_uescape();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnysconstContext extends ParserRuleContext {
		public TerminalNode StringConstant() { return getToken(PostgreSQLParser.StringConstant, 0); }
		public TerminalNode UnicodeEscapeStringConstant() { return getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		public TerminalNode BeginDollarStringConstant() { return getToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> DollarText() { return getTokens(PostgreSQLParser.DollarText); }
		public TerminalNode DollarText(int i) {
			return getToken(PostgreSQLParser.DollarText, i);
		}
		public TerminalNode EscapeStringConstant() { return getToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anysconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnysconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnysconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnysconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnysconstContext anysconst() throws RecognitionException {
		AnysconstContext _localctx = new AnysconstContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_anysconst);
		int _la;
		try {
			setState(9804);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case StringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(9793);
				match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(9794);
				match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 3);
				{
				setState(9795);
				match(BeginDollarStringConstant);
				setState(9799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DollarText) {
					{
					{
					setState(9796);
					match(DollarText);
					}
					}
					setState(9801);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9802);
				match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 4);
				{
				setState(9803);
				match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_uescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public AnysconstContext anysconst() {
			return getRuleContext(AnysconstContext.class,0);
		}
		public Opt_uescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_uescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_uescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_uescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_uescapeContext opt_uescape() throws RecognitionException {
		Opt_uescapeContext _localctx = new Opt_uescapeContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_opt_uescape);
		try {
			setState(9809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9806);
				match(UESCAPE);
				setState(9807);
				anysconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignediconstContext extends ParserRuleContext {
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signediconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSignediconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSignediconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSignediconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignediconstContext signediconst() throws RecognitionException {
		SignediconstContext _localctx = new SignediconstContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_signediconst);
		try {
			setState(9816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Integral:
				enterOuterAlt(_localctx, 1);
				{
				setState(9811);
				iconst();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9812);
				match(PLUS);
				setState(9813);
				iconst();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9814);
				match(MINUS);
				setState(9815);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleidContext extends ParserRuleContext {
		public RolespecContext rolespec() {
			return getRuleContext(RolespecContext.class,0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoleid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoleid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoleid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleidContext roleid() throws RecognitionException {
		RoleidContext _localctx = new RoleidContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_roleid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9818);
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RolespecContext extends ParserRuleContext {
		public NonreservedwordContext nonreservedword() {
			return getRuleContext(NonreservedwordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rolespec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRolespec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRolespec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRolespec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RolespecContext rolespec() throws RecognitionException {
		RolespecContext _localctx = new RolespecContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_rolespec);
		try {
			setState(9823);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9820);
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9821);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(9822);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_listContext extends ParserRuleContext {
		public List<RolespecContext> rolespec() {
			return getRuleContexts(RolespecContext.class);
		}
		public RolespecContext rolespec(int i) {
			return getRuleContext(RolespecContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_listContext role_list() throws RecognitionException {
		Role_listContext _localctx = new Role_listContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_role_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9825);
			rolespec();
			setState(9830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9826);
				match(COMMA);
				setState(9827);
				rolespec();
				}
				}
				setState(9832);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColidContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public ColidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColidContext colid() throws RecognitionException {
		ColidContext _localctx = new ColidContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_colid);
		try {
			setState(9837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9833);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9834);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9835);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9836);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_nameContext type_function_name() throws RecognitionException {
		Type_function_nameContext _localctx = new Type_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_type_function_name);
		try {
			setState(9843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9839);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9840);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9841);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9842);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonreservedwordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreservedword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNonreservedword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNonreservedword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNonreservedword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonreservedwordContext nonreservedword() throws RecognitionException {
		NonreservedwordContext _localctx = new NonreservedwordContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_nonreservedword);
		try {
			setState(9849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9845);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9846);
				unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9847);
				col_name_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9848);
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Col_name_keywordContext col_name_keyword() {
			return getRuleContext(Col_name_keywordContext.class,0);
		}
		public Type_func_name_keywordContext type_func_name_keyword() {
			return getRuleContext(Type_func_name_keywordContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public CollabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCollabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCollabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCollabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollabelContext collabel() throws RecognitionException {
		CollabelContext _localctx = new CollabelContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_collabel);
		try {
			setState(9857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9851);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9852);
				plsql_unreserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9853);
				unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9854);
				col_name_keyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9855);
				type_func_name_keyword();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9856);
				reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(PostgreSQLParser.Identifier, 0); }
		public Opt_uescapeContext opt_uescape() {
			return getRuleContext(Opt_uescapeContext.class,0);
		}
		public TerminalNode QuotedIdentifier() { return getToken(PostgreSQLParser.QuotedIdentifier, 0); }
		public TerminalNode UnicodeQuotedIdentifier() { return getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		public PlsqlvariablenameContext plsqlvariablename() {
			return getRuleContext(PlsqlvariablenameContext.class,0);
		}
		public PlsqlidentifierContext plsqlidentifier() {
			return getRuleContext(PlsqlidentifierContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_identifier);
		try {
			setState(9866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(9859);
				match(Identifier);
				setState(9860);
				opt_uescape();
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(9861);
				match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				enterOuterAlt(_localctx, 3);
				{
				setState(9862);
				match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(9863);
				plsqlvariablename();
				}
				break;
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 5);
				{
				setState(9864);
				plsqlidentifier();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
				enterOuterAlt(_localctx, 6);
				{
				setState(9865);
				plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlsqlidentifierContext extends ParserRuleContext {
		public TerminalNode PLSQLIDENTIFIER() { return getToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
		public PlsqlidentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsqlidentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsqlidentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsqlidentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsqlidentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlsqlidentifierContext plsqlidentifier() throws RecognitionException {
		PlsqlidentifierContext _localctx = new PlsqlidentifierContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_plsqlidentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9868);
			match(PLSQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABORT_P() { return getToken(PostgreSQLParser.ABORT_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADD_P() { return getToken(PostgreSQLParser.ADD_P, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(PostgreSQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(PostgreSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(PostgreSQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT_P() { return getToken(PostgreSQLParser.CONTENT_P, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CONVERSION_P() { return getToken(PostgreSQLParser.CONVERSION_P, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(PostgreSQLParser.COST, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA_P() { return getToken(PostgreSQLParser.DATA_P, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DAY_P() { return getToken(PostgreSQLParser.DAY_P, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DELETE_P() { return getToken(PostgreSQLParser.DELETE_P, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(PostgreSQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE_P() { return getToken(PostgreSQLParser.DISABLE_P, 0); }
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode DOCUMENT_P() { return getToken(PostgreSQLParser.DOCUMENT_P, 0); }
		public TerminalNode DOMAIN_P() { return getToken(PostgreSQLParser.DOMAIN_P, 0); }
		public TerminalNode DOUBLE_P() { return getToken(PostgreSQLParser.DOUBLE_P, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ENABLE_P() { return getToken(PostgreSQLParser.ENABLE_P, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode ENUM_P() { return getToken(PostgreSQLParser.ENUM_P, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(PostgreSQLParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(PostgreSQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(PostgreSQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HEADER_P() { return getToken(PostgreSQLParser.HEADER_P, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode HOUR_P() { return getToken(PostgreSQLParser.HOUR_P, 0); }
		public TerminalNode IDENTITY_P() { return getToken(PostgreSQLParser.IDENTITY_P, 0); }
		public TerminalNode IF_P() { return getToken(PostgreSQLParser.IF_P, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT_P() { return getToken(PostgreSQLParser.IMPLICIT_P, 0); }
		public TerminalNode IMPORT_P() { return getToken(PostgreSQLParser.IMPORT_P, 0); }
		public TerminalNode INCLUDE() { return getToken(PostgreSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(PostgreSQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INLINE_P() { return getToken(PostgreSQLParser.INLINE_P, 0); }
		public TerminalNode INPUT_P() { return getToken(PostgreSQLParser.INPUT_P, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE_P() { return getToken(PostgreSQLParser.LARGE_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode LEAKPROOF() { return getToken(PostgreSQLParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCK_P() { return getToken(PostgreSQLParser.LOCK_P, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(PostgreSQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MINUTE_P() { return getToken(PostgreSQLParser.MINUTE_P, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MONTH_P() { return getToken(PostgreSQLParser.MONTH_P, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NAME_P() { return getToken(PostgreSQLParser.NAME_P, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(PostgreSQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(PostgreSQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(PostgreSQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(PostgreSQLParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULLS_P() { return getToken(PostgreSQLParser.NULLS_P, 0); }
		public TerminalNode OBJECT_P() { return getToken(PostgreSQLParser.OBJECT_P, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PostgreSQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(PostgreSQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(PostgreSQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(PostgreSQLParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(PostgreSQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECOND_P() { return getToken(PostgreSQLParser.SECOND_P, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_P() { return getToken(PostgreSQLParser.SKIP_P, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public TerminalNode SQL_P() { return getToken(PostgreSQLParser.SQL_P, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode STANDALONE_P() { return getToken(PostgreSQLParser.STANDALONE_P, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(PostgreSQLParser.STORED, 0); }
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public TerminalNode STRIP_P() { return getToken(PostgreSQLParser.STRIP_P, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(PostgreSQLParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM_P() { return getToken(PostgreSQLParser.SYSTEM_P, 0); }
		public TerminalNode TABLES() { return getToken(PostgreSQLParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT_P() { return getToken(PostgreSQLParser.TEXT_P, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode TYPES_P() { return getToken(PostgreSQLParser.TYPES_P, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE_P() { return getToken(PostgreSQLParser.VALUE_P, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public TerminalNode VERSION_P() { return getToken(PostgreSQLParser.VERSION_P, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(PostgreSQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE_P() { return getToken(PostgreSQLParser.WHITESPACE_P, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode XML_P() { return getToken(PostgreSQLParser.XML_P, 0); }
		public TerminalNode YEAR_P() { return getToken(PostgreSQLParser.YEAR_P, 0); }
		public TerminalNode YES_P() { return getToken(PostgreSQLParser.YES_P, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9870);
			_la = _input.LA(1);
			if ( !(((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (OVER - 124)) | (1L << (ABORT_P - 124)) | (1L << (ABSOLUTE_P - 124)) | (1L << (ACCESS - 124)) | (1L << (ACTION - 124)) | (1L << (ADD_P - 124)) | (1L << (ADMIN - 124)) | (1L << (AFTER - 124)) | (1L << (AGGREGATE - 124)) | (1L << (ALSO - 124)) | (1L << (ALTER - 124)) | (1L << (ALWAYS - 124)) | (1L << (ASSERTION - 124)) | (1L << (ASSIGNMENT - 124)) | (1L << (AT - 124)) | (1L << (ATTRIBUTE - 124)) | (1L << (BACKWARD - 124)) | (1L << (BEFORE - 124)) | (1L << (BEGIN_P - 124)) | (1L << (BY - 124)) | (1L << (CACHE - 124)) | (1L << (CALLED - 124)) | (1L << (CASCADE - 124)) | (1L << (CASCADED - 124)) | (1L << (CATALOG - 124)) | (1L << (CHAIN - 124)) | (1L << (CHARACTERISTICS - 124)) | (1L << (CHECKPOINT - 124)) | (1L << (CLASS - 124)) | (1L << (CLOSE - 124)) | (1L << (CLUSTER - 124)) | (1L << (COMMENT - 124)) | (1L << (COMMENTS - 124)) | (1L << (COMMIT - 124)) | (1L << (COMMITTED - 124)) | (1L << (CONFIGURATION - 124)) | (1L << (CONNECTION - 124)) | (1L << (CONSTRAINTS - 124)) | (1L << (CONTENT_P - 124)) | (1L << (CONTINUE_P - 124)) | (1L << (CONVERSION_P - 124)) | (1L << (COPY - 124)) | (1L << (COST - 124)) | (1L << (CSV - 124)) | (1L << (CURSOR - 124)) | (1L << (CYCLE - 124)) | (1L << (DATA_P - 124)) | (1L << (DATABASE - 124)) | (1L << (DAY_P - 124)) | (1L << (DEALLOCATE - 124)) | (1L << (DECLARE - 124)) | (1L << (DEFAULTS - 124)) | (1L << (DEFERRED - 124)) | (1L << (DEFINER - 124)) | (1L << (DELETE_P - 124)) | (1L << (DELIMITER - 124)) | (1L << (DELIMITERS - 124)) | (1L << (DICTIONARY - 124)) | (1L << (DISABLE_P - 124)) | (1L << (DISCARD - 124)))) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (DOCUMENT_P - 188)) | (1L << (DOMAIN_P - 188)) | (1L << (DOUBLE_P - 188)) | (1L << (DROP - 188)) | (1L << (EACH - 188)) | (1L << (ENABLE_P - 188)) | (1L << (ENCODING - 188)) | (1L << (ENCRYPTED - 188)) | (1L << (ENUM_P - 188)) | (1L << (ESCAPE - 188)) | (1L << (EVENT - 188)) | (1L << (EXCLUDE - 188)) | (1L << (EXCLUDING - 188)) | (1L << (EXCLUSIVE - 188)) | (1L << (EXECUTE - 188)) | (1L << (EXPLAIN - 188)) | (1L << (EXTENSION - 188)) | (1L << (EXTERNAL - 188)) | (1L << (FAMILY - 188)) | (1L << (FIRST_P - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORCE - 188)) | (1L << (FORWARD - 188)) | (1L << (FUNCTION - 188)) | (1L << (FUNCTIONS - 188)) | (1L << (GLOBAL - 188)) | (1L << (GRANTED - 188)) | (1L << (HANDLER - 188)) | (1L << (HEADER_P - 188)) | (1L << (HOLD - 188)) | (1L << (HOUR_P - 188)) | (1L << (IDENTITY_P - 188)) | (1L << (IF_P - 188)) | (1L << (IMMEDIATE - 188)) | (1L << (IMMUTABLE - 188)) | (1L << (IMPLICIT_P - 188)) | (1L << (INCLUDING - 188)) | (1L << (INCREMENT - 188)) | (1L << (INDEX - 188)) | (1L << (INDEXES - 188)) | (1L << (INHERIT - 188)) | (1L << (INHERITS - 188)) | (1L << (INLINE_P - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERT - 188)) | (1L << (INSTEAD - 188)) | (1L << (INVOKER - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEY - 188)) | (1L << (LABEL - 188)) | (1L << (LANGUAGE - 188)) | (1L << (LARGE_P - 188)) | (1L << (LAST_P - 188)) | (1L << (LEAKPROOF - 188)) | (1L << (LEVEL - 188)) | (1L << (LISTEN - 188)) | (1L << (LOAD - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCATION - 188)) | (1L << (LOCK_P - 188)) | (1L << (MAPPING - 188)) | (1L << (MATCH - 188)) | (1L << (MATERIALIZED - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (MAXVALUE - 252)) | (1L << (MINUTE_P - 252)) | (1L << (MINVALUE - 252)) | (1L << (MODE - 252)) | (1L << (MONTH_P - 252)) | (1L << (MOVE - 252)) | (1L << (NAME_P - 252)) | (1L << (NAMES - 252)) | (1L << (NEXT - 252)) | (1L << (NO - 252)) | (1L << (NOTHING - 252)) | (1L << (NOTIFY - 252)) | (1L << (NOWAIT - 252)) | (1L << (NULLS_P - 252)) | (1L << (OBJECT_P - 252)) | (1L << (OF - 252)) | (1L << (OFF - 252)) | (1L << (OIDS - 252)) | (1L << (OPERATOR - 252)) | (1L << (OPTION - 252)) | (1L << (OPTIONS - 252)) | (1L << (OWNED - 252)) | (1L << (OWNER - 252)) | (1L << (PARSER - 252)) | (1L << (PARTIAL - 252)) | (1L << (PARTITION - 252)) | (1L << (PASSING - 252)) | (1L << (PASSWORD - 252)) | (1L << (PLANS - 252)) | (1L << (PRECEDING - 252)) | (1L << (PREPARE - 252)) | (1L << (PREPARED - 252)) | (1L << (PRESERVE - 252)) | (1L << (PRIOR - 252)) | (1L << (PRIVILEGES - 252)) | (1L << (PROCEDURAL - 252)) | (1L << (PROCEDURE - 252)) | (1L << (PROGRAM - 252)) | (1L << (QUOTE - 252)) | (1L << (RANGE - 252)) | (1L << (READ - 252)) | (1L << (REASSIGN - 252)) | (1L << (RECHECK - 252)) | (1L << (RECURSIVE - 252)) | (1L << (REF - 252)) | (1L << (REFRESH - 252)) | (1L << (REINDEX - 252)) | (1L << (RELATIVE_P - 252)) | (1L << (RELEASE - 252)) | (1L << (RENAME - 252)) | (1L << (REPEATABLE - 252)) | (1L << (REPLICA - 252)) | (1L << (RESET - 252)) | (1L << (RESTART - 252)) | (1L << (RESTRICT - 252)) | (1L << (RETURNS - 252)) | (1L << (REVOKE - 252)) | (1L << (ROLE - 252)) | (1L << (ROLLBACK - 252)) | (1L << (ROWS - 252)) | (1L << (RULE - 252)) | (1L << (SAVEPOINT - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (SCHEMA - 316)) | (1L << (SCROLL - 316)) | (1L << (SEARCH - 316)) | (1L << (SECOND_P - 316)) | (1L << (SECURITY - 316)) | (1L << (SEQUENCE - 316)) | (1L << (SEQUENCES - 316)) | (1L << (SERIALIZABLE - 316)) | (1L << (SERVER - 316)) | (1L << (SESSION - 316)) | (1L << (SET - 316)) | (1L << (SHARE - 316)) | (1L << (SHOW - 316)) | (1L << (SIMPLE - 316)) | (1L << (SNAPSHOT - 316)) | (1L << (STABLE - 316)) | (1L << (STANDALONE_P - 316)) | (1L << (START - 316)) | (1L << (STATEMENT - 316)) | (1L << (STATISTICS - 316)) | (1L << (STDIN - 316)) | (1L << (STDOUT - 316)) | (1L << (STORAGE - 316)) | (1L << (STRICT_P - 316)) | (1L << (STRIP_P - 316)) | (1L << (SYSID - 316)) | (1L << (SYSTEM_P - 316)) | (1L << (TABLES - 316)) | (1L << (TABLESPACE - 316)) | (1L << (TEMP - 316)) | (1L << (TEMPLATE - 316)) | (1L << (TEMPORARY - 316)) | (1L << (TEXT_P - 316)) | (1L << (TRANSACTION - 316)) | (1L << (TRIGGER - 316)) | (1L << (TRUNCATE - 316)) | (1L << (TRUSTED - 316)) | (1L << (TYPE_P - 316)) | (1L << (TYPES_P - 316)) | (1L << (UNBOUNDED - 316)) | (1L << (UNCOMMITTED - 316)) | (1L << (UNENCRYPTED - 316)) | (1L << (UNKNOWN - 316)) | (1L << (UNLISTEN - 316)) | (1L << (UNLOGGED - 316)) | (1L << (UNTIL - 316)) | (1L << (UPDATE - 316)) | (1L << (VACUUM - 316)) | (1L << (VALID - 316)) | (1L << (VALIDATE - 316)) | (1L << (VALIDATOR - 316)) | (1L << (VARYING - 316)) | (1L << (VERSION_P - 316)) | (1L << (VIEW - 316)) | (1L << (VOLATILE - 316)) | (1L << (WHITESPACE_P - 316)) | (1L << (WITHOUT - 316)) | (1L << (WORK - 316)) | (1L << (WRAPPER - 316)) | (1L << (WRITE - 316)) | (1L << (XML_P - 316)) | (1L << (YEAR_P - 316)) | (1L << (YES_P - 316)) | (1L << (ZONE - 316)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALL - 433)) | (1L << (CURRENT_P - 433)) | (1L << (ATTACH - 433)) | (1L << (DETACH - 433)) | (1L << (EXPRESSION - 433)) | (1L << (GENERATED - 433)) | (1L << (LOGGED - 433)) | (1L << (STORED - 433)) | (1L << (INCLUDE - 433)) | (1L << (ROUTINE - 433)) | (1L << (TRANSFORM - 433)) | (1L << (IMPORT_P - 433)) | (1L << (POLICY - 433)) | (1L << (METHOD - 433)) | (1L << (REFERENCING - 433)) | (1L << (NEW - 433)) | (1L << (OLD - 433)) | (1L << (VALUE_P - 433)) | (1L << (SUBSCRIPTION - 433)) | (1L << (PUBLICATION - 433)) | (1L << (ROUTINES - 433)) | (1L << (SCHEMAS - 433)) | (1L << (PROCEDURES - 433)) | (1L << (INPUT_P - 433)) | (1L << (SUPPORT - 433)) | (1L << (PARALLEL - 433)) | (1L << (SQL_P - 433)) | (1L << (DEPENDS - 433)) | (1L << (OVERRIDING - 433)) | (1L << (CONFLICT - 433)) | (1L << (SKIP_P - 433)) | (1L << (LOCKED - 433)) | (1L << (TIES - 433)) | (1L << (ROLLUP - 433)) | (1L << (CUBE - 433)) | (1L << (SETS - 433)) | (1L << (ORDINALITY - 433)) | (1L << (COLUMNS - 433)) | (1L << (NORMALIZED - 433)) | (1L << (WITHIN - 433)) | (1L << (FILTER - 433)) | (1L << (GROUPS - 433)) | (1L << (OTHERS - 433)) | (1L << (NFC - 433)) | (1L << (NFD - 433)) | (1L << (NFKC - 433)) | (1L << (NFKD - 433)) | (1L << (UESCAPE - 433)) | (1L << (VIEWS - 433)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Col_name_keywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public TerminalNode BOOLEAN_P() { return getToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public TerminalNode CHAR_P() { return getToken(PostgreSQLParser.CHAR_P, 0); }
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL_P() { return getToken(PostgreSQLParser.DECIMAL_P, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT_P() { return getToken(PostgreSQLParser.FLOAT_P, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INT_P() { return getToken(PostgreSQLParser.INT_P, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode OUT_P() { return getToken(PostgreSQLParser.OUT_P, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(PostgreSQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PostgreSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PostgreSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PostgreSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PostgreSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PostgreSQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(PostgreSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PostgreSQLParser.XMLTABLE, 0); }
		public Builtin_function_nameContext builtin_function_name() {
			return getRuleContext(Builtin_function_nameContext.class,0);
		}
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCol_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCol_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCol_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_name_keywordContext col_name_keyword() throws RecognitionException {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_col_name_keyword);
		try {
			setState(9924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9872);
				match(BETWEEN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9873);
				match(BIGINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9874);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9875);
				match(BOOLEAN_P);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9876);
				match(CHAR_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9877);
				character();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9878);
				match(COALESCE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9879);
				match(DEC);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9880);
				match(DECIMAL_P);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9881);
				match(EXISTS);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9882);
				match(EXTRACT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9883);
				match(FLOAT_P);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9884);
				match(GREATEST);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9885);
				match(GROUPING);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9886);
				match(INOUT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9887);
				match(INT_P);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9888);
				match(INTEGER);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9889);
				match(INTERVAL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9890);
				match(LEAST);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(9891);
				match(NATIONAL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(9892);
				match(NCHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(9893);
				match(NONE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(9894);
				match(NORMALIZE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(9895);
				match(NULLIF);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(9896);
				numeric();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(9897);
				match(OUT_P);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(9898);
				match(OVERLAY);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(9899);
				match(POSITION);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(9900);
				match(PRECISION);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(9901);
				match(REAL);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(9902);
				match(ROW);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(9903);
				match(SETOF);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(9904);
				match(SMALLINT);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(9905);
				match(SUBSTRING);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(9906);
				match(TIME);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(9907);
				match(TIMESTAMP);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(9908);
				match(TREAT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(9909);
				match(TRIM);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(9910);
				match(VALUES);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(9911);
				match(VARCHAR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(9912);
				match(XMLATTRIBUTES);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(9913);
				match(XMLCONCAT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(9914);
				match(XMLELEMENT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(9915);
				match(XMLEXISTS);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(9916);
				match(XMLFOREST);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(9917);
				match(XMLNAMESPACES);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(9918);
				match(XMLPARSE);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(9919);
				match(XMLPI);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(9920);
				match(XMLROOT);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(9921);
				match(XMLSERIALIZE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(9922);
				match(XMLTABLE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(9923);
				builtin_function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_func_name_keywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(PostgreSQLParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(PostgreSQLParser.ILIKE, 0); }
		public TerminalNode INNER_P() { return getToken(PostgreSQLParser.INNER_P, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public TerminalNode OVERLAPS() { return getToken(PostgreSQLParser.OVERLAPS, 0); }
		public TerminalNode SIMILAR() { return getToken(PostgreSQLParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_func_name_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_func_name_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_func_name_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_func_name_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_func_name_keywordContext type_func_name_keyword() throws RecognitionException {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_type_func_name_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9926);
			_la = _input.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (AUTHORIZATION - 106)) | (1L << (BINARY - 106)) | (1L << (COLLATION - 106)) | (1L << (CONCURRENTLY - 106)) | (1L << (CROSS - 106)) | (1L << (CURRENT_SCHEMA - 106)) | (1L << (FREEZE - 106)) | (1L << (FULL - 106)) | (1L << (ILIKE - 106)) | (1L << (INNER_P - 106)) | (1L << (IS - 106)) | (1L << (ISNULL - 106)) | (1L << (JOIN - 106)) | (1L << (LIKE - 106)) | (1L << (NATURAL - 106)) | (1L << (NOTNULL - 106)) | (1L << (OUTER_P - 106)) | (1L << (OVERLAPS - 106)) | (1L << (SIMILAR - 106)) | (1L << (VERBOSE - 106)))) != 0) || _la==TABLESAMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(PostgreSQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(PostgreSQLParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(PostgreSQLParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public TerminalNode FALSE_P() { return getToken(PostgreSQLParser.FALSE_P, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(PostgreSQLParser.GRANT, 0); }
		public TerminalNode GROUP_P() { return getToken(PostgreSQLParser.GROUP_P, 0); }
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public TerminalNode LATERAL_P() { return getToken(PostgreSQLParser.LATERAL_P, 0); }
		public TerminalNode LEADING() { return getToken(PostgreSQLParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(PostgreSQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(PostgreSQLParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(PostgreSQLParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(PostgreSQLParser.TRAILING, 0); }
		public TerminalNode TRUE_P() { return getToken(PostgreSQLParser.TRUE_P, 0); }
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9928);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASYMMETRIC) | (1L << BOTH) | (1L << CASE) | (1L << CAST) | (1L << CHECK) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << CREATE) | (1L << CURRENT_CATALOG) | (1L << CURRENT_DATE) | (1L << CURRENT_ROLE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFERRABLE) | (1L << DESC) | (1L << DISTINCT) | (1L << DO) | (1L << ELSE) | (1L << EXCEPT) | (1L << FALSE_P) | (1L << FETCH) | (1L << FOR) | (1L << FOREIGN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FROM - 64)) | (1L << (GRANT - 64)) | (1L << (GROUP_P - 64)) | (1L << (HAVING - 64)) | (1L << (IN_P - 64)) | (1L << (INITIALLY - 64)) | (1L << (INTERSECT - 64)) | (1L << (LATERAL_P - 64)) | (1L << (LEADING - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCALTIME - 64)) | (1L << (LOCALTIMESTAMP - 64)) | (1L << (NOT - 64)) | (1L << (NULL_P - 64)) | (1L << (OFFSET - 64)) | (1L << (ON - 64)) | (1L << (ONLY - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (PLACING - 64)) | (1L << (PRIMARY - 64)) | (1L << (REFERENCES - 64)) | (1L << (RETURNING - 64)) | (1L << (SELECT - 64)) | (1L << (SESSION_USER - 64)) | (1L << (SOME - 64)) | (1L << (SYMMETRIC - 64)) | (1L << (TABLE - 64)) | (1L << (THEN - 64)) | (1L << (TO - 64)) | (1L << (TRAILING - 64)) | (1L << (TRUE_P - 64)) | (1L << (UNION - 64)) | (1L << (UNIQUE - 64)) | (1L << (USER - 64)) | (1L << (USING - 64)) | (1L << (VARIADIC - 64)) | (1L << (WHEN - 64)) | (1L << (WHERE - 64)) | (1L << (WINDOW - 64)) | (1L << (WITH - 64)))) != 0) || _la==END_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Builtin_function_nameContext extends ParserRuleContext {
		public TerminalNode XMLCOMMENT() { return getToken(PostgreSQLParser.XMLCOMMENT, 0); }
		public TerminalNode XML_IS_WELL_FORMED() { return getToken(PostgreSQLParser.XML_IS_WELL_FORMED, 0); }
		public TerminalNode XML_IS_WELL_FORMED_DOCUMENT() { return getToken(PostgreSQLParser.XML_IS_WELL_FORMED_DOCUMENT, 0); }
		public TerminalNode XML_IS_WELL_FORMED_CONTENT() { return getToken(PostgreSQLParser.XML_IS_WELL_FORMED_CONTENT, 0); }
		public TerminalNode XMLAGG() { return getToken(PostgreSQLParser.XMLAGG, 0); }
		public TerminalNode XPATH() { return getToken(PostgreSQLParser.XPATH, 0); }
		public TerminalNode XPATH_EXISTS() { return getToken(PostgreSQLParser.XPATH_EXISTS, 0); }
		public TerminalNode ABS() { return getToken(PostgreSQLParser.ABS, 0); }
		public TerminalNode CBRT() { return getToken(PostgreSQLParser.CBRT, 0); }
		public TerminalNode CEIL() { return getToken(PostgreSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(PostgreSQLParser.CEILING, 0); }
		public TerminalNode DEGREES() { return getToken(PostgreSQLParser.DEGREES, 0); }
		public TerminalNode DIV() { return getToken(PostgreSQLParser.DIV, 0); }
		public TerminalNode EXP() { return getToken(PostgreSQLParser.EXP, 0); }
		public TerminalNode FACTORIAL() { return getToken(PostgreSQLParser.FACTORIAL, 0); }
		public TerminalNode FLOOR() { return getToken(PostgreSQLParser.FLOOR, 0); }
		public TerminalNode GCD() { return getToken(PostgreSQLParser.GCD, 0); }
		public TerminalNode LCM() { return getToken(PostgreSQLParser.LCM, 0); }
		public TerminalNode LN() { return getToken(PostgreSQLParser.LN, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(PostgreSQLParser.LOG10, 0); }
		public TerminalNode MIN_SCALE() { return getToken(PostgreSQLParser.MIN_SCALE, 0); }
		public TerminalNode MOD() { return getToken(PostgreSQLParser.MOD, 0); }
		public TerminalNode PI() { return getToken(PostgreSQLParser.PI, 0); }
		public TerminalNode POWER() { return getToken(PostgreSQLParser.POWER, 0); }
		public TerminalNode RADIANS() { return getToken(PostgreSQLParser.RADIANS, 0); }
		public TerminalNode ROUND() { return getToken(PostgreSQLParser.ROUND, 0); }
		public TerminalNode SCALE() { return getToken(PostgreSQLParser.SCALE, 0); }
		public TerminalNode SIGN() { return getToken(PostgreSQLParser.SIGN, 0); }
		public TerminalNode SQRT() { return getToken(PostgreSQLParser.SQRT, 0); }
		public TerminalNode TRIM_SCALE() { return getToken(PostgreSQLParser.TRIM_SCALE, 0); }
		public TerminalNode TRUNC() { return getToken(PostgreSQLParser.TRUNC, 0); }
		public TerminalNode WIDTH_BUCKET() { return getToken(PostgreSQLParser.WIDTH_BUCKET, 0); }
		public TerminalNode RANDOM() { return getToken(PostgreSQLParser.RANDOM, 0); }
		public TerminalNode SETSEED() { return getToken(PostgreSQLParser.SETSEED, 0); }
		public TerminalNode ACOS() { return getToken(PostgreSQLParser.ACOS, 0); }
		public TerminalNode ACOSD() { return getToken(PostgreSQLParser.ACOSD, 0); }
		public TerminalNode ACOSH() { return getToken(PostgreSQLParser.ACOSH, 0); }
		public TerminalNode ASIN() { return getToken(PostgreSQLParser.ASIN, 0); }
		public TerminalNode ASIND() { return getToken(PostgreSQLParser.ASIND, 0); }
		public TerminalNode ASINH() { return getToken(PostgreSQLParser.ASINH, 0); }
		public TerminalNode ATAN() { return getToken(PostgreSQLParser.ATAN, 0); }
		public TerminalNode ATAND() { return getToken(PostgreSQLParser.ATAND, 0); }
		public TerminalNode ATANH() { return getToken(PostgreSQLParser.ATANH, 0); }
		public TerminalNode ATAN2() { return getToken(PostgreSQLParser.ATAN2, 0); }
		public TerminalNode ATAN2D() { return getToken(PostgreSQLParser.ATAN2D, 0); }
		public TerminalNode COS() { return getToken(PostgreSQLParser.COS, 0); }
		public TerminalNode COSD() { return getToken(PostgreSQLParser.COSD, 0); }
		public TerminalNode COSH() { return getToken(PostgreSQLParser.COSH, 0); }
		public TerminalNode COT() { return getToken(PostgreSQLParser.COT, 0); }
		public TerminalNode COTD() { return getToken(PostgreSQLParser.COTD, 0); }
		public TerminalNode SIN() { return getToken(PostgreSQLParser.SIN, 0); }
		public TerminalNode SIND() { return getToken(PostgreSQLParser.SIND, 0); }
		public TerminalNode SINH() { return getToken(PostgreSQLParser.SINH, 0); }
		public TerminalNode TAN() { return getToken(PostgreSQLParser.TAN, 0); }
		public TerminalNode TAND() { return getToken(PostgreSQLParser.TAND, 0); }
		public TerminalNode TANH() { return getToken(PostgreSQLParser.TANH, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(PostgreSQLParser.BIT_LENGTH, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(PostgreSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(PostgreSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode LOWER() { return getToken(PostgreSQLParser.LOWER, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(PostgreSQLParser.OCTET_LENGTH, 0); }
		public TerminalNode UPPER() { return getToken(PostgreSQLParser.UPPER, 0); }
		public TerminalNode ASCII() { return getToken(PostgreSQLParser.ASCII, 0); }
		public TerminalNode BTRIM() { return getToken(PostgreSQLParser.BTRIM, 0); }
		public TerminalNode CHR() { return getToken(PostgreSQLParser.CHR, 0); }
		public TerminalNode CONCAT() { return getToken(PostgreSQLParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(PostgreSQLParser.CONCAT_WS, 0); }
		public TerminalNode FORMAT() { return getToken(PostgreSQLParser.FORMAT, 0); }
		public TerminalNode INITCAP() { return getToken(PostgreSQLParser.INITCAP, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(PostgreSQLParser.LENGTH, 0); }
		public TerminalNode LPAD() { return getToken(PostgreSQLParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(PostgreSQLParser.LTRIM, 0); }
		public TerminalNode MD5() { return getToken(PostgreSQLParser.MD5, 0); }
		public TerminalNode PARSE_IDENT() { return getToken(PostgreSQLParser.PARSE_IDENT, 0); }
		public TerminalNode PG_CLIENT_ENCODING() { return getToken(PostgreSQLParser.PG_CLIENT_ENCODING, 0); }
		public TerminalNode QUOTE_IDENT() { return getToken(PostgreSQLParser.QUOTE_IDENT, 0); }
		public TerminalNode QUOTE_LITERAL() { return getToken(PostgreSQLParser.QUOTE_LITERAL, 0); }
		public TerminalNode QUOTE_NULLABLE() { return getToken(PostgreSQLParser.QUOTE_NULLABLE, 0); }
		public TerminalNode REGEXP_COUNT() { return getToken(PostgreSQLParser.REGEXP_COUNT, 0); }
		public TerminalNode REGEXP_INSTR() { return getToken(PostgreSQLParser.REGEXP_INSTR, 0); }
		public TerminalNode REGEXP_LIKE() { return getToken(PostgreSQLParser.REGEXP_LIKE, 0); }
		public TerminalNode REGEXP_MATCH() { return getToken(PostgreSQLParser.REGEXP_MATCH, 0); }
		public TerminalNode REGEXP_MATCHES() { return getToken(PostgreSQLParser.REGEXP_MATCHES, 0); }
		public TerminalNode REGEXP_REPLACE() { return getToken(PostgreSQLParser.REGEXP_REPLACE, 0); }
		public TerminalNode REGEXP_SPLIT_TO_ARRAY() { return getToken(PostgreSQLParser.REGEXP_SPLIT_TO_ARRAY, 0); }
		public TerminalNode REGEXP_SPLIT_TO_TABLE() { return getToken(PostgreSQLParser.REGEXP_SPLIT_TO_TABLE, 0); }
		public TerminalNode REGEXP_SUBSTR() { return getToken(PostgreSQLParser.REGEXP_SUBSTR, 0); }
		public TerminalNode REPEAT() { return getToken(PostgreSQLParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode RPAD() { return getToken(PostgreSQLParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(PostgreSQLParser.RTRIM, 0); }
		public TerminalNode SPLIT_PART() { return getToken(PostgreSQLParser.SPLIT_PART, 0); }
		public TerminalNode STARTS_WITH() { return getToken(PostgreSQLParser.STARTS_WITH, 0); }
		public TerminalNode STRING_TO_ARRAY() { return getToken(PostgreSQLParser.STRING_TO_ARRAY, 0); }
		public TerminalNode STRING_TO_TABLE() { return getToken(PostgreSQLParser.STRING_TO_TABLE, 0); }
		public TerminalNode STRPOS() { return getToken(PostgreSQLParser.STRPOS, 0); }
		public TerminalNode SUBSTR() { return getToken(PostgreSQLParser.SUBSTR, 0); }
		public TerminalNode TO_ASCII() { return getToken(PostgreSQLParser.TO_ASCII, 0); }
		public TerminalNode TO_HEX() { return getToken(PostgreSQLParser.TO_HEX, 0); }
		public TerminalNode TRANSLATE() { return getToken(PostgreSQLParser.TRANSLATE, 0); }
		public TerminalNode UNISTR() { return getToken(PostgreSQLParser.UNISTR, 0); }
		public TerminalNode AGE() { return getToken(PostgreSQLParser.AGE, 0); }
		public TerminalNode DATE_BIN() { return getToken(PostgreSQLParser.DATE_BIN, 0); }
		public TerminalNode DATE_PART() { return getToken(PostgreSQLParser.DATE_PART, 0); }
		public TerminalNode DATE_TRUNC() { return getToken(PostgreSQLParser.DATE_TRUNC, 0); }
		public TerminalNode ISFINITE() { return getToken(PostgreSQLParser.ISFINITE, 0); }
		public TerminalNode JUSTIFY_DAYS() { return getToken(PostgreSQLParser.JUSTIFY_DAYS, 0); }
		public TerminalNode JUSTIFY_HOURS() { return getToken(PostgreSQLParser.JUSTIFY_HOURS, 0); }
		public TerminalNode JUSTIFY_INTERVAL() { return getToken(PostgreSQLParser.JUSTIFY_INTERVAL, 0); }
		public TerminalNode MAKE_DATE() { return getToken(PostgreSQLParser.MAKE_DATE, 0); }
		public TerminalNode MAKE_INTERVAL() { return getToken(PostgreSQLParser.MAKE_INTERVAL, 0); }
		public TerminalNode MAKE_TIME() { return getToken(PostgreSQLParser.MAKE_TIME, 0); }
		public TerminalNode MAKE_TIMESTAMP() { return getToken(PostgreSQLParser.MAKE_TIMESTAMP, 0); }
		public TerminalNode MAKE_TIMESTAMPTZ() { return getToken(PostgreSQLParser.MAKE_TIMESTAMPTZ, 0); }
		public TerminalNode CLOCK_TIMESTAMP() { return getToken(PostgreSQLParser.CLOCK_TIMESTAMP, 0); }
		public TerminalNode NOW() { return getToken(PostgreSQLParser.NOW, 0); }
		public TerminalNode STATEMENT_TIMESTAMP() { return getToken(PostgreSQLParser.STATEMENT_TIMESTAMP, 0); }
		public TerminalNode TIMEOFDAY() { return getToken(PostgreSQLParser.TIMEOFDAY, 0); }
		public TerminalNode TRANSACTION_TIMESTAMP() { return getToken(PostgreSQLParser.TRANSACTION_TIMESTAMP, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(PostgreSQLParser.TO_TIMESTAMP, 0); }
		public TerminalNode TO_CHAR() { return getToken(PostgreSQLParser.TO_CHAR, 0); }
		public TerminalNode TO_DATE() { return getToken(PostgreSQLParser.TO_DATE, 0); }
		public TerminalNode TO_NUMBER() { return getToken(PostgreSQLParser.TO_NUMBER, 0); }
		public Builtin_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtin_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBuiltin_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBuiltin_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBuiltin_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Builtin_function_nameContext builtin_function_name() throws RecognitionException {
		Builtin_function_nameContext _localctx = new Builtin_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_builtin_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9930);
			_la = _input.LA(1);
			if ( !(_la==LEFT || _la==RIGHT || _la==REPLACE || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & ((1L << (XMLCOMMENT - 418)) | (1L << (XMLAGG - 418)) | (1L << (XML_IS_WELL_FORMED - 418)) | (1L << (XML_IS_WELL_FORMED_DOCUMENT - 418)) | (1L << (XML_IS_WELL_FORMED_CONTENT - 418)) | (1L << (XPATH - 418)) | (1L << (XPATH_EXISTS - 418)))) != 0) || ((((_la - 504)) & ~0x3f) == 0 && ((1L << (_la - 504)) & ((1L << (REVERSE - 504)) | (1L << (LOG - 504)) | (1L << (ABS - 504)) | (1L << (CBRT - 504)) | (1L << (CEIL - 504)) | (1L << (CEILING - 504)) | (1L << (DEGREES - 504)) | (1L << (DIV - 504)) | (1L << (EXP - 504)) | (1L << (FACTORIAL - 504)) | (1L << (FLOOR - 504)) | (1L << (GCD - 504)) | (1L << (LCM - 504)) | (1L << (LN - 504)) | (1L << (LOG10 - 504)) | (1L << (MIN_SCALE - 504)) | (1L << (MOD - 504)) | (1L << (PI - 504)) | (1L << (POWER - 504)) | (1L << (RADIANS - 504)) | (1L << (ROUND - 504)) | (1L << (SCALE - 504)) | (1L << (SIGN - 504)) | (1L << (SQRT - 504)) | (1L << (TRIM_SCALE - 504)) | (1L << (TRUNC - 504)) | (1L << (WIDTH_BUCKET - 504)) | (1L << (RANDOM - 504)) | (1L << (SETSEED - 504)) | (1L << (ACOS - 504)) | (1L << (ACOSD - 504)) | (1L << (ASIN - 504)) | (1L << (ASIND - 504)) | (1L << (ATAN - 504)) | (1L << (ATAND - 504)) | (1L << (ATAN2 - 504)) | (1L << (ATAN2D - 504)) | (1L << (COS - 504)) | (1L << (COSD - 504)) | (1L << (COT - 504)) | (1L << (COTD - 504)) | (1L << (SIN - 504)) | (1L << (SIND - 504)) | (1L << (TAN - 504)) | (1L << (TAND - 504)) | (1L << (SINH - 504)) | (1L << (COSH - 504)) | (1L << (TANH - 504)) | (1L << (ASINH - 504)))) != 0) || ((((_la - 568)) & ~0x3f) == 0 && ((1L << (_la - 568)) & ((1L << (ACOSH - 568)) | (1L << (ATANH - 568)) | (1L << (BIT_LENGTH - 568)) | (1L << (CHAR_LENGTH - 568)) | (1L << (CHARACTER_LENGTH - 568)) | (1L << (LOWER - 568)) | (1L << (OCTET_LENGTH - 568)) | (1L << (UPPER - 568)) | (1L << (ASCII - 568)) | (1L << (BTRIM - 568)) | (1L << (CHR - 568)) | (1L << (CONCAT - 568)) | (1L << (CONCAT_WS - 568)) | (1L << (FORMAT - 568)) | (1L << (INITCAP - 568)) | (1L << (LENGTH - 568)) | (1L << (LPAD - 568)) | (1L << (LTRIM - 568)) | (1L << (MD5 - 568)) | (1L << (PARSE_IDENT - 568)) | (1L << (PG_CLIENT_ENCODING - 568)) | (1L << (QUOTE_IDENT - 568)) | (1L << (QUOTE_LITERAL - 568)) | (1L << (QUOTE_NULLABLE - 568)) | (1L << (REGEXP_COUNT - 568)) | (1L << (REGEXP_INSTR - 568)) | (1L << (REGEXP_LIKE - 568)) | (1L << (REGEXP_MATCH - 568)) | (1L << (REGEXP_MATCHES - 568)) | (1L << (REGEXP_REPLACE - 568)) | (1L << (REGEXP_SPLIT_TO_ARRAY - 568)) | (1L << (REGEXP_SPLIT_TO_TABLE - 568)) | (1L << (REGEXP_SUBSTR - 568)) | (1L << (REPEAT - 568)) | (1L << (RPAD - 568)) | (1L << (RTRIM - 568)) | (1L << (SPLIT_PART - 568)) | (1L << (STARTS_WITH - 568)) | (1L << (STRING_TO_ARRAY - 568)) | (1L << (STRING_TO_TABLE - 568)) | (1L << (STRPOS - 568)) | (1L << (SUBSTR - 568)) | (1L << (TO_ASCII - 568)) | (1L << (TO_HEX - 568)) | (1L << (TRANSLATE - 568)) | (1L << (UNISTR - 568)) | (1L << (AGE - 568)) | (1L << (CLOCK_TIMESTAMP - 568)) | (1L << (DATE_BIN - 568)) | (1L << (DATE_PART - 568)) | (1L << (DATE_TRUNC - 568)) | (1L << (ISFINITE - 568)) | (1L << (JUSTIFY_DAYS - 568)) | (1L << (JUSTIFY_HOURS - 568)) | (1L << (JUSTIFY_INTERVAL - 568)) | (1L << (MAKE_DATE - 568)) | (1L << (MAKE_INTERVAL - 568)) | (1L << (MAKE_TIME - 568)) | (1L << (MAKE_TIMESTAMP - 568)) | (1L << (MAKE_TIMESTAMPTZ - 568)) | (1L << (NOW - 568)) | (1L << (STATEMENT_TIMESTAMP - 568)) | (1L << (TIMEOFDAY - 568)) | (1L << (TRANSACTION_TIMESTAMP - 568)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TO_TIMESTAMP - 632)) | (1L << (TO_CHAR - 632)) | (1L << (TO_DATE - 632)) | (1L << (TO_NUMBER - 632)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_functionContext extends ParserRuleContext {
		public Comp_optionsContext comp_options() {
			return getRuleContext(Comp_optionsContext.class,0);
		}
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public Opt_semiContext opt_semi() {
			return getRuleContext(Opt_semiContext.class,0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_functionContext pl_function() throws RecognitionException {
		Pl_functionContext _localctx = new Pl_functionContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_pl_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9932);
			comp_options();
			setState(9933);
			pl_block();
			setState(9934);
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionsContext extends ParserRuleContext {
		public List<Comp_optionContext> comp_option() {
			return getRuleContexts(Comp_optionContext.class);
		}
		public Comp_optionContext comp_option(int i) {
			return getRuleContext(Comp_optionContext.class,i);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionsContext comp_options() throws RecognitionException {
		Comp_optionsContext _localctx = new Comp_optionsContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_comp_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Operator) {
				{
				{
				setState(9936);
				comp_option();
				}
				}
				setState(9941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_optionContext extends ParserRuleContext {
		public SharpContext sharp() {
			return getRuleContext(SharpContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public Option_valueContext option_value() {
			return getRuleContext(Option_valueContext.class,0);
		}
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComp_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComp_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComp_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comp_optionContext comp_option() throws RecognitionException {
		Comp_optionContext _localctx = new Comp_optionContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_comp_option);
		try {
			setState(9962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9942);
				sharp();
				setState(9943);
				match(OPTION);
				setState(9944);
				match(DUMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9946);
				sharp();
				setState(9947);
				match(PRINT_STRICT_PARAMS);
				setState(9948);
				option_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9950);
				sharp();
				setState(9951);
				match(VARIABLE_CONFLICT);
				setState(9952);
				match(ERROR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9954);
				sharp();
				setState(9955);
				match(VARIABLE_CONFLICT);
				setState(9956);
				match(USE_VARIABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9958);
				sharp();
				setState(9959);
				match(VARIABLE_CONFLICT);
				setState(9960);
				match(USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SharpContext extends ParserRuleContext {
		public TerminalNode Operator() { return getToken(PostgreSQLParser.Operator, 0); }
		public SharpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sharp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSharp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSharp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSharp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SharpContext sharp() throws RecognitionException {
		SharpContext _localctx = new SharpContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_sharp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9964);
			match(Operator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_valueContext extends ParserRuleContext {
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Option_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOption_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOption_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOption_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_valueContext option_value() throws RecognitionException {
		Option_valueContext _localctx = new Option_valueContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_option_value);
		try {
			setState(9970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9966);
				sconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9967);
				reserved_keyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9968);
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9969);
				unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_semiContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_semiContext opt_semi() throws RecognitionException {
		Opt_semiContext _localctx = new Opt_semiContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_opt_semi);
		try {
			setState(9974);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				setState(9973);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_blockContext extends ParserRuleContext {
		public Decl_sectContext decl_sect() {
			return getRuleContext(Decl_sectContext.class,0);
		}
		public TerminalNode BEGIN_P() { return getToken(PostgreSQLParser.BEGIN_P, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Exception_sectContext exception_sect() {
			return getRuleContext(Exception_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPl_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPl_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPl_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pl_blockContext pl_block() throws RecognitionException {
		Pl_blockContext _localctx = new Pl_blockContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_pl_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9976);
			decl_sect();
			setState(9977);
			match(BEGIN_P);
			setState(9978);
			proc_sect();
			setState(9979);
			exception_sect();
			setState(9980);
			match(END_P);
			setState(9981);
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_sectContext extends ParserRuleContext {
		public Opt_block_labelContext opt_block_label() {
			return getRuleContext(Opt_block_labelContext.class,0);
		}
		public Decl_startContext decl_start() {
			return getRuleContext(Decl_startContext.class,0);
		}
		public Decl_stmtsContext decl_stmts() {
			return getRuleContext(Decl_stmtsContext.class,0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_sectContext decl_sect() throws RecognitionException {
		Decl_sectContext _localctx = new Decl_sectContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_decl_sect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9983);
			opt_block_label();
			setState(9988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(9984);
				decl_start();
				setState(9986);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
				case 1:
					{
					setState(9985);
					decl_stmts();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_startContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_startContext decl_start() throws RecognitionException {
		Decl_startContext _localctx = new Decl_startContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_decl_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9990);
			match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtsContext extends ParserRuleContext {
		public List<Decl_stmtContext> decl_stmt() {
			return getRuleContexts(Decl_stmtContext.class);
		}
		public Decl_stmtContext decl_stmt(int i) {
			return getRuleContext(Decl_stmtContext.class,i);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtsContext decl_stmts() throws RecognitionException {
		Decl_stmtsContext _localctx = new Decl_stmtsContext(_ctx, getState());
		enterRule(_localctx, 1412, RULE_decl_stmts);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9993); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(9992);
					decl_stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9995); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,671,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(PostgreSQLParser.LESS_LESS, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLabel_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLabel_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLabel_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declContext label_decl() throws RecognitionException {
		Label_declContext _localctx = new Label_declContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_label_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9997);
			match(LESS_LESS);
			setState(9998);
			any_identifier();
			setState(9999);
			match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_stmtContext extends ParserRuleContext {
		public Decl_statementContext decl_statement() {
			return getRuleContext(Decl_statementContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_stmtContext decl_stmt() throws RecognitionException {
		Decl_stmtContext _localctx = new Decl_stmtContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_decl_stmt);
		try {
			setState(10004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10001);
				decl_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10002);
				match(DECLARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10003);
				label_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_statementContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_aliasitemContext decl_aliasitem() {
			return getRuleContext(Decl_aliasitemContext.class,0);
		}
		public Decl_constContext decl_const() {
			return getRuleContext(Decl_constContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_collateContext decl_collate() {
			return getRuleContext(Decl_collateContext.class,0);
		}
		public Decl_notnullContext decl_notnull() {
			return getRuleContext(Decl_notnullContext.class,0);
		}
		public Decl_defvalContext decl_defval() {
			return getRuleContext(Decl_defvalContext.class,0);
		}
		public Opt_scrollableContext opt_scrollable() {
			return getRuleContext(Opt_scrollableContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public Decl_cursor_argsContext decl_cursor_args() {
			return getRuleContext(Decl_cursor_argsContext.class,0);
		}
		public Decl_is_forContext decl_is_for() {
			return getRuleContext(Decl_is_forContext.class,0);
		}
		public Decl_cursor_queryContext decl_cursor_query() {
			return getRuleContext(Decl_cursor_queryContext.class,0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_statementContext decl_statement() throws RecognitionException {
		Decl_statementContext _localctx = new Decl_statementContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_decl_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10006);
			decl_varname();
			setState(10022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(10007);
				match(ALIAS);
				setState(10008);
				match(FOR);
				setState(10009);
				decl_aliasitem();
				}
				break;
			case 2:
				{
				setState(10010);
				decl_const();
				setState(10011);
				decl_datatype();
				setState(10012);
				decl_collate();
				setState(10013);
				decl_notnull();
				setState(10014);
				decl_defval();
				}
				break;
			case 3:
				{
				setState(10016);
				opt_scrollable();
				setState(10017);
				match(CURSOR);
				setState(10018);
				decl_cursor_args();
				setState(10019);
				decl_is_for();
				setState(10020);
				decl_cursor_query();
				}
				break;
			}
			setState(10024);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scrollableContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scrollable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scrollable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scrollable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scrollable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scrollableContext opt_scrollable() throws RecognitionException {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_opt_scrollable);
		try {
			setState(10030);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10027);
				match(NO);
				setState(10028);
				match(SCROLL);
				}
				break;
			case SCROLL:
				enterOuterAlt(_localctx, 3);
				{
				setState(10029);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_queryContext extends ParserRuleContext {
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_queryContext decl_cursor_query() throws RecognitionException {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_decl_cursor_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10032);
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_argsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Decl_cursor_arglistContext decl_cursor_arglist() {
			return getRuleContext(Decl_cursor_arglistContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_args; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_args(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_args(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_args(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argsContext decl_cursor_args() throws RecognitionException {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_decl_cursor_args);
		try {
			setState(10039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10035);
				match(OPEN_PAREN);
				setState(10036);
				decl_cursor_arglist();
				setState(10037);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_arglistContext extends ParserRuleContext {
		public List<Decl_cursor_argContext> decl_cursor_arg() {
			return getRuleContexts(Decl_cursor_argContext.class);
		}
		public Decl_cursor_argContext decl_cursor_arg(int i) {
			return getRuleContext(Decl_cursor_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arglist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arglist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arglist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arglist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_arglistContext decl_cursor_arglist() throws RecognitionException {
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_decl_cursor_arglist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10041);
			decl_cursor_arg();
			setState(10046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10042);
				match(COMMA);
				setState(10043);
				decl_cursor_arg();
				}
				}
				setState(10048);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_cursor_argContext extends ParserRuleContext {
		public Decl_varnameContext decl_varname() {
			return getRuleContext(Decl_varnameContext.class,0);
		}
		public Decl_datatypeContext decl_datatype() {
			return getRuleContext(Decl_datatypeContext.class,0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_cursor_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_cursor_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_cursor_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_cursor_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_cursor_argContext decl_cursor_arg() throws RecognitionException {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_decl_cursor_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10049);
			decl_varname();
			setState(10050);
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_is_forContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_is_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_is_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_is_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_is_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_is_forContext decl_is_for() throws RecognitionException {
		Decl_is_forContext _localctx = new Decl_is_forContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_decl_is_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10052);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_aliasitemContext extends ParserRuleContext {
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_aliasitem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_aliasitem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_aliasitem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_aliasitem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_aliasitemContext decl_aliasitem() throws RecognitionException {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(_ctx, getState());
		enterRule(_localctx, 1432, RULE_decl_aliasitem);
		try {
			setState(10056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(10054);
				match(PARAM);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10055);
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_varnameContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_varname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_varname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_varname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_varname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_varnameContext decl_varname() throws RecognitionException {
		Decl_varnameContext _localctx = new Decl_varnameContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_decl_varname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10058);
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_constContext extends ParserRuleContext {
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_constContext decl_const() throws RecognitionException {
		Decl_constContext _localctx = new Decl_constContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_decl_const);
		try {
			setState(10062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10061);
				match(CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_datatypeContext extends ParserRuleContext {
		public TypenameContext typename() {
			return getRuleContext(TypenameContext.class,0);
		}
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_datatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_datatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_datatypeContext decl_datatype() throws RecognitionException {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_decl_datatype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10064);
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_collateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public Decl_collateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_collate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_collate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_collate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_collateContext decl_collate() throws RecognitionException {
		Decl_collateContext _localctx = new Decl_collateContext(_ctx, getState());
		enterRule(_localctx, 1440, RULE_decl_collate);
		try {
			setState(10069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10067);
				match(COLLATE);
				setState(10068);
				any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_notnullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_notnullContext decl_notnull() throws RecognitionException {
		Decl_notnullContext _localctx = new Decl_notnullContext(_ctx, getState());
		enterRule(_localctx, 1442, RULE_decl_notnull);
		try {
			setState(10074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10072);
				match(NOT);
				setState(10073);
				match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defvalContext extends ParserRuleContext {
		public Decl_defkeyContext decl_defkey() {
			return getRuleContext(Decl_defkeyContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defvalContext decl_defval() throws RecognitionException {
		Decl_defvalContext _localctx = new Decl_defvalContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_decl_defval);
		try {
			setState(10080);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10077);
				decl_defkey();
				setState(10078);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decl_defkeyContext extends ParserRuleContext {
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decl_defkey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDecl_defkey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDecl_defkey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDecl_defkey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decl_defkeyContext decl_defkey() throws RecognitionException {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_decl_defkey);
		try {
			setState(10084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
			case COLON_EQUALS:
				enterOuterAlt(_localctx, 1);
				{
				setState(10082);
				assign_operator();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10083);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_operatorContext assign_operator() throws RecognitionException {
		Assign_operatorContext _localctx = new Assign_operatorContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_assign_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10086);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUALS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_sectContext extends ParserRuleContext {
		public List<Proc_stmtContext> proc_stmt() {
			return getRuleContexts(Proc_stmtContext.class);
		}
		public Proc_stmtContext proc_stmt(int i) {
			return getRuleContext(Proc_stmtContext.class,i);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_sectContext proc_sect() throws RecognitionException {
		Proc_sectContext _localctx = new Proc_sectContext(_ctx, getState());
		enterRule(_localctx, 1450, RULE_proc_sect);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10091);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,683,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10088);
					proc_stmt();
					}
					} 
				}
				setState(10093);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,683,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_stmtContext extends ParserRuleContext {
		public Pl_blockContext pl_block() {
			return getRuleContext(Pl_blockContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_returnContext stmt_return() {
			return getRuleContext(Stmt_returnContext.class,0);
		}
		public Stmt_raiseContext stmt_raise() {
			return getRuleContext(Stmt_raiseContext.class,0);
		}
		public Stmt_assignContext stmt_assign() {
			return getRuleContext(Stmt_assignContext.class,0);
		}
		public Stmt_ifContext stmt_if() {
			return getRuleContext(Stmt_ifContext.class,0);
		}
		public Stmt_caseContext stmt_case() {
			return getRuleContext(Stmt_caseContext.class,0);
		}
		public Stmt_loopContext stmt_loop() {
			return getRuleContext(Stmt_loopContext.class,0);
		}
		public Stmt_whileContext stmt_while() {
			return getRuleContext(Stmt_whileContext.class,0);
		}
		public Stmt_forContext stmt_for() {
			return getRuleContext(Stmt_forContext.class,0);
		}
		public Stmt_foreach_aContext stmt_foreach_a() {
			return getRuleContext(Stmt_foreach_aContext.class,0);
		}
		public Stmt_exitContext stmt_exit() {
			return getRuleContext(Stmt_exitContext.class,0);
		}
		public Stmt_assertContext stmt_assert() {
			return getRuleContext(Stmt_assertContext.class,0);
		}
		public Stmt_execsqlContext stmt_execsql() {
			return getRuleContext(Stmt_execsqlContext.class,0);
		}
		public Stmt_dynexecuteContext stmt_dynexecute() {
			return getRuleContext(Stmt_dynexecuteContext.class,0);
		}
		public Stmt_performContext stmt_perform() {
			return getRuleContext(Stmt_performContext.class,0);
		}
		public Stmt_callContext stmt_call() {
			return getRuleContext(Stmt_callContext.class,0);
		}
		public Stmt_getdiagContext stmt_getdiag() {
			return getRuleContext(Stmt_getdiagContext.class,0);
		}
		public Stmt_openContext stmt_open() {
			return getRuleContext(Stmt_openContext.class,0);
		}
		public Stmt_fetchContext stmt_fetch() {
			return getRuleContext(Stmt_fetchContext.class,0);
		}
		public Stmt_moveContext stmt_move() {
			return getRuleContext(Stmt_moveContext.class,0);
		}
		public Stmt_closeContext stmt_close() {
			return getRuleContext(Stmt_closeContext.class,0);
		}
		public Stmt_nullContext stmt_null() {
			return getRuleContext(Stmt_nullContext.class,0);
		}
		public Stmt_commitContext stmt_commit() {
			return getRuleContext(Stmt_commitContext.class,0);
		}
		public Stmt_rollbackContext stmt_rollback() {
			return getRuleContext(Stmt_rollbackContext.class,0);
		}
		public Stmt_setContext stmt_set() {
			return getRuleContext(Stmt_setContext.class,0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_proc_stmt);
		try {
			setState(10121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10094);
				pl_block();
				setState(10095);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10097);
				stmt_return();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10098);
				stmt_raise();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10099);
				stmt_assign();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10100);
				stmt_if();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10101);
				stmt_case();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10102);
				stmt_loop();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10103);
				stmt_while();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10104);
				stmt_for();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10105);
				stmt_foreach_a();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10106);
				stmt_exit();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10107);
				stmt_assert();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10108);
				stmt_execsql();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10109);
				stmt_dynexecute();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10110);
				stmt_perform();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10111);
				stmt_call();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10112);
				stmt_getdiag();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10113);
				stmt_open();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10114);
				stmt_fetch();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10115);
				stmt_move();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10116);
				stmt_close();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10117);
				stmt_null();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10118);
				stmt_commit();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10119);
				stmt_rollback();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10120);
				stmt_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_performContext extends ParserRuleContext {
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_performContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_perform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_perform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_perform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_perform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_performContext stmt_perform() throws RecognitionException {
		Stmt_performContext _localctx = new Stmt_performContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_stmt_perform);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10123);
			match(PERFORM);
			setState(10124);
			expr_until_semi();
			setState(10125);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_callContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_expr_listContext opt_expr_list() {
			return getRuleContext(Opt_expr_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Stmt_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_callContext stmt_call() throws RecognitionException {
		Stmt_callContext _localctx = new Stmt_callContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_stmt_call);
		try {
			setState(10141);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10127);
				match(CALL);
				setState(10128);
				any_identifier();
				setState(10129);
				match(OPEN_PAREN);
				setState(10130);
				opt_expr_list();
				setState(10131);
				match(CLOSE_PAREN);
				setState(10132);
				match(SEMI);
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10134);
				match(DO);
				setState(10135);
				any_identifier();
				setState(10136);
				match(OPEN_PAREN);
				setState(10137);
				opt_expr_list();
				setState(10138);
				match(CLOSE_PAREN);
				setState(10139);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_listContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_listContext opt_expr_list() throws RecognitionException {
		Opt_expr_listContext _localctx = new Opt_expr_listContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_opt_expr_list);
		try {
			setState(10145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(10144);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assignContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assignContext stmt_assign() throws RecognitionException {
		Stmt_assignContext _localctx = new Stmt_assignContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_stmt_assign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10147);
			assign_var();
			setState(10148);
			assign_operator();
			setState(10149);
			sql_expression();
			setState(10150);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_getdiagContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public Getdiag_area_optContext getdiag_area_opt() {
			return getRuleContext(Getdiag_area_optContext.class,0);
		}
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public Getdiag_listContext getdiag_list() {
			return getRuleContext(Getdiag_listContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_getdiag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_getdiag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_getdiag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_getdiag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_getdiagContext stmt_getdiag() throws RecognitionException {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_stmt_getdiag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10152);
			match(GET);
			setState(10153);
			getdiag_area_opt();
			setState(10154);
			match(DIAGNOSTICS);
			setState(10155);
			getdiag_list();
			setState(10156);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_area_optContext extends ParserRuleContext {
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_area_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_area_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_area_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_area_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_area_optContext getdiag_area_opt() throws RecognitionException {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_getdiag_area_opt);
		try {
			setState(10161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DIAGNOSTICS:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CURRENT_P:
				enterOuterAlt(_localctx, 2);
				{
				setState(10159);
				match(CURRENT_P);
				}
				break;
			case STACKED:
				enterOuterAlt(_localctx, 3);
				{
				setState(10160);
				match(STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_listContext extends ParserRuleContext {
		public List<Getdiag_list_itemContext> getdiag_list_item() {
			return getRuleContexts(Getdiag_list_itemContext.class);
		}
		public Getdiag_list_itemContext getdiag_list_item(int i) {
			return getRuleContext(Getdiag_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Getdiag_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_listContext getdiag_list() throws RecognitionException {
		Getdiag_listContext _localctx = new Getdiag_listContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_getdiag_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10163);
			getdiag_list_item();
			setState(10168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10164);
				match(COMMA);
				setState(10165);
				getdiag_list_item();
				}
				}
				setState(10170);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_list_itemContext extends ParserRuleContext {
		public Getdiag_targetContext getdiag_target() {
			return getRuleContext(Getdiag_targetContext.class,0);
		}
		public Assign_operatorContext assign_operator() {
			return getRuleContext(Assign_operatorContext.class,0);
		}
		public Getdiag_itemContext getdiag_item() {
			return getRuleContext(Getdiag_itemContext.class,0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_list_itemContext getdiag_list_item() throws RecognitionException {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_getdiag_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10171);
			getdiag_target();
			setState(10172);
			assign_operator();
			setState(10173);
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_itemContext getdiag_item() throws RecognitionException {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_getdiag_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10175);
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Getdiag_targetContext extends ParserRuleContext {
		public Assign_varContext assign_var() {
			return getRuleContext(Assign_varContext.class,0);
		}
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getdiag_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGetdiag_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGetdiag_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGetdiag_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Getdiag_targetContext getdiag_target() throws RecognitionException {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_getdiag_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10177);
			assign_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_varContext extends ParserRuleContext {
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<Expr_until_rightbracketContext> expr_until_rightbracket() {
			return getRuleContexts(Expr_until_rightbracketContext.class);
		}
		public Expr_until_rightbracketContext expr_until_rightbracket(int i) {
			return getRuleContext(Expr_until_rightbracketContext.class,i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public Assign_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAssign_var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAssign_var(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAssign_var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assign_varContext assign_var() throws RecognitionException {
		Assign_varContext _localctx = new Assign_varContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_assign_var);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10181);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				setState(10179);
				any_name();
				}
				break;
			case PARAM:
				{
				setState(10180);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				setState(10183);
				match(OPEN_BRACKET);
				setState(10184);
				expr_until_rightbracket();
				setState(10185);
				match(CLOSE_BRACKET);
				}
				}
				setState(10191);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_ifContext extends ParserRuleContext {
		public List<TerminalNode> IF_P() { return getTokens(PostgreSQLParser.IF_P); }
		public TerminalNode IF_P(int i) {
			return getToken(PostgreSQLParser.IF_P, i);
		}
		public Expr_until_thenContext expr_until_then() {
			return getRuleContext(Expr_until_thenContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elsifsContext stmt_elsifs() {
			return getRuleContext(Stmt_elsifsContext.class,0);
		}
		public Stmt_elseContext stmt_else() {
			return getRuleContext(Stmt_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_if; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_if(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_if(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_if(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_ifContext stmt_if() throws RecognitionException {
		Stmt_ifContext _localctx = new Stmt_ifContext(_ctx, getState());
		enterRule(_localctx, 1476, RULE_stmt_if);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10192);
			match(IF_P);
			setState(10193);
			expr_until_then();
			setState(10194);
			match(THEN);
			setState(10195);
			proc_sect();
			setState(10196);
			stmt_elsifs();
			setState(10197);
			stmt_else();
			setState(10198);
			match(END_P);
			setState(10199);
			match(IF_P);
			setState(10200);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elsifsContext extends ParserRuleContext {
		public List<TerminalNode> ELSIF() { return getTokens(PostgreSQLParser.ELSIF); }
		public TerminalNode ELSIF(int i) {
			return getToken(PostgreSQLParser.ELSIF, i);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(PostgreSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PostgreSQLParser.THEN, i);
		}
		public List<Proc_sectContext> proc_sect() {
			return getRuleContexts(Proc_sectContext.class);
		}
		public Proc_sectContext proc_sect(int i) {
			return getRuleContext(Proc_sectContext.class,i);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_elsifs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_elsifs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_elsifs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_elsifs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elsifsContext stmt_elsifs() throws RecognitionException {
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(_ctx, getState());
		enterRule(_localctx, 1478, RULE_stmt_elsifs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(10202);
				match(ELSIF);
				setState(10203);
				a_expr();
				setState(10204);
				match(THEN);
				setState(10205);
				proc_sect();
				}
				}
				setState(10211);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_elseContext stmt_else() throws RecognitionException {
		Stmt_elseContext _localctx = new Stmt_elseContext(_ctx, getState());
		enterRule(_localctx, 1480, RULE_stmt_else);
		try {
			setState(10215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10213);
				match(ELSE);
				setState(10214);
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_caseContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(PostgreSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PostgreSQLParser.CASE, i);
		}
		public Opt_expr_until_whenContext opt_expr_until_when() {
			return getRuleContext(Opt_expr_until_whenContext.class,0);
		}
		public Case_when_listContext case_when_list() {
			return getRuleContext(Case_when_listContext.class,0);
		}
		public Opt_case_elseContext opt_case_else() {
			return getRuleContext(Opt_case_elseContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_caseContext stmt_case() throws RecognitionException {
		Stmt_caseContext _localctx = new Stmt_caseContext(_ctx, getState());
		enterRule(_localctx, 1482, RULE_stmt_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10217);
			match(CASE);
			setState(10218);
			opt_expr_until_when();
			setState(10219);
			case_when_list();
			setState(10220);
			opt_case_else();
			setState(10221);
			match(END_P);
			setState(10222);
			match(CASE);
			setState(10223);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_expr_until_whenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_expr_until_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_expr_until_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_expr_until_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_expr_until_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_expr_until_whenContext opt_expr_until_when() throws RecognitionException {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(_ctx, getState());
		enterRule(_localctx, 1484, RULE_opt_expr_until_when);
		try {
			setState(10227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10226);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_when_listContext extends ParserRuleContext {
		public List<Case_whenContext> case_when() {
			return getRuleContexts(Case_whenContext.class);
		}
		public Case_whenContext case_when(int i) {
			return getRuleContext(Case_whenContext.class,i);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_when_listContext case_when_list() throws RecognitionException {
		Case_when_listContext _localctx = new Case_when_listContext(_ctx, getState());
		enterRule(_localctx, 1486, RULE_case_when_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10230); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(10229);
				case_when();
				}
				}
				setState(10232); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_whenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_when; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_when(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_when(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_when(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_whenContext case_when() throws RecognitionException {
		Case_whenContext _localctx = new Case_whenContext(_ctx, getState());
		enterRule(_localctx, 1488, RULE_case_when);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10234);
			match(WHEN);
			setState(10235);
			expr_list();
			setState(10236);
			match(THEN);
			setState(10237);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_case_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_case_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_case_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_case_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_case_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_case_elseContext opt_case_else() throws RecognitionException {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(_ctx, getState());
		enterRule(_localctx, 1490, RULE_opt_case_else);
		try {
			setState(10242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10240);
				match(ELSE);
				setState(10241);
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_loopContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_loopContext stmt_loop() throws RecognitionException {
		Stmt_loopContext _localctx = new Stmt_loopContext(_ctx, getState());
		enterRule(_localctx, 1492, RULE_stmt_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10244);
			opt_loop_label();
			setState(10245);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_whileContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode WHILE() { return getToken(PostgreSQLParser.WHILE, 0); }
		public Expr_until_loopContext expr_until_loop() {
			return getRuleContext(Expr_until_loopContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_while; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_while(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_while(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_while(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_whileContext stmt_while() throws RecognitionException {
		Stmt_whileContext _localctx = new Stmt_whileContext(_ctx, getState());
		enterRule(_localctx, 1494, RULE_stmt_while);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10247);
			opt_loop_label();
			setState(10248);
			match(WHILE);
			setState(10249);
			expr_until_loop();
			setState(10250);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_forContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public For_controlContext for_control() {
			return getRuleContext(For_controlContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_forContext stmt_for() throws RecognitionException {
		Stmt_forContext _localctx = new Stmt_forContext(_ctx, getState());
		enterRule(_localctx, 1496, RULE_stmt_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10252);
			opt_loop_label();
			setState(10253);
			match(FOR);
			setState(10254);
			for_control();
			setState(10255);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_controlContext extends ParserRuleContext {
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Opt_cursor_parametersContext opt_cursor_parameters() {
			return getRuleContext(Opt_cursor_parametersContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public ExplainstmtContext explainstmt() {
			return getRuleContext(ExplainstmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public Opt_reverseContext opt_reverse() {
			return getRuleContext(Opt_reverseContext.class,0);
		}
		public TerminalNode DOT_DOT() { return getToken(PostgreSQLParser.DOT_DOT, 0); }
		public Opt_by_expressionContext opt_by_expression() {
			return getRuleContext(Opt_by_expressionContext.class,0);
		}
		public For_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_control; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_control(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_control(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_control(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_controlContext for_control() throws RecognitionException {
		For_controlContext _localctx = new For_controlContext(_ctx, getState());
		enterRule(_localctx, 1498, RULE_for_control);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10257);
			for_variable();
			setState(10258);
			match(IN_P);
			setState(10274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				{
				setState(10259);
				cursor_name();
				setState(10260);
				opt_cursor_parameters();
				}
				break;
			case 2:
				{
				setState(10262);
				selectstmt();
				}
				break;
			case 3:
				{
				setState(10263);
				explainstmt();
				}
				break;
			case 4:
				{
				setState(10264);
				match(EXECUTE);
				setState(10265);
				a_expr();
				setState(10266);
				opt_for_using_expression();
				}
				break;
			case 5:
				{
				setState(10268);
				opt_reverse();
				setState(10269);
				a_expr();
				setState(10270);
				match(DOT_DOT);
				setState(10271);
				a_expr();
				setState(10272);
				opt_by_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_using_expressionContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_for_using_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_using_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_for_using_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_for_using_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_for_using_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_for_using_expressionContext opt_for_using_expression() throws RecognitionException {
		Opt_for_using_expressionContext _localctx = new Opt_for_using_expressionContext(_ctx, getState());
		enterRule(_localctx, 1500, RULE_opt_for_using_expression);
		try {
			setState(10279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10277);
				match(USING);
				setState(10278);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_cursor_parametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_cursor_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_parametersContext opt_cursor_parameters() throws RecognitionException {
		Opt_cursor_parametersContext _localctx = new Opt_cursor_parametersContext(_ctx, getState());
		enterRule(_localctx, 1502, RULE_opt_cursor_parameters);
		int _la;
		try {
			setState(10293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10282);
				match(OPEN_PAREN);
				setState(10283);
				a_expr();
				setState(10288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(10284);
					match(COMMA);
					setState(10285);
					a_expr();
					}
					}
					setState(10290);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(10291);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reverseContext extends ParserRuleContext {
		public TerminalNode REVERSE() { return getToken(PostgreSQLParser.REVERSE, 0); }
		public Opt_reverseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reverse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_reverse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_reverse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_reverse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_reverseContext opt_reverse() throws RecognitionException {
		Opt_reverseContext _localctx = new Opt_reverseContext(_ctx, getState());
		enterRule(_localctx, 1504, RULE_opt_reverse);
		try {
			setState(10297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10296);
				match(REVERSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_by_expressionContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_by_expressionContext opt_by_expression() throws RecognitionException {
		Opt_by_expressionContext _localctx = new Opt_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 1506, RULE_opt_by_expression);
		try {
			setState(10302);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(10300);
				match(BY);
				setState(10301);
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_variableContext extends ParserRuleContext {
		public Any_name_listContext any_name_list() {
			return getRuleContext(Any_name_listContext.class,0);
		}
		public For_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_variableContext for_variable() throws RecognitionException {
		For_variableContext _localctx = new For_variableContext(_ctx, getState());
		enterRule(_localctx, 1508, RULE_for_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10304);
			any_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_foreach_aContext extends ParserRuleContext {
		public Opt_loop_labelContext opt_loop_label() {
			return getRuleContext(Opt_loop_labelContext.class,0);
		}
		public TerminalNode FOREACH() { return getToken(PostgreSQLParser.FOREACH, 0); }
		public For_variableContext for_variable() {
			return getRuleContext(For_variableContext.class,0);
		}
		public Foreach_sliceContext foreach_slice() {
			return getRuleContext(Foreach_sliceContext.class,0);
		}
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Loop_bodyContext loop_body() {
			return getRuleContext(Loop_bodyContext.class,0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_foreach_a; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_foreach_a(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_foreach_a(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_foreach_a(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_foreach_aContext stmt_foreach_a() throws RecognitionException {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(_ctx, getState());
		enterRule(_localctx, 1510, RULE_stmt_foreach_a);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10306);
			opt_loop_label();
			setState(10307);
			match(FOREACH);
			setState(10308);
			for_variable();
			setState(10309);
			foreach_slice();
			setState(10310);
			match(IN_P);
			setState(10311);
			match(ARRAY);
			setState(10312);
			a_expr();
			setState(10313);
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreach_sliceContext extends ParserRuleContext {
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public IconstContext iconst() {
			return getRuleContext(IconstContext.class,0);
		}
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreach_slice; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterForeach_slice(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitForeach_slice(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitForeach_slice(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreach_sliceContext foreach_slice() throws RecognitionException {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(_ctx, getState());
		enterRule(_localctx, 1512, RULE_foreach_slice);
		try {
			setState(10318);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SLICE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10316);
				match(SLICE);
				setState(10317);
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_exitContext extends ParserRuleContext {
		public Exit_typeContext exit_type() {
			return getRuleContext(Exit_typeContext.class,0);
		}
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public Opt_exitcondContext opt_exitcond() {
			return getRuleContext(Opt_exitcondContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_exitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_exit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_exit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_exit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_exit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_exitContext stmt_exit() throws RecognitionException {
		Stmt_exitContext _localctx = new Stmt_exitContext(_ctx, getState());
		enterRule(_localctx, 1514, RULE_stmt_exit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10320);
			exit_type();
			setState(10321);
			opt_label();
			setState(10322);
			opt_exitcond();
			setState(10323);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_typeContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExit_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExit_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_typeContext exit_type() throws RecognitionException {
		Exit_typeContext _localctx = new Exit_typeContext(_ctx, getState());
		enterRule(_localctx, 1516, RULE_exit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10325);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_P || _la==EXIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_returnContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public Opt_return_resultContext opt_return_result() {
			return getRuleContext(Opt_return_resultContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_for_using_expressionContext opt_for_using_expression() {
			return getRuleContext(Opt_for_using_expressionContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_returnContext stmt_return() throws RecognitionException {
		Stmt_returnContext _localctx = new Stmt_returnContext(_ctx, getState());
		enterRule(_localctx, 1518, RULE_stmt_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10327);
			match(RETURN);
			setState(10339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				setState(10328);
				match(NEXT);
				setState(10329);
				sql_expression();
				}
				break;
			case 2:
				{
				setState(10330);
				match(QUERY);
				setState(10336);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(10331);
					match(EXECUTE);
					setState(10332);
					a_expr();
					setState(10333);
					opt_for_using_expression();
					}
					break;
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					setState(10335);
					selectstmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(10338);
				opt_return_result();
				}
				break;
			}
			setState(10341);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_return_resultContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_return_resultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_return_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_return_result(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_return_result(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_return_result(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_return_resultContext opt_return_result() throws RecognitionException {
		Opt_return_resultContext _localctx = new Opt_return_resultContext(_ctx, getState());
		enterRule(_localctx, 1520, RULE_opt_return_result);
		try {
			setState(10345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10344);
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_raiseContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
			return getRuleContext(Opt_stmt_raise_levelContext.class,0);
		}
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Opt_raise_listContext opt_raise_list() {
			return getRuleContext(Opt_raise_listContext.class,0);
		}
		public Opt_raise_usingContext opt_raise_using() {
			return getRuleContext(Opt_raise_usingContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_raise; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_raise(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_raise(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_raise(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_raiseContext stmt_raise() throws RecognitionException {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(_ctx, getState());
		enterRule(_localctx, 1522, RULE_stmt_raise);
		try {
			setState(10373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10347);
				match(RAISE);
				setState(10348);
				opt_stmt_raise_level();
				setState(10349);
				sconst();
				setState(10350);
				opt_raise_list();
				setState(10351);
				opt_raise_using();
				setState(10352);
				match(SEMI);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10354);
				match(RAISE);
				setState(10355);
				opt_stmt_raise_level();
				setState(10356);
				identifier();
				setState(10357);
				opt_raise_using();
				setState(10358);
				match(SEMI);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10360);
				match(RAISE);
				setState(10361);
				opt_stmt_raise_level();
				setState(10362);
				match(SQLSTATE);
				setState(10363);
				sconst();
				setState(10364);
				opt_raise_using();
				setState(10365);
				match(SEMI);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10367);
				match(RAISE);
				setState(10368);
				opt_stmt_raise_level();
				setState(10369);
				opt_raise_using();
				setState(10370);
				match(SEMI);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10372);
				match(RAISE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_stmt_raise_levelContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode LOG() { return getToken(PostgreSQLParser.LOG, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Opt_stmt_raise_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_raise_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_raise_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_raise_level(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_raise_level(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_raise_levelContext opt_stmt_raise_level() throws RecognitionException {
		Opt_stmt_raise_levelContext _localctx = new Opt_stmt_raise_levelContext(_ctx, getState());
		enterRule(_localctx, 1524, RULE_opt_stmt_raise_level);
		try {
			setState(10383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10377);
				match(DEBUG);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10378);
				match(LOG);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10379);
				match(INFO);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10380);
				match(NOTICE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10381);
				match(WARNING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10382);
				match(EXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public Opt_raise_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_listContext opt_raise_list() throws RecognitionException {
		Opt_raise_listContext _localctx = new Opt_raise_listContext(_ctx, getState());
		enterRule(_localctx, 1526, RULE_opt_raise_list);
		int _la;
		try {
			setState(10392);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(10388); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(10386);
					match(COMMA);
					setState(10387);
					a_expr();
					}
					}
					setState(10390); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return getRuleContext(Opt_raise_using_elem_listContext.class,0);
		}
		public Opt_raise_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_usingContext opt_raise_using() throws RecognitionException {
		Opt_raise_usingContext _localctx = new Opt_raise_usingContext(_ctx, getState());
		enterRule(_localctx, 1528, RULE_opt_raise_using);
		try {
			setState(10397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10395);
				match(USING);
				setState(10396);
				opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_using_elemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_raise_using_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elemContext opt_raise_using_elem() throws RecognitionException {
		Opt_raise_using_elemContext _localctx = new Opt_raise_using_elemContext(_ctx, getState());
		enterRule(_localctx, 1530, RULE_opt_raise_using_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10399);
			identifier();
			setState(10400);
			match(EQUAL);
			setState(10401);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_raise_using_elem_listContext extends ParserRuleContext {
		public List<Opt_raise_using_elemContext> opt_raise_using_elem() {
			return getRuleContexts(Opt_raise_using_elemContext.class);
		}
		public Opt_raise_using_elemContext opt_raise_using_elem(int i) {
			return getRuleContext(Opt_raise_using_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_raise_using_elem_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_raise_using_elem_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_raise_using_elem_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_raise_using_elem_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_raise_using_elem_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_raise_using_elem_listContext opt_raise_using_elem_list() throws RecognitionException {
		Opt_raise_using_elem_listContext _localctx = new Opt_raise_using_elem_listContext(_ctx, getState());
		enterRule(_localctx, 1532, RULE_opt_raise_using_elem_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10403);
			opt_raise_using_elem();
			setState(10408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10404);
				match(COMMA);
				setState(10405);
				opt_raise_using_elem();
				}
				}
				setState(10410);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_assertContext extends ParserRuleContext {
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
			return getRuleContext(Opt_stmt_assert_messageContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_assert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_assert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_assert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_assert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_assertContext stmt_assert() throws RecognitionException {
		Stmt_assertContext _localctx = new Stmt_assertContext(_ctx, getState());
		enterRule(_localctx, 1534, RULE_stmt_assert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10411);
			match(ASSERT);
			setState(10412);
			sql_expression();
			setState(10413);
			opt_stmt_assert_message();
			setState(10414);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_stmt_assert_messageContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_stmt_assert_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_stmt_assert_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_stmt_assert_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_stmt_assert_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_stmt_assert_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_stmt_assert_messageContext opt_stmt_assert_message() throws RecognitionException {
		Opt_stmt_assert_messageContext _localctx = new Opt_stmt_assert_messageContext(_ctx, getState());
		enterRule(_localctx, 1536, RULE_opt_stmt_assert_message);
		try {
			setState(10419);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(10417);
				match(COMMA);
				setState(10418);
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_bodyContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PostgreSQLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PostgreSQLParser.LOOP, i);
		}
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public TerminalNode END_P() { return getToken(PostgreSQLParser.END_P, 0); }
		public Opt_labelContext opt_label() {
			return getRuleContext(Opt_labelContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoop_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoop_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoop_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_bodyContext loop_body() throws RecognitionException {
		Loop_bodyContext _localctx = new Loop_bodyContext(_ctx, getState());
		enterRule(_localctx, 1538, RULE_loop_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10421);
			match(LOOP);
			setState(10422);
			proc_sect();
			setState(10423);
			match(END_P);
			setState(10424);
			match(LOOP);
			setState(10425);
			opt_label();
			setState(10426);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_execsqlContext extends ParserRuleContext {
		public Make_execsql_stmtContext make_execsql_stmt() {
			return getRuleContext(Make_execsql_stmtContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_execsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_execsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_execsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_execsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_execsqlContext stmt_execsql() throws RecognitionException {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(_ctx, getState());
		enterRule(_localctx, 1540, RULE_stmt_execsql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10428);
			make_execsql_stmt();
			setState(10429);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_dynexecuteContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_execute_intoContext opt_execute_into() {
			return getRuleContext(Opt_execute_intoContext.class,0);
		}
		public Opt_execute_usingContext opt_execute_using() {
			return getRuleContext(Opt_execute_usingContext.class,0);
		}
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_dynexecute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_dynexecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_dynexecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_dynexecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_dynexecuteContext stmt_dynexecute() throws RecognitionException {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(_ctx, getState());
		enterRule(_localctx, 1542, RULE_stmt_dynexecute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10431);
			match(EXECUTE);
			setState(10432);
			a_expr();
			setState(10440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(10433);
				opt_execute_into();
				setState(10434);
				opt_execute_using();
				}
				break;
			case 2:
				{
				setState(10436);
				opt_execute_using();
				setState(10437);
				opt_execute_into();
				}
				break;
			case 3:
				{
				}
				break;
			}
			setState(10442);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Opt_execute_using_listContext opt_execute_using_list() {
			return getRuleContext(Opt_execute_using_listContext.class,0);
		}
		public Opt_execute_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_usingContext opt_execute_using() throws RecognitionException {
		Opt_execute_usingContext _localctx = new Opt_execute_usingContext(_ctx, getState());
		enterRule(_localctx, 1544, RULE_opt_execute_using);
		try {
			setState(10447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10445);
				match(USING);
				setState(10446);
				opt_execute_using_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_using_listContext extends ParserRuleContext {
		public List<A_exprContext> a_expr() {
			return getRuleContexts(A_exprContext.class);
		}
		public A_exprContext a_expr(int i) {
			return getRuleContext(A_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_execute_using_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_using_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_using_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_using_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_using_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_using_listContext opt_execute_using_list() throws RecognitionException {
		Opt_execute_using_listContext _localctx = new Opt_execute_using_listContext(_ctx, getState());
		enterRule(_localctx, 1546, RULE_opt_execute_using_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10449);
			a_expr();
			setState(10454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10450);
				match(COMMA);
				setState(10451);
				a_expr();
				}
				}
				setState(10456);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_execute_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public TerminalNode STRICT_P() { return getToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_execute_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_execute_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_execute_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_execute_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_execute_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_execute_intoContext opt_execute_into() throws RecognitionException {
		Opt_execute_intoContext _localctx = new Opt_execute_intoContext(_ctx, getState());
		enterRule(_localctx, 1548, RULE_opt_execute_into);
		try {
			setState(10463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case INTO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10458);
				match(INTO);
				setState(10460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(10459);
					match(STRICT_P);
					}
					break;
				}
				setState(10462);
				into_target();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_openContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public Opt_scroll_optionContext opt_scroll_option() {
			return getRuleContext(Opt_scroll_optionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public SelectstmtContext selectstmt() {
			return getRuleContext(SelectstmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Opt_open_usingContext opt_open_using() {
			return getRuleContext(Opt_open_usingContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Opt_open_bound_listContext opt_open_bound_list() {
			return getRuleContext(Opt_open_bound_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Stmt_openContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_open; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_open(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_open(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_open(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_openContext stmt_open() throws RecognitionException {
		Stmt_openContext _localctx = new Stmt_openContext(_ctx, getState());
		enterRule(_localctx, 1550, RULE_stmt_open);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10465);
			match(OPEN);
			setState(10483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				setState(10466);
				cursor_variable();
				setState(10467);
				opt_scroll_option();
				setState(10468);
				match(FOR);
				setState(10474);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					setState(10469);
					selectstmt();
					}
					break;
				case EXECUTE:
					{
					setState(10470);
					match(EXECUTE);
					setState(10471);
					sql_expression();
					setState(10472);
					opt_open_using();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(10476);
				colid();
				setState(10481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(10477);
					match(OPEN_PAREN);
					setState(10478);
					opt_open_bound_list();
					setState(10479);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			}
			setState(10485);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_bound_list_itemContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode COLON_EQUALS() { return getToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Opt_open_bound_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_list_itemContext opt_open_bound_list_item() throws RecognitionException {
		Opt_open_bound_list_itemContext _localctx = new Opt_open_bound_list_itemContext(_ctx, getState());
		enterRule(_localctx, 1552, RULE_opt_open_bound_list_item);
		try {
			setState(10492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10487);
				colid();
				setState(10488);
				match(COLON_EQUALS);
				setState(10489);
				a_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10491);
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_bound_listContext extends ParserRuleContext {
		public List<Opt_open_bound_list_itemContext> opt_open_bound_list_item() {
			return getRuleContexts(Opt_open_bound_list_itemContext.class);
		}
		public Opt_open_bound_list_itemContext opt_open_bound_list_item(int i) {
			return getRuleContext(Opt_open_bound_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_open_bound_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_bound_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_bound_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_bound_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_bound_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_bound_listContext opt_open_bound_list() throws RecognitionException {
		Opt_open_bound_listContext _localctx = new Opt_open_bound_listContext(_ctx, getState());
		enterRule(_localctx, 1554, RULE_opt_open_bound_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10494);
			opt_open_bound_list_item();
			setState(10499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10495);
				match(COMMA);
				setState(10496);
				opt_open_bound_list_item();
				}
				}
				setState(10501);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_open_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Opt_open_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_open_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_open_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_open_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_open_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_open_usingContext opt_open_using() throws RecognitionException {
		Opt_open_usingContext _localctx = new Opt_open_usingContext(_ctx, getState());
		enterRule(_localctx, 1556, RULE_opt_open_using);
		try {
			setState(10505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10503);
				match(USING);
				setState(10504);
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scroll_optionContext extends ParserRuleContext {
		public Opt_scroll_option_noContext opt_scroll_option_no() {
			return getRuleContext(Opt_scroll_option_noContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scroll_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_optionContext opt_scroll_option() throws RecognitionException {
		Opt_scroll_optionContext _localctx = new Opt_scroll_optionContext(_ctx, getState());
		enterRule(_localctx, 1558, RULE_opt_scroll_option);
		try {
			setState(10511);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10508);
				opt_scroll_option_no();
				setState(10509);
				match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scroll_option_noContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Opt_scroll_option_noContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scroll_option_no; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_scroll_option_no(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_scroll_option_no(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_scroll_option_no(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_scroll_option_noContext opt_scroll_option_no() throws RecognitionException {
		Opt_scroll_option_noContext _localctx = new Opt_scroll_option_noContext(_ctx, getState());
		enterRule(_localctx, 1560, RULE_opt_scroll_option_no);
		try {
			setState(10515);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCROLL:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(10514);
				match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_fetchContext extends ParserRuleContext {
		public Opt_fetch_directionContext direction;
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public Opt_cursor_fromContext opt_cursor_from() {
			return getRuleContext(Opt_cursor_fromContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_fetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_fetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_fetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_fetchContext stmt_fetch() throws RecognitionException {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(_ctx, getState());
		enterRule(_localctx, 1562, RULE_stmt_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10517);
			match(FETCH);
			setState(10518);
			((Stmt_fetchContext)_localctx).direction = opt_fetch_direction();
			setState(10519);
			opt_cursor_from();
			setState(10520);
			cursor_variable();
			setState(10521);
			match(INTO);
			setState(10522);
			into_target();
			setState(10523);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_targetContext extends ParserRuleContext {
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Into_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInto_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInto_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInto_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_targetContext into_target() throws RecognitionException {
		Into_targetContext _localctx = new Into_targetContext(_ctx, getState());
		enterRule(_localctx, 1564, RULE_into_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10525);
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_cursor_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN_P() { return getToken(PostgreSQLParser.IN_P, 0); }
		public Opt_cursor_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_cursor_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_cursor_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_cursor_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_cursor_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_cursor_fromContext opt_cursor_from() throws RecognitionException {
		Opt_cursor_fromContext _localctx = new Opt_cursor_fromContext(_ctx, getState());
		enterRule(_localctx, 1566, RULE_opt_cursor_from);
		try {
			setState(10530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARAM:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(10528);
				match(FROM);
				}
				break;
			case IN_P:
				enterOuterAlt(_localctx, 3);
				{
				setState(10529);
				match(IN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_fetch_directionContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_fetch_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_fetch_direction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_fetch_direction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_fetch_direction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_fetch_directionContext opt_fetch_direction() throws RecognitionException {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(_ctx, getState());
		enterRule(_localctx, 1568, RULE_opt_fetch_direction);
		int _la;
		try {
			setState(10549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10534);
				match(NEXT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10535);
				match(PRIOR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10536);
				match(FIRST_P);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10537);
				match(LAST_P);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10538);
				match(ABSOLUTE_P);
				setState(10539);
				a_expr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10540);
				match(RELATIVE_P);
				setState(10541);
				a_expr();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10542);
				a_expr();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10543);
				match(ALL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10544);
				_la = _input.LA(1);
				if ( !(_la==BACKWARD || _la==FORWARD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(10545);
					a_expr();
					}
					break;
				case 2:
					{
					setState(10546);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_moveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public Opt_fetch_directionContext opt_fetch_direction() {
			return getRuleContext(Opt_fetch_directionContext.class,0);
		}
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_moveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_move(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_move(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_move(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_moveContext stmt_move() throws RecognitionException {
		Stmt_moveContext _localctx = new Stmt_moveContext(_ctx, getState());
		enterRule(_localctx, 1570, RULE_stmt_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10551);
			match(MOVE);
			setState(10552);
			opt_fetch_direction();
			setState(10553);
			cursor_variable();
			setState(10554);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_closeContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public Cursor_variableContext cursor_variable() {
			return getRuleContext(Cursor_variableContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_closeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_close(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_close(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_close(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_closeContext stmt_close() throws RecognitionException {
		Stmt_closeContext _localctx = new Stmt_closeContext(_ctx, getState());
		enterRule(_localctx, 1572, RULE_stmt_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10556);
			match(CLOSE);
			setState(10557);
			cursor_variable();
			setState(10558);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_nullContext extends ParserRuleContext {
		public TerminalNode NULL_P() { return getToken(PostgreSQLParser.NULL_P, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_null(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_nullContext stmt_null() throws RecognitionException {
		Stmt_nullContext _localctx = new Stmt_nullContext(_ctx, getState());
		enterRule(_localctx, 1574, RULE_stmt_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10560);
			match(NULL_P);
			setState(10561);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_commitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_commit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_commit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_commit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_commitContext stmt_commit() throws RecognitionException {
		Stmt_commitContext _localctx = new Stmt_commitContext(_ctx, getState());
		enterRule(_localctx, 1576, RULE_stmt_commit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10563);
			match(COMMIT);
			setState(10564);
			plsql_opt_transaction_chain();
			setState(10565);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_rollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return getRuleContext(Plsql_opt_transaction_chainContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_rollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_rollback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_rollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_rollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_rollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_rollbackContext stmt_rollback() throws RecognitionException {
		Stmt_rollbackContext _localctx = new Stmt_rollbackContext(_ctx, getState());
		enterRule(_localctx, 1578, RULE_stmt_rollback);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10567);
			match(ROLLBACK);
			setState(10568);
			plsql_opt_transaction_chain();
			setState(10569);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_opt_transaction_chainContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Plsql_opt_transaction_chainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_opt_transaction_chain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_opt_transaction_chain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_opt_transaction_chain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_opt_transaction_chain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() throws RecognitionException {
		Plsql_opt_transaction_chainContext _localctx = new Plsql_opt_transaction_chainContext(_ctx, getState());
		enterRule(_localctx, 1580, RULE_plsql_opt_transaction_chain);
		int _la;
		try {
			setState(10577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(10571);
				match(AND);
				setState(10573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(10572);
					match(NO);
					}
				}

				setState(10575);
				match(CHAIN);
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_setContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Any_nameContext any_name() {
			return getRuleContext(Any_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode SEMI() { return getToken(PostgreSQLParser.SEMI, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Stmt_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt_set(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt_set(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stmt_setContext stmt_set() throws RecognitionException {
		Stmt_setContext _localctx = new Stmt_setContext(_ctx, getState());
		enterRule(_localctx, 1582, RULE_stmt_set);
		try {
			setState(10591);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(10579);
				match(SET);
				setState(10580);
				any_name();
				setState(10581);
				match(TO);
				setState(10582);
				match(DEFAULT);
				setState(10583);
				match(SEMI);
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10585);
				match(RESET);
				setState(10588);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					setState(10586);
					any_name();
					}
					break;
				case ALL:
					{
					setState(10587);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10590);
				match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_variableContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(PostgreSQLParser.PARAM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCursor_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCursor_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCursor_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_variableContext cursor_variable() throws RecognitionException {
		Cursor_variableContext _localctx = new Cursor_variableContext(_ctx, getState());
		enterRule(_localctx, 1584, RULE_cursor_variable);
		try {
			setState(10595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10593);
				colid();
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 2);
				{
				setState(10594);
				match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_sectContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public Proc_exceptionsContext proc_exceptions() {
			return getRuleContext(Proc_exceptionsContext.class,0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_sect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterException_sect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitException_sect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitException_sect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_sectContext exception_sect() throws RecognitionException {
		Exception_sectContext _localctx = new Exception_sectContext(_ctx, getState());
		enterRule(_localctx, 1586, RULE_exception_sect);
		try {
			setState(10600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END_P:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EXCEPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(10598);
				match(EXCEPTION);
				setState(10599);
				proc_exceptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_exceptionsContext extends ParserRuleContext {
		public List<Proc_exceptionContext> proc_exception() {
			return getRuleContexts(Proc_exceptionContext.class);
		}
		public Proc_exceptionContext proc_exception(int i) {
			return getRuleContext(Proc_exceptionContext.class,i);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exceptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exceptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exceptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exceptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionsContext proc_exceptions() throws RecognitionException {
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(_ctx, getState());
		enterRule(_localctx, 1588, RULE_proc_exceptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10603); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(10602);
				proc_exception();
				}
				}
				setState(10605); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_exceptionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Proc_conditionsContext proc_conditions() {
			return getRuleContext(Proc_conditionsContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public Proc_sectContext proc_sect() {
			return getRuleContext(Proc_sectContext.class,0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_exception; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_exception(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_exception(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_exception(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_exceptionContext proc_exception() throws RecognitionException {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(_ctx, getState());
		enterRule(_localctx, 1590, RULE_proc_exception);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10607);
			match(WHEN);
			setState(10608);
			proc_conditions();
			setState(10609);
			match(THEN);
			setState(10610);
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionsContext extends ParserRuleContext {
		public List<Proc_conditionContext> proc_condition() {
			return getRuleContexts(Proc_conditionContext.class);
		}
		public Proc_conditionContext proc_condition(int i) {
			return getRuleContext(Proc_conditionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(PostgreSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PostgreSQLParser.OR, i);
		}
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_conditions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_conditions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_conditions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_conditions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionsContext proc_conditions() throws RecognitionException {
		Proc_conditionsContext _localctx = new Proc_conditionsContext(_ctx, getState());
		enterRule(_localctx, 1592, RULE_proc_conditions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10612);
			proc_condition();
			setState(10617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(10613);
				match(OR);
				setState(10614);
				proc_condition();
				}
				}
				setState(10619);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public SconstContext sconst() {
			return getRuleContext(SconstContext.class,0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterProc_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitProc_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 1594, RULE_proc_condition);
		try {
			setState(10623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10620);
				any_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10621);
				match(SQLSTATE);
				setState(10622);
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_block_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_block_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_block_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_block_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_block_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_block_labelContext opt_block_label() throws RecognitionException {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(_ctx, getState());
		enterRule(_localctx, 1596, RULE_opt_block_label);
		try {
			setState(10627);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_P:
			case DECLARE:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10626);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_loop_labelContext extends ParserRuleContext {
		public Label_declContext label_decl() {
			return getRuleContext(Label_declContext.class,0);
		}
		public Opt_loop_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_loop_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_loop_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_loop_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_loop_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_loop_labelContext opt_loop_label() throws RecognitionException {
		Opt_loop_labelContext _localctx = new Opt_loop_labelContext(_ctx, getState());
		enterRule(_localctx, 1598, RULE_opt_loop_label);
		try {
			setState(10631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case WHILE:
			case FOREACH:
			case LOOP:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10630);
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_labelContext extends ParserRuleContext {
		public Any_identifierContext any_identifier() {
			return getRuleContext(Any_identifierContext.class,0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_label(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_label(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_labelContext opt_label() throws RecognitionException {
		Opt_labelContext _localctx = new Opt_labelContext(_ctx, getState());
		enterRule(_localctx, 1600, RULE_opt_label);
		try {
			setState(10635);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case SEMI:
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(10634);
				any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_exitcondContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Expr_until_semiContext expr_until_semi() {
			return getRuleContext(Expr_until_semiContext.class,0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_exitcond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_exitcond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_exitcond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_exitcond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_exitcondContext opt_exitcond() throws RecognitionException {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(_ctx, getState());
		enterRule(_localctx, 1602, RULE_opt_exitcond);
		try {
			setState(10640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(10637);
				match(WHEN);
				setState(10638);
				expr_until_semi();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_identifierContext extends ParserRuleContext {
		public ColidContext colid() {
			return getRuleContext(ColidContext.class,0);
		}
		public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return getRuleContext(Plsql_unreserved_keywordContext.class,0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAny_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAny_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAny_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Any_identifierContext any_identifier() throws RecognitionException {
		Any_identifierContext _localctx = new Any_identifierContext(_ctx, getState());
		enterRule(_localctx, 1604, RULE_any_identifier);
		try {
			setState(10644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10642);
				colid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10643);
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_unreserved_keywordContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE_P() { return getToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		public TerminalNode ALIAS() { return getToken(PostgreSQLParser.ALIAS, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode ASSERT() { return getToken(PostgreSQLParser.ASSERT, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode CONSTANT() { return getToken(PostgreSQLParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONTINUE_P() { return getToken(PostgreSQLParser.CONTINUE_P, 0); }
		public TerminalNode CURRENT_P() { return getToken(PostgreSQLParser.CURRENT_P, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode DEBUG() { return getToken(PostgreSQLParser.DEBUG, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode DUMP() { return getToken(PostgreSQLParser.DUMP, 0); }
		public TerminalNode ELSIF() { return getToken(PostgreSQLParser.ELSIF, 0); }
		public TerminalNode ERROR() { return getToken(PostgreSQLParser.ERROR, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public TerminalNode EXIT() { return getToken(PostgreSQLParser.EXIT, 0); }
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode FIRST_P() { return getToken(PostgreSQLParser.FIRST_P, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public TerminalNode INFO() { return getToken(PostgreSQLParser.INFO, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode LAST_P() { return getToken(PostgreSQLParser.LAST_P, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NOTICE() { return getToken(PostgreSQLParser.NOTICE, 0); }
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode PERFORM() { return getToken(PostgreSQLParser.PERFORM, 0); }
		public TerminalNode PRINT_STRICT_PARAMS() { return getToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode QUERY() { return getToken(PostgreSQLParser.QUERY, 0); }
		public TerminalNode RAISE() { return getToken(PostgreSQLParser.RAISE, 0); }
		public TerminalNode RELATIVE_P() { return getToken(PostgreSQLParser.RELATIVE_P, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROWTYPE() { return getToken(PostgreSQLParser.ROWTYPE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SLICE() { return getToken(PostgreSQLParser.SLICE, 0); }
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public TerminalNode STACKED() { return getToken(PostgreSQLParser.STACKED, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode TYPE_P() { return getToken(PostgreSQLParser.TYPE_P, 0); }
		public TerminalNode USE_COLUMN() { return getToken(PostgreSQLParser.USE_COLUMN, 0); }
		public TerminalNode USE_VARIABLE() { return getToken(PostgreSQLParser.USE_VARIABLE, 0); }
		public TerminalNode VARIABLE_CONFLICT() { return getToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		public TerminalNode WARNING() { return getToken(PostgreSQLParser.WARNING, 0); }
		public TerminalNode OUTER_P() { return getToken(PostgreSQLParser.OUTER_P, 0); }
		public Plsql_unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPlsql_unreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPlsql_unreserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPlsql_unreserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_unreserved_keywordContext plsql_unreserved_keyword() throws RecognitionException {
		Plsql_unreserved_keywordContext _localctx = new Plsql_unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1606, RULE_plsql_unreserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10646);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << ARRAY) | (1L << COLLATE) | (1L << COLUMN) | (1L << CONSTRAINT) | (1L << DEFAULT) | (1L << DO) | (1L << FETCH))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (TABLE - 92)) | (1L << (IS - 92)) | (1L << (OUTER_P - 92)) | (1L << (ABSOLUTE_P - 92)) | (1L << (BACKWARD - 92)) | (1L << (CHAIN - 92)))) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (CLOSE - 157)) | (1L << (COMMIT - 157)) | (1L << (CONTINUE_P - 157)) | (1L << (CURSOR - 157)) | (1L << (FIRST_P - 157)) | (1L << (FORWARD - 157)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (INSERT - 232)) | (1L << (LAST_P - 232)) | (1L << (MOVE - 232)) | (1L << (NEXT - 232)) | (1L << (NO - 232)) | (1L << (OPTION - 232)) | (1L << (PRIOR - 232)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (RELATIVE_P - 300)) | (1L << (RESET - 300)) | (1L << (ROLLBACK - 300)) | (1L << (SCHEMA - 300)) | (1L << (SCROLL - 300)) | (1L << (SET - 300)) | (1L << (TYPE_P - 300)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (CALL - 433)) | (1L << (CURRENT_P - 433)) | (1L << (ROWTYPE - 433)) | (1L << (DUMP - 433)) | (1L << (PRINT_STRICT_PARAMS - 433)) | (1L << (VARIABLE_CONFLICT - 433)) | (1L << (ERROR - 433)) | (1L << (USE_VARIABLE - 433)) | (1L << (USE_COLUMN - 433)) | (1L << (ALIAS - 433)))) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & ((1L << (CONSTANT - 497)) | (1L << (PERFORM - 497)) | (1L << (GET - 497)) | (1L << (DIAGNOSTICS - 497)) | (1L << (STACKED - 497)) | (1L << (ELSIF - 497)) | (1L << (SLICE - 497)) | (1L << (EXIT - 497)) | (1L << (RETURN - 497)) | (1L << (QUERY - 497)) | (1L << (RAISE - 497)) | (1L << (SQLSTATE - 497)) | (1L << (DEBUG - 497)) | (1L << (INFO - 497)) | (1L << (NOTICE - 497)) | (1L << (WARNING - 497)) | (1L << (EXCEPTION - 497)) | (1L << (ASSERT - 497)) | (1L << (OPEN - 497)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_expressionContext extends ParserRuleContext {
		public Opt_target_listContext opt_target_list() {
			return getRuleContext(Opt_target_listContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_clauseContext group_clause() {
			return getRuleContext(Group_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSql_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSql_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSql_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_expressionContext sql_expression() throws RecognitionException {
		Sql_expressionContext _localctx = new Sql_expressionContext(_ctx, getState());
		enterRule(_localctx, 1608, RULE_sql_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10648);
			opt_target_list();
			setState(10649);
			into_clause();
			setState(10650);
			from_clause();
			setState(10651);
			where_clause();
			setState(10652);
			group_clause();
			setState(10653);
			having_clause();
			setState(10654);
			window_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_thenContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_then; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_then(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_then(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_then(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_thenContext expr_until_then() throws RecognitionException {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(_ctx, getState());
		enterRule(_localctx, 1610, RULE_expr_until_then);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10656);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_semiContext extends ParserRuleContext {
		public Sql_expressionContext sql_expression() {
			return getRuleContext(Sql_expressionContext.class,0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_semiContext expr_until_semi() throws RecognitionException {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(_ctx, getState());
		enterRule(_localctx, 1612, RULE_expr_until_semi);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10658);
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_rightbracketContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_rightbracket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_rightbracket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_rightbracket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_rightbracket(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_rightbracketContext expr_until_rightbracket() throws RecognitionException {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(_ctx, getState());
		enterRule(_localctx, 1614, RULE_expr_until_rightbracket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10660);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_until_loopContext extends ParserRuleContext {
		public A_exprContext a_expr() {
			return getRuleContext(A_exprContext.class,0);
		}
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_until_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_until_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_until_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_until_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_until_loopContext expr_until_loop() throws RecognitionException {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(_ctx, getState());
		enterRule(_localctx, 1616, RULE_expr_until_loop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10662);
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Make_execsql_stmtContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public Opt_returning_clause_intoContext opt_returning_clause_into() {
			return getRuleContext(Opt_returning_clause_intoContext.class,0);
		}
		public Make_execsql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_make_execsql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMake_execsql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMake_execsql_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMake_execsql_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Make_execsql_stmtContext make_execsql_stmt() throws RecognitionException {
		Make_execsql_stmtContext _localctx = new Make_execsql_stmtContext(_ctx, getState());
		enterRule(_localctx, 1618, RULE_make_execsql_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10664);
			stmt();
			setState(10665);
			opt_returning_clause_into();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_returning_clause_intoContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Opt_strictContext opt_strict() {
			return getRuleContext(Opt_strictContext.class,0);
		}
		public Into_targetContext into_target() {
			return getRuleContext(Into_targetContext.class,0);
		}
		public Opt_returning_clause_intoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_returning_clause_into; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOpt_returning_clause_into(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOpt_returning_clause_into(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOpt_returning_clause_into(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Opt_returning_clause_intoContext opt_returning_clause_into() throws RecognitionException {
		Opt_returning_clause_intoContext _localctx = new Opt_returning_clause_intoContext(_ctx, getState());
		enterRule(_localctx, 1620, RULE_opt_returning_clause_into);
		try {
			setState(10672);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(10667);
				match(INTO);
				setState(10668);
				opt_strict();
				setState(10669);
				into_target();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 602:
			return b_expr_sempred((B_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 8);
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 4);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 2);
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02a9\u29b5\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\4\u029d\t\u029d\4\u029e\t\u029e\4\u029f\t\u029f\4\u02a0\t\u02a0\4\u02a1"+
		"\t\u02a1\4\u02a2\t\u02a2\4\u02a3\t\u02a3\4\u02a4\t\u02a4\4\u02a5\t\u02a5"+
		"\4\u02a6\t\u02a6\4\u02a7\t\u02a7\4\u02a8\t\u02a8\4\u02a9\t\u02a9\4\u02aa"+
		"\t\u02aa\4\u02ab\t\u02ab\4\u02ac\t\u02ac\4\u02ad\t\u02ad\4\u02ae\t\u02ae"+
		"\4\u02af\t\u02af\4\u02b0\t\u02b0\4\u02b1\t\u02b1\4\u02b2\t\u02b2\4\u02b3"+
		"\t\u02b3\4\u02b4\t\u02b4\4\u02b5\t\u02b5\4\u02b6\t\u02b6\4\u02b7\t\u02b7"+
		"\4\u02b8\t\u02b8\4\u02b9\t\u02b9\4\u02ba\t\u02ba\4\u02bb\t\u02bb\4\u02bc"+
		"\t\u02bc\4\u02bd\t\u02bd\4\u02be\t\u02be\4\u02bf\t\u02bf\4\u02c0\t\u02c0"+
		"\4\u02c1\t\u02c1\4\u02c2\t\u02c2\4\u02c3\t\u02c3\4\u02c4\t\u02c4\4\u02c5"+
		"\t\u02c5\4\u02c6\t\u02c6\4\u02c7\t\u02c7\4\u02c8\t\u02c8\4\u02c9\t\u02c9"+
		"\4\u02ca\t\u02ca\4\u02cb\t\u02cb\4\u02cc\t\u02cc\4\u02cd\t\u02cd\4\u02ce"+
		"\t\u02ce\4\u02cf\t\u02cf\4\u02d0\t\u02d0\4\u02d1\t\u02d1\4\u02d2\t\u02d2"+
		"\4\u02d3\t\u02d3\4\u02d4\t\u02d4\4\u02d5\t\u02d5\4\u02d6\t\u02d6\4\u02d7"+
		"\t\u02d7\4\u02d8\t\u02d8\4\u02d9\t\u02d9\4\u02da\t\u02da\4\u02db\t\u02db"+
		"\4\u02dc\t\u02dc\4\u02dd\t\u02dd\4\u02de\t\u02de\4\u02df\t\u02df\4\u02e0"+
		"\t\u02e0\4\u02e1\t\u02e1\4\u02e2\t\u02e2\4\u02e3\t\u02e3\4\u02e4\t\u02e4"+
		"\4\u02e5\t\u02e5\4\u02e6\t\u02e6\4\u02e7\t\u02e7\4\u02e8\t\u02e8\4\u02e9"+
		"\t\u02e9\4\u02ea\t\u02ea\4\u02eb\t\u02eb\4\u02ec\t\u02ec\4\u02ed\t\u02ed"+
		"\4\u02ee\t\u02ee\4\u02ef\t\u02ef\4\u02f0\t\u02f0\4\u02f1\t\u02f1\4\u02f2"+
		"\t\u02f2\4\u02f3\t\u02f3\4\u02f4\t\u02f4\4\u02f5\t\u02f5\4\u02f6\t\u02f6"+
		"\4\u02f7\t\u02f7\4\u02f8\t\u02f8\4\u02f9\t\u02f9\4\u02fa\t\u02fa\4\u02fb"+
		"\t\u02fb\4\u02fc\t\u02fc\4\u02fd\t\u02fd\4\u02fe\t\u02fe\4\u02ff\t\u02ff"+
		"\4\u0300\t\u0300\4\u0301\t\u0301\4\u0302\t\u0302\4\u0303\t\u0303\4\u0304"+
		"\t\u0304\4\u0305\t\u0305\4\u0306\t\u0306\4\u0307\t\u0307\4\u0308\t\u0308"+
		"\4\u0309\t\u0309\4\u030a\t\u030a\4\u030b\t\u030b\4\u030c\t\u030c\4\u030d"+
		"\t\u030d\4\u030e\t\u030e\4\u030f\t\u030f\4\u0310\t\u0310\4\u0311\t\u0311"+
		"\4\u0312\t\u0312\4\u0313\t\u0313\4\u0314\t\u0314\4\u0315\t\u0315\4\u0316"+
		"\t\u0316\4\u0317\t\u0317\4\u0318\t\u0318\4\u0319\t\u0319\4\u031a\t\u031a"+
		"\4\u031b\t\u031b\4\u031c\t\u031c\4\u031d\t\u031d\4\u031e\t\u031e\4\u031f"+
		"\t\u031f\4\u0320\t\u0320\4\u0321\t\u0321\4\u0322\t\u0322\4\u0323\t\u0323"+
		"\4\u0324\t\u0324\4\u0325\t\u0325\4\u0326\t\u0326\4\u0327\t\u0327\4\u0328"+
		"\t\u0328\4\u0329\t\u0329\4\u032a\t\u032a\4\u032b\t\u032b\4\u032c\t\u032c"+
		"\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\5\5\u0662\n\5\7\5\u0664\n\5\f\5\16"+
		"\5\u0667\13\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u06e6\n\6\3\7\3\7\5\7\u06ea\n\7\3\b\3\b\3"+
		"\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u06f7\n\n\3\13\7\13\u06fa\n\13"+
		"\f\13\16\13\u06fd\13\13\3\f\7\f\u0700\n\f\f\f\16\f\u0703\13\f\3\r\3\r"+
		"\3\r\5\r\u0708\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r"+
		"\5\r\u0717\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16"+
		"\u0723\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\21\3\21\3\21\3\21\5\21\u0735\n\21\3\22\3\22\3\22\5\22\u073a\n\22\3"+
		"\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\5\23\u0744\n\23\3\23\3\23\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26"+
		"\3\27\3\27\3\27\3\27\3\27\5\27\u075c\n\27\3\27\3\27\3\27\3\27\3\27\5\27"+
		"\u0763\n\27\3\27\3\27\3\30\3\30\5\30\u0769\n\30\3\31\7\31\u076c\n\31\f"+
		"\31\16\31\u076f\13\31\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0777\n\32\3"+
		"\33\3\33\5\33\u077b\n\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\5\34\u0787\n\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\5\36\u07a6\n\36\3\37\3\37\3\37\7\37\u07ab\n"+
		"\37\f\37\16\37\u07ae\13\37\3 \3 \3 \7 \u07b3\n \f \16 \u07b6\13 \3!\3"+
		"!\5!\u07ba\n!\3\"\3\"\3\"\3\"\3\"\5\"\u07c1\n\"\3#\3#\3#\3#\5#\u07c7\n"+
		"#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u07d8\n$\3%\3%\3%\5"+
		"%\u07dd\n%\3&\3&\5&\u07e1\n&\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\5(\u07ee"+
		"\n(\3)\3)\5)\u07f2\n)\3*\3*\3*\5*\u07f7\n*\3+\3+\3+\5+\u07fc\n+\3,\3,"+
		"\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0808\n,\3-\3-\3-\3-\3-\3.\3.\5.\u0811\n."+
		"\3/\3/\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\62\5\62\u081e\n\62\3"+
		"\62\3\62\3\62\5\62\u0823\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\5\62\u082e\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62"+
		"\u0839\n\62\3\62\3\62\3\62\5\62\u083e\n\62\3\62\3\62\3\62\3\62\3\62\3"+
		"\62\3\62\3\62\3\62\5\62\u0849\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\5\62\u0854\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u085d"+
		"\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0867\n\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0876\n\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0882\n\62\3\62"+
		"\3\62\3\62\5\62\u0887\n\62\3\63\3\63\3\63\7\63\u088c\n\63\f\63\16\63\u088f"+
		"\13\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0899\n\64\3\65\3"+
		"\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\66\3\66\5\66\u099b\n\66\3\67\3\67\3\67\3\67\3\67\5\67\u09a2\n\67"+
		"\38\38\38\58\u09a7\n8\39\39\39\59\u09ac\n9\3:\3:\3:\5:\u09b1\n:\3;\3;"+
		"\3;\3;\3;\3;\5;\u09b9\n;\3<\3<\3<\3<\3=\3=\3=\5=\u09c2\n=\3>\3>\3>\7>"+
		"\u09c7\n>\f>\16>\u09ca\13>\3?\3?\3?\3?\3?\3?\3?\5?\u09d3\n?\5?\u09d5\n"+
		"?\3@\6@\u09d8\n@\r@\16@\u09d9\3A\3A\3A\3A\5A\u09e0\nA\3A\3A\3A\3A\5A\u09e6"+
		"\nA\5A\u09e8\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B"+
		"\3B\3B\3B\3B\3B\3B\3B\3B\5B\u0a04\nB\3C\3C\3C\3D\3D\3D\7D\u0a0c\nD\fD"+
		"\16D\u0a0f\13D\3E\3E\3E\3E\3E\3F\3F\3F\7F\u0a19\nF\fF\16F\u0a1c\13F\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u0a27\nG\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3"+
		"G\3G\5G\u0a35\nG\3H\3H\3H\5H\u0a3a\nH\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3"+
		"I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0a52\nI\3J\3J\3K\3K\5K\u0a58\n"+
		"K\3L\3L\3L\5L\u0a5d\nL\3M\3M\3M\3M\3M\5M\u0a64\nM\3N\7N\u0a67\nN\fN\16"+
		"N\u0a6a\13N\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3"+
		"O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0a8f\nO\3P\3P\5P\u0a93"+
		"\nP\3Q\3Q\3Q\3Q\3Q\5Q\u0a9a\nQ\3R\3R\5R\u0a9e\nR\3S\3S\3S\7S\u0aa3\nS"+
		"\fS\16S\u0aa6\13S\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0ab3\nU\3V\3V\3"+
		"V\7V\u0ab8\nV\fV\16V\u0abb\13V\3W\3W\3X\3X\3X\3X\3X\3X\5X\u0ac5\nX\3X"+
		"\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X"+
		"\3X\3X\3X\3X\3X\3X\3X\5X\u0ae6\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0af0\nY"+
		"\3Z\3Z\5Z\u0af4\nZ\3[\3[\3[\3[\3[\5[\u0afb\n[\3\\\3\\\3\\\7\\\u0b00\n"+
		"\\\f\\\16\\\u0b03\13\\\3]\3]\3]\7]\u0b08\n]\f]\16]\u0b0b\13]\3^\3^\3^"+
		"\5^\u0b10\n^\3_\3_\5_\u0b14\n_\3`\3`\3`\3`\3`\3a\3a\3a\5a\u0b1e\na\3a"+
		"\3a\3b\7b\u0b23\nb\fb\16b\u0b26\13b\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0b30\n"+
		"c\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3"+
		"d\3d\3d\3d\3d\3d\3d\3d\5d\u0b50\nd\3d\3d\3d\3d\3d\3d\5d\u0b58\nd\3e\3"+
		"e\3e\5e\u0b5d\ne\3f\3f\3f\3f\3f\5f\u0b64\nf\3g\3g\3g\3g\3h\3h\7h\u0b6c"+
		"\nh\fh\16h\u0b6f\13h\3i\3i\3j\3j\3j\3j\3j\5j\u0b78\nj\3k\3k\3k\3k\3k\3"+
		"k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0b8c\nk\3k\3k\3k\3k\3k\3k\3"+
		"k\3k\3k\3k\3k\3k\3k\5k\u0b9b\nk\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3"+
		"k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0bb4\nk\3l\3l\3l\5l\u0bb9\nl\3m\3"+
		"m\3m\3m\3m\5m\u0bc0\nm\3n\3n\3n\7n\u0bc5\nn\fn\16n\u0bc8\13n\3o\3o\3p"+
		"\3p\3p\3p\3p\3p\5p\u0bd2\np\3q\3q\3q\5q\u0bd7\nq\3r\3r\3r\7r\u0bdc\nr"+
		"\fr\16r\u0bdf\13r\3s\3s\3s\3s\3s\3s\3s\3s\5s\u0be9\ns\3t\3t\3t\3t\3t\3"+
		"t\5t\u0bf1\nt\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0bfc\nu\3v\3v\3v\3v\3w\3"+
		"w\3w\3w\3x\3x\3x\3x\3x\3x\5x\u0c0c\nx\3y\3y\3y\3y\3y\3y\5y\u0c14\ny\3"+
		"z\3z\5z\u0c18\nz\3{\3{\3{\3{\3{\3{\3{\3|\3|\3|\7|\u0c24\n|\f|\16|\u0c27"+
		"\13|\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0c37\n}\3~\3~\3~\5"+
		"~\u0c3c\n~\3\177\3\177\3\177\3\177\3\177\5\177\u0c43\n\177\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0c4c\n\u0080\3\u0080"+
		"\5\u0080\u0c4f\n\u0080\3\u0081\3\u0081\3\u0081\5\u0081\u0c54\n\u0081\3"+
		"\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0c5b\n\u0082\3\u0083\3"+
		"\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084"+
		"\u0c66\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0c73\n\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0c80\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0c92\n\u0088\3\u0088\5\u0088\u0c95\n\u0088\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0c9e\n\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008b\3\u008b\5\u008b\u0cad\n\u008b\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\5\u008d\u0cbc\n\u008d\3\u008d\3\u008d\3\u008d\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\5\u008e\u0cc5\n\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008f\3\u008f\5\u008f\u0ccc\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\5\u0090\u0cd3\n\u0090\3\u0091\6\u0091\u0cd6\n\u0091\r\u0091\16"+
		"\u0091\u0cd7\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\5\u0092\u0cf6\n\u0092\5\u0092\u0cf8\n\u0092\3"+
		"\u0093\3\u0093\5\u0093\u0cfc\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3"+
		"\u0094\3\u0094\5\u0094\u0d04\n\u0094\3\u0095\3\u0095\3\u0095\7\u0095\u0d09"+
		"\n\u0095\f\u0095\16\u0095\u0d0c\13\u0095\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d19"+
		"\n\u0096\3\u0097\3\u0097\5\u0097\u0d1d\n\u0097\3\u0098\3\u0098\5\u0098"+
		"\u0d21\n\u0098\3\u0099\3\u0099\3\u0099\5\u0099\u0d26\n\u0099\3\u009a\3"+
		"\u009a\3\u009a\3\u009a\5\u009a\u0d2c\n\u009a\3\u009b\3\u009b\5\u009b\u0d30"+
		"\n\u009b\3\u009c\3\u009c\5\u009c\u0d34\n\u009c\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0d41\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0d47\n\u009f\3"+
		"\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0d50\n"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\7\u00a1\u0d57\n\u00a1\f"+
		"\u00a1\16\u00a1\u0d5a\13\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\5\u00a2\u0d63\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a4\7\u00a4\u0d6c\n\u00a4\f\u00a4\16\u00a4\u0d6f"+
		"\13\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\5\u00a6\u0ddc\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\5\u00a8\u0dee\n\u00a8\3\u00a9\6\u00a9\u0df1\n\u00a9\r\u00a9\16"+
		"\u00a9\u0df2\3\u00aa\3\u00aa\5\u00aa\u0df7\n\u00aa\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0e08\n\u00ab\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0e10\n\u00ac\3\u00ad\3\u00ad\3\u00ad"+
		"\7\u00ad\u0e15\n\u00ad\f\u00ad\16\u00ad\u0e18\13\u00ad\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af\7\u00af\u0e22\n\u00af"+
		"\f\u00af\16\u00af\u0e25\13\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u0e2e\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b2"+
		"\3\u00b2\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u0e50\n\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0e55\n"+
		"\u00b5\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0e5a\n\u00b6\3\u00b7\3\u00b7\5"+
		"\u00b7\u0e5e\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5"+
		"\u00b8\u0e66\n\u00b8\5\u00b8\u0e68\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0ea2"+
		"\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0eb3"+
		"\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0ebb"+
		"\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0ed2\n\u00bd\3\u00be\3\u00be"+
		"\5\u00be\u0ed6\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0eea\n\u00bf\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0f0f\n\u00c3\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0f18\n\u00c4"+
		"\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0f1d\n\u00c5\3\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u0f22\n\u00c6\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0f27\n\u00c7\3"+
		"\u00c8\3\u00c8\3\u00c8\5\u00c8\u0f2c\n\u00c8\3\u00c9\3\u00c9\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00cb"+
		"\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0f61\n\u00cc\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u0f67\n\u00cd\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0f6c\n"+
		"\u00ce\f\u00ce\16\u00ce\u0f6f\13\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0f78\n\u00cf\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u0f7d\n\u00d0\3\u00d1\6\u00d1\u0f80\n\u00d1\r\u00d1\16\u00d1"+
		"\u0f81\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d4"+
		"\3\u00d4\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6"+
		"\u0f94\n\u00d6\3\u00d7\3\u00d7\5\u00d7\u0f98\n\u00d7\3\u00d8\3\u00d8\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0fa2\n\u00d9\3"+
		"\u00da\3\u00da\3\u00db\3\u00db\5\u00db\u0fa8\n\u00db\3\u00db\3\u00db\7"+
		"\u00db\u0fac\n\u00db\f\u00db\16\u00db\u0faf\13\u00db\3\u00dc\3\u00dc\3"+
		"\u00dc\3\u00dc\5\u00dc\u0fb5\n\u00dc\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0fba"+
		"\n\u00dd\3\u00de\7\u00de\u0fbd\n\u00de\f\u00de\16\u00de\u0fc0\13\u00de"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\5\u00df\u0fcd\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0fe9\n\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\7\u00e1\u0fee\n\u00e1\f\u00e1\16\u00e1\u0ff1\13\u00e1\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e3\7\u00e3"+
		"\u0ffc\n\u00e3\f\u00e3\16\u00e3\u0fff\13\u00e3\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\5\u00e5\u100d\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\5\u00e7\u1082\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9"+
		"\3\u00e9\3\u00e9\7\u00e9\u108b\n\u00e9\f\u00e9\16\u00e9\u108e\13\u00e9"+
		"\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1093\n\u00ea\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u109b\n\u00eb\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u10a4\n\u00ed\f\u00ed\16\u00ed"+
		"\u10a7\13\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\5\u00ef"+
		"\u10af\n\u00ef\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u10b4\n\u00f0\f\u00f0\16"+
		"\u00f0\u10b7\13\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u10de\n\u00f1\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\5\u00f2\u10e4\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u10f7\n\u00f4\f\u00f4\16\u00f4"+
		"\u10fa\13\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u1115\n\u00f5\3\u00f6\3\u00f6\5\u00f6\u1119\n\u00f6\3\u00f7\3"+
		"\u00f7\3\u00f7\5\u00f7\u111e\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\5\u00f8\u1127\n\u00f8\3\u00f9\3\u00f9\5\u00f9\u112b"+
		"\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb"+
		"\u1146\n\u00fb\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u114b\n\u00fc\f\u00fc\16"+
		"\u00fc\u114e\13\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u115c\n\u00fd"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\5\u00fe\u1170\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1184\n\u00ff\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u11e1"+
		"\n\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u11fa\n\u0103"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1201\n\u0104\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u1211\n\u0105\3\u0106\3\u0106"+
		"\3\u0107\3\u0107\3\u0107\7\u0107\u1218\n\u0107\f\u0107\16\u0107\u121b"+
		"\13\u0107\3\u0108\3\u0108\5\u0108\u121f\n\u0108\3\u0109\3\u0109\6\u0109"+
		"\u1223\n\u0109\r\u0109\16\u0109\u1224\3\u010a\3\u010a\3\u010a\7\u010a"+
		"\u122a\n\u010a\f\u010a\16\u010a\u122d\13\u010a\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c"+
		"\u123a\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u12cf\n\u010d\3\u010e"+
		"\3\u010e\5\u010e\u12d3\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u1330\n\u010f\3\u0110"+
		"\3\u0110\3\u0110\5\u0110\u1335\n\u0110\3\u0111\3\u0111\5\u0111\u1339\n"+
		"\u0111\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u133f\n\u0112\3\u0113\3"+
		"\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\5\u0113\u1383\n\u0113\3\u0114\3\u0114\3\u0115\3\u0115"+
		"\5\u0115\u1389\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\5\u0117\u13a6\n\u0117\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\5\u0118\u13b7\n\u0118\3\u0119\3\u0119\3\u0119"+
		"\7\u0119\u13bc\n\u0119\f\u0119\16\u0119\u13bf\13\u0119\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u13ca"+
		"\n\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1406\n\u011b\3\u011c"+
		"\3\u011c\3\u011c\7\u011c\u140b\n\u011c\f\u011c\16\u011c\u140e\13\u011c"+
		"\3\u011d\3\u011d\3\u011d\5\u011d\u1413\n\u011d\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\5\u011e\u1419\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\5\u0120\u1433\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121"+
		"\u1439\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u143f\n\u0122\3"+
		"\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\7\u0124\u1448\n"+
		"\u0124\f\u0124\16\u0124\u144b\13\u0124\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1456\n\u0125\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126"+
		"\u1473\n\u0126\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\5\u0128\u149a\n\u0128\3\u0129\3\u0129\5\u0129"+
		"\u149e\n\u0129\3\u012a\3\u012a\5\u012a\u14a2\n\u012a\3\u012b\3\u012b\5"+
		"\u012b\u14a6\n\u012b\3\u012c\3\u012c\3\u012c\5\u012c\u14ab\n\u012c\3\u012d"+
		"\3\u012d\3\u012d\7\u012d\u14b0\n\u012d\f\u012d\16\u012d\u14b3\13\u012d"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\5\u012e\u14c0\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u14cd"+
		"\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u14d5"+
		"\n\u0130\3\u0131\3\u0131\3\u0131\7\u0131\u14da\n\u0131\f\u0131\16\u0131"+
		"\u14dd\13\u0131\3\u0132\3\u0132\3\u0132\5\u0132\u14e2\n\u0132\3\u0133"+
		"\3\u0133\5\u0133\u14e6\n\u0133\3\u0134\3\u0134\3\u0134\5\u0134\u14eb\n"+
		"\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u14f2\n\u0135\3"+
		"\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u1500\n\u0136\5\u0136\u1502\n\u0136\3"+
		"\u0136\3\u0136\3\u0137\3\u0137\3\u0137\5\u0137\u1509\n\u0137\3\u0138\3"+
		"\u0138\5\u0138\u150d\n\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\7"+
		"\u0139\u1514\n\u0139\f\u0139\16\u0139\u1517\13\u0139\3\u013a\3\u013a\3"+
		"\u013a\7\u013a\u151c\n\u013a\f\u013a\16\u013a\u151f\13\u013a\3\u013b\3"+
		"\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1527\n\u013b\5\u013b\u1529"+
		"\n\u013b\3\u013c\3\u013c\5\u013c\u152d\n\u013c\3\u013c\3\u013c\3\u013d"+
		"\3\u013d\3\u013d\7\u013d\u1534\n\u013d\f\u013d\16\u013d\u1537\13\u013d"+
		"\3\u013e\3\u013e\5\u013e\u153b\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\5\u013e\u1541\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1546\n\u013e\3"+
		"\u013f\3\u013f\5\u013f\u154a\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u154f"+
		"\n\u013f\3\u0140\3\u0140\5\u0140\u1553\n\u0140\3\u0141\3\u0141\3\u0142"+
		"\3\u0142\5\u0142\u1559\n\u0142\3\u0142\3\u0142\5\u0142\u155d\n\u0142\3"+
		"\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u1563\n\u0142\3\u0143\3\u0143\3"+
		"\u0143\5\u0143\u1568\n\u0143\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145\3"+
		"\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145"+
		"\u1577\n\u0145\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146\7\u0146\u157e\n"+
		"\u0146\f\u0146\16\u0146\u1581\13\u0146\3\u0147\3\u0147\3\u0147\3\u0148"+
		"\3\u0148\3\u0148\7\u0148\u1589\n\u0148\f\u0148\16\u0148\u158c\13\u0148"+
		"\3\u0149\6\u0149\u158f\n\u0149\r\u0149\16\u0149\u1590\3\u0149\3\u0149"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a"+
		"\u15b8\n\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\5\u014b\u15c2\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\5\u014c\u15c9\n\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\7\u014d\u15d2\n\u014d\f\u014d\16\u014d\u15d5\13\u014d\3\u014e"+
		"\3\u014e\3\u014e\5\u014e\u15da\n\u014e\3\u014f\3\u014f\3\u014f\3\u0150"+
		"\3\u0150\3\u0150\7\u0150\u15e2\n\u0150\f\u0150\16\u0150\u15e5\13\u0150"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0152\6\u0152\u15ee"+
		"\n\u0152\r\u0152\16\u0152\u15ef\3\u0153\3\u0153\5\u0153\u15f4\n\u0153"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\5\u0154\u161a\n\u0154\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u1628\n\u0155"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\5\u0156\u1636\n\u0156\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\5\u0157\u164e\n\u0157\3\u0158\3\u0158\3\u0158\7\u0158\u1653\n"+
		"\u0158\f\u0158\16\u0158\u1656\13\u0158\3\u0158\3\u0158\3\u0159\3\u0159"+
		"\3\u0159\7\u0159\u165d\n\u0159\f\u0159\16\u0159\u1660\13\u0159\3\u015a"+
		"\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b\3\u015c\6\u015c\u1669\n\u015c"+
		"\r\u015c\16\u015c\u166a\3\u015d\3\u015d\3\u015d\5\u015d\u1670\n\u015d"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u1694"+
		"\n\u015e\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u169b\n\u015f"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0161\3\u0161\3\u0161\5\u0161\u16aa\n\u0161\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u16d9"+
		"\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\5\u0165\u16fe\n\u0165\3\u0166\3\u0166\3\u0167\3\u0167\3\u0168\3\u0168"+
		"\3\u0168\7\u0168\u1707\n\u0168\f\u0168\16\u0168\u170a\13\u0168\3\u0169"+
		"\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u171a\n\u016a\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u18f0"+
		"\n\u016b\3\u016c\3\u016c\5\u016c\u18f4\n\u016c\3\u016d\3\u016d\3\u016d"+
		"\5\u016d\u18f9\n\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u1934\n\u016e"+
		"\3\u016f\3\u016f\5\u016f\u1938\n\u016f\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u1a13\n\u0170"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0172"+
		"\3\u0172\3\u0172\7\u0172\u1a20\n\u0172\f\u0172\16\u0172\u1a23\13\u0172"+
		"\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173"+
		"\u1a2d\n\u0173\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u1a34\n"+
		"\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\3\u0176\3\u0176\3\u0176\5\u0176\u1af5\n\u0176\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0178\3\u0178\5\u0178\u1aff\n\u0178\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u1b07\n\u0179\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a"+
		"\u1b24\n\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\7\u017c\u1b32\n\u017c\f\u017c"+
		"\16\u017c\u1b35\13\u017c\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1b5e\n\u017e"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\5\u017f\u1b6c\n\u017f\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181"+
		"\u1b82\n\u0181\3\u0182\3\u0182\3\u0182\7\u0182\u1b87\n\u0182\f\u0182\16"+
		"\u0182\u1b8a\13\u0182\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183"+
		"\u1b91\n\u0183\3\u0184\3\u0184\5\u0184\u1b95\n\u0184\3\u0185\3\u0185\3"+
		"\u0186\3\u0186\3\u0186\5\u0186\u1b9c\n\u0186\3\u0187\3\u0187\3\u0187\3"+
		"\u0187\3\u0188\3\u0188\3\u0188\5\u0188\u1ba5\n\u0188\3\u0189\3\u0189\3"+
		"\u0189\3\u018a\3\u018a\3\u018a\3\u018a\5\u018a\u1bae\n\u018a\3\u018b\3"+
		"\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u1be2\n\u018b\3\u018c\3\u018c"+
		"\3\u018c\5\u018c\u1be7\n\u018c\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u1bf3\n\u018d\3\u018e"+
		"\3\u018e\5\u018e\u1bf7\n\u018e\3\u018e\7\u018e\u1bfa\n\u018e\f\u018e\16"+
		"\u018e\u1bfd\13\u018e\3\u018f\3\u018f\5\u018f\u1c01\n\u018f\3\u0190\3"+
		"\u0190\5\u0190\u1c05\n\u0190\3\u0190\3\u0190\5\u0190\u1c09\n\u0190\3\u0191"+
		"\3\u0191\3\u0191\5\u0191\u1c0e\n\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\5\u0191\u1c1e\n\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0192"+
		"\3\u0192\5\u0192\u1c26\n\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u1c2b\n"+
		"\u0192\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0195\3\u0195\5\u0195\u1c38\n\u0195\3\u0196\6\u0196\u1c3b\n"+
		"\u0196\r\u0196\16\u0196\u1c3c\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\5\u0197\u1c44\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\5\u0198\u1c4e\n\u0198\3\u0199\3\u0199\5\u0199\u1c52\n"+
		"\u0199\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\5\u019a\u1c5d\n\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u1c68\n\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u1c70\n\u019c\3\u019d\3\u019d"+
		"\3\u019d\7\u019d\u1c75\n\u019d\f\u019d\16\u019d\u1c78\13\u019d\3\u019e"+
		"\3\u019e\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1"+
		"\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2"+
		"\u1c9e\n\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2"+
		"\u1ca6\n\u01a2\3\u01a3\3\u01a3\5\u01a3\u1caa\n\u01a3\3\u01a4\3\u01a4\3"+
		"\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1cfb\n\u01a5\3\u01a6"+
		"\3\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1d17"+
		"\n\u01a8\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u1d1c\n\u01a9\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\5\u01aa\u1d2b\n\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u1d37\n\u01ab"+
		"\3\u01ac\3\u01ac\3\u01ac\7\u01ac\u1d3c\n\u01ac\f\u01ac\16\u01ac\u1d3f"+
		"\13\u01ac\3\u01ad\3\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01af\3\u01af\5\u01af"+
		"\u1d48\n\u01af\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1d4d\n\u01b0\3\u01b1\3"+
		"\u01b1\5\u01b1\u1d51\n\u01b1\3\u01b2\3\u01b2\5\u01b2\u1d55\n\u01b2\3\u01b3"+
		"\3\u01b3\5\u01b3\u1d59\n\u01b3\3\u01b4\3\u01b4\5\u01b4\u1d5d\n\u01b4\3"+
		"\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1d64\n\u01b5\3\u01b6\3"+
		"\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7\7\u01b7\u1d6c\n\u01b7\f\u01b7\16"+
		"\u01b7\u1d6f\13\u01b7\3\u01b8\3\u01b8\5\u01b8\u1d73\n\u01b8\3\u01b9\3"+
		"\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1d85\n\u01b9"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\5\u01ba\u1d90\n\u01ba\3\u01bb\3\u01bb\3\u01bb\7\u01bb\u1d95\n\u01bb\f"+
		"\u01bb\16\u01bb\u1d98\13\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bd\3\u01bd"+
		"\5\u01bd\u1d9f\n\u01bd\3\u01be\3\u01be\3\u01be\5\u01be\u1da4\n\u01be\3"+
		"\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\5\u01c0\u1db1\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\5\u01c1\u1db7\n\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1dd4\n\u01c2\3\u01c3\3\u01c3\3\u01c3"+
		"\3\u01c3\3\u01c3\5\u01c3\u1ddb\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1de7\n\u01c4"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c6"+
		"\3\u01c6\3\u01c6\5\u01c6\u1df4\n\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7"+
		"\5\u01c7\u1e03\n\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1e09\n"+
		"\u01c7\3\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01c9\7\u01c9\u1e10\n\u01c9\f"+
		"\u01c9\16\u01c9\u1e13\13\u01c9\3\u01ca\3\u01ca\3\u01ca\3\u01cb\3\u01cb"+
		"\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\5\u01cb"+
		"\u1e22\n\u01cb\3\u01cb\5\u01cb\u1e25\n\u01cb\3\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1e30\n\u01cc\3"+
		"\u01cd\3\u01cd\3\u01cd\5\u01cd\u1e35\n\u01cd\3\u01ce\3\u01ce\5\u01ce\u1e39"+
		"\n\u01ce\3\u01ce\3\u01ce\5\u01ce\u1e3d\n\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\5\u01ce\u1e42\n\u01ce\3\u01ce\5\u01ce\u1e45\n\u01ce\3\u01ce\3\u01ce\3"+
		"\u01ce\3\u01ce\5\u01ce\u1e4b\n\u01ce\3\u01ce\3\u01ce\5\u01ce\u1e4f\n\u01ce"+
		"\5\u01ce\u1e51\n\u01ce\3\u01ce\5\u01ce\u1e54\n\u01ce\3\u01cf\3\u01cf\3"+
		"\u01cf\3\u01cf\3\u01cf\5\u01cf\u1e5b\n\u01cf\3\u01cf\5\u01cf\u1e5e\n\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1e65\n\u01cf\3\u01cf"+
		"\3\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1e6d\n\u01d0\3\u01d0"+
		"\5\u01d0\u1e70\n\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1"+
		"\3\u01d1\5\u01d1\u1e79\n\u01d1\3\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3\5\u01d3"+
		"\u1e88\n\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1e95\n\u01d5\3\u01d6\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1ea0"+
		"\n\u01d6\3\u01d6\5\u01d6\u1ea3\n\u01d6\3\u01d7\3\u01d7\5\u01d7\u1ea7\n"+
		"\u01d7\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ead\n\u01d8\3\u01d9\3"+
		"\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01da"+
		"\3\u01da\3\u01da\7\u01da\u1ebb\n\u01da\f\u01da\16\u01da\u1ebe\13\u01da"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\5\u01db\u1eca\n\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dd\3\u01dd"+
		"\3\u01dd\7\u01dd\u1ed2\n\u01dd\f\u01dd\16\u01dd\u1ed5\13\u01dd\3\u01de"+
		"\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01df\3\u01df"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\7\u01e0\u1ee6\n\u01e0\f\u01e0"+
		"\16\u01e0\u1ee9\13\u01e0\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1"+
		"\u1ef0\n\u01e1\3\u01e2\3\u01e2\5\u01e2\u1ef4\n\u01e2\3\u01e3\3\u01e3\3"+
		"\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\5\u01e3\u1efe\n\u01e3\3"+
		"\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4"+
		"\u1f08\n\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\3\u01e4\5\u01e4\u1f13\n\u01e4\5\u01e4\u1f15\n\u01e4\3\u01e5\3"+
		"\u01e5\5\u01e5\u1f19\n\u01e5\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3"+
		"\u01e6\3\u01e6\3\u01e6\5\u01e6\u1f23\n\u01e6\3\u01e6\3\u01e6\3\u01e6\3"+
		"\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6"+
		"\3\u01e6\3\u01e6\5\u01e6\u1f33\n\u01e6\5\u01e6\u1f35\n\u01e6\3\u01e6\3"+
		"\u01e6\3\u01e6\5\u01e6\u1f3a\n\u01e6\7\u01e6\u1f3c\n\u01e6\f\u01e6\16"+
		"\u01e6\u1f3f\13\u01e6\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1f44\n\u01e7\3"+
		"\u01e8\3\u01e8\3\u01e8\3\u01e9\3\u01e9\5\u01e9\u1f4b\n\u01e9\3\u01e9\3"+
		"\u01e9\3\u01ea\3\u01ea\3\u01ea\7\u01ea\u1f52\n\u01ea\f\u01ea\16\u01ea"+
		"\u1f55\13\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb\3\u01eb"+
		"\3\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u1f63\n\u01ec\3\u01ed"+
		"\3\u01ed\5\u01ed\u1f67\n\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee"+
		"\5\u01ee\u1f6e\n\u01ee\3\u01ee\5\u01ee\u1f71\n\u01ee\3\u01ef\3\u01ef\5"+
		"\u01ef\u1f75\n\u01ef\3\u01f0\5\u01f0\u1f78\n\u01f0\3\u01f0\3\u01f0\3\u01f0"+
		"\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\5\u01f0"+
		"\u1f85\n\u01f0\3\u01f1\3\u01f1\5\u01f1\u1f89\n\u01f1\3\u01f2\3\u01f2\3"+
		"\u01f2\5\u01f2\u1f8e\n\u01f2\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3"+
		"\u01f3\5\u01f3\u1f96\n\u01f3\3\u01f4\3\u01f4\5\u01f4\u1f9a\n\u01f4\3\u01f5"+
		"\3\u01f5\5\u01f5\u1f9e\n\u01f5\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f7"+
		"\3\u01f7\3\u01f7\7\u01f7\u1fa7\n\u01f7\f\u01f7\16\u01f7\u1faa\13\u01f7"+
		"\3\u01f8\3\u01f8\3\u01f8\3\u01f8\5\u01f8\u1fb0\n\u01f8\3\u01f8\3\u01f8"+
		"\3\u01f9\3\u01f9\5\u01f9\u1fb6\n\u01f9\3\u01f9\3\u01f9\5\u01f9\u1fba\n"+
		"\u01f9\5\u01f9\u1fbc\n\u01f9\3\u01fa\3\u01fa\5\u01fa\u1fc0\n\u01fa\3\u01fb"+
		"\3\u01fb\3\u01fb\3\u01fb\5\u01fb\u1fc6\n\u01fb\3\u01fb\3\u01fb\3\u01fb"+
		"\3\u01fb\3\u01fb\3\u01fb\3\u01fb\5\u01fb\u1fcf\n\u01fb\3\u01fb\3\u01fb"+
		"\3\u01fb\3\u01fb\5\u01fb\u1fd5\n\u01fb\5\u01fb\u1fd7\n\u01fb\5\u01fb\u1fd9"+
		"\n\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u1fe0\n\u01fc"+
		"\3\u01fd\3\u01fd\5\u01fd\u1fe4\n\u01fd\3\u01fe\3\u01fe\3\u01ff\3\u01ff"+
		"\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1fed\n\u01ff\3\u0200\3\u0200\5\u0200"+
		"\u1ff1\n\u0200\3\u0201\3\u0201\3\u0202\3\u0202\3\u0203\3\u0203\3\u0203"+
		"\3\u0203\5\u0203\u1ffb\n\u0203\3\u0204\3\u0204\3\u0204\7\u0204\u2000\n"+
		"\u0204\f\u0204\16\u0204\u2003\13\u0204\3\u0205\3\u0205\3\u0205\3\u0205"+
		"\3\u0205\5\u0205\u200a\n\u0205\3\u0206\3\u0206\3\u0206\3\u0207\3\u0207"+
		"\3\u0207\3\u0207\3\u0207\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0209"+
		"\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\3\u020a\3\u020a\3\u020a\5\u020a"+
		"\u2022\n\u020a\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u2028\n\u020b\3"+
		"\u020c\3\u020c\5\u020c\u202c\n\u020c\3\u020d\6\u020d\u202f\n\u020d\r\u020d"+
		"\16\u020d\u2030\3\u020e\3\u020e\3\u020e\3\u020e\3\u020f\3\u020f\3\u020f"+
		"\5\u020f\u203a\n\u020f\3\u020f\3\u020f\5\u020f\u203e\n\u020f\3\u020f\5"+
		"\u020f\u2041\n\u020f\3\u0210\3\u0210\3\u0210\5\u0210\u2046\n\u0210\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\7\u0211"+
		"\u2051\n\u0211\f\u0211\16\u0211\u2054\13\u0211\3\u0212\3\u0212\3\u0212"+
		"\5\u0212\u2059\n\u0212\3\u0213\3\u0213\3\u0213\3\u0213\7\u0213\u205f\n"+
		"\u0213\f\u0213\16\u0213\u2062\13\u0213\5\u0213\u2064\n\u0213\3\u0214\3"+
		"\u0214\3\u0214\6\u0214\u2069\n\u0214\r\u0214\16\u0214\u206a\3\u0215\3"+
		"\u0215\3\u0215\5\u0215\u2070\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3"+
		"\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u2085\n\u0215"+
		"\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u208e"+
		"\n\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u2093\n\u0215\3\u0215\3\u0215"+
		"\3\u0215\3\u0215\5\u0215\u2099\n\u0215\3\u0215\3\u0215\3\u0215\5\u0215"+
		"\u209e\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u20a5\n"+
		"\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u20aa\n\u0215\3\u0215\3\u0215\3"+
		"\u0215\3\u0215\7\u0215\u20b0\n\u0215\f\u0215\16\u0215\u20b3\13\u0215\3"+
		"\u0216\5\u0216\u20b6\n\u0216\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5"+
		"\u0216\u20bd\n\u0216\3\u0217\3\u0217\5\u0217\u20c1\n\u0217\3\u0218\3\u0218"+
		"\3\u0218\5\u0218\u20c6\n\u0218\3\u0218\5\u0218\u20c9\n\u0218\3\u0218\3"+
		"\u0218\3\u0218\3\u0218\3\u0218\5\u0218\u20d0\n\u0218\3\u0219\3\u0219\5"+
		"\u0219\u20d4\n\u0219\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3"+
		"\u021a\5\u021a\u20dd\n\u021a\3\u021b\3\u021b\5\u021b\u20e1\n\u021b\3\u021b"+
		"\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\5\u021b\u20e9\n\u021b\5\u021b"+
		"\u20eb\n\u021b\3\u021c\3\u021c\3\u021c\7\u021c\u20f0\n\u021c\f\u021c\16"+
		"\u021c\u20f3\13\u021c\3\u021d\3\u021d\5\u021d\u20f7\n\u021d\3\u021d\5"+
		"\u021d\u20fa\n\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3"+
		"\u021e\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\5\u021f\u2109\n"+
		"\u021f\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0220\5\u0220\u2115\n\u0220\3\u0221\3\u0221\3\u0221\3\u0222"+
		"\3\u0222\3\u0222\7\u0222\u211d\n\u0222\f\u0222\16\u0222\u2120\13\u0222"+
		"\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\5\u0223\u2128\n\u0223"+
		"\3\u0224\3\u0224\3\u0224\5\u0224\u212d\n\u0224\3\u0225\3\u0225\3\u0225"+
		"\5\u0225\u2132\n\u0225\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226"+
		"\u2139\n\u0226\3\u0226\5\u0226\u213c\n\u0226\3\u0227\3\u0227\5\u0227\u2140"+
		"\n\u0227\3\u0228\3\u0228\3\u0228\7\u0228\u2145\n\u0228\f\u0228\16\u0228"+
		"\u2148\13\u0228\3\u0229\3\u0229\3\u0229\3\u0229\3\u022a\3\u022a\3\u022a"+
		"\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a"+
		"\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\5\u022a\u215f\n\u022a\3\u022a"+
		"\3\u022a\3\u022b\3\u022b\3\u022b\7\u022b\u2166\n\u022b\f\u022b\16\u022b"+
		"\u2169\13\u022b\3\u022c\3\u022c\3\u022c\5\u022c\u216e\n\u022c\3\u022c"+
		"\3\u022c\5\u022c\u2172\n\u022c\3\u022d\6\u022d\u2175\n\u022d\r\u022d\16"+
		"\u022d\u2176\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3"+
		"\u022e\5\u022e\u2181\n\u022e\3\u022f\3\u022f\3\u022f\7\u022f\u2186\n\u022f"+
		"\f\u022f\16\u022f\u2189\13\u022f\3\u0230\3\u0230\3\u0230\3\u0230\3\u0230"+
		"\3\u0230\5\u0230\u2191\n\u0230\3\u0231\5\u0231\u2194\n\u0231\3\u0231\3"+
		"\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u219d\n\u0231\5"+
		"\u0231\u219f\n\u0231\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u21a5\n\u0231"+
		"\3\u0232\3\u0232\5\u0232\u21a9\n\u0232\3\u0232\7\u0232\u21ac\n\u0232\f"+
		"\u0232\16\u0232\u21af\13\u0232\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233"+
		"\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\3\u0233\5\u0233\u21bc\n\u0233"+
		"\5\u0233\u21be\n\u0233\3\u0234\3\u0234\3\u0234\3\u0234\5\u0234\u21c4\n"+
		"\u0234\3\u0235\3\u0235\5\u0235\u21c8\n\u0235\3\u0235\5\u0235\u21cb\n\u0235"+
		"\3\u0235\3\u0235\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236\5\u0236\u21d4"+
		"\n\u0236\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237"+
		"\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\5\u0237"+
		"\u21e6\n\u0237\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238\5\u0238\u21ed\n"+
		"\u0238\3\u0239\3\u0239\5\u0239\u21f1\n\u0239\3\u023a\3\u023a\5\u023a\u21f5"+
		"\n\u023a\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023c\3\u023c"+
		"\3\u023c\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\5\u023d\u2205\n\u023d"+
		"\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\5\u023e\u220c\n\u023e\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\5\u023f\u2214\n\u023f\3\u0240"+
		"\3\u0240\5\u0240\u2218\n\u0240\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\5\u0241\u221f\n\u0241\3\u0241\3\u0241\3\u0242\3\u0242\3\u0243\3\u0243"+
		"\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\5\u0243\u222c\n\u0243\3\u0244"+
		"\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244\3\u0244"+
		"\3\u0244\3\u0244\3\u0244\3\u0244\5\u0244\u223c\n\u0244\3\u0244\3\u0244"+
		"\3\u0244\3\u0244\5\u0244\u2242\n\u0244\3\u0244\3\u0244\3\u0244\3\u0244"+
		"\5\u0244\u2248\n\u0244\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245"+
		"\u224f\n\u0245\3\u0246\3\u0246\3\u0246\5\u0246\u2254\n\u0246\3\u0247\3"+
		"\u0247\3\u0248\3\u0248\5\u0248\u225a\n\u0248\3\u0249\3\u0249\3\u0249\7"+
		"\u0249\u225f\n\u0249\f\u0249\16\u0249\u2262\13\u0249\3\u024a\3\u024a\3"+
		"\u024a\7\u024a\u2267\n\u024a\f\u024a\16\u024a\u226a\13\u024a\3\u024b\3"+
		"\u024b\3\u024b\7\u024b\u226f\n\u024b\f\u024b\16\u024b\u2272\13\u024b\3"+
		"\u024c\3\u024c\5\u024c\u2276\n\u024c\3\u024c\3\u024c\5\u024c\u227a\n\u024c"+
		"\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u2280\n\u024c\3\u024d\3\u024d"+
		"\5\u024d\u2284\n\u024d\3\u024d\3\u024d\5\u024d\u2288\n\u024d\3\u024e\5"+
		"\u024e\u228b\n\u024e\3\u024e\3\u024e\3\u024f\3\u024f\5\u024f\u2291\n\u024f"+
		"\3\u0250\3\u0250\3\u0250\5\u0250\u2296\n\u0250\3\u0250\3\u0250\3\u0250"+
		"\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250"+
		"\3\u0250\3\u0250\5\u0250\u22a6\n\u0250\3\u0250\5\u0250\u22a9\n\u0250\5"+
		"\u0250\u22ab\n\u0250\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3\u0251\3"+
		"\u0251\3\u0251\3\u0251\3\u0251\5\u0251\u22b7\n\u0251\5\u0251\u22b9\n\u0251"+
		"\3\u0252\3\u0252\5\u0252\u22bd\n\u0252\3\u0252\3\u0252\3\u0252\3\u0252"+
		"\5\u0252\u22c3\n\u0252\3\u0252\3\u0252\3\u0252\5\u0252\u22c8\n\u0252\3"+
		"\u0253\3\u0253\3\u0253\3\u0253\7\u0253\u22ce\n\u0253\f\u0253\16\u0253"+
		"\u22d1\13\u0253\3\u0254\5\u0254\u22d4\n\u0254\3\u0254\3\u0254\3\u0255"+
		"\3\u0255\3\u0255\7\u0255\u22db\n\u0255\f\u0255\16\u0255\u22de\13\u0255"+
		"\3\u0256\3\u0256\3\u0256\7\u0256\u22e3\n\u0256\f\u0256\16\u0256\u22e6"+
		"\13\u0256\3\u0257\3\u0257\3\u0257\5\u0257\u22eb\n\u0257\3\u0258\5\u0258"+
		"\u22ee\n\u0258\3\u0258\3\u0258\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259"+
		"\5\u0259\u22f7\n\u0259\3\u025a\3\u025a\3\u025a\5\u025a\u22fc\n\u025a\3"+
		"\u025b\3\u025b\3\u025b\7\u025b\u2301\n\u025b\f\u025b\16\u025b\u2304\13"+
		"\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\5\u025c"+
		"\u230d\n\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c"+
		"\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c"+
		"\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\5\u025c"+
		"\u2327\n\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c"+
		"\3\u025c\3\u025c\5\u025c\u2332\n\u025c\7\u025c\u2334\n\u025c\f\u025c\16"+
		"\u025c\u2337\13\u025c\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d"+
		"\u233e\n\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d"+
		"\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d"+
		"\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u2355\n\u025d\3\u025d"+
		"\3\u025d\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u235d\n\u025d\3\u025e"+
		"\3\u025e\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u2367"+
		"\n\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f"+
		"\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u2375\n\u025f\3\u025f\3\u025f"+
		"\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\3\u0260\5\u0260\u237f\n\u0260"+
		"\3\u0261\3\u0261\5\u0261\u2383\n\u0261\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262"+
		"\u2391\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u2398\n"+
		"\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u239f\n\u0262\3"+
		"\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u23a6\n\u0262\3\u0262\3"+
		"\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u23bf\n\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u23dc"+
		"\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\5\u0262\u2403\n\u0262\5\u0262\u2405\n\u0262\3\u0262\3"+
		"\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u2421"+
		"\n\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\5\u0262\u2436\n\u0262\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\5\u0263\u243d\n\u0263\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\5\u0264\u244a\n\u0264"+
		"\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0266\3\u0266\3\u0266\7\u0266"+
		"\u2454\n\u0266\f\u0266\16\u0266\u2457\13\u0266\3\u0267\3\u0267\3\u0267"+
		"\5\u0267\u245c\n\u0267\3\u0268\3\u0268\3\u0269\3\u0269\3\u0269\3\u0269"+
		"\3\u0269\5\u0269\u2465\n\u0269\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a"+
		"\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a"+
		"\3\u026a\5\u026a\u2476\n\u026a\3\u026b\3\u026b\3\u026b\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\5\u026c\u2482\n\u026c\3\u026d"+
		"\3\u026d\3\u026d\3\u026d\3\u026d\3\u026d\3\u026d\5\u026d\u248b\n\u026d"+
		"\3\u026e\3\u026e\3\u026e\5\u026e\u2490\n\u026e\3\u026f\3\u026f\3\u026f"+
		"\7\u026f\u2495\n\u026f\f\u026f\16\u026f\u2498\13\u026f\3\u0270\3\u0270"+
		"\3\u0270\3\u0270\3\u0271\3\u0271\3\u0271\5\u0271\u24a1\n\u0271\3\u0271"+
		"\5\u0271\u24a4\n\u0271\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272"+
		"\3\u0272\3\u0273\3\u0273\5\u0273\u24af\n\u0273\3\u0274\3\u0274\3\u0274"+
		"\3\u0274\5\u0274\u24b5\n\u0274\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275"+
		"\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\5\u0275"+
		"\u24c4\n\u0275\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u24cc\n\u0276\3\u0277\3\u0277\3\u0277\3\u0277\3\u0277\3\u0277\3\u0277"+
		"\5\u0277\u24d5\n\u0277\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278\3\u0278"+
		"\3\u0278\5\u0278\u24de\n\u0278\3\u0278\5\u0278\u24e1\n\u0278\3\u0279\3"+
		"\u0279\3\u0279\5\u0279\u24e6\n\u0279\3\u0279\3\u0279\3\u0279\3\u0279\3"+
		"\u0279\3\u0279\3\u0279\5\u0279\u24ef\n\u0279\3\u027a\3\u027a\3\u027a\5"+
		"\u027a\u24f4\n\u027a\3\u027a\3\u027a\3\u027b\3\u027b\3\u027b\3\u027b\3"+
		"\u027b\3\u027b\3\u027c\3\u027c\3\u027d\3\u027d\5\u027d\u2502\n\u027d\3"+
		"\u027e\3\u027e\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f\3\u027f\5\u027f"+
		"\u250c\n\u027f\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\5\u0280"+
		"\u2514\n\u0280\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281"+
		"\3\u0281\3\u0281\3\u0281\3\u0281\3\u0281\5\u0281\u2522\n\u0281\3\u0282"+
		"\3\u0282\3\u0282\7\u0282\u2527\n\u0282\f\u0282\16\u0282\u252a\13\u0282"+
		"\3\u0283\3\u0283\3\u0283\7\u0283\u252f\n\u0283\f\u0283\16\u0283\u2532"+
		"\13\u0283\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\5\u0284\u2539\n\u0284"+
		"\3\u0285\3\u0285\3\u0285\7\u0285\u253e\n\u0285\f\u0285\16\u0285\u2541"+
		"\13\u0285\3\u0286\3\u0286\3\u0286\5\u0286\u2546\n\u0286\3\u0286\3\u0286"+
		"\3\u0287\3\u0287\3\u0287\7\u0287\u254d\n\u0287\f\u0287\16\u0287\u2550"+
		"\13\u0287\3\u0288\3\u0288\3\u0288\3\u0288\3\u0288\5\u0288\u2557\n\u0288"+
		"\3\u0289\3\u0289\3\u0289\3\u0289\3\u0289\3\u0289\3\u0289\3\u0289\5\u0289"+
		"\u2561\n\u0289\3\u028a\3\u028a\3\u028b\3\u028b\3\u028b\3\u028b\3\u028b"+
		"\3\u028b\3\u028b\5\u028b\u256c\n\u028b\3\u028c\3\u028c\3\u028c\3\u028c"+
		"\3\u028c\5\u028c\u2573\n\u028c\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d"+
		"\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d"+
		"\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d"+
		"\3\u028d\3\u028d\3\u028d\3\u028d\3\u028d\5\u028d\u2591\n\u028d\3\u028e"+
		"\3\u028e\3\u028e\3\u028e\3\u028e\3\u028e\3\u028e\5\u028e\u259a\n\u028e"+
		"\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\5\u028f\u25a1\n\u028f\3\u0290"+
		"\3\u0290\3\u0290\3\u0290\3\u0290\3\u0290\3\u0291\6\u0291\u25aa\n\u0291"+
		"\r\u0291\16\u0291\u25ab\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\3\u0293"+
		"\3\u0293\3\u0293\5\u0293\u25b6\n\u0293\3\u0294\3\u0294\5\u0294\u25ba\n"+
		"\u0294\3\u0295\3\u0295\5\u0295\u25be\n\u0295\3\u0296\3\u0296\3\u0296\5"+
		"\u0296\u25c3\n\u0296\3\u0296\3\u0296\3\u0296\3\u0296\3\u0296\3\u0296\5"+
		"\u0296\u25cb\n\u0296\3\u0296\3\u0296\5\u0296\u25cf\n\u0296\3\u0297\3\u0297"+
		"\5\u0297\u25d3\n\u0297\3\u0298\6\u0298\u25d6\n\u0298\r\u0298\16\u0298"+
		"\u25d7\3\u0299\7\u0299\u25db\n\u0299\f\u0299\16\u0299\u25de\13\u0299\3"+
		"\u029a\3\u029a\5\u029a\u25e2\n\u029a\3\u029b\3\u029b\3\u029b\7\u029b\u25e7"+
		"\n\u029b\f\u029b\16\u029b\u25ea\13\u029b\3\u029c\3\u029c\3\u029c\3\u029c"+
		"\3\u029c\5\u029c\u25f1\n\u029c\3\u029c\5\u029c\u25f4\n\u029c\3\u029d\3"+
		"\u029d\3\u029d\7\u029d\u25f9\n\u029d\f\u029d\16\u029d\u25fc\13\u029d\3"+
		"\u029e\3\u029e\5\u029e\u2600\n\u029e\3\u029f\3\u029f\3\u029f\7\u029f\u2605"+
		"\n\u029f\f\u029f\16\u029f\u2608\13\u029f\3\u02a0\3\u02a0\3\u02a1\3\u02a1"+
		"\3\u02a2\3\u02a2\3\u02a3\3\u02a3\3\u02a3\3\u02a3\3\u02a3\5\u02a3\u2615"+
		"\n\u02a3\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2624\n\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\5\u02a4\u2632\n\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4"+
		"\u2637\n\u02a4\3\u02a5\3\u02a5\3\u02a6\3\u02a6\3\u02a7\3\u02a7\3\u02a8"+
		"\3\u02a8\3\u02a9\3\u02a9\3\u02a9\3\u02aa\3\u02aa\3\u02aa\3\u02aa\7\u02aa"+
		"\u2648\n\u02aa\f\u02aa\16\u02aa\u264b\13\u02aa\3\u02aa\3\u02aa\5\u02aa"+
		"\u264f\n\u02aa\3\u02ab\3\u02ab\3\u02ab\5\u02ab\u2654\n\u02ab\3\u02ac\3"+
		"\u02ac\3\u02ac\3\u02ac\3\u02ac\5\u02ac\u265b\n\u02ac\3\u02ad\3\u02ad\3"+
		"\u02ae\3\u02ae\3\u02ae\5\u02ae\u2662\n\u02ae\3\u02af\3\u02af\3\u02af\7"+
		"\u02af\u2667\n\u02af\f\u02af\16\u02af\u266a\13\u02af\3\u02b0\3\u02b0\3"+
		"\u02b0\3\u02b0\5\u02b0\u2670\n\u02b0\3\u02b1\3\u02b1\3\u02b1\3\u02b1\5"+
		"\u02b1\u2676\n\u02b1\3\u02b2\3\u02b2\3\u02b2\3\u02b2\5\u02b2\u267c\n\u02b2"+
		"\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\5\u02b3\u2684\n\u02b3"+
		"\3\u02b4\3\u02b4\3\u02b4\3\u02b4\3\u02b4\3\u02b4\3\u02b4\5\u02b4\u268d"+
		"\n\u02b4\3\u02b5\3\u02b5\3\u02b6\3\u02b6\3\u02b7\3\u02b7\3\u02b7\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7\3\u02b7"+
		"\3\u02b7\3\u02b7\3\u02b7\5\u02b7\u26c7\n\u02b7\3\u02b8\3\u02b8\3\u02b9"+
		"\3\u02b9\3\u02ba\3\u02ba\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bc\7\u02bc"+
		"\u26d4\n\u02bc\f\u02bc\16\u02bc\u26d7\13\u02bc\3\u02bd\3\u02bd\3\u02bd"+
		"\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd"+
		"\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\3\u02bd\5\u02bd"+
		"\u26ed\n\u02bd\3\u02be\3\u02be\3\u02bf\3\u02bf\3\u02bf\3\u02bf\5\u02bf"+
		"\u26f5\n\u02bf\3\u02c0\3\u02c0\5\u02c0\u26f9\n\u02c0\3\u02c1\3\u02c1\3"+
		"\u02c1\3\u02c1\3\u02c1\3\u02c1\3\u02c1\3\u02c2\3\u02c2\3\u02c2\5\u02c2"+
		"\u2705\n\u02c2\5\u02c2\u2707\n\u02c2\3\u02c3\3\u02c3\3\u02c4\6\u02c4\u270c"+
		"\n\u02c4\r\u02c4\16\u02c4\u270d\3\u02c5\3\u02c5\3\u02c5\3\u02c5\3\u02c6"+
		"\3\u02c6\3\u02c6\5\u02c6\u2717\n\u02c6\3\u02c7\3\u02c7\3\u02c7\3\u02c7"+
		"\3\u02c7\3\u02c7\3\u02c7\3\u02c7\3\u02c7\3\u02c7\3\u02c7\3\u02c7\3\u02c7"+
		"\3\u02c7\3\u02c7\3\u02c7\5\u02c7\u2729\n\u02c7\3\u02c7\3\u02c7\3\u02c8"+
		"\3\u02c8\3\u02c8\3\u02c8\5\u02c8\u2731\n\u02c8\3\u02c9\3\u02c9\3\u02ca"+
		"\3\u02ca\3\u02ca\3\u02ca\3\u02ca\5\u02ca\u273a\n\u02ca\3\u02cb\3\u02cb"+
		"\3\u02cb\7\u02cb\u273f\n\u02cb\f\u02cb\16\u02cb\u2742\13\u02cb\3\u02cc"+
		"\3\u02cc\3\u02cc\3\u02cd\3\u02cd\3\u02ce\3\u02ce\5\u02ce\u274b\n\u02ce"+
		"\3\u02cf\3\u02cf\3\u02d0\3\u02d0\5\u02d0\u2751\n\u02d0\3\u02d1\3\u02d1"+
		"\3\u02d2\3\u02d2\3\u02d2\5\u02d2\u2758\n\u02d2\3\u02d3\3\u02d3\3\u02d3"+
		"\5\u02d3\u275d\n\u02d3\3\u02d4\3\u02d4\3\u02d4\3\u02d4\5\u02d4\u2763\n"+
		"\u02d4\3\u02d5\3\u02d5\5\u02d5\u2767\n\u02d5\3\u02d6\3\u02d6\3\u02d7\7"+
		"\u02d7\u276c\n\u02d7\f\u02d7\16\u02d7\u276f\13\u02d7\3\u02d8\3\u02d8\3"+
		"\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8"+
		"\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8"+
		"\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\3\u02d8\5\u02d8\u278c"+
		"\n\u02d8\3\u02d9\3\u02d9\3\u02d9\3\u02d9\3\u02da\3\u02da\3\u02da\3\u02da"+
		"\3\u02da\3\u02da\3\u02da\3\u02da\3\u02da\3\u02da\3\u02da\3\u02da\3\u02da"+
		"\3\u02da\5\u02da\u27a0\n\u02da\3\u02db\3\u02db\5\u02db\u27a4\n\u02db\3"+
		"\u02dc\3\u02dc\3\u02dc\3\u02dc\3\u02dc\3\u02dd\3\u02dd\3\u02dd\3\u02dd"+
		"\3\u02dd\3\u02dd\3\u02de\3\u02de\3\u02de\5\u02de\u27b4\n\u02de\3\u02df"+
		"\3\u02df\3\u02df\7\u02df\u27b9\n\u02df\f\u02df\16\u02df\u27bc\13\u02df"+
		"\3\u02e0\3\u02e0\3\u02e0\3\u02e0\3\u02e1\3\u02e1\3\u02e2\3\u02e2\3\u02e3"+
		"\3\u02e3\5\u02e3\u27c8\n\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\7\u02e3"+
		"\u27ce\n\u02e3\f\u02e3\16\u02e3\u27d1\13\u02e3\3\u02e4\3\u02e4\3\u02e4"+
		"\3\u02e4\3\u02e4\3\u02e4\3\u02e4\3\u02e4\3\u02e4\3\u02e4\3\u02e5\3\u02e5"+
		"\3\u02e5\3\u02e5\3\u02e5\7\u02e5\u27e2\n\u02e5\f\u02e5\16\u02e5\u27e5"+
		"\13\u02e5\3\u02e6\3\u02e6\3\u02e6\5\u02e6\u27ea\n\u02e6\3\u02e7\3\u02e7"+
		"\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e8\3\u02e8\5\u02e8"+
		"\u27f6\n\u02e8\3\u02e9\6\u02e9\u27f9\n\u02e9\r\u02e9\16\u02e9\u27fa\3"+
		"\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02eb\3\u02eb\3\u02eb\5\u02eb"+
		"\u2805\n\u02eb\3\u02ec\3\u02ec\3\u02ec\3\u02ed\3\u02ed\3\u02ed\3\u02ed"+
		"\3\u02ed\3\u02ee\3\u02ee\3\u02ee\3\u02ee\3\u02ee\3\u02ef\3\u02ef\3\u02ef"+
		"\3\u02ef\3\u02ef\3\u02ef\3\u02ef\3\u02ef\3\u02ef\3\u02ef\3\u02ef\3\u02ef"+
		"\3\u02ef\3\u02ef\3\u02ef\3\u02ef\3\u02ef\5\u02ef\u2825\n\u02ef\3\u02f0"+
		"\3\u02f0\3\u02f0\5\u02f0\u282a\n\u02f0\3\u02f1\3\u02f1\3\u02f1\3\u02f1"+
		"\3\u02f1\7\u02f1\u2831\n\u02f1\f\u02f1\16\u02f1\u2834\13\u02f1\3\u02f1"+
		"\3\u02f1\5\u02f1\u2838\n\u02f1\3\u02f2\3\u02f2\5\u02f2\u283c\n\u02f2\3"+
		"\u02f3\3\u02f3\3\u02f3\5\u02f3\u2841\n\u02f3\3\u02f4\3\u02f4\3\u02f5\3"+
		"\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f5\3\u02f6"+
		"\3\u02f6\3\u02f6\5\u02f6\u2851\n\u02f6\3\u02f7\3\u02f7\3\u02f7\3\u02f7"+
		"\3\u02f7\3\u02f8\3\u02f8\3\u02f9\3\u02f9\3\u02f9\3\u02f9\3\u02f9\3\u02f9"+
		"\3\u02f9\3\u02f9\3\u02f9\5\u02f9\u2863\n\u02f9\3\u02f9\5\u02f9\u2866\n"+
		"\u02f9\3\u02f9\3\u02f9\3\u02fa\3\u02fa\5\u02fa\u286c\n\u02fa\3\u02fb\3"+
		"\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb"+
		"\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb"+
		"\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\3\u02fb\5\u02fb\u2888"+
		"\n\u02fb\3\u02fc\3\u02fc\3\u02fc\3\u02fc\3\u02fc\3\u02fc\3\u02fc\3\u02fc"+
		"\5\u02fc\u2892\n\u02fc\3\u02fd\3\u02fd\3\u02fd\6\u02fd\u2897\n\u02fd\r"+
		"\u02fd\16\u02fd\u2898\5\u02fd\u289b\n\u02fd\3\u02fe\3\u02fe\3\u02fe\5"+
		"\u02fe\u28a0\n\u02fe\3\u02ff\3\u02ff\3\u02ff\3\u02ff\3\u0300\3\u0300\3"+
		"\u0300\7\u0300\u28a9\n\u0300\f\u0300\16\u0300\u28ac\13\u0300\3\u0301\3"+
		"\u0301\3\u0301\3\u0301\3\u0301\3\u0302\3\u0302\3\u0302\5\u0302\u28b6\n"+
		"\u0302\3\u0303\3\u0303\3\u0303\3\u0303\3\u0303\3\u0303\3\u0303\3\u0304"+
		"\3\u0304\3\u0304\3\u0305\3\u0305\3\u0305\3\u0305\3\u0305\3\u0305\3\u0305"+
		"\3\u0305\3\u0305\5\u0305\u28cb\n\u0305\3\u0305\3\u0305\3\u0306\3\u0306"+
		"\3\u0306\5\u0306\u28d2\n\u0306\3\u0307\3\u0307\3\u0307\7\u0307\u28d7\n"+
		"\u0307\f\u0307\16\u0307\u28da\13\u0307\3\u0308\3\u0308\3\u0308\5\u0308"+
		"\u28df\n\u0308\3\u0308\5\u0308\u28e2\n\u0308\3\u0309\3\u0309\3\u0309\3"+
		"\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\5\u0309\u28ed\n\u0309\3"+
		"\u0309\3\u0309\3\u0309\3\u0309\3\u0309\5\u0309\u28f4\n\u0309\5\u0309\u28f6"+
		"\n\u0309\3\u0309\3\u0309\3\u030a\3\u030a\3\u030a\3\u030a\3\u030a\5\u030a"+
		"\u28ff\n\u030a\3\u030b\3";
	private static final String _serializedATNSegment1 =
		"\u030b\3\u030b\7\u030b\u2904\n\u030b\f\u030b\16\u030b\u2907\13\u030b\3"+
		"\u030c\3\u030c\3\u030c\5\u030c\u290c\n\u030c\3\u030d\3\u030d\3\u030d\3"+
		"\u030d\5\u030d\u2912\n\u030d\3\u030e\3\u030e\5\u030e\u2916\n\u030e\3\u030f"+
		"\3\u030f\3\u030f\3\u030f\3\u030f\3\u030f\3\u030f\3\u030f\3\u0310\3\u0310"+
		"\3\u0311\3\u0311\3\u0311\5\u0311\u2925\n\u0311\3\u0312\3\u0312\3\u0312"+
		"\3\u0312\3\u0312\3\u0312\3\u0312\3\u0312\3\u0312\3\u0312\3\u0312\3\u0312"+
		"\3\u0312\3\u0312\3\u0312\5\u0312\u2936\n\u0312\5\u0312\u2938\n\u0312\3"+
		"\u0313\3\u0313\3\u0313\3\u0313\3\u0313\3\u0314\3\u0314\3\u0314\3\u0314"+
		"\3\u0315\3\u0315\3\u0315\3\u0316\3\u0316\3\u0316\3\u0316\3\u0317\3\u0317"+
		"\3\u0317\3\u0317\3\u0318\3\u0318\5\u0318\u2950\n\u0318\3\u0318\3\u0318"+
		"\5\u0318\u2954\n\u0318\3\u0319\3\u0319\3\u0319\3\u0319\3\u0319\3\u0319"+
		"\3\u0319\3\u0319\3\u0319\5\u0319\u295f\n\u0319\3\u0319\5\u0319\u2962\n"+
		"\u0319\3\u031a\3\u031a\5\u031a\u2966\n\u031a\3\u031b\3\u031b\3\u031b\5"+
		"\u031b\u296b\n\u031b\3\u031c\6\u031c\u296e\n\u031c\r\u031c\16\u031c\u296f"+
		"\3\u031d\3\u031d\3\u031d\3\u031d\3\u031d\3\u031e\3\u031e\3\u031e\7\u031e"+
		"\u297a\n\u031e\f\u031e\16\u031e\u297d\13\u031e\3\u031f\3\u031f\3\u031f"+
		"\5\u031f\u2982\n\u031f\3\u0320\3\u0320\5\u0320\u2986\n\u0320\3\u0321\3"+
		"\u0321\5\u0321\u298a\n\u0321\3\u0322\3\u0322\5\u0322\u298e\n\u0322\3\u0323"+
		"\3\u0323\3\u0323\5\u0323\u2993\n\u0323\3\u0324\3\u0324\5\u0324\u2997\n"+
		"\u0324\3\u0325\3\u0325\3\u0326\3\u0326\3\u0326\3\u0326\3\u0326\3\u0326"+
		"\3\u0326\3\u0326\3\u0327\3\u0327\3\u0328\3\u0328\3\u0329\3\u0329\3\u032a"+
		"\3\u032a\3\u032b\3\u032b\3\u032b\3\u032c\3\u032c\3\u032c\3\u032c\3\u032c"+
		"\5\u032c\u29b3\n\u032c\3\u032c\2\3\u04b6\u032d\2\4\6\b\n\f\16\20\22\24"+
		"\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtv"+
		"xz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244"+
		"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c"+
		"\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274"+
		"\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c"+
		"\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4"+
		"\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc"+
		"\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4"+
		"\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec"+
		"\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304"+
		"\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c"+
		"\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334"+
		"\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c"+
		"\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364"+
		"\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c"+
		"\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394"+
		"\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac"+
		"\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4"+
		"\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc"+
		"\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4"+
		"\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c"+
		"\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424"+
		"\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c"+
		"\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454"+
		"\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c"+
		"\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484"+
		"\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c"+
		"\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4"+
		"\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc"+
		"\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4"+
		"\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc"+
		"\u04fe\u0500\u0502\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514"+
		"\u0516\u0518\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a\u052c"+
		"\u052e\u0530\u0532\u0534\u0536\u0538\u053a\u053c\u053e\u0540\u0542\u0544"+
		"\u0546\u0548\u054a\u054c\u054e\u0550\u0552\u0554\u0556\u0558\u055a\u055c"+
		"\u055e\u0560\u0562\u0564\u0566\u0568\u056a\u056c\u056e\u0570\u0572\u0574"+
		"\u0576\u0578\u057a\u057c\u057e\u0580\u0582\u0584\u0586\u0588\u058a\u058c"+
		"\u058e\u0590\u0592\u0594\u0596\u0598\u059a\u059c\u059e\u05a0\u05a2\u05a4"+
		"\u05a6\u05a8\u05aa\u05ac\u05ae\u05b0\u05b2\u05b4\u05b6\u05b8\u05ba\u05bc"+
		"\u05be\u05c0\u05c2\u05c4\u05c6\u05c8\u05ca\u05cc\u05ce\u05d0\u05d2\u05d4"+
		"\u05d6\u05d8\u05da\u05dc\u05de\u05e0\u05e2\u05e4\u05e6\u05e8\u05ea\u05ec"+
		"\u05ee\u05f0\u05f2\u05f4\u05f6\u05f8\u05fa\u05fc\u05fe\u0600\u0602\u0604"+
		"\u0606\u0608\u060a\u060c\u060e\u0610\u0612\u0614\u0616\u0618\u061a\u061c"+
		"\u061e\u0620\u0622\u0624\u0626\u0628\u062a\u062c\u062e\u0630\u0632\u0634"+
		"\u0636\u0638\u063a\u063c\u063e\u0640\u0642\u0644\u0646\u0648\u064a\u064c"+
		"\u064e\u0650\u0652\u0654\u0656\2D\4\2\u00c5\u00c5\u0167\u0167\4\2DD\u0139"+
		"\u0139\4\2ee\u0139\u0139\5\2DDee\u0139\u0139\4\2\u0087\u0087\u00c1\u00c1"+
		"\4\2\u00f7\u00f7\u0147\u0147\4\2\f\f``\4\2\u00a4\u00a4\u0166\u0166\4\2"+
		"\u00b6\u00b6\u00df\u00df\7\2  \u011b\u011b\u0144\u0144\u015b\u015b\u015d"+
		"\u015d\4\2BB``\4\2\u015b\u015b\u015d\u015d\4\2\u00ca\u00ca\u00e2\u00e2"+
		"\13\2  \u00a2\u00a2\u00a7\u00a7\u00b5\u00b5\u00dd\u00dd\u00e5\u00e5\u0151"+
		"\u0151\u0154\u0154\u01b8\u01b8\5\2ss\u0117\u0117\u014b\u014b\4\2\67\67"+
		"PP\5\2\u00af\u00af\u00fe\u00fe\u0101\u0101\7\2  ZZ\u00b8\u00b8\u00ea\u00ea"+
		"\u016c\u016c\4\2^^\u00e4\u00e4\3\2\u01c2\u01c3\4\2^^\u0199\u0199\4\2\u0150"+
		"\u0150\u0199\u0199\4\2\u00d5\u00d5\u0123\u0123\5\2\u013c\u013c\u0160\u0160"+
		"\u01bf\u01bf\4\2BBFF\7\2\u00d6\u00d6\u0144\u0144\u0159\u0159\u0164\u0164"+
		"\u01c9\u01ca\4\2\f\f\67\67\5\2\u00d5\u00d5\u0123\u0123\u01bc\u01bc\5\2"+
		"\u00b1\u00b1\u013e\u013e\u0158\u0158\6\2ZZ\u00b8\u00b8\u00ea\u00ea\u016c"+
		"\u016c\4\2\u0099\u0099\u00f7\u00f7\4\2\u0134\u0134\u0148\u0148\3\2!\""+
		"\4\2ee\u0158\u0158\4\2\u00cb\u00cb\u0149\u0149\4\2\u00d7\u00d7\u00f7\u00f7"+
		"\4\2\u013b\u013b\u0199\u0199\4\2\u00d1\u00d1\u0107\u0107\6\2ssuuyy\u0080"+
		"\u0080\4\2\u0163\u0163\u01df\u01df\4\2\u0182\u0183\u0191\u0191\3\2\u0182"+
		"\u0183\3\2\u019d\u019e\3\2\24\25\4\2ww||\7\2\f\f\22\23\27\27\31\31\33"+
		"\33\3\2\16\17\5\2\13\13\20\20\35\35\4\2  ::\5\2))KKaa\4\2\u00a8\u00a8"+
		"\u00be\u00be\4\2\u012b\u012b\u01c4\u01c4\4\2\u00d2\u00d2\u011c\u011c\5"+
		"\2  $$\\\\\b\2\13\f\16\23\27\27\31\31\33\33\35\35\4\2\26\26\30\30\3\2"+
		"\u01e5\u01e8\r\2~~\u0083\u00fb\u00fd\u00fe\u0100\u0131\u0133\u017d\u01b3"+
		"\u01c6\u01c9\u01d7\u01d9\u01d9\u01db\u01db\u01dd\u01dd\u01e0\u01ea\7\2"+
		"lxz}\177\177\u0081\u0082\u01da\u01da\6\2 \668HJk\u01c8\u01c8\t\2yy\u0080"+
		"\u0080\u0132\u0132\u01a4\u01aa\u01fa\u01fa\u0203\u0203\u020b\u027d\4\2"+
		"@@vv\4\2\f\f\26\26\4\2\u00a9\u00a9\u01fd\u01fd\4\2\u0092\u0092\u00d4\u00d4"+
		"&\2##%%-/\67\67;;??^^vv}}\u0084\u0084\u0092\u0092\u009b\u009b\u009f\u009f"+
		"\u00a3\u00a3\u00a9\u00a9\u00ae\u00ae\u00d1\u00d1\u00d4\u00d4\u00ea\u00ea"+
		"\u00f2\u00f2\u0104\u0104\u0107\u0108\u0112\u0112\u0120\u0120\u012e\u012e"+
		"\u0134\u0134\u013a\u013a\u013e\u013f\u0148\u0148\u0163\u0163\u01b3\u01b4"+
		"\u01df\u01df\u01ec\u01f8\u01fc\u0202\u0204\u0208\u020a\u020a\2\u2d09\2"+
		"\u0658\3\2\2\2\4\u065b\3\2\2\2\6\u065d\3\2\2\2\b\u0665\3\2\2\2\n\u06e5"+
		"\3\2\2\2\f\u06e7\3\2\2\2\16\u06eb\3\2\2\2\20\u06ee\3\2\2\2\22\u06f6\3"+
		"\2\2\2\24\u06fb\3\2\2\2\26\u0701\3\2\2\2\30\u0716\3\2\2\2\32\u0722\3\2"+
		"\2\2\34\u0724\3\2\2\2\36\u072a\3\2\2\2 \u0734\3\2\2\2\"\u0736\3\2\2\2"+
		"$\u073f\3\2\2\2&\u0747\3\2\2\2(\u074d\3\2\2\2*\u0754\3\2\2\2,\u0756\3"+
		"\2\2\2.\u0768\3\2\2\2\60\u076d\3\2\2\2\62\u0776\3\2\2\2\64\u0778\3\2\2"+
		"\2\66\u0786\3\2\2\28\u0788\3\2\2\2:\u07a5\3\2\2\2<\u07a7\3\2\2\2>\u07af"+
		"\3\2\2\2@\u07b9\3\2\2\2B\u07c0\3\2\2\2D\u07c6\3\2\2\2F\u07d7\3\2\2\2H"+
		"\u07dc\3\2\2\2J\u07e0\3\2\2\2L\u07e2\3\2\2\2N\u07ed\3\2\2\2P\u07f1\3\2"+
		"\2\2R\u07f6\3\2\2\2T\u07fb\3\2\2\2V\u07fd\3\2\2\2X\u0809\3\2\2\2Z\u0810"+
		"\3\2\2\2\\\u0812\3\2\2\2^\u0814\3\2\2\2`\u0816\3\2\2\2b\u0886\3\2\2\2"+
		"d\u0888\3\2\2\2f\u0898\3\2\2\2h\u089a\3\2\2\2j\u099a\3\2\2\2l\u09a1\3"+
		"\2\2\2n\u09a6\3\2\2\2p\u09ab\3\2\2\2r\u09b0\3\2\2\2t\u09b8\3\2\2\2v\u09ba"+
		"\3\2\2\2x\u09c1\3\2\2\2z\u09c3\3\2\2\2|\u09cb\3\2\2\2~\u09d7\3\2\2\2\u0080"+
		"\u09e7\3\2\2\2\u0082\u0a03\3\2\2\2\u0084\u0a05\3\2\2\2\u0086\u0a08\3\2"+
		"\2\2\u0088\u0a10\3\2\2\2\u008a\u0a15\3\2\2\2\u008c\u0a34\3\2\2\2\u008e"+
		"\u0a36\3\2\2\2\u0090\u0a51\3\2\2\2\u0092\u0a53\3\2\2\2\u0094\u0a57\3\2"+
		"\2\2\u0096\u0a5c\3\2\2\2\u0098\u0a63\3\2\2\2\u009a\u0a68\3\2\2\2\u009c"+
		"\u0a8e\3\2\2\2\u009e\u0a92\3\2\2\2\u00a0\u0a99\3\2\2\2\u00a2\u0a9d\3\2"+
		"\2\2\u00a4\u0a9f\3\2\2\2\u00a6\u0aa7\3\2\2\2\u00a8\u0ab2\3\2\2\2\u00aa"+
		"\u0ab4\3\2\2\2\u00ac\u0abc\3\2\2\2\u00ae\u0abe\3\2\2\2\u00b0\u0aef\3\2"+
		"\2\2\u00b2\u0af3\3\2\2\2\u00b4\u0afa\3\2\2\2\u00b6\u0afc\3\2\2\2\u00b8"+
		"\u0b04\3\2\2\2\u00ba\u0b0f\3\2\2\2\u00bc\u0b13\3\2\2\2\u00be\u0b15\3\2"+
		"\2\2\u00c0\u0b1a\3\2\2\2\u00c2\u0b24\3\2\2\2\u00c4\u0b2f\3\2\2\2\u00c6"+
		"\u0b57\3\2\2\2\u00c8\u0b5c\3\2\2\2\u00ca\u0b63\3\2\2\2\u00cc\u0b65\3\2"+
		"\2\2\u00ce\u0b6d\3\2\2\2\u00d0\u0b70\3\2\2\2\u00d2\u0b77\3\2\2\2\u00d4"+
		"\u0bb3\3\2\2\2\u00d6\u0bb8\3\2\2\2\u00d8\u0bbf\3\2\2\2\u00da\u0bc1\3\2"+
		"\2\2\u00dc\u0bc9\3\2\2\2\u00de\u0bd1\3\2\2\2\u00e0\u0bd6\3\2\2\2\u00e2"+
		"\u0bd8\3\2\2\2\u00e4\u0be0\3\2\2\2\u00e6\u0bf0\3\2\2\2\u00e8\u0bfb\3\2"+
		"\2\2\u00ea\u0bfd\3\2\2\2\u00ec\u0c01\3\2\2\2\u00ee\u0c0b\3\2\2\2\u00f0"+
		"\u0c13\3\2\2\2\u00f2\u0c17\3\2\2\2\u00f4\u0c19\3\2\2\2\u00f6\u0c20\3\2"+
		"\2\2\u00f8\u0c36\3\2\2\2\u00fa\u0c3b\3\2\2\2\u00fc\u0c42\3\2\2\2\u00fe"+
		"\u0c4e\3\2\2\2\u0100\u0c53\3\2\2\2\u0102\u0c5a\3\2\2\2\u0104\u0c5c\3\2"+
		"\2\2\u0106\u0c60\3\2\2\2\u0108\u0c6e\3\2\2\2\u010a\u0c79\3\2\2\2\u010c"+
		"\u0c86\3\2\2\2\u010e\u0c94\3\2\2\2\u0110\u0c96\3\2\2\2\u0112\u0ca4\3\2"+
		"\2\2\u0114\u0cac\3\2\2\2\u0116\u0cae\3\2\2\2\u0118\u0cb5\3\2\2\2\u011a"+
		"\u0cc0\3\2\2\2\u011c\u0ccb\3\2\2\2\u011e\u0cd2\3\2\2\2\u0120\u0cd5\3\2"+
		"\2\2\u0122\u0cf7\3\2\2\2\u0124\u0cfb\3\2\2\2\u0126\u0d03\3\2\2\2\u0128"+
		"\u0d05\3\2\2\2\u012a\u0d0d\3\2\2\2\u012c\u0d1c\3\2\2\2\u012e\u0d1e\3\2"+
		"\2\2\u0130\u0d25\3\2\2\2\u0132\u0d2b\3\2\2\2\u0134\u0d2f\3\2\2\2\u0136"+
		"\u0d33\3\2\2\2\u0138\u0d35\3\2\2\2\u013a\u0d40\3\2\2\2\u013c\u0d42\3\2"+
		"\2\2\u013e\u0d4a\3\2\2\2\u0140\u0d58\3\2\2\2\u0142\u0d62\3\2\2\2\u0144"+
		"\u0d64\3\2\2\2\u0146\u0d6d\3\2\2\2\u0148\u0d70\3\2\2\2\u014a\u0ddb\3\2"+
		"\2\2\u014c\u0ddd\3\2\2\2\u014e\u0ded\3\2\2\2\u0150\u0df0\3\2\2\2\u0152"+
		"\u0df6\3\2\2\2\u0154\u0e07\3\2\2\2\u0156\u0e0f\3\2\2\2\u0158\u0e11\3\2"+
		"\2\2\u015a\u0e19\3\2\2\2\u015c\u0e1e\3\2\2\2\u015e\u0e2d\3\2\2\2\u0160"+
		"\u0e2f\3\2\2\2\u0162\u0e32\3\2\2\2\u0164\u0e34\3\2\2\2\u0166\u0e4f\3\2"+
		"\2\2\u0168\u0e54\3\2\2\2\u016a\u0e56\3\2\2\2\u016c\u0e5d\3\2\2\2\u016e"+
		"\u0e5f\3\2\2\2\u0170\u0ea1\3\2\2\2\u0172\u0ea3\3\2\2\2\u0174\u0eb2\3\2"+
		"\2\2\u0176\u0eba\3\2\2\2\u0178\u0ed1\3\2\2\2\u017a\u0ed5\3\2\2\2\u017c"+
		"\u0ee9\3\2\2\2\u017e\u0eeb\3\2\2\2\u0180\u0ef4\3\2\2\2\u0182\u0eff\3\2"+
		"\2\2\u0184\u0f0e\3\2\2\2\u0186\u0f17\3\2\2\2\u0188\u0f1c\3\2\2\2\u018a"+
		"\u0f21\3\2\2\2\u018c\u0f26\3\2\2\2\u018e\u0f2b\3\2\2\2\u0190\u0f2d\3\2"+
		"\2\2\u0192\u0f2f\3\2\2\2\u0194\u0f38\3\2\2\2\u0196\u0f60\3\2\2\2\u0198"+
		"\u0f66\3\2\2\2\u019a\u0f68\3\2\2\2\u019c\u0f77\3\2\2\2\u019e\u0f7c\3\2"+
		"\2\2\u01a0\u0f7f\3\2\2\2\u01a2\u0f83\3\2\2\2\u01a4\u0f88\3\2\2\2\u01a6"+
		"\u0f8a\3\2\2\2\u01a8\u0f8c\3\2\2\2\u01aa\u0f93\3\2\2\2\u01ac\u0f97\3\2"+
		"\2\2\u01ae\u0f99\3\2\2\2\u01b0\u0fa1\3\2\2\2\u01b2\u0fa3\3\2\2\2\u01b4"+
		"\u0fa7\3\2\2\2\u01b6\u0fb4\3\2\2\2\u01b8\u0fb9\3\2\2\2\u01ba\u0fbe\3\2"+
		"\2\2\u01bc\u0fcc\3\2\2\2\u01be\u0fe8\3\2\2\2\u01c0\u0fea\3\2\2\2\u01c2"+
		"\u0ff2\3\2\2\2\u01c4\u0ff8\3\2\2\2\u01c6\u1000\3\2\2\2\u01c8\u100c\3\2"+
		"\2\2\u01ca\u100e\3\2\2\2\u01cc\u1081\3\2\2\2\u01ce\u1083\3\2\2\2\u01d0"+
		"\u1087\3\2\2\2\u01d2\u108f\3\2\2\2\u01d4\u109a\3\2\2\2\u01d6\u109c\3\2"+
		"\2\2\u01d8\u10a0\3\2\2\2\u01da\u10a8\3\2\2\2\u01dc\u10ae\3\2\2\2\u01de"+
		"\u10b0\3\2\2\2\u01e0\u10dd\3\2\2\2\u01e2\u10e3\3\2\2\2\u01e4\u10e5\3\2"+
		"\2\2\u01e6\u10f3\3\2\2\2\u01e8\u1114\3\2\2\2\u01ea\u1118\3\2\2\2\u01ec"+
		"\u111d\3\2\2\2\u01ee\u1126\3\2\2\2\u01f0\u112a\3\2\2\2\u01f2\u112c\3\2"+
		"\2\2\u01f4\u1145\3\2\2\2\u01f6\u1147\3\2\2\2\u01f8\u115b\3\2\2\2\u01fa"+
		"\u116f\3\2\2\2\u01fc\u1183\3\2\2\2\u01fe\u1185\3\2\2\2\u0200\u118b\3\2"+
		"\2\2\u0202\u11e0\3\2\2\2\u0204\u11f9\3\2\2\2\u0206\u1200\3\2\2\2\u0208"+
		"\u1210\3\2\2\2\u020a\u1212\3\2\2\2\u020c\u1214\3\2\2\2\u020e\u121c\3\2"+
		"\2\2\u0210\u1222\3\2\2\2\u0212\u1226\3\2\2\2\u0214\u122e\3\2\2\2\u0216"+
		"\u1239\3\2\2\2\u0218\u12ce\3\2\2\2\u021a\u12d2\3\2\2\2\u021c\u132f\3\2"+
		"\2\2\u021e\u1334\3\2\2\2\u0220\u1338\3\2\2\2\u0222\u133e\3\2\2\2\u0224"+
		"\u1382\3\2\2\2\u0226\u1384\3\2\2\2\u0228\u1388\3\2\2\2\u022a\u138a\3\2"+
		"\2\2\u022c\u13a5\3\2\2\2\u022e\u13b6\3\2\2\2\u0230\u13b8\3\2\2\2\u0232"+
		"\u13c9\3\2\2\2\u0234\u1405\3\2\2\2\u0236\u1407\3\2\2\2\u0238\u1412\3\2"+
		"\2\2\u023a\u1418\3\2\2\2\u023c\u141a\3\2\2\2\u023e\u1432\3\2\2\2\u0240"+
		"\u1438\3\2\2\2\u0242\u143e\3\2\2\2\u0244\u1440\3\2\2\2\u0246\u1449\3\2"+
		"\2\2\u0248\u1455\3\2\2\2\u024a\u1472\3\2\2\2\u024c\u1474\3\2\2\2\u024e"+
		"\u1499\3\2\2\2\u0250\u149d\3\2\2\2\u0252\u14a1\3\2\2\2\u0254\u14a5\3\2"+
		"\2\2\u0256\u14aa\3\2\2\2\u0258\u14ac\3\2\2\2\u025a\u14bf\3\2\2\2\u025c"+
		"\u14cc\3\2\2\2\u025e\u14d4\3\2\2\2\u0260\u14d6\3\2\2\2\u0262\u14e1\3\2"+
		"\2\2\u0264\u14e5\3\2\2\2\u0266\u14ea\3\2\2\2\u0268\u14f1\3\2\2\2\u026a"+
		"\u14f3\3\2\2\2\u026c\u1508\3\2\2\2\u026e\u150a\3\2\2\2\u0270\u1510\3\2"+
		"\2\2\u0272\u1518\3\2\2\2\u0274\u1528\3\2\2\2\u0276\u152a\3\2\2\2\u0278"+
		"\u1530\3\2\2\2\u027a\u1545\3\2\2\2\u027c\u154e\3\2\2\2\u027e\u1552\3\2"+
		"\2\2\u0280\u1554\3\2\2\2\u0282\u1562\3\2\2\2\u0284\u1564\3\2\2\2\u0286"+
		"\u1569\3\2\2\2\u0288\u156b\3\2\2\2\u028a\u157a\3\2\2\2\u028c\u1582\3\2"+
		"\2\2\u028e\u1585\3\2\2\2\u0290\u158e\3\2\2\2\u0292\u15b7\3\2\2\2\u0294"+
		"\u15c1\3\2\2\2\u0296\u15c8\3\2\2\2\u0298\u15ca\3\2\2\2\u029a\u15d9\3\2"+
		"\2\2\u029c\u15db\3\2\2\2\u029e\u15de\3\2\2\2\u02a0\u15e6\3\2\2\2\u02a2"+
		"\u15ed\3\2\2\2\u02a4\u15f3\3\2\2\2\u02a6\u1619\3\2\2\2\u02a8\u1627\3\2"+
		"\2\2\u02aa\u1635\3\2\2\2\u02ac\u164d\3\2\2\2\u02ae\u1654\3\2\2\2\u02b0"+
		"\u1659\3\2\2\2\u02b2\u1661\3\2\2\2\u02b4\u1664\3\2\2\2\u02b6\u1668\3\2"+
		"\2\2\u02b8\u166f\3\2\2\2\u02ba\u1693\3\2\2\2\u02bc\u169a\3\2\2\2\u02be"+
		"\u169c\3\2\2\2\u02c0\u16a9\3\2\2\2\u02c2\u16ab\3\2\2\2\u02c4\u16d8\3\2"+
		"\2\2\u02c6\u16da\3\2\2\2\u02c8\u16fd\3\2\2\2\u02ca\u16ff\3\2\2\2\u02cc"+
		"\u1701\3\2\2\2\u02ce\u1703\3\2\2\2\u02d0\u170b\3\2\2\2\u02d2\u1719\3\2"+
		"\2\2\u02d4\u18ef\3\2\2\2\u02d6\u18f3\3\2\2\2\u02d8\u18f8\3\2\2\2\u02da"+
		"\u1933\3\2\2\2\u02dc\u1937\3\2\2\2\u02de\u1a12\3\2\2\2\u02e0\u1a14\3\2"+
		"\2\2\u02e2\u1a1c\3\2\2\2\u02e4\u1a2c\3\2\2\2\u02e6\u1a33\3\2\2\2\u02e8"+
		"\u1a35\3\2\2\2\u02ea\u1af4\3\2\2\2\u02ec\u1af6\3\2\2\2\u02ee\u1afe\3\2"+
		"\2\2\u02f0\u1b06\3\2\2\2\u02f2\u1b23\3\2\2\2\u02f4\u1b25\3\2\2\2\u02f6"+
		"\u1b2e\3\2\2\2\u02f8\u1b36\3\2\2\2\u02fa\u1b5d\3\2\2\2\u02fc\u1b6b\3\2"+
		"\2\2\u02fe\u1b6d\3\2\2\2\u0300\u1b81\3\2\2\2\u0302\u1b83\3\2\2\2\u0304"+
		"\u1b90\3\2\2\2\u0306\u1b94\3\2\2\2\u0308\u1b96\3\2\2\2\u030a\u1b9b\3\2"+
		"\2\2\u030c\u1b9d\3\2\2\2\u030e\u1ba4\3\2\2\2\u0310\u1ba6\3\2\2\2\u0312"+
		"\u1bad\3\2\2\2\u0314\u1be1\3\2\2\2\u0316\u1be6\3\2\2\2\u0318\u1bf2\3\2"+
		"\2\2\u031a\u1bf4\3\2\2\2\u031c\u1c00\3\2\2\2\u031e\u1c08\3\2\2\2\u0320"+
		"\u1c0a\3\2\2\2\u0322\u1c2a\3\2\2\2\u0324\u1c2c\3\2\2\2\u0326\u1c2f\3\2"+
		"\2\2\u0328\u1c37\3\2\2\2\u032a\u1c3a\3\2\2\2\u032c\u1c3e\3\2\2\2\u032e"+
		"\u1c4d\3\2\2\2\u0330\u1c51\3\2\2\2\u0332\u1c53\3\2\2\2\u0334\u1c5e\3\2"+
		"\2\2\u0336\u1c63\3\2\2\2\u0338\u1c71\3\2\2\2\u033a\u1c79\3\2\2\2\u033c"+
		"\u1c7b\3\2\2\2\u033e\u1c81\3\2\2\2\u0340\u1c86\3\2\2\2\u0342\u1c8d\3\2"+
		"\2\2\u0344\u1ca9\3\2\2\2\u0346\u1cab\3\2\2\2\u0348\u1cfa\3\2\2\2\u034a"+
		"\u1cfc\3\2\2\2\u034c\u1cfe\3\2\2\2\u034e\u1d16\3\2\2\2\u0350\u1d1b\3\2"+
		"\2\2\u0352\u1d2a\3\2\2\2\u0354\u1d36\3\2\2\2\u0356\u1d38\3\2\2\2\u0358"+
		"\u1d40\3\2\2\2\u035a\u1d42\3\2\2\2\u035c\u1d47\3\2\2\2\u035e\u1d4c\3\2"+
		"\2\2\u0360\u1d50\3\2\2\2\u0362\u1d54\3\2\2\2\u0364\u1d58\3\2\2\2\u0366"+
		"\u1d5c\3\2\2\2\u0368\u1d63\3\2\2\2\u036a\u1d65\3\2\2\2\u036c\u1d68\3\2"+
		"\2\2\u036e\u1d72\3\2\2\2\u0370\u1d84\3\2\2\2\u0372\u1d8f\3\2\2\2\u0374"+
		"\u1d91\3\2\2\2\u0376\u1d99\3\2\2\2\u0378\u1d9e\3\2\2\2\u037a\u1da3\3\2"+
		"\2\2\u037c\u1da5\3\2\2\2\u037e\u1db0\3\2\2\2\u0380\u1db6\3\2\2\2\u0382"+
		"\u1dd3\3\2\2\2\u0384\u1dda\3\2\2\2\u0386\u1de6\3\2\2\2\u0388\u1de8\3\2"+
		"\2\2\u038a\u1df0\3\2\2\2\u038c\u1e08\3\2\2\2\u038e\u1e0a\3\2\2\2\u0390"+
		"\u1e0c\3\2\2\2\u0392\u1e14\3\2\2\2\u0394\u1e24\3\2\2\2\u0396\u1e2f\3\2"+
		"\2\2\u0398\u1e34\3\2\2\2\u039a\u1e36\3\2\2\2\u039c\u1e55\3\2\2\2\u039e"+
		"\u1e68\3\2\2\2\u03a0\u1e75\3\2\2\2\u03a2\u1e7c\3\2\2\2\u03a4\u1e87\3\2"+
		"\2\2\u03a6\u1e89\3\2\2\2\u03a8\u1e94\3\2\2\2\u03aa\u1ea2\3\2\2\2\u03ac"+
		"\u1ea6\3\2\2\2\u03ae\u1eac\3\2\2\2\u03b0\u1eae\3\2\2\2\u03b2\u1eb7\3\2"+
		"\2\2\u03b4\u1ec9\3\2\2\2\u03b6\u1ecb\3\2\2\2\u03b8\u1ece\3\2\2\2\u03ba"+
		"\u1ed6\3\2\2\2\u03bc\u1ede\3\2\2\2\u03be\u1ee7\3\2\2\2\u03c0\u1eef\3\2"+
		"\2\2\u03c2\u1ef3\3\2\2\2\u03c4\u1efd\3\2\2\2\u03c6\u1f14\3\2\2\2\u03c8"+
		"\u1f18\3\2\2\2\u03ca\u1f34\3\2\2\2\u03cc\u1f43\3\2\2\2\u03ce\u1f45\3\2"+
		"\2\2\u03d0\u1f48\3\2\2\2\u03d2\u1f4e\3\2\2\2\u03d4\u1f56\3\2\2\2\u03d6"+
		"\u1f62\3\2\2\2\u03d8\u1f66\3\2\2\2\u03da\u1f70\3\2\2\2\u03dc\u1f74\3\2"+
		"\2\2\u03de\u1f84\3\2\2\2\u03e0\u1f88\3\2\2\2\u03e2\u1f8d\3\2\2\2\u03e4"+
		"\u1f8f\3\2\2\2\u03e6\u1f99\3\2\2\2\u03e8\u1f9d\3\2\2\2\u03ea\u1f9f\3\2"+
		"\2\2\u03ec\u1fa3\3\2\2\2\u03ee\u1fab\3\2\2\2\u03f0\u1fbb\3\2\2\2\u03f2"+
		"\u1fbf\3\2\2\2\u03f4\u1fd8\3\2\2\2\u03f6\u1fda\3\2\2\2\u03f8\u1fe3\3\2"+
		"\2\2\u03fa\u1fe5\3\2\2\2\u03fc\u1fec\3\2\2\2\u03fe\u1ff0\3\2\2\2\u0400"+
		"\u1ff2\3\2\2\2\u0402\u1ff4\3\2\2\2\u0404\u1ffa\3\2\2\2\u0406\u1ffc\3\2"+
		"\2\2\u0408\u2009\3\2\2\2\u040a\u200b\3\2\2\2\u040c\u200e\3\2\2\2\u040e"+
		"\u2013\3\2\2\2\u0410\u2018\3\2\2\2\u0412\u2021\3\2\2\2\u0414\u2027\3\2"+
		"\2\2\u0416\u202b\3\2\2\2\u0418\u202e\3\2\2\2\u041a\u2032\3\2\2\2\u041c"+
		"\u2036\3\2\2\2\u041e\u2045\3\2\2\2\u0420\u2047\3\2\2\2\u0422\u2058\3\2"+
		"\2\2\u0424\u2063\3\2\2\2\u0426\u2065\3\2\2\2\u0428\u209d\3\2\2\2\u042a"+
		"\u20b5\3\2\2\2\u042c\u20c0\3\2\2\2\u042e\u20cf\3\2\2\2\u0430\u20d1\3\2"+
		"\2\2\u0432\u20dc\3\2\2\2\u0434\u20ea\3\2\2\2\u0436\u20ec\3\2\2\2\u0438"+
		"\u20f4\3\2\2\2\u043a\u20fb\3\2\2\2\u043c\u2108\3\2\2\2\u043e\u2114\3\2"+
		"\2\2\u0440\u2116\3\2\2\2\u0442\u2119\3\2\2\2\u0444\u2127\3\2\2\2\u0446"+
		"\u212c\3\2\2\2\u0448\u2131\3\2\2\2\u044a\u213b\3\2\2\2\u044c\u213f\3\2"+
		"\2\2\u044e\u2141\3\2\2\2\u0450\u2149\3\2\2\2\u0452\u214d\3\2\2\2\u0454"+
		"\u2162\3\2\2\2\u0456\u216a\3\2\2\2\u0458\u2174\3\2\2\2\u045a\u2180\3\2"+
		"\2\2\u045c\u2182\3\2\2\2\u045e\u2190\3\2\2\2\u0460\u21a4\3\2\2\2\u0462"+
		"\u21ad\3\2\2\2\u0464\u21bd\3\2\2\2\u0466\u21c3\3\2\2\2\u0468\u21c7\3\2"+
		"\2\2\u046a\u21d3\3\2\2\2\u046c\u21e5\3\2\2\2\u046e\u21ec\3\2\2\2\u0470"+
		"\u21f0\3\2\2\2\u0472\u21f4\3\2\2\2\u0474\u21f6\3\2\2\2\u0476\u21fc\3\2"+
		"\2\2\u0478\u21ff\3\2\2\2\u047a\u2206\3\2\2\2\u047c\u2213\3\2\2\2\u047e"+
		"\u2217\3\2\2\2\u0480\u2219\3\2\2\2\u0482\u2222\3\2\2\2\u0484\u222b\3\2"+
		"\2\2\u0486\u2247\3\2\2\2\u0488\u2249\3\2\2\2\u048a\u2253\3\2\2\2\u048c"+
		"\u2255\3\2\2\2\u048e\u2257\3\2\2\2\u0490\u225b\3\2\2\2\u0492\u2263\3\2"+
		"\2\2\u0494\u226b\3\2\2\2\u0496\u2273\3\2\2\2\u0498\u2281\3\2\2\2\u049a"+
		"\u228a\3\2\2\2\u049c\u228e\3\2\2\2\u049e\u2292\3\2\2\2\u04a0\u22ac\3\2"+
		"\2\2\u04a2\u22ba\3\2\2\2\u04a4\u22c9\3\2\2\2\u04a6\u22d3\3\2\2\2\u04a8"+
		"\u22d7\3\2\2\2\u04aa\u22df\3\2\2\2\u04ac\u22e7\3\2\2\2\u04ae\u22ed\3\2"+
		"\2\2\u04b0\u22f1\3\2\2\2\u04b2\u22f8\3\2\2\2\u04b4\u22fd\3\2\2\2\u04b6"+
		"\u230c\3\2\2\2\u04b8\u235c\3\2\2\2\u04ba\u235e\3\2\2\2\u04bc\u2360\3\2"+
		"\2\2\u04be\u237e\3\2\2\2\u04c0\u2382\3\2\2\2\u04c2\u2435\3\2\2\2\u04c4"+
		"\u243c\3\2\2\2\u04c6\u2449\3\2\2\2\u04c8\u244b\3\2\2\2\u04ca\u2450\3\2"+
		"\2\2\u04cc\u2458\3\2\2\2\u04ce\u245d\3\2\2\2\u04d0\u2464\3\2\2\2\u04d2"+
		"\u2475\3\2\2\2\u04d4\u2477\3\2\2\2\u04d6\u2481\3\2\2\2\u04d8\u248a\3\2"+
		"\2\2\u04da\u248f\3\2\2\2\u04dc\u2491\3\2\2\2\u04de\u2499\3\2\2\2\u04e0"+
		"\u24a3\3\2\2\2\u04e2\u24a5\3\2\2\2\u04e4\u24ae\3\2\2\2\u04e6\u24b4\3\2"+
		"\2\2\u04e8\u24c3\3\2\2\2\u04ea\u24cb\3\2\2\2\u04ec\u24d4\3\2\2\2\u04ee"+
		"\u24e0\3\2\2\2\u04f0\u24ee\3\2\2\2\u04f2\u24f0\3\2\2\2\u04f4\u24f7\3\2"+
		"\2\2\u04f6\u24fd\3\2\2\2\u04f8\u2501\3\2\2\2\u04fa\u2503\3\2\2\2\u04fc"+
		"\u250b\3\2\2\2\u04fe\u2513\3\2\2\2\u0500\u2521\3\2\2\2\u0502\u2523\3\2"+
		"\2\2\u0504\u252b\3\2\2\2\u0506\u2538\3\2\2\2\u0508\u253a\3\2\2\2\u050a"+
		"\u2542\3\2\2\2\u050c\u2549\3\2\2\2\u050e\u2556\3\2\2\2\u0510\u2560\3\2"+
		"\2\2\u0512\u2562\3\2\2\2\u0514\u2564\3\2\2\2\u0516\u2572\3\2\2\2\u0518"+
		"\u2590\3\2\2\2\u051a\u2599\3\2\2\2\u051c\u25a0\3\2\2\2\u051e\u25a2\3\2"+
		"\2\2\u0520\u25a9\3\2\2\2\u0522\u25ad\3\2\2\2\u0524\u25b5\3\2\2\2\u0526"+
		"\u25b9\3\2\2\2\u0528\u25bb\3\2\2\2\u052a\u25ce\3\2\2\2\u052c\u25d2\3\2"+
		"\2\2\u052e\u25d5\3\2\2\2\u0530\u25dc\3\2\2\2\u0532\u25e1\3\2\2\2\u0534"+
		"\u25e3\3\2\2\2\u0536\u25f3\3\2\2\2\u0538\u25f5\3\2\2\2\u053a\u25fd\3\2"+
		"\2\2\u053c\u2601\3\2\2\2\u053e\u2609\3\2\2\2\u0540\u260b\3\2\2\2\u0542"+
		"\u260d\3\2\2\2\u0544\u2614\3\2\2\2\u0546\u2636\3\2\2\2\u0548\u2638\3\2"+
		"\2\2\u054a\u263a\3\2\2\2\u054c\u263c\3\2\2\2\u054e\u263e\3\2\2\2\u0550"+
		"\u2640\3\2\2\2\u0552\u264e\3\2\2\2\u0554\u2653\3\2\2\2\u0556\u265a\3\2"+
		"\2\2\u0558\u265c\3\2\2\2\u055a\u2661\3\2\2\2\u055c\u2663\3\2\2\2\u055e"+
		"\u266f\3\2\2\2\u0560\u2675\3\2\2\2\u0562\u267b\3\2\2\2\u0564\u2683\3\2"+
		"\2\2\u0566\u268c\3\2\2\2\u0568\u268e\3\2\2\2\u056a\u2690\3\2\2\2\u056c"+
		"\u26c6\3\2\2\2\u056e\u26c8\3\2\2\2\u0570\u26ca\3\2\2\2\u0572\u26cc\3\2"+
		"\2\2\u0574\u26ce\3\2\2\2\u0576\u26d5\3\2\2\2\u0578\u26ec\3\2\2\2\u057a"+
		"\u26ee\3\2\2\2\u057c\u26f4\3\2\2\2\u057e\u26f8\3\2\2\2\u0580\u26fa\3\2"+
		"\2\2\u0582\u2701\3\2\2\2\u0584\u2708\3\2\2\2\u0586\u270b\3\2\2\2\u0588"+
		"\u270f\3\2\2\2\u058a\u2716\3\2\2\2\u058c\u2718\3\2\2\2\u058e\u2730\3\2"+
		"\2\2\u0590\u2732\3\2\2\2\u0592\u2739\3\2\2\2\u0594\u273b\3\2\2\2\u0596"+
		"\u2743\3\2\2\2\u0598\u2746\3\2\2\2\u059a\u274a\3\2\2\2\u059c\u274c\3\2"+
		"\2\2\u059e\u2750\3\2\2\2\u05a0\u2752\3\2\2\2\u05a2\u2757\3\2\2\2\u05a4"+
		"\u275c\3\2\2\2\u05a6\u2762\3\2\2\2\u05a8\u2766\3\2\2\2\u05aa\u2768\3\2"+
		"\2\2\u05ac\u276d\3\2\2\2\u05ae\u278b\3\2\2\2\u05b0\u278d\3\2\2\2\u05b2"+
		"\u279f\3\2\2\2\u05b4\u27a3\3\2\2\2\u05b6\u27a5\3\2\2\2\u05b8\u27aa\3\2"+
		"\2\2\u05ba\u27b3\3\2\2\2\u05bc\u27b5\3\2\2\2\u05be\u27bd\3\2\2\2\u05c0"+
		"\u27c1\3\2\2\2\u05c2\u27c3\3\2\2\2\u05c4\u27c7\3\2\2\2\u05c6\u27d2\3\2"+
		"\2\2\u05c8\u27e3\3\2\2\2\u05ca\u27e9\3\2\2\2\u05cc\u27eb\3\2\2\2\u05ce"+
		"\u27f5\3\2\2\2\u05d0\u27f8\3\2\2\2\u05d2\u27fc\3\2\2\2\u05d4\u2804\3\2"+
		"\2\2\u05d6\u2806\3\2\2\2\u05d8\u2809\3\2\2\2\u05da\u280e\3\2\2\2\u05dc"+
		"\u2813\3\2\2\2\u05de\u2829\3\2\2\2\u05e0\u2837\3\2\2\2\u05e2\u283b\3\2"+
		"\2\2\u05e4\u2840\3\2\2\2\u05e6\u2842\3\2\2\2\u05e8\u2844\3\2\2\2\u05ea"+
		"\u2850\3\2\2\2\u05ec\u2852\3\2\2\2\u05ee\u2857\3\2\2\2\u05f0\u2859\3\2"+
		"\2\2\u05f2\u286b\3\2\2\2\u05f4\u2887\3\2\2\2\u05f6\u2891\3\2\2\2\u05f8"+
		"\u289a\3\2\2\2\u05fa\u289f\3\2\2\2\u05fc\u28a1\3\2\2\2\u05fe\u28a5\3\2"+
		"\2\2\u0600\u28ad\3\2\2\2\u0602\u28b5\3\2\2\2\u0604\u28b7\3\2\2\2\u0606"+
		"\u28be\3\2\2\2\u0608\u28c1\3\2\2\2\u060a\u28d1\3\2\2\2\u060c\u28d3\3\2"+
		"\2\2\u060e\u28e1\3\2\2\2\u0610\u28e3\3\2\2\2\u0612\u28fe\3\2\2\2\u0614"+
		"\u2900\3\2\2\2\u0616\u290b\3\2\2\2\u0618\u2911\3\2\2\2\u061a\u2915\3\2"+
		"\2\2\u061c\u2917\3\2\2\2\u061e\u291f\3\2\2\2\u0620\u2924\3\2\2\2\u0622"+
		"\u2937\3\2\2\2\u0624\u2939\3\2\2\2\u0626\u293e\3\2\2\2\u0628\u2942\3\2"+
		"\2\2\u062a\u2945\3\2\2\2\u062c\u2949\3\2\2\2\u062e\u2953\3\2\2\2\u0630"+
		"\u2961\3\2\2\2\u0632\u2965\3\2\2\2\u0634\u296a\3\2\2\2\u0636\u296d\3\2"+
		"\2\2\u0638\u2971\3\2\2\2\u063a\u2976\3\2\2\2\u063c\u2981\3\2\2\2\u063e"+
		"\u2985\3\2\2\2\u0640\u2989\3\2\2\2\u0642\u298d\3\2\2\2\u0644\u2992\3\2"+
		"\2\2\u0646\u2996\3\2\2\2\u0648\u2998\3\2\2\2\u064a\u299a\3\2\2\2\u064c"+
		"\u29a2\3\2\2\2\u064e\u29a4\3\2\2\2\u0650\u29a6\3\2\2\2\u0652\u29a8\3\2"+
		"\2\2\u0654\u29aa\3\2\2\2\u0656\u29b2\3\2\2\2\u0658\u0659\5\6\4\2\u0659"+
		"\u065a\7\2\2\3\u065a\3\3\2\2\2\u065b\u065c\5\u0574\u02bb\2\u065c\5\3\2"+
		"\2\2\u065d\u065e\5\b\5\2\u065e\7\3\2\2\2\u065f\u0661\5\n\6\2\u0660\u0662"+
		"\7\t\2\2\u0661\u0660\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0664\3\2\2\2\u0663"+
		"\u065f\3\2\2\2\u0664\u0667\3\2\2\2\u0665\u0663\3\2\2\2\u0665\u0666\3\2"+
		"\2\2\u0666\t\3\2\2\2\u0667\u0665\3\2\2\2\u0668\u06e6\5\u01c6\u00e4\2\u0669"+
		"\u06e6\5\u033c\u019f\2\u066a\u06e6\5\u0332\u019a\2\u066b\u06e6\5\u0334"+
		"\u019b\2\u066c\u06e6\5\u0244\u0123\2\u066d\u06e6\5\u0342\u01a2\2\u066e"+
		"\u06e6\5\u01e0\u00f1\2\u066f\u06e6\5\u0144\u00a3\2\u0670\u06e6\5\u014a"+
		"\u00a6\2\u0671\u06e6\5\u0154\u00ab\2\u0672\u06e6\5\u016e\u00b8\2\u0673"+
		"\u06e6\5\u02a0\u0151\2\u0674\u06e6\5(\25\2\u0675\u06e6\5\u02da\u016e\2"+
		"\u0676\u06e6\5\u02de\u0170\2\u0677\u06e6\5\u02ea\u0176\2\u0678\u06e6\5"+
		"\u02e0\u0171\2\u0679\u06e6\5\u02e8\u0175\2\u067a\u06e6\5\u0182\u00c2\2"+
		"\u067b\u06e6\5\u011a\u008e\2\u067c\u06e6\5\u033e\u01a0\2\u067d\u06e6\5"+
		"b\62\2\u067e\u06e6\5\u02d2\u016a\2\u067f\u06e6\5\u0088E\2\u0680\u06e6"+
		"\5\u02f2\u017a\2\u0681\u06e6\5\"\22\2\u0682\u06e6\5\36\20\2\u0683\u06e6"+
		"\5\u02fa\u017e\2\u0684\u06e6\5\u0108\u0085\2\u0685\u06e6\5\u0348\u01a5"+
		"\2\u0686\u06e6\5\u0346\u01a4\2\u0687\u06e6\5\u017e\u00c0\2\u0688\u06e6"+
		"\5\u0354\u01ab\2\u0689\u06e6\5\16\b\2\u068a\u06e6\5^\60\2\u068b\u06e6"+
		"\5\u008eH\2\u068c\u06e6\5\u034e\u01a8\2\u068d\u06e6\5\u0218\u010d\2\u068e"+
		"\u06e6\5X-\2\u068f\u06e6\5\u0090I\2\u0690\u06e6\5\u0192\u00ca\2\u0691"+
		"\u06e6\5\u010a\u0086\2\u0692\u06e6\5\u01ca\u00e6\2\u0693\u06e6\5\u02ba"+
		"\u015e\2\u0694\u06e6\5\u034c\u01a7\2\u0695\u06e6\5\u0340\u01a1\2\u0696"+
		"\u06e6\5\u013e\u00a0\2\u0697\u06e6\5\u014c\u00a7\2\u0698\u06e6\5\u0166"+
		"\u00b4\2\u0699\u06e6\5\u0170\u00b9\2\u069a\u06e6\5\u026a\u0136\2\u069b"+
		"\u06e6\5&\24\2\u069c\u06e6\5\u0110\u0089\2\u069d\u06e6\5\u01e4\u00f3\2"+
		"\u069e\u06e6\5\u01f2\u00fa\2\u069f\u06e6\5\u02ec\u0177\2\u06a0\u06e6\5"+
		"\u01f4\u00fb\2\u06a1\u06e6\5\u0180\u00c1\2\u06a2\u06e6\5\u012a\u0096\2"+
		"\u06a3\u06e6\5,\27\2\u06a4\u06e6\5\u0118\u008d\2\u06a5\u06e6\5\u00aeX"+
		"\2\u06a6\u06e6\5\u02f4\u017b\2\u06a7\u06e6\5\u0106\u0084\2\u06a8\u06e6"+
		"\5\u0138\u009d\2\u06a9\u06e6\5\u02c2\u0162\2\u06aa\u06e6\5\u0196\u00cc"+
		"\2\u06ab\u06e6\5\u01be\u00e0\2\u06ac\u06e6\5\20\t\2\u06ad\u06e6\5\34\17"+
		"\2\u06ae\u06e6\5\u0178\u00bd\2\u06af\u06e6\5\u0326\u0194\2\u06b0\u06e6"+
		"\5\u0386\u01c4\2\u06b1\u06e6\5\u03ba\u01de\2\u06b2\u06e6\5\u01cc\u00e7"+
		"\2\u06b3\u06e6\5\u03a2\u01d2\2\u06b4\u06e6\5`\61\2\u06b5\u06e6\5\u02b4"+
		"\u015b\2\u06b6\u06e6\5\u02be\u0160\2\u06b7\u06e6\5\u01fa\u00fe\2\u06b8"+
		"\u06e6\5\u01fc\u00ff\2\u06b9\u06e6\5\u01fe\u0100\2\u06ba\u06e6\5\u0202"+
		"\u0102\2\u06bb\u06e6\5\u02fc\u017f\2\u06bc\u06e6\5\u013c\u009f\2\u06bd"+
		"\u06e6\5\u02c6\u0164\2\u06be\u06e6\5$\23\2\u06bf\u06e6\5\u017c\u00bf\2"+
		"\u06c0\u06e6\5\u0336\u019c\2\u06c1\u06e6\5\u0382\u01c2\2\u06c2\u06e6\5"+
		"\u0370\u01b9\2\u06c3\u06e6\5\u0222\u0112\2\u06c4\u06e6\5\u022a\u0116\2"+
		"\u06c5\u06e6\5\u023c\u011f\2\u06c6\u06e6\5\u0172\u00ba\2\u06c7\u06e6\5"+
		"\u024e\u0128\2\u06c8\u06e6\5\u0388\u01c5\2\u06c9\u06e6\5\u039a\u01ce\2"+
		"\u06ca\u06e6\5\u0310\u0189\2\u06cb\u06e6\5\u0116\u008c\2\u06cc\u06e6\5"+
		"\u0324\u0193\2\u06cd\u06e6\5\u03a6\u01d4\2\u06ce\u06e6\5\u030c\u0187\2"+
		"\u06cf\u06e6\5\u037c\u01bf\2\u06d0\u06e6\5\u0200\u0101\2\u06d1\u06e6\5"+
		"\u02c8\u0165\2\u06d2\u06e6\5\u02a8\u0155\2\u06d3\u06e6\5\u02a6\u0154\2"+
		"\u06d4\u06e6\5\u02aa\u0156\2\u06d5\u06e6\5\u02d4\u016b\2\u06d6\u06e6\5"+
		"\u022c\u0117\2\u06d7\u06e6\5\u023e\u0120\2\u06d8\u06e6\5\u02fe\u0180\2"+
		"\u06d9\u06e6\5\u021c\u010f\2\u06da\u06e6\5\u03c2\u01e2\2\u06db\u06e6\5"+
		"\u0314\u018b\2\u06dc\u06e6\5\u0214\u010b\2\u06dd\u06e6\5\u0312\u018a\2"+
		"\u06de\u06e6\5\u03b0\u01d9\2\u06df\u06e6\5\u0352\u01aa\2\u06e0\u06e6\5"+
		"L\'\2\u06e1\u06e6\5\64\33\2\u06e2\u06e6\5V,\2\u06e3\u06e6\5\u0320\u0191"+
		"\2\u06e4\u06e6\5\f\7\2\u06e5\u0668\3\2\2\2\u06e5\u0669\3\2\2\2\u06e5\u066a"+
		"\3\2\2\2\u06e5\u066b\3\2\2\2\u06e5\u066c\3\2\2\2\u06e5\u066d\3\2\2\2\u06e5"+
		"\u066e\3\2\2\2\u06e5\u066f\3\2\2\2\u06e5\u0670\3\2\2\2\u06e5\u0671\3\2"+
		"\2\2\u06e5\u0672\3\2\2\2\u06e5\u0673\3\2\2\2\u06e5\u0674\3\2\2\2\u06e5"+
		"\u0675\3\2\2\2\u06e5\u0676\3\2\2\2\u06e5\u0677\3\2\2\2\u06e5\u0678\3\2"+
		"\2\2\u06e5\u0679\3\2\2\2\u06e5\u067a\3\2\2\2\u06e5\u067b\3\2\2\2\u06e5"+
		"\u067c\3\2\2\2\u06e5\u067d\3\2\2\2\u06e5\u067e\3\2\2\2\u06e5\u067f\3\2"+
		"\2\2\u06e5\u0680\3\2\2\2\u06e5\u0681\3\2\2\2\u06e5\u0682\3\2\2\2\u06e5"+
		"\u0683\3\2\2\2\u06e5\u0684\3\2\2\2\u06e5\u0685\3\2\2\2\u06e5\u0686\3\2"+
		"\2\2\u06e5\u0687\3\2\2\2\u06e5\u0688\3\2\2\2\u06e5\u0689\3\2\2\2\u06e5"+
		"\u068a\3\2\2\2\u06e5\u068b\3\2\2\2\u06e5\u068c\3\2\2\2\u06e5\u068d\3\2"+
		"\2\2\u06e5\u068e\3\2\2\2\u06e5\u068f\3\2\2\2\u06e5\u0690\3\2\2\2\u06e5"+
		"\u0691\3\2\2\2\u06e5\u0692\3\2\2\2\u06e5\u0693\3\2\2\2\u06e5\u0694\3\2"+
		"\2\2\u06e5\u0695\3\2\2\2\u06e5\u0696\3\2\2\2\u06e5\u0697\3\2\2\2\u06e5"+
		"\u0698\3\2\2\2\u06e5\u0699\3\2\2\2\u06e5\u069a\3\2\2\2\u06e5\u069b\3\2"+
		"\2\2\u06e5\u069c\3\2\2\2\u06e5\u069d\3\2\2\2\u06e5\u069e\3\2\2\2\u06e5"+
		"\u069f\3\2\2\2\u06e5\u06a0\3\2\2\2\u06e5\u06a1\3\2\2\2\u06e5\u06a2\3\2"+
		"\2\2\u06e5\u06a3\3\2\2\2\u06e5\u06a4\3\2\2\2\u06e5\u06a5\3\2\2\2\u06e5"+
		"\u06a6\3\2\2\2\u06e5\u06a7\3\2\2\2\u06e5\u06a8\3\2\2\2\u06e5\u06a9\3\2"+
		"\2\2\u06e5\u06aa\3\2\2\2\u06e5\u06ab\3\2\2\2\u06e5\u06ac\3\2\2\2\u06e5"+
		"\u06ad\3\2\2\2\u06e5\u06ae\3\2\2\2\u06e5\u06af\3\2\2\2\u06e5\u06b0\3\2"+
		"\2\2\u06e5\u06b1\3\2\2\2\u06e5\u06b2\3\2\2\2\u06e5\u06b3\3\2\2\2\u06e5"+
		"\u06b4\3\2\2\2\u06e5\u06b5\3\2\2\2\u06e5\u06b6\3\2\2\2\u06e5\u06b7\3\2"+
		"\2\2\u06e5\u06b8\3\2\2\2\u06e5\u06b9\3\2\2\2\u06e5\u06ba\3\2\2\2\u06e5"+
		"\u06bb\3\2\2\2\u06e5\u06bc\3\2\2\2\u06e5\u06bd\3\2\2\2\u06e5\u06be\3\2"+
		"\2\2\u06e5\u06bf\3\2\2\2\u06e5\u06c0\3\2\2\2\u06e5\u06c1\3\2\2\2\u06e5"+
		"\u06c2\3\2\2\2\u06e5\u06c3\3\2\2\2\u06e5\u06c4\3\2\2\2\u06e5\u06c5\3\2"+
		"\2\2\u06e5\u06c6\3\2\2\2\u06e5\u06c7\3\2\2\2\u06e5\u06c8\3\2\2\2\u06e5"+
		"\u06c9\3\2\2\2\u06e5\u06ca\3\2\2\2\u06e5\u06cb\3\2\2\2\u06e5\u06cc\3\2"+
		"\2\2\u06e5\u06cd\3\2\2\2\u06e5\u06ce\3\2\2\2\u06e5\u06cf\3\2\2\2\u06e5"+
		"\u06d0\3\2\2\2\u06e5\u06d1\3\2\2\2\u06e5\u06d2\3\2\2\2\u06e5\u06d3\3\2"+
		"\2\2\u06e5\u06d4\3\2\2\2\u06e5\u06d5\3\2\2\2\u06e5\u06d6\3\2\2\2\u06e5"+
		"\u06d7\3\2\2\2\u06e5\u06d8\3\2\2\2\u06e5\u06d9\3\2\2\2\u06e5\u06da\3\2"+
		"\2\2\u06e5\u06db\3\2\2\2\u06e5\u06dc\3\2\2\2\u06e5\u06dd\3\2\2\2\u06e5"+
		"\u06de\3\2\2\2\u06e5\u06df\3\2\2\2\u06e5\u06e0\3\2\2\2\u06e5\u06e1\3\2"+
		"\2\2\u06e5\u06e2\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e5\u06e4\3\2\2\2\u06e6"+
		"\13\3\2\2\2\u06e7\u06e9\7\u029e\2\2\u06e8\u06ea\7\u029f\2\2\u06e9\u06e8"+
		"\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\r\3\2\2\2\u06eb\u06ec\7\u01b3\2\2\u06ec"+
		"\u06ed\5\u04bc\u025f\2\u06ed\17\3\2\2\2\u06ee\u06ef\7\60\2\2\u06ef\u06f0"+
		"\7\u0139\2\2\u06f0\u06f1\5\u0558\u02ad\2\u06f1\u06f2\5\22\n\2\u06f2\u06f3"+
		"\5\24\13\2\u06f3\21\3\2\2\2\u06f4\u06f7\7k\2\2\u06f5\u06f7\3\2\2\2\u06f6"+
		"\u06f4\3\2\2\2\u06f6\u06f5\3\2\2\2\u06f7\23\3\2\2\2\u06f8\u06fa\5\32\16"+
		"\2\u06f9\u06f8\3\2\2\2\u06fa\u06fd\3\2\2\2\u06fb\u06f9\3\2\2\2\u06fb\u06fc"+
		"\3\2\2\2\u06fc\25\3\2\2\2\u06fd\u06fb\3\2\2\2\u06fe\u0700\5\30\r\2\u06ff"+
		"\u06fe\3\2\2\2\u0700\u0703\3\2\2\2\u0701\u06ff\3\2\2\2\u0701\u0702\3\2"+
		"\2\2\u0702\27\3\2\2\2\u0703\u0701\3\2\2\2\u0704\u0707\7\u011a\2\2\u0705"+
		"\u0708\5\u0550\u02a9\2\u0706\u0708\7P\2\2\u0707\u0705\3\2\2\2\u0707\u0706"+
		"\3\2\2\2\u0708\u0717\3\2\2\2\u0709\u070a\t\2\2\2\u070a\u070b\7\u011a\2"+
		"\2\u070b\u0717\5\u0550\u02a9\2\u070c\u0717\7\u00e6\2\2\u070d\u070e\7\u00a6"+
		"\2\2\u070e\u070f\7L\2\2\u070f\u0717\5\u0556\u02ac\2\u0710\u0711\7\u016e"+
		"\2\2\u0711\u0712\7\u016b\2\2\u0712\u0717\5\u0550\u02a9\2\u0713\u0714\7"+
		"e\2\2\u0714\u0717\5\u055c\u02af\2\u0715\u0717\5\u0566\u02b4\2\u0716\u0704"+
		"\3\2\2\2\u0716\u0709\3\2\2\2\u0716\u070c\3\2\2\2\u0716\u070d\3\2\2\2\u0716"+
		"\u0710\3\2\2\2\u0716\u0713\3\2\2\2\u0716\u0715\3\2\2\2\u0717\31\3\2\2"+
		"\2\u0718\u0723\5\30\r\2\u0719\u071a\7\u0157\2\2\u071a\u0723\5\u054e\u02a8"+
		"\2\u071b\u071c\7\u0088\2\2\u071c\u0723\5\u055c\u02af\2\u071d\u071e\7\u0139"+
		"\2\2\u071e\u0723\5\u055c\u02af\2\u071f\u0720\7F\2\2\u0720\u0721\t\3\2"+
		"\2\u0721\u0723\5\u055c\u02af\2\u0722\u0718\3\2\2\2\u0722\u0719\3\2\2\2"+
		"\u0722\u071b\3\2\2\2\u0722\u071d\3\2\2\2\u0722\u071f\3\2\2\2\u0723\33"+
		"\3\2\2\2\u0724\u0725\7\60\2\2\u0725\u0726\7e\2\2\u0726\u0727\5\u0558\u02ad"+
		"\2\u0727\u0728\5\22\n\2\u0728\u0729\5\24\13\2\u0729\35\3\2\2\2\u072a\u072b"+
		"\7\u008c\2\2\u072b\u072c\t\4\2\2\u072c\u072d\5\u055a\u02ae\2\u072d\u072e"+
		"\5\22\n\2\u072e\u072f\5\26\f\2\u072f\37\3\2\2\2\u0730\u0735\3\2\2\2\u0731"+
		"\u0732\7F\2\2\u0732\u0733\7\u00b1\2\2\u0733\u0735\5\u053e\u02a0\2\u0734"+
		"\u0730\3\2\2\2\u0734\u0731\3\2\2\2\u0735!\3\2\2\2\u0736\u0737\7\u008c"+
		"\2\2\u0737\u0739\t\4\2\2\u0738\u073a\7 \2\2\u0739\u0738\3\2\2\2\u0739"+
		"\u073a\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073c\5\u055a\u02ae\2\u073c\u073d"+
		"\5 \21\2\u073d\u073e\5R*\2\u073e#\3\2\2\2\u073f\u0740\7\u00c1\2\2\u0740"+
		"\u0743\t\5\2\2\u0741\u0742\7\u00de\2\2\u0742\u0744\7\u0187\2\2\u0743\u0741"+
		"\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746\5\u055c\u02af"+
		"\2\u0746%\3\2\2\2\u0747\u0748\7\60\2\2\u0748\u0749\7D\2\2\u0749\u074a"+
		"\5\u0558\u02ad\2\u074a\u074b\5\22\n\2\u074b\u074c\5\24\13\2\u074c\'\3"+
		"\2\2\2\u074d\u074e\7\u008c\2\2\u074e\u074f\7D\2\2\u074f\u0750\5\u055a"+
		"\u02ae\2\u0750\u0751\5*\26\2\u0751\u0752\7e\2\2\u0752\u0753\5\u055c\u02af"+
		"\2\u0753)\3\2\2\2\u0754\u0755\t\6\2\2\u0755+\3\2\2\2\u0756\u0757\7\60"+
		"\2\2\u0757\u075b\7\u013e\2\2\u0758\u0759\7\u00de\2\2\u0759\u075a\7O\2"+
		"\2\u075a\u075c\7\u0187\2\2\u075b\u0758\3\2\2\2\u075b\u075c\3\2\2\2\u075c"+
		"\u0762\3\2\2\2\u075d\u075e\5.\30\2\u075e\u075f\7l\2\2\u075f\u0760\5\u055a"+
		"\u02ae\2\u0760\u0763\3\2\2\2\u0761\u0763\5\u055e\u02b0\2\u0762\u075d\3"+
		"\2\2\2\u0762\u0761\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0765\5\60\31\2\u0765"+
		"-\3\2\2\2\u0766\u0769\5\u055e\u02b0\2\u0767\u0769\3\2\2\2\u0768\u0766"+
		"\3\2\2\2\u0768\u0767\3\2\2\2\u0769/\3\2\2\2\u076a\u076c\5\62\32\2\u076b"+
		"\u076a\3\2\2\2\u076c\u076f\3\2\2\2\u076d\u076b\3\2\2\2\u076d\u076e\3\2"+
		"\2\2\u076e\61\3\2\2\2\u076f\u076d\3\2\2\2\u0770\u0777\5\u00aeX\2\u0771"+
		"\u0777\5\u024e\u0128\2\u0772\u0777\5\u0118\u008d\2\u0773\u0777\5\u0196"+
		"\u00cc\2\u0774\u0777\5\u022a\u0116\2\u0775\u0777\5\u0320\u0191\2\u0776"+
		"\u0770\3\2\2\2\u0776\u0771\3\2\2\2\u0776\u0772\3\2\2\2\u0776\u0773\3\2"+
		"\2\2\u0776\u0774\3\2\2\2\u0776\u0775\3\2\2\2\u0777\63\3\2\2\2\u0778\u077a"+
		"\7\u0148\2\2\u0779\u077b\t\7\2\2\u077a\u0779\3\2\2\2\u077a\u077b\3\2\2"+
		"\2\u077b\u077c\3\2\2\2\u077c\u077d\5\66\34\2\u077d\65\3\2\2\2\u077e\u077f"+
		"\7\u015f\2\2\u077f\u0787\5\u031a\u018e\2\u0780\u0781\7\u0147\2\2\u0781"+
		"\u0782\7\u009c\2\2\u0782\u0783\7&\2\2\u0783\u0784\7\u015f\2\2\u0784\u0787"+
		"\5\u031a\u018e\2\u0785\u0787\5:\36\2\u0786\u077e\3\2\2\2\u0786\u0780\3"+
		"\2\2\2\u0786\u0785\3\2\2\2\u0787\67\3\2\2\2\u0788\u0789\5<\37\2\u0789"+
		"\u078a\t\b\2\2\u078a\u078b\5> \2\u078b9\3\2\2\2\u078c\u07a6\58\35\2\u078d"+
		"\u078e\5<\37\2\u078e\u078f\7B\2\2\u078f\u0790\7\u01b4\2\2\u0790\u07a6"+
		"\3\2\2\2\u0791\u0792\7\u019d\2\2\u0792\u0793\7\u017d\2\2\u0793\u07a6\5"+
		"F$\2\u0794\u0795\7\u009a\2\2\u0795\u07a6\5\u0550\u02a9\2\u0796\u0797\7"+
		"\u013e\2\2\u0797\u07a6\5\u0550\u02a9\2\u0798\u0799\7\u0106\2\2\u0799\u07a6"+
		"\5H%\2\u079a\u079b\7\u0139\2\2\u079b\u07a6\5J&\2\u079c\u079d\7\u0147\2"+
		"\2\u079d\u079e\7l\2\2\u079e\u07a6\5J&\2\u079f\u07a0\7\u017a\2\2\u07a0"+
		"\u07a1\7\u0112\2\2\u07a1\u07a6\5\u04ce\u0268\2\u07a2\u07a3\7\u015f\2\2"+
		"\u07a3\u07a4\7\u014c\2\2\u07a4\u07a6\5\u0550\u02a9\2\u07a5\u078c\3\2\2"+
		"\2\u07a5\u078d\3\2\2\2\u07a5\u0791\3\2\2\2\u07a5\u0794\3\2\2\2\u07a5\u0796"+
		"\3\2\2\2\u07a5\u0798\3\2\2\2\u07a5\u079a\3\2\2\2\u07a5\u079c\3\2\2\2\u07a5"+
		"\u079f\3\2\2\2\u07a5\u07a2\3\2\2\2\u07a6;\3\2\2\2\u07a7\u07ac\5\u055e"+
		"\u02b0\2\u07a8\u07a9\7\r\2\2\u07a9\u07ab\5\u055e\u02b0\2\u07aa\u07a8\3"+
		"\2\2\2\u07ab\u07ae\3\2\2\2\u07ac\u07aa\3\2\2\2\u07ac\u07ad\3\2\2\2\u07ad"+
		"=\3\2\2\2\u07ae\u07ac\3\2\2\2\u07af\u07b4\5@!\2\u07b0\u07b1\7\b\2\2\u07b1"+
		"\u07b3\5@!\2\u07b2\u07b0\3\2\2\2\u07b3\u07b6\3\2\2\2\u07b4\u07b2\3\2\2"+
		"\2\u07b4\u07b5\3\2\2\2\u07b5?\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b7\u07ba"+
		"\5D#\2\u07b8\u07ba\5\u0126\u0094\2\u07b9\u07b7\3\2\2\2\u07b9\u07b8\3\2"+
		"\2\2\u07baA\3\2\2\2\u07bb\u07bc\7\u0127\2\2\u07bc\u07c1\t\t\2\2\u07bd"+
		"\u07be\7\u0131\2\2\u07be\u07c1\7\u0127\2\2\u07bf\u07c1\7\u0145\2\2\u07c0"+
		"\u07bb\3\2\2\2\u07c0\u07bd\3\2\2\2\u07c0\u07bf\3\2\2\2\u07c1C\3\2\2\2"+
		"\u07c2\u07c7\7b\2\2\u07c3\u07c7\7>\2\2\u07c4\u07c7\7R\2\2\u07c5\u07c7"+
		"\5J&\2\u07c6\u07c2\3\2\2\2\u07c6\u07c3\3\2\2\2\u07c6\u07c4\3\2\2\2\u07c6"+
		"\u07c5\3\2\2\2\u07c7E\3\2\2\2\u07c8\u07d8\5\u0550\u02a9\2\u07c9\u07d8"+
		"\5\u0566\u02b4\2\u07ca\u07cb\5\u0482\u0242\2\u07cb\u07cc\5\u0550\u02a9"+
		"\2\u07cc\u07cd\5\u0486\u0244\2\u07cd\u07d8\3\2\2\2\u07ce\u07cf\5\u0482"+
		"\u0242\2\u07cf\u07d0\7\4\2\2\u07d0\u07d1\5\u054e\u02a8\2\u07d1\u07d2\7"+
		"\5\2\2\u07d2\u07d3\5\u0550\u02a9\2\u07d3\u07d8\3\2\2\2\u07d4\u07d8\5\u0126"+
		"\u0094\2\u07d5\u07d8\7\67\2\2\u07d6\u07d8\7\u00f7\2\2\u07d7\u07c8\3\2"+
		"\2\2\u07d7\u07c9\3\2\2\2\u07d7\u07ca\3\2\2\2\u07d7\u07ce\3\2\2\2\u07d7"+
		"\u07d4\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d6\3\2\2\2\u07d8G\3\2\2\2"+
		"\u07d9\u07dd\5\u0550\u02a9\2\u07da\u07dd\7\67\2\2\u07db\u07dd\3\2\2\2"+
		"\u07dc\u07d9\3\2\2\2\u07dc\u07da\3\2\2\2\u07dc\u07db\3\2\2\2\u07ddI\3"+
		"\2\2\2\u07de\u07e1\5\u0562\u02b2\2\u07df\u07e1\5\u0550\u02a9\2\u07e0\u07de"+
		"\3\2\2\2\u07e0\u07df\3\2\2\2\u07e1K\3\2\2\2\u07e2\u07e3\7\u0134\2\2\u07e3"+
		"\u07e4\5N(\2\u07e4M\3\2\2\2\u07e5\u07ee\5P)\2\u07e6\u07e7\7\u019d\2\2"+
		"\u07e7\u07ee\7\u017d\2\2\u07e8\u07e9\7\u015f\2\2\u07e9\u07ea\7\u00ed\2"+
		"\2\u07ea\u07ee\7\u00f4\2\2\u07eb\u07ec\7\u0147\2\2\u07ec\u07ee\7l\2\2"+
		"\u07ed\u07e5\3\2\2\2\u07ed\u07e6\3\2\2\2\u07ed\u07e8\3\2\2\2\u07ed\u07eb"+
		"\3\2\2\2\u07eeO\3\2\2\2\u07ef\u07f2\5<\37\2\u07f0\u07f2\7 \2\2\u07f1\u07ef"+
		"\3\2\2\2\u07f1\u07f0\3\2\2\2\u07f2Q\3\2\2\2\u07f3\u07f4\7\u0148\2\2\u07f4"+
		"\u07f7\5\66\34\2\u07f5\u07f7\5L\'\2\u07f6\u07f3\3\2\2\2\u07f6\u07f5\3"+
		"\2\2\2\u07f7S\3\2\2\2\u07f8\u07f9\7\u0148\2\2\u07f9\u07fc\5:\36\2\u07fa"+
		"\u07fc\5L\'\2\u07fb\u07f8\3\2\2\2\u07fb\u07fa\3\2\2\2\u07fcU\3\2\2\2\u07fd"+
		"\u0807\7\u014a\2\2\u07fe\u0808\5<\37\2\u07ff\u0800\7\u019d\2\2\u0800\u0808"+
		"\7\u017d\2\2\u0801\u0802\7\u015f\2\2\u0802\u0803\7\u00ed\2\2\u0803\u0808"+
		"\7\u00f4\2\2\u0804\u0805\7\u0147\2\2\u0805\u0808\7l\2\2\u0806\u0808\7"+
		" \2\2\u0807\u07fe\3\2\2\2\u0807\u07ff\3\2\2\2\u0807\u0801\3\2\2\2\u0807"+
		"\u0804\3\2\2\2\u0807\u0806\3\2\2\2\u0808W\3\2\2\2\u0809\u080a\7\u0148"+
		"\2\2\u080a\u080b\7\u00a7\2\2\u080b\u080c\5Z.\2\u080c\u080d\5\\/\2\u080d"+
		"Y\3\2\2\2\u080e\u0811\7 \2\2\u080f\u0811\5\u0538\u029d\2\u0810\u080e\3"+
		"\2\2\2\u0810\u080f\3\2\2\2\u0811[\3\2\2\2\u0812\u0813\t\n\2\2\u0813]\3"+
		"\2\2\2\u0814\u0815\7\u009d\2\2\u0815_\3\2\2\2\u0816\u0817\7\u00bd\2\2"+
		"\u0817\u0818\t\13\2\2\u0818a\3\2\2\2\u0819\u081a\7\u008c\2\2\u081a\u081d"+
		"\7^\2\2\u081b\u081c\7\u00de\2\2\u081c\u081e\7\u0187\2\2\u081d\u081b\3"+
		"\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0822\5\u0434\u021b"+
		"\2\u0820\u0823\5d\63\2\u0821\u0823\5f\64\2\u0822\u0820\3\2\2\2\u0822\u0821"+
		"\3\2\2\2\u0823\u0887\3\2\2\2\u0824\u0825\7\u008c\2\2\u0825\u0826\7^\2"+
		"\2\u0826\u0827\7 \2\2\u0827\u0828\7F\2\2\u0828\u0829\7\u015a\2\2\u0829"+
		"\u082d\5\u053e\u02a0\2\u082a\u082b\7\u0114\2\2\u082b\u082c\7\u0095\2\2"+
		"\u082c\u082e\5\u055c\u02af\2\u082d\u082a\3\2\2\2\u082d\u082e\3\2\2\2\u082e"+
		"\u082f\3\2\2\2\u082f\u0830\7\u0148\2\2\u0830\u0831\7\u015a\2\2\u0831\u0832"+
		"\5\u053e\u02a0\2\u0832\u0833\5\u03ac\u01d7\2\u0833\u0887\3\2\2\2\u0834"+
		"\u0835\7\u008c\2\2\u0835\u0838\7\u00e4\2\2\u0836\u0837\7\u00de\2\2\u0837"+
		"\u0839\7\u0187\2\2\u0838\u0836\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083a"+
		"\3\2\2\2\u083a\u083d\5\u053a\u029e\2\u083b\u083e\5d\63\2\u083c\u083e\5"+
		"h\65\2\u083d\u083b\3\2\2\2\u083d\u083c\3\2\2\2\u083e\u0887\3\2\2\2\u083f"+
		"\u0840\7\u008c\2\2\u0840\u0841\7\u00e4\2\2\u0841\u0842\7 \2\2\u0842\u0843"+
		"\7F\2\2\u0843\u0844\7\u015a\2\2\u0844\u0848\5\u053e\u02a0\2\u0845\u0846"+
		"\7\u0114\2\2\u0846\u0847\7\u0095\2\2\u0847\u0849\5\u055c\u02af\2\u0848"+
		"\u0845\3\2\2\2\u0848\u0849\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u084b\7\u0148"+
		"\2\2\u084b\u084c\7\u015a\2\2\u084c\u084d\5\u053e\u02a0\2\u084d\u084e\5"+
		"\u03ac\u01d7\2\u084e\u0887\3\2\2\2\u084f\u0850\7\u008c\2\2\u0850\u0853"+
		"\7\u0143\2\2\u0851\u0852\7\u00de\2\2\u0852\u0854\7\u0187\2\2\u0853\u0851"+
		"\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0856\5\u053a\u029e"+
		"\2\u0856\u0857\5d\63\2\u0857\u0887\3\2\2\2\u0858\u0859\7\u008c\2\2\u0859"+
		"\u085c\7\u0173\2\2\u085a\u085b\7\u00de\2\2\u085b\u085d\7\u0187\2\2\u085c"+
		"\u085a\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u085f\5\u053a"+
		"\u029e\2\u085f\u0860\5d\63\2\u0860\u0887\3\2\2\2\u0861\u0862\7\u008c\2"+
		"\2\u0862\u0863\7\u00fd\2\2\u0863\u0866\7\u0173\2\2\u0864\u0865\7\u00de"+
		"\2\2\u0865\u0867\7\u0187\2\2\u0866\u0864\3\2\2\2\u0866\u0867\3\2\2\2\u0867"+
		"\u0868\3\2\2\2\u0868\u0869\5\u053a\u029e\2\u0869\u086a\5d\63\2\u086a\u0887"+
		"\3\2\2\2\u086b\u086c\7\u008c\2\2\u086c\u086d\7\u00fd\2\2\u086d\u086e\7"+
		"\u0173\2\2\u086e\u086f\7 \2\2\u086f\u0870\7F\2\2\u0870\u0871\7\u015a\2"+
		"\2\u0871\u0875\5\u053e\u02a0\2\u0872\u0873\7\u0114\2\2\u0873\u0874\7\u0095"+
		"\2\2\u0874\u0876\5\u055c\u02af\2\u0875\u0872\3\2\2\2\u0875\u0876\3\2\2"+
		"\2\u0876\u0877\3\2\2\2\u0877\u0878\7\u0148\2\2\u0878\u0879\7\u015a\2\2"+
		"\u0879\u087a\5\u053e\u02a0\2\u087a\u087b\5\u03ac\u01d7\2\u087b\u0887\3"+
		"\2\2\2\u087c\u087d\7\u008c\2\2\u087d\u087e\7A\2\2\u087e\u0881\7^\2\2\u087f"+
		"\u0880\7\u00de\2\2\u0880\u0882\7\u0187\2\2\u0881\u087f\3\2\2\2\u0881\u0882"+
		"\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0884\5\u0434\u021b\2\u0884\u0885\5"+
		"d\63\2\u0885\u0887\3\2\2\2\u0886\u0819\3\2\2\2\u0886\u0824\3\2\2\2\u0886"+
		"\u0834\3\2\2\2\u0886\u083f\3\2\2\2\u0886\u084f\3\2\2\2\u0886\u0858\3\2"+
		"\2\2\u0886\u0861\3\2\2\2\u0886\u086b\3\2\2\2\u0886\u087c\3\2\2\2\u0887"+
		"c\3\2\2\2\u0888\u088d\5j\66\2\u0889\u088a\7\b\2\2\u088a\u088c\5j\66\2"+
		"\u088b\u0889\3\2\2\2\u088c\u088f\3\2\2\2\u088d\u088b\3\2\2\2\u088d\u088e"+
		"\3\2\2\2\u088ee\3\2\2\2\u088f\u088d\3\2\2\2\u0890\u0891\7\u01b5\2\2\u0891"+
		"\u0892\7\u0118\2\2\u0892\u0893\5\u053a\u029e\2\u0893\u0894\5\u0082B\2"+
		"\u0894\u0899\3\2\2\2\u0895\u0896\7\u01b6\2\2\u0896\u0897\7\u0118\2\2\u0897"+
		"\u0899\5\u053a\u029e\2\u0898\u0890\3\2\2\2\u0898\u0895\3\2\2\2\u0899g"+
		"\3\2\2\2\u089a\u089b\7\u01b5\2\2\u089b\u089c\7\u0118\2\2\u089c\u089d\5"+
		"\u053a\u029e\2\u089di\3\2\2\2\u089e\u089f\7\u0087\2\2\u089f\u099b\5\u00be"+
		"`\2\u08a0\u08a1\7\u0087\2\2\u08a1\u08a2\7\u00de\2\2\u08a2\u08a3\7O\2\2"+
		"\u08a3\u08a4\7\u0187\2\2\u08a4\u099b\5\u00be`\2\u08a5\u08a6\7\u0087\2"+
		"\2\u08a6\u08a7\7.\2\2\u08a7\u099b\5\u00be`\2\u08a8\u08a9\7\u0087\2\2\u08a9"+
		"\u08aa\7.\2\2\u08aa\u08ab\7\u00de\2\2\u08ab\u08ac\7O\2\2\u08ac\u08ad\7"+
		"\u0187\2\2\u08ad\u099b\5\u00be`\2\u08ae\u08af\7\u008c\2\2\u08af\u08b0"+
		"\5\u02d6\u016c\2\u08b0\u08b1\5\u055e\u02b0\2\u08b1\u08b2\5l\67\2\u08b2"+
		"\u099b\3\2\2\2\u08b3\u08b4\7\u008c\2\2\u08b4\u08b5\5\u02d6\u016c\2\u08b5"+
		"\u08b6\5\u055e\u02b0\2\u08b6\u08b7\7\u00c1\2\2\u08b7\u08b8\7O\2\2\u08b8"+
		"\u08b9\7P\2\2\u08b9\u099b\3\2\2\2\u08ba\u08bb\7\u008c\2\2\u08bb\u08bc"+
		"\5\u02d6\u016c\2\u08bc\u08bd\5\u055e\u02b0\2\u08bd\u08be\7\u0148\2\2\u08be"+
		"\u08bf\7O\2\2\u08bf\u08c0\7P\2\2\u08c0\u099b\3\2\2\2\u08c1\u08c2\7\u008c"+
		"\2\2\u08c2\u08c3\5\u02d6\u016c\2\u08c3\u08c4\5\u055e\u02b0\2\u08c4\u08c5"+
		"\7\u00c1\2\2\u08c5\u08c6\7\u01b7\2\2\u08c6\u099b\3\2\2\2\u08c7\u08c8\7"+
		"\u008c\2\2\u08c8\u08c9\5\u02d6\u016c\2\u08c9\u08ca\5\u055e\u02b0\2\u08ca"+
		"\u08cb\7\u00c1\2\2\u08cb\u08cc\7\u01b7\2\2\u08cc\u08cd\7\u00de\2\2\u08cd"+
		"\u08ce\7\u0187\2\2\u08ce\u099b\3\2\2\2\u08cf\u08d0\7\u008c\2\2\u08d0\u08d1"+
		"\5\u02d6\u016c\2\u08d1\u08d2\5\u055e\u02b0\2\u08d2\u08d3\7\u0148\2\2\u08d3"+
		"\u08d4\7\u0151\2\2\u08d4\u08d5\5\u0556\u02ac\2\u08d5\u099b\3\2\2\2\u08d6"+
		"\u08d7\7\u008c\2\2\u08d7\u08d8\5\u02d6\u016c\2\u08d8\u08d9\5\u054e\u02a8"+
		"\2\u08d9\u08da\7\u0148\2\2\u08da\u08db\7\u0151\2\2\u08db\u08dc\5\u0556"+
		"\u02ac\2\u08dc\u099b\3\2\2\2\u08dd\u08de\7\u008c\2\2\u08de\u08df\5\u02d6"+
		"\u016c\2\u08df\u08e0\5\u055e\u02b0\2\u08e0\u08e1\7\u0148\2\2\u08e1\u08e2"+
		"\5v<\2\u08e2\u099b\3\2\2\2\u08e3\u08e4\7\u008c\2\2\u08e4\u08e5\5\u02d6"+
		"\u016c\2\u08e5\u08e6\5\u055e\u02b0\2\u08e6\u08e7\7\u0134\2\2\u08e7\u08e8"+
		"\5v<\2\u08e8\u099b\3\2\2\2\u08e9\u08ea\7\u008c\2\2\u08ea\u08eb\5\u02d6"+
		"\u016c\2\u08eb\u08ec\5\u055e\u02b0\2\u08ec\u08ed\7\u0148\2\2\u08ed\u08ee"+
		"\7\u0154\2\2\u08ee\u08ef\5\u055e\u02b0\2\u08ef\u099b\3\2\2\2\u08f0\u08f1"+
		"\7\u008c\2\2\u08f1\u08f2\5\u02d6\u016c\2\u08f2\u08f3\5\u055e\u02b0\2\u08f3"+
		"\u08f4\7\u0087\2\2\u08f4\u08f5\7\u01b8\2\2\u08f5\u08f6\5\u00c8e\2\u08f6"+
		"\u08f7\7&\2\2\u08f7\u08f8\7\u00dd\2\2\u08f8\u08f9\5\u011e\u0090\2\u08f9"+
		"\u099b\3\2\2\2\u08fa\u08fb\7\u008c\2\2\u08fb\u08fc\5\u02d6\u016c\2\u08fc"+
		"\u08fd\5\u055e\u02b0\2\u08fd\u08fe\5~@\2\u08fe\u099b\3\2\2\2\u08ff\u0900"+
		"\7\u008c\2\2\u0900\u0901\5\u02d6\u016c\2\u0901\u0902\5\u055e\u02b0\2\u0902"+
		"\u0903\7\u00c1\2\2\u0903\u0904\7\u00dd\2\2\u0904\u099b\3\2\2\2\u0905\u0906"+
		"\7\u008c\2\2\u0906\u0907\5\u02d6\u016c\2\u0907\u0908\5\u055e\u02b0\2\u0908"+
		"\u0909\7\u00c1\2\2\u0909\u090a\7\u00dd\2\2\u090a\u090b\7\u00de\2\2\u090b"+
		"\u090c\7\u0187\2\2\u090c\u099b\3\2\2\2\u090d\u090e\7\u00c1\2\2\u090e\u090f"+
		"\5\u02d6\u016c\2\u090f\u0910\7\u00de\2\2\u0910\u0911\7\u0187\2\2\u0911"+
		"\u0912\5\u055e\u02b0\2\u0912\u0913\5n8\2\u0913\u099b\3\2\2\2\u0914\u0915"+
		"\7\u00c1\2\2\u0915\u0916\5\u02d6\u016c\2\u0916\u0917\5\u055e\u02b0\2\u0917"+
		"\u0918\5n8\2\u0918\u099b\3\2\2\2\u0919\u091a\7\u008c\2\2\u091a\u091b\5"+
		"\u02d6\u016c\2\u091b\u091c\5\u055e\u02b0\2\u091c\u091d\5\u02d8\u016d\2"+
		"\u091d\u091e\7\u0163\2\2\u091e\u091f\5\u0460\u0231\2\u091f\u0920\5p9\2"+
		"\u0920\u0921\5r:\2\u0921\u099b\3\2\2\2\u0922\u0923\7\u008c\2\2\u0923\u0924"+
		"\5\u02d6\u016c\2\u0924\u0925\5\u055e\u02b0\2\u0925\u0926\5\u015a\u00ae"+
		"\2\u0926\u099b\3\2\2\2\u0927\u0928\7\u0087\2\2\u0928\u099b\5\u00d2j\2"+
		"\u0929\u092a\7\u008c\2\2\u092a\u092b\7/\2\2\u092b\u092c\5\u053e\u02a0"+
		"\2\u092c\u092d\5\u01ba\u00de\2\u092d\u099b\3\2\2\2\u092e\u092f\7\u016f"+
		"\2\2\u092f\u0930\7/\2\2\u0930\u099b\5\u053e\u02a0\2\u0931\u0932\7\u00c1"+
		"\2\2\u0932\u0933\7/\2\2\u0933\u0934\7\u00de\2\2\u0934\u0935\7\u0187\2"+
		"\2\u0935\u0936\5\u053e\u02a0\2\u0936\u0937\5n8\2\u0937\u099b\3\2\2\2\u0938"+
		"\u0939\7\u00c1\2\2\u0939\u093a\7/\2\2\u093a\u093b\5\u053e\u02a0\2\u093b"+
		"\u093c\5n8\2\u093c\u099b\3\2\2\2\u093d\u093e\7\u0148\2\2\u093e\u093f\7"+
		"\u0176\2\2\u093f\u099b\7\u0110\2\2\u0940\u0941\7\u00a0\2\2\u0941\u0942"+
		"\7R\2\2\u0942\u099b\5\u053e\u02a0\2\u0943\u0944\7\u0148\2\2\u0944\u0945"+
		"\7\u0176\2\2\u0945\u099b\7\u00a0\2\2\u0946\u0947\7\u0148\2\2\u0947\u099b"+
		"\7\u01b9\2\2\u0948\u0949\7\u0148\2\2\u0949\u099b\7\u016a\2\2\u094a\u094b"+
		"\7\u00c3\2\2\u094b\u094c\7\u0160\2\2\u094c\u099b\5\u053e\u02a0\2\u094d"+
		"\u094e\7\u00c3\2\2\u094e\u094f\7\u008d\2\2\u094f\u0950\7\u0160\2\2\u0950"+
		"\u099b\5\u053e\u02a0\2\u0951\u0952\7\u00c3\2\2\u0952\u0953\7\u0133\2\2"+
		"\u0953\u0954\7\u0160\2\2\u0954\u099b\5\u053e\u02a0\2\u0955\u0956\7\u00c3"+
		"\2\2\u0956\u0957\7\u0160\2\2\u0957\u099b\7 \2\2\u0958\u0959\7\u00c3\2"+
		"\2\u0959\u095a\7\u0160\2\2\u095a\u099b\7e\2\2\u095b\u095c\7\u00bc\2\2"+
		"\u095c\u095d\7\u0160\2\2\u095d\u099b\5\u053e\u02a0\2\u095e\u095f\7\u00bc"+
		"\2\2\u095f\u0960\7\u0160\2\2\u0960\u099b\7 \2\2\u0961\u0962\7\u00bc\2"+
		"\2\u0962\u0963\7\u0160\2\2\u0963\u099b\7e\2\2\u0964\u0965\7\u00c3\2\2"+
		"\u0965\u0966\7\u013c\2\2\u0966\u099b\5\u053e\u02a0\2\u0967\u0968\7\u00c3"+
		"\2\2\u0968\u0969\7\u008d\2\2\u0969\u096a\7\u013c\2\2\u096a\u099b\5\u053e"+
		"\u02a0\2\u096b\u096c\7\u00c3\2\2\u096c\u096d\7\u0133\2\2\u096d\u096e\7"+
		"\u013c\2\2\u096e\u099b\5\u053e\u02a0\2\u096f\u0970\7\u00bc\2\2\u0970\u0971"+
		"\7\u013c\2\2\u0971\u099b\5\u053e\u02a0\2\u0972\u0973\7\u00e6\2\2\u0973"+
		"\u099b\5\u053a\u029e\2\u0974\u0975\7\u0108\2\2\u0975\u0976\7\u00e6\2\2"+
		"\u0976\u099b\5\u053a\u029e\2\u0977\u0978\7\u010e\2\2\u0978\u099b\5\u020e"+
		"\u0108\2\u0979\u097a\7O\2\2\u097a\u099b\7\u010e\2\2\u097b\u097c\7\u0115"+
		"\2\2\u097c\u097d\7`\2\2\u097d\u099b\5\u055a\u02ae\2\u097e\u097f\7\u0148"+
		"\2\2\u097f\u0980\7\u015a\2\2\u0980\u099b\5\u053e\u02a0\2\u0981\u0982\7"+
		"\u0148\2\2\u0982\u099b\5v<\2\u0983\u0984\7\u0134\2\2\u0984\u099b\5v<\2"+
		"\u0985\u0986\7\u0133\2\2\u0986\u0987\7\u00dd\2\2\u0987\u099b\5t;\2\u0988"+
		"\u0989\7\u00c3\2\2\u0989\u098a\7\u0199\2\2\u098a\u098b\7\u00f4\2\2\u098b"+
		"\u099b\7\u0142\2\2\u098c\u098d\7\u00bc\2\2\u098d\u098e\7\u0199\2\2\u098e"+
		"\u098f\7\u00f4\2\2\u098f\u099b\7\u0142\2\2\u0990\u0991\7\u00d3\2\2\u0991"+
		"\u0992\7\u0199\2\2\u0992\u0993\7\u00f4\2\2\u0993\u099b\7\u0142\2\2\u0994"+
		"\u0995\7\u0108\2\2\u0995\u0996\7\u00d3\2\2\u0996\u0997\7\u0199\2\2\u0997"+
		"\u0998\7\u00f4\2\2\u0998\u099b\7\u0142\2\2\u0999\u099b\5\u015a\u00ae\2"+
		"\u099a\u089e\3\2\2\2\u099a\u08a0\3\2\2\2\u099a\u08a5\3\2\2\2\u099a\u08a8"+
		"\3\2\2\2\u099a\u08ae\3\2\2\2\u099a\u08b3\3\2\2\2\u099a\u08ba\3\2\2\2\u099a"+
		"\u08c1\3\2\2\2\u099a\u08c7\3\2\2\2\u099a\u08cf\3\2\2\2\u099a\u08d6\3\2"+
		"\2\2\u099a\u08dd\3\2\2\2\u099a\u08e3\3\2\2\2\u099a\u08e9\3\2\2\2\u099a"+
		"\u08f0\3\2\2\2\u099a\u08fa\3\2\2\2\u099a\u08ff\3\2\2\2\u099a\u0905\3\2"+
		"\2\2\u099a\u090d\3\2\2\2\u099a\u0914\3\2\2\2\u099a\u0919\3\2\2\2\u099a"+
		"\u0922\3\2\2\2\u099a\u0927\3\2\2\2\u099a\u0929\3\2\2\2\u099a\u092e\3\2"+
		"\2\2\u099a\u0931\3\2\2\2\u099a\u0938\3\2\2\2\u099a\u093d\3\2\2\2\u099a"+
		"\u0940\3\2\2\2\u099a\u0943\3\2\2\2\u099a\u0946\3\2\2\2\u099a\u0948\3\2"+
		"\2\2\u099a\u094a\3\2\2\2\u099a\u094d\3\2\2\2\u099a\u0951\3\2\2\2\u099a"+
		"\u0955\3\2\2\2\u099a\u0958\3\2\2\2\u099a\u095b\3\2\2\2\u099a\u095e\3\2"+
		"\2\2\u099a\u0961\3\2\2\2\u099a\u0964\3\2\2\2\u099a\u0967\3\2\2\2\u099a"+
		"\u096b\3\2\2\2\u099a\u096f\3\2\2\2\u099a\u0972\3\2\2\2\u099a\u0974\3\2"+
		"\2\2\u099a\u0977\3\2\2\2\u099a\u0979\3\2\2\2\u099a\u097b\3\2\2\2\u099a"+
		"\u097e\3\2\2\2\u099a\u0981\3\2\2\2\u099a\u0983\3\2\2\2\u099a\u0985\3\2"+
		"\2\2\u099a\u0988\3\2\2\2\u099a\u098c\3\2\2\2\u099a\u0990\3\2\2\2\u099a"+
		"\u0994\3\2\2\2\u099a\u0999\3\2\2\2\u099bk\3\2\2\2\u099c\u099d\7\u0148"+
		"\2\2\u099d\u099e\7\67\2\2\u099e\u09a2\5\u048c\u0247\2\u099f\u09a0\7\u00c1"+
		"\2\2\u09a0\u09a2\7\67\2\2\u09a1\u099c\3\2\2\2\u09a1\u099f\3\2\2\2\u09a2"+
		"m\3\2\2\2\u09a3\u09a7\7\u0098\2\2\u09a4\u09a7\7\u0136\2\2\u09a5\u09a7"+
		"\3\2\2\2\u09a6\u09a3\3\2\2\2\u09a6\u09a4\3\2\2\2\u09a6\u09a5\3\2\2\2\u09a7"+
		"o\3\2\2\2\u09a8\u09a9\7-\2\2\u09a9\u09ac\5\u020e\u0108\2\u09aa\u09ac\3"+
		"\2\2\2\u09ab\u09a8\3\2\2\2\u09ab\u09aa\3\2\2\2\u09acq\3\2\2\2\u09ad\u09ae"+
		"\7f\2\2\u09ae\u09b1\5\u048c\u0247\2\u09af\u09b1\3\2\2\2\u09b0\u09ad\3"+
		"\2\2\2\u09b0\u09af\3\2\2\2\u09b1s\3\2\2\2\u09b2\u09b9\7\u0109\2\2\u09b3"+
		"\u09b9\7s\2\2\u09b4\u09b9\7\67\2\2\u09b5\u09b6\7f\2\2\u09b6\u09b7\7\u00e4"+
		"\2\2\u09b7\u09b9\5\u053e\u02a0\2\u09b8\u09b2\3\2\2\2\u09b8\u09b3\3\2\2"+
		"\2\u09b8\u09b4\3\2\2\2\u09b8\u09b5\3\2\2\2\u09b9u\3\2\2\2\u09ba\u09bb"+
		"\7\4\2\2\u09bb\u09bc\5z>\2\u09bc\u09bd\7\5\2\2\u09bdw\3\2\2\2\u09be\u09bf"+
		"\7k\2\2\u09bf\u09c2\5v<\2\u09c0\u09c2\3\2\2\2\u09c1\u09be\3\2\2\2\u09c1"+
		"\u09c0\3\2\2\2\u09c2y\3\2\2\2\u09c3\u09c8\5|?\2\u09c4\u09c5\7\b\2\2\u09c5"+
		"\u09c7\5|?\2\u09c6\u09c4\3\2\2\2\u09c7\u09ca\3\2\2\2\u09c8\u09c6\3\2\2"+
		"\2\u09c8\u09c9\3\2\2\2\u09c9{\3\2\2\2\u09ca\u09c8\3\2\2\2\u09cb\u09d4"+
		"\5\u0564\u02b3\2\u09cc\u09cd\7\f\2\2\u09cd\u09d5\5\u01d4\u00eb\2\u09ce"+
		"\u09cf\7\r\2\2\u09cf\u09d2\5\u0564\u02b3\2\u09d0\u09d1\7\f\2\2\u09d1\u09d3"+
		"\5\u01d4\u00eb\2\u09d2\u09d0\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d5\3"+
		"\2\2\2\u09d4\u09cc\3\2\2\2\u09d4\u09ce\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5"+
		"}\3\2\2\2\u09d6\u09d8\5\u0080A\2\u09d7\u09d6\3\2\2\2\u09d8\u09d9\3\2\2"+
		"\2\u09d9\u09d7\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\177\3\2\2\2\u09db\u09df"+
		"\7\u0135\2\2\u09dc\u09dd\5\22\n\2\u09dd\u09de\5\u0126\u0094\2\u09de\u09e0"+
		"\3\2\2\2\u09df\u09dc\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0\u09e8\3\2\2\2\u09e1"+
		"\u09e5\7\u0148\2\2\u09e2\u09e6\5\u0122\u0092\2\u09e3\u09e4\7\u01b8\2\2"+
		"\u09e4\u09e6\5\u00c8e\2\u09e5\u09e2\3\2\2\2\u09e5\u09e3\3\2\2\2\u09e6"+
		"\u09e8\3\2\2\2\u09e7\u09db\3\2\2\2\u09e7\u09e1\3\2\2\2\u09e8\u0081\3\2"+
		"\2\2\u09e9\u09ea\7@\2\2\u09ea\u09eb\7\u01a1\2\2\u09eb\u09ec\7k\2\2\u09ec"+
		"\u09ed\7\4\2\2\u09ed\u09ee\5\u0086D\2\u09ee\u09ef\7\5\2\2\u09ef\u0a04"+
		"\3\2\2\2\u09f0\u09f1\7@\2\2\u09f1\u09f2\7\u01a1\2\2\u09f2\u09f3\7F\2\2"+
		"\u09f3\u09f4\7\4\2\2\u09f4\u09f5\5\u0502\u0282\2\u09f5\u09f6\7\5\2\2\u09f6"+
		"\u0a04\3\2\2\2\u09f7\u09f8\7@\2\2\u09f8\u09f9\7\u01a1\2\2\u09f9\u09fa"+
		"\7B\2\2\u09fa\u09fb\7\4\2\2\u09fb\u09fc\5\u0502\u0282\2\u09fc\u09fd\7"+
		"\5\2\2\u09fd\u09fe\7`\2\2\u09fe\u09ff\7\4\2\2\u09ff\u0a00\5\u0502\u0282"+
		"\2\u0a00\u0a01\7\5\2\2\u0a01\u0a04\3\2\2\2\u0a02\u0a04\7\67\2\2\u0a03"+
		"\u09e9\3\2\2\2\u0a03\u09f0\3\2\2\2\u0a03\u09f7\3\2\2\2\u0a03\u0a02\3\2"+
		"\2\2\u0a04\u0083\3\2\2\2\u0a05\u0a06\5\u0562\u02b2\2\u0a06\u0a07\5\u054e"+
		"\u02a8\2\u0a07\u0085\3\2\2\2\u0a08\u0a0d\5\u0084C\2\u0a09\u0a0a\7\b\2"+
		"\2\u0a0a\u0a0c\5\u0084C\2\u0a0b\u0a09\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d"+
		"\u0a0b\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0087\3\2\2\2\u0a0f\u0a0d\3\2"+
		"\2\2\u0a10\u0a11\7\u008c\2\2\u0a11\u0a12\7\u0163\2\2\u0a12\u0a13\5\u020e"+
		"\u0108\2\u0a13\u0a14\5\u008aF\2\u0a14\u0089\3\2\2\2\u0a15\u0a1a\5\u008c"+
		"G\2\u0a16\u0a17\7\b\2\2\u0a17\u0a19\5\u008cG\2\u0a18\u0a16\3\2\2\2\u0a19"+
		"\u0a1c\3\2\2\2\u0a1a\u0a18\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b\u008b\3\2"+
		"\2\2\u0a1c\u0a1a\3\2\2\2\u0a1d\u0a1e\7\u0087\2\2\u0a1e\u0a1f\7\u0091\2"+
		"\2\u0a1f\u0a20\5\u0450\u0229\2\u0a20\u0a21\5n8\2\u0a21\u0a35\3\2\2\2\u0a22"+
		"\u0a23\7\u00c1\2\2\u0a23\u0a26\7\u0091\2\2\u0a24\u0a25\7\u00de\2\2\u0a25"+
		"\u0a27\7\u0187\2\2\u0a26\u0a24\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27\u0a28"+
		"\3\2\2\2\u0a28\u0a29\5\u055e\u02b0\2\u0a29\u0a2a\5n8\2\u0a2a\u0a35\3\2"+
		"\2\2\u0a2b\u0a2c\7\u008c\2\2\u0a2c\u0a2d\7\u0091\2\2\u0a2d\u0a2e\5\u055e"+
		"\u02b0\2\u0a2e\u0a2f\5\u02d8\u016d\2\u0a2f\u0a30\7\u0163\2\2\u0a30\u0a31"+
		"\5\u0460\u0231\2\u0a31\u0a32\5p9\2\u0a32\u0a33\5n8\2\u0a33\u0a35\3\2\2"+
		"\2\u0a34\u0a1d\3\2\2\2\u0a34\u0a22\3\2\2\2\u0a34\u0a2b\3\2\2\2\u0a35\u008d"+
		"\3\2\2\2\u0a36\u0a39\7\u009f\2\2\u0a37\u0a3a\5\u03bc\u01df\2\u0a38\u0a3a"+
		"\7 \2\2\u0a39\u0a37\3\2\2\2\u0a39\u0a38\3\2\2\2\u0a3a\u008f\3\2\2\2\u0a3b"+
		"\u0a3c\7\u00ab\2\2\u0a3c\u0a3d\5\u009eP\2\u0a3d\u0a3e\5\u053a\u029e\2"+
		"\u0a3e\u0a3f\5\u00d8m\2\u0a3f\u0a40\5\u0092J\2\u0a40\u0a41\5\u0094K\2"+
		"\u0a41\u0a42\5\u0096L\2\u0a42\u0a43\5\u00a0Q\2\u0a43\u0a44\5\22\n\2\u0a44"+
		"\u0a45\5\u0098M\2\u0a45\u0a46\5\u0448\u0225\2\u0a46\u0a52\3\2\2\2\u0a47"+
		"\u0a48\7\u00ab\2\2\u0a48\u0a49\7\4\2\2\u0a49\u0a4a\5\u0380\u01c1\2\u0a4a"+
		"\u0a4b\7\5\2\2\u0a4b\u0a4c\7`\2\2\u0a4c\u0a4d\5\u0094K\2\u0a4d\u0a4e\5"+
		"\u0096L\2\u0a4e\u0a4f\5\22\n\2\u0a4f\u0a50\5\u0098M\2\u0a50\u0a52\3\2"+
		"\2\2\u0a51\u0a3b\3\2\2\2\u0a51\u0a47\3\2\2\2\u0a52\u0091\3\2\2\2\u0a53"+
		"\u0a54\t\f\2\2\u0a54\u0093\3\2\2\2\u0a55\u0a58\7\u0124\2\2\u0a56\u0a58"+
		"\3\2\2\2\u0a57\u0a55\3\2\2\2\u0a57\u0a56\3\2\2\2\u0a58\u0095\3\2\2\2\u0a59"+
		"\u0a5d\5\u0550\u02a9\2\u0a5a\u0a5d\7\u0152\2\2\u0a5b\u0a5d\7\u0153\2\2"+
		"\u0a5c\u0a59\3\2\2\2\u0a5c\u0a5a\3\2\2\2\u0a5c\u0a5b\3\2\2\2\u0a5d\u0097"+
		"\3\2\2\2\u0a5e\u0a64\5\u009aN\2\u0a5f\u0a60\7\4\2\2\u0a60\u0a61\5\u00a4"+
		"S\2\u0a61\u0a62\7\5\2\2\u0a62\u0a64\3\2\2\2\u0a63\u0a5e\3\2\2\2\u0a63"+
		"\u0a5f\3\2\2\2\u0a64\u0099\3\2\2\2\u0a65\u0a67\5\u009cO\2\u0a66\u0a65"+
		"\3\2\2\2\u0a67\u0a6a\3\2\2\2\u0a68\u0a66\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69"+
		"\u009b\3\2\2\2\u0a6a\u0a68\3\2\2\2\u0a6b\u0a8f\7m\2\2\u0a6c\u0a8f\7r\2"+
		"\2\u0a6d\u0a6e\7\u00b9\2\2\u0a6e\u0a6f\5\u0344\u01a3\2\u0a6f\u0a70\5\u0550"+
		"\u02a9\2\u0a70\u0a8f\3\2\2\2\u0a71\u0a72\7P\2\2\u0a72\u0a73\5\u0344\u01a3"+
		"\2\u0a73\u0a74\5\u0550\u02a9\2\u0a74\u0a8f\3\2\2\2\u0a75\u0a8f\7\u00ad"+
		"\2\2\u0a76\u0a8f\7\u00da\2\2\u0a77\u0a78\7\u0125\2\2\u0a78\u0a79\5\u0344"+
		"\u01a3\2\u0a79\u0a7a\5\u0550\u02a9\2\u0a7a\u0a8f\3\2\2\2\u0a7b\u0a7c\7"+
		"\u00c7\2\2\u0a7c\u0a7d\5\u0344\u01a3\2\u0a7d\u0a7e\5\u0550\u02a9\2\u0a7e"+
		"\u0a8f\3\2\2\2\u0a7f\u0a80\7\u00d3\2\2\u0a80\u0a81\7\u0125\2\2\u0a81\u0a8f"+
		"\5\u00dan\2\u0a82\u0a83\7\u00d3\2\2\u0a83\u0a84\7\u0125\2\2\u0a84\u0a8f"+
		"\7\13\2\2\u0a85\u0a86\7\u00d3\2\2\u0a86\u0a87\7O\2\2\u0a87\u0a88\7P\2"+
		"\2\u0a88\u0a8f\5\u00dan\2\u0a89\u0a8a\7\u00d3\2\2\u0a8a\u0a8b\7P\2\2\u0a8b"+
		"\u0a8f\5\u00dan\2\u0a8c\u0a8d\7\u00c4\2\2\u0a8d\u0a8f\5\u0550\u02a9\2"+
		"\u0a8e\u0a6b\3\2\2\2\u0a8e\u0a6c\3\2\2\2\u0a8e\u0a6d\3\2\2\2\u0a8e\u0a71"+
		"\3\2\2\2\u0a8e\u0a75\3\2\2\2\u0a8e\u0a76\3\2\2\2\u0a8e\u0a77\3\2\2\2\u0a8e"+
		"\u0a7b\3\2\2\2\u0a8e\u0a7f\3\2\2\2\u0a8e\u0a82\3\2\2\2\u0a8e\u0a85\3\2"+
		"\2\2\u0a8e\u0a89\3\2\2\2\u0a8e\u0a8c\3\2\2\2\u0a8f\u009d\3\2\2\2\u0a90"+
		"\u0a93\7m\2\2\u0a91\u0a93\3\2\2\2\u0a92\u0a90\3\2\2\2\u0a92\u0a91\3\2"+
		"\2\2\u0a93\u009f\3\2\2\2\u0a94\u0a95\5\u00a2R\2\u0a95\u0a96\7\u00ba\2"+
		"\2\u0a96\u0a97\5\u0550\u02a9\2\u0a97\u0a9a\3\2\2\2\u0a98\u0a9a\3\2\2\2"+
		"\u0a99\u0a94\3\2\2\2\u0a99\u0a98\3\2\2\2\u0a9a\u00a1\3\2\2\2\u0a9b\u0a9e"+
		"\7f\2\2\u0a9c\u0a9e\3\2\2\2\u0a9d\u0a9b\3\2\2\2\u0a9d\u0a9c\3\2\2\2\u0a9e"+
		"\u00a3\3\2\2\2\u0a9f\u0aa4\5\u00a6T\2\u0aa0\u0aa1\7\b\2\2\u0aa1\u0aa3"+
		"\5\u00a6T\2\u0aa2\u0aa0\3\2\2\2\u0aa3\u0aa6\3\2\2\2\u0aa4\u0aa2\3\2\2"+
		"\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u00a5\3\2\2\2\u0aa6\u0aa4\3\2\2\2\u0aa7\u0aa8"+
		"\5\u0564\u02b3\2\u0aa8\u0aa9\5\u00a8U\2\u0aa9\u00a7\3\2\2\2\u0aaa\u0ab3"+
		"\5D#\2\u0aab\u0ab3\5\u0126\u0094\2\u0aac\u0ab3\7\13\2\2\u0aad\u0aae\7"+
		"\4\2\2\u0aae\u0aaf\5\u00aaV\2\u0aaf\u0ab0\7\5\2\2\u0ab0\u0ab3\3\2\2\2"+
		"\u0ab1\u0ab3\3\2\2\2\u0ab2\u0aaa\3\2\2\2\u0ab2\u0aab\3\2\2\2\u0ab2\u0aac"+
		"\3\2\2\2\u0ab2\u0aad\3\2\2\2\u0ab2\u0ab1\3\2\2\2\u0ab3\u00a9\3\2\2\2\u0ab4"+
		"\u0ab9\5\u00acW\2\u0ab5\u0ab6\7\b\2\2\u0ab6\u0ab8\5\u00acW\2\u0ab7\u0ab5"+
		"\3\2\2\2\u0ab8\u0abb\3\2\2\2\u0ab9\u0ab7\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba"+
		"\u00ab\3\2\2\2\u0abb\u0ab9\3\2\2\2\u0abc\u0abd\5D#\2\u0abd\u00ad\3\2\2"+
		"\2\u0abe\u0abf\7\60\2\2\u0abf\u0ac0\5\u00b0Y\2\u0ac0\u0ac4\7^\2\2\u0ac1"+
		"\u0ac2\7\u00de\2\2\u0ac2\u0ac3\7O\2\2\u0ac3\u0ac5\7\u0187\2\2\u0ac4\u0ac1"+
		"\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u0ae5\5\u053a\u029e"+
		"\2\u0ac7\u0ac8\7\4\2\2\u0ac8\u0ac9\5\u00b2Z\2\u0ac9\u0aca\7\5\2\2\u0aca"+
		"\u0acb\5\u00f0y\2\u0acb\u0acc\5\u00f2z\2\u0acc\u0acd\5\u00fa~\2\u0acd"+
		"\u0ace\5\u00fc\177\2\u0ace\u0acf\5\u00fe\u0080\2\u0acf\u0ad0\5\u0100\u0081"+
		"\2\u0ad0\u0ae6\3\2\2\2\u0ad1\u0ad2\7\u010e\2\2\u0ad2\u0ad3\5\u020e\u0108"+
		"\2\u0ad3\u0ad4\5\u00b4[\2\u0ad4\u0ad5\5\u00f2z\2\u0ad5\u0ad6\5\u00fa~"+
		"\2\u0ad6\u0ad7\5\u00fc\177\2\u0ad7\u0ad8\5\u00fe\u0080\2\u0ad8\u0ad9\5"+
		"\u0100\u0081\2\u0ad9\u0ae6\3\2\2\2\u0ada\u0adb\7\u0118\2\2\u0adb\u0adc"+
		"\7\u010e\2\2\u0adc\u0add\5\u053a\u029e\2\u0add\u0ade\5\u00b4[\2\u0ade"+
		"\u0adf\5\u0082B\2\u0adf\u0ae0\5\u00f2z\2\u0ae0\u0ae1\5\u00fa~\2\u0ae1"+
		"\u0ae2\5\u00fc\177\2\u0ae2\u0ae3\5\u00fe\u0080\2\u0ae3\u0ae4\5\u0100\u0081"+
		"\2\u0ae4\u0ae6\3\2\2\2\u0ae5\u0ac7\3\2\2\2\u0ae5\u0ad1\3\2\2\2\u0ae5\u0ada"+
		"\3\2\2\2\u0ae6\u00af\3\2\2\2\u0ae7\u0af0\7\u015d\2\2\u0ae8\u0af0\7\u015b"+
		"\2\2\u0ae9\u0aea\7\u00f7\2\2\u0aea\u0af0\t\r\2\2\u0aeb\u0aec\7\u00d7\2"+
		"\2\u0aec\u0af0\t\r\2\2\u0aed\u0af0\7\u016a\2\2\u0aee\u0af0\3\2\2\2\u0aef"+
		"\u0ae7\3\2\2\2\u0aef\u0ae8\3\2\2\2\u0aef\u0ae9\3\2\2\2\u0aef\u0aeb\3\2"+
		"\2\2\u0aef\u0aed\3\2\2\2\u0aef\u0aee\3\2\2\2\u0af0\u00b1\3\2\2\2\u0af1"+
		"\u0af4\5\u00b6\\\2\u0af2\u0af4\3\2\2\2\u0af3\u0af1\3\2\2\2\u0af3\u0af2"+
		"\3\2\2\2\u0af4\u00b3\3\2\2\2\u0af5\u0af6\7\4\2\2\u0af6\u0af7\5\u00b8]"+
		"\2\u0af7\u0af8\7\5\2\2\u0af8\u0afb\3\2\2\2\u0af9\u0afb\3\2\2\2\u0afa\u0af5"+
		"\3\2\2\2\u0afa\u0af9\3\2\2\2\u0afb\u00b5\3\2\2\2\u0afc\u0b01\5\u00ba^"+
		"\2\u0afd\u0afe\7\b\2\2\u0afe\u0b00\5\u00ba^\2\u0aff\u0afd\3\2\2\2\u0b00"+
		"\u0b03\3\2\2\2\u0b01\u0aff\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u00b7\3\2"+
		"\2\2\u0b03\u0b01\3\2\2\2\u0b04\u0b09\5\u00bc_\2\u0b05\u0b06\7\b\2\2\u0b06"+
		"\u0b08\5\u00bc_\2\u0b07\u0b05\3\2\2\2\u0b08\u0b0b\3\2\2\2\u0b09\u0b07"+
		"\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u00b9\3\2\2\2\u0b0b\u0b09\3\2\2\2\u0b0c"+
		"\u0b10\5\u00d2j\2\u0b0d\u0b10\5\u00ccg\2\u0b0e\u0b10\5\u00be`\2\u0b0f"+
		"\u0b0c\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b0f\u0b0e\3\2\2\2\u0b10\u00bb\3\2"+
		"\2\2\u0b11\u0b14\5\u00c0a\2\u0b12\u0b14\5\u00d2j\2\u0b13\u0b11\3\2\2\2"+
		"\u0b13\u0b12\3\2\2\2\u0b14\u00bd\3\2\2\2\u0b15\u0b16\5\u055e\u02b0\2\u0b16"+
		"\u0b17\5\u0460\u0231\2\u0b17\u0b18\5\u0156\u00ac\2\u0b18\u0b19\5\u00c2"+
		"b\2\u0b19\u00bf\3\2\2\2\u0b1a\u0b1d\5\u055e\u02b0\2\u0b1b\u0b1c\7k\2\2"+
		"\u0b1c\u0b1e\7\u0113\2\2\u0b1d\u0b1b\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e"+
		"\u0b1f\3\2\2\2\u0b1f\u0b20\5\u00c2b\2\u0b20\u00c1\3\2\2\2\u0b21\u0b23"+
		"\5\u00c4c\2\u0b22\u0b21\3\2\2\2\u0b23\u0b26\3\2\2\2\u0b24\u0b22\3\2\2"+
		"\2\u0b24\u0b25\3\2\2\2\u0b25\u00c3\3\2\2\2\u0b26\u0b24\3\2\2\2\u0b27\u0b28"+
		"\7/\2\2\u0b28\u0b29\5\u053e\u02a0\2\u0b29\u0b2a\5\u00c6d\2\u0b2a\u0b30"+
		"\3\2\2\2\u0b2b\u0b30\5\u00c6d\2\u0b2c\u0b30\5\u00caf\2\u0b2d\u0b2e\7-"+
		"\2\2\u0b2e\u0b30\5\u020e\u0108\2\u0b2f\u0b27\3\2\2\2\u0b2f\u0b2b\3\2\2"+
		"\2\u0b2f\u0b2c\3\2\2\2\u0b2f\u0b2d\3\2\2\2\u0b30\u00c5\3\2\2\2\u0b31\u0b32"+
		"\7O\2\2\u0b32\u0b58\7P\2\2\u0b33\u0b58\7P\2\2\u0b34\u0b35\7d\2\2\u0b35"+
		"\u0b36\5\u029a\u014e\2\u0b36\u0b37\5\u0102\u0082\2\u0b37\u0b58\3\2\2\2"+
		"\u0b38\u0b39\7W\2\2\u0b39\u0b3a\7\u00ee\2\2\u0b3a\u0b3b\5\u029a\u014e"+
		"\2\u0b3b\u0b3c\5\u0102\u0082\2\u0b3c\u0b58\3\2\2\2\u0b3d\u0b3e\7,\2\2"+
		"\u0b3e\u0b3f\7\4\2\2\u0b3f\u0b40\5\u048c\u0247\2\u0b40\u0b41\7\5\2\2\u0b41"+
		"\u0b42\5\u00d6l\2\u0b42\u0b58\3\2\2\2\u0b43\u0b44\7\67\2\2\u0b44\u0b58"+
		"\5\u04b6\u025c\2\u0b45\u0b46\7\u01b8\2\2\u0b46\u0b47\5\u00c8e\2\u0b47"+
		"\u0b4f\7&\2\2\u0b48\u0b49\7\u00dd\2\2\u0b49\u0b50\5\u011e\u0090\2\u0b4a"+
		"\u0b4b\7\4\2\2\u0b4b\u0b4c\5\u048c\u0247\2\u0b4c\u0b4d\7\5\2\2\u0b4d\u0b4e"+
		"\7\u01ba\2\2\u0b4e\u0b50\3\2\2\2\u0b4f\u0b48\3\2\2\2\u0b4f\u0b4a\3\2\2"+
		"\2\u0b50\u0b58\3\2\2\2\u0b51\u0b52\7X\2\2\u0b52\u0b53\5\u053a\u029e\2"+
		"\u0b53\u0b54\5\u00d8m\2\u0b54\u0b55\5\u00e0q\2\u0b55\u0b56\5\u00e8u\2"+
		"\u0b56\u0b58\3\2\2\2\u0b57\u0b31\3\2\2\2\u0b57\u0b33\3\2\2\2\u0b57\u0b34"+
		"\3\2\2\2\u0b57\u0b38\3\2\2\2\u0b57\u0b3d\3\2\2\2\u0b57\u0b43\3\2\2\2\u0b57"+
		"\u0b45\3\2\2\2\u0b57\u0b51\3\2\2\2\u0b58\u00c7\3\2\2\2\u0b59\u0b5d\7\u008d"+
		"\2\2\u0b5a\u0b5b\7\u0095\2\2\u0b5b\u0b5d\7\67\2\2\u0b5c\u0b59\3\2\2\2"+
		"\u0b5c\u0b5a\3\2\2\2\u0b5d\u00c9\3\2\2\2\u0b5e\u0b64\78\2\2\u0b5f\u0b60"+
		"\7O\2\2\u0b60\u0b64\78\2\2\u0b61\u0b62\7G\2\2\u0b62\u0b64\t\n\2\2\u0b63"+
		"\u0b5e\3\2\2\2\u0b63\u0b5f\3\2\2\2\u0b63\u0b61\3\2\2\2\u0b64\u00cb\3\2"+
		"\2\2\u0b65\u0b66\7z\2\2\u0b66\u0b67\5\u053a\u029e\2\u0b67\u0b68\5\u00ce"+
		"h\2\u0b68\u00cd\3\2\2\2\u0b69\u0b6a\t\16\2\2\u0b6a\u0b6c\5\u00d0i\2\u0b6b"+
		"\u0b69\3\2\2\2\u0b6c\u0b6f\3\2\2\2\u0b6d\u0b6b\3\2\2\2\u0b6d\u0b6e\3\2"+
		"\2\2\u0b6e\u00cf\3\2\2\2\u0b6f\u0b6d\3\2\2\2\u0b70\u0b71\t\17\2\2\u0b71"+
		"\u00d1\3\2\2\2\u0b72\u0b73\7/\2\2\u0b73\u0b74\5\u053e\u02a0\2\u0b74\u0b75"+
		"\5\u00d4k\2\u0b75\u0b78\3\2\2\2\u0b76\u0b78\5\u00d4k\2\u0b77\u0b72\3\2"+
		"\2\2\u0b77\u0b76\3\2\2\2\u0b78\u00d3\3\2\2\2\u0b79\u0b7a\7,\2\2\u0b7a"+
		"\u0b7b\7\4\2\2\u0b7b\u0b7c\5\u048c\u0247\2\u0b7c\u0b7d\7\5\2\2\u0b7d\u0b7e"+
		"\5\u01ba\u00de\2\u0b7e\u0bb4\3\2\2\2\u0b7f\u0b8b\7d\2\2\u0b80\u0b81\7"+
		"\4\2\2\u0b81\u0b82\5\u00dan\2\u0b82\u0b83\7\5\2\2\u0b83\u0b84\5\u00de"+
		"p\2\u0b84\u0b85\5\u029a\u014e\2\u0b85\u0b86\5\u0102\u0082\2\u0b86\u0b87"+
		"\5\u01ba\u00de\2\u0b87\u0b8c\3\2\2\2\u0b88\u0b89\5\u0104\u0083\2\u0b89"+
		"\u0b8a\5\u01ba\u00de\2\u0b8a\u0b8c\3\2\2\2\u0b8b\u0b80\3\2\2\2\u0b8b\u0b88"+
		"\3\2\2\2\u0b8c\u0bb4\3\2\2\2\u0b8d\u0b8e\7W\2\2\u0b8e\u0b9a\7\u00ee\2"+
		"\2\u0b8f\u0b90\7\4\2\2\u0b90\u0b91\5\u00dan\2\u0b91\u0b92\7\5\2\2\u0b92"+
		"\u0b93\5\u00dep\2\u0b93\u0b94\5\u029a\u014e\2\u0b94\u0b95\5\u0102\u0082"+
		"\2\u0b95\u0b96\5\u01ba\u00de\2\u0b96\u0b9b\3\2\2\2\u0b97\u0b98\5\u0104"+
		"\u0083\2\u0b98\u0b99\5\u01ba\u00de\2\u0b99\u0b9b\3\2\2\2\u0b9a\u0b8f\3"+
		"\2\2\2\u0b9a\u0b97\3\2\2\2\u0b9b\u0bb4\3\2\2\2\u0b9c\u0b9d\7\u00c9\2\2"+
		"\u0b9d\u0b9e\5\u0256\u012c\2\u0b9e\u0b9f\7\4\2\2\u0b9f\u0ba0\5\u00e2r"+
		"\2\u0ba0\u0ba1\7\5\2\2\u0ba1\u0ba2\5\u00dep\2\u0ba2\u0ba3\5\u029a\u014e"+
		"\2\u0ba3\u0ba4\5\u0102\u0082\2\u0ba4\u0ba5\5\u00e6t\2\u0ba5\u0ba6\5\u01ba"+
		"\u00de\2\u0ba6\u0bb4\3\2\2\2\u0ba7\u0ba8\7A\2\2\u0ba8\u0ba9\7\u00ee\2"+
		"\2\u0ba9\u0baa\7\4\2\2\u0baa\u0bab\5\u00dan\2\u0bab\u0bac\7\5\2\2\u0bac"+
		"\u0bad\7X\2\2\u0bad\u0bae\5\u053a\u029e\2\u0bae\u0baf\5\u00d8m\2\u0baf"+
		"\u0bb0\5\u00e0q\2\u0bb0\u0bb1\5\u00e8u\2\u0bb1\u0bb2\5\u01ba\u00de\2\u0bb2"+
		"\u0bb4\3\2\2\2\u0bb3\u0b79\3\2\2\2\u0bb3\u0b7f\3\2\2\2\u0bb3\u0b8d\3\2"+
		"\2\2\u0bb3\u0b9c\3\2\2\2\u0bb3\u0ba7\3\2\2\2\u0bb4\u00d5\3\2\2\2\u0bb5"+
		"\u0bb6\7\u0108\2\2\u0bb6\u0bb9\7\u00e6\2\2\u0bb7\u0bb9\3\2\2\2\u0bb8\u0bb5"+
		"\3\2\2\2\u0bb8\u0bb7\3\2\2\2\u0bb9\u00d7\3\2\2\2\u0bba\u0bbb\7\4\2\2\u0bbb"+
		"\u0bbc\5\u00dan\2\u0bbc\u0bbd\7\5\2\2\u0bbd\u0bc0\3\2\2\2\u0bbe\u0bc0"+
		"\3\2\2\2\u0bbf\u0bba\3\2\2\2\u0bbf\u0bbe\3\2\2\2\u0bc0\u00d9\3\2\2\2\u0bc1"+
		"\u0bc6\5\u00dco\2\u0bc2\u0bc3\7\b\2\2\u0bc3\u0bc5\5\u00dco\2\u0bc4\u0bc2"+
		"\3\2\2\2\u0bc5\u0bc8\3\2\2\2\u0bc6\u0bc4\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7"+
		"\u00db\3\2\2\2\u0bc8\u0bc6\3\2\2\2\u0bc9\u0bca\5\u055e\u02b0\2\u0bca\u00dd"+
		"\3\2\2\2\u0bcb\u0bcc\7\u01bb\2\2\u0bcc\u0bcd\7\4\2\2\u0bcd\u0bce\5\u00da"+
		"n\2\u0bce\u0bcf\7\5\2\2\u0bcf\u0bd2\3\2\2\2\u0bd0\u0bd2\3\2\2\2\u0bd1"+
		"\u0bcb\3\2\2\2\u0bd1\u0bd0\3\2\2\2\u0bd2\u00df\3\2\2\2\u0bd3\u0bd4\7\u00fb"+
		"\2\2\u0bd4\u0bd7\t\20\2\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bd3\3\2\2\2\u0bd6"+
		"\u0bd5\3\2\2\2\u0bd7\u00e1\3\2\2\2\u0bd8\u0bdd\5\u00e4s\2\u0bd9\u0bda"+
		"\7\b\2\2\u0bda\u0bdc\5\u00e4s\2\u0bdb\u0bd9\3\2\2\2\u0bdc\u0bdf\3\2\2"+
		"\2\u0bdd\u0bdb\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u00e3\3\2\2\2\u0bdf\u0bdd"+
		"\3\2\2\2\u0be0\u0be1\5\u025c\u012f\2\u0be1\u0be8\7k\2\2\u0be2\u0be9\5"+
		"\u02ae\u0158\2\u0be3\u0be4\7\u0111\2\2\u0be4\u0be5\7\4\2\2\u0be5\u0be6"+
		"\5\u02ae\u0158\2\u0be6\u0be7\7\5\2\2\u0be7\u0be9\3\2\2\2\u0be8\u0be2\3"+
		"\2\2\2\u0be8\u0be3\3\2\2\2\u0be9\u00e5\3\2\2\2\u0bea\u0beb\7i\2\2\u0beb"+
		"\u0bec\7\4\2\2\u0bec\u0bed\5\u048c\u0247\2\u0bed\u0bee\7\5\2\2\u0bee\u0bf1"+
		"\3\2\2\2\u0bef\u0bf1\3\2\2\2\u0bf0\u0bea\3\2\2\2\u0bf0\u0bef\3\2\2\2\u0bf1"+
		"\u00e7\3\2\2\2\u0bf2\u0bfc\5\u00eav\2\u0bf3\u0bfc\5\u00ecw\2\u0bf4\u0bf5"+
		"\5\u00eav\2\u0bf5\u0bf6\5\u00ecw\2\u0bf6\u0bfc\3\2\2\2\u0bf7\u0bf8\5\u00ec"+
		"w\2\u0bf8\u0bf9\5\u00eav\2\u0bf9\u0bfc\3\2\2\2\u0bfa\u0bfc\3\2\2\2\u0bfb"+
		"\u0bf2\3\2\2\2\u0bfb\u0bf3\3\2\2\2\u0bfb\u0bf4\3\2\2\2\u0bfb\u0bf7\3\2"+
		"\2\2\u0bfb\u0bfa\3\2\2\2\u0bfc\u00e9\3\2\2\2\u0bfd\u0bfe\7R\2\2\u0bfe"+
		"\u0bff\7\u016c\2\2\u0bff\u0c00\5\u00eex\2\u0c00\u00eb\3\2\2\2\u0c01\u0c02"+
		"\7R\2\2\u0c02\u0c03\7\u00b8\2\2\u0c03\u0c04\5\u00eex\2\u0c04\u00ed\3\2"+
		"\2\2\u0c05\u0c06\7\u0108\2\2\u0c06\u0c0c\7\u0086\2\2\u0c07\u0c0c\7\u0136"+
		"\2\2\u0c08\u0c0c\7\u0098\2\2\u0c09\u0c0a\7\u0148\2\2\u0c0a\u0c0c\t\21"+
		"\2\2\u0c0b\u0c05\3\2\2\2\u0c0b\u0c07\3\2\2\2\u0c0b\u0c08\3\2\2\2\u0c0b"+
		"\u0c09\3\2\2\2\u0c0c\u00ef\3\2\2\2\u0c0d\u0c0e\7\u00e7\2\2\u0c0e\u0c0f"+
		"\7\4\2\2\u0c0f\u0c10\5\u0538\u029d\2\u0c10\u0c11\7\5\2\2\u0c11\u0c14\3"+
		"\2\2\2\u0c12\u0c14\3\2\2\2\u0c13\u0c0d\3\2\2\2\u0c13\u0c12\3\2\2\2\u0c14"+
		"\u00f1\3\2\2\2\u0c15\u0c18\5\u00f4{\2\u0c16\u0c18\3\2\2\2\u0c17\u0c15"+
		"\3\2\2\2\u0c17\u0c16\3\2\2\2\u0c18\u00f3\3\2\2\2\u0c19\u0c1a\7\u0118\2"+
		"\2\u0c1a\u0c1b\7\u0095\2\2\u0c1b\u0c1c\5\u055e\u02b0\2\u0c1c\u0c1d\7\4"+
		"\2\2\u0c1d\u0c1e\5\u00f6|\2\u0c1e\u0c1f\7\5\2\2\u0c1f\u00f5\3\2\2\2\u0c20"+
		"\u0c25\5\u00f8}\2\u0c21\u0c22\7\b\2\2\u0c22\u0c24\5\u00f8}\2\u0c23\u0c21"+
		"\3\2\2\2\u0c24\u0c27\3\2\2\2\u0c25\u0c23\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26"+
		"\u00f7\3\2\2\2\u0c27\u0c25\3\2\2\2\u0c28\u0c29\5\u055e\u02b0\2\u0c29\u0c2a"+
		"\5\u0262\u0132\2\u0c2a\u0c2b\5\u0264\u0133\2\u0c2b\u0c37\3\2\2\2\u0c2c"+
		"\u0c2d\5\u04c0\u0261\2\u0c2d\u0c2e\5\u0262\u0132\2\u0c2e\u0c2f\5\u0264"+
		"\u0133\2\u0c2f\u0c37\3\2\2\2\u0c30\u0c31\7\4\2\2\u0c31\u0c32\5\u048c\u0247"+
		"\2\u0c32\u0c33\7\5\2\2\u0c33\u0c34\5\u0262\u0132\2\u0c34\u0c35\5\u0264"+
		"\u0133\2\u0c35\u0c37\3\2\2\2\u0c36\u0c28\3\2\2\2\u0c36\u0c2c\3\2\2\2\u0c36"+
		"\u0c30\3\2\2\2\u0c37\u00f9\3\2\2\2\u0c38\u0c39\7f\2\2\u0c39\u0c3c\5\u053e"+
		"\u02a0\2\u0c3a\u0c3c\3\2\2\2\u0c3b\u0c38\3\2\2\2\u0c3b\u0c3a\3\2\2\2\u0c3c"+
		"\u00fb\3\2\2\2\u0c3d\u0c3e\7k\2\2\u0c3e\u0c43\5v<\2\u0c3f\u0c40\7\u0176"+
		"\2\2\u0c40\u0c43\7\u0110\2\2\u0c41\u0c43\3\2\2\2\u0c42\u0c3d\3\2\2\2\u0c42"+
		"\u0c3f\3\2\2\2\u0c42\u0c41\3\2\2\2\u0c43\u00fd\3\2\2\2\u0c44\u0c45\7R"+
		"\2\2\u0c45\u0c4b\7\u00a3\2\2\u0c46\u0c4c\7\u00c1\2\2\u0c47\u0c48\7\u00b8"+
		"\2\2\u0c48\u0c4c\7\u013b\2\2\u0c49\u0c4a\7\u011f\2\2\u0c4a\u0c4c\7\u013b"+
		"\2\2\u0c4b\u0c46\3\2\2\2\u0c4b\u0c47\3\2\2\2\u0c4b\u0c49\3\2\2\2\u0c4c"+
		"\u0c4f\3\2\2\2\u0c4d\u0c4f\3\2\2\2\u0c4e\u0c44\3\2\2\2\u0c4e\u0c4d\3\2"+
		"\2\2\u0c4f\u00ff\3\2\2\2\u0c50\u0c51\7\u015a\2\2\u0c51\u0c54\5\u053e\u02a0"+
		"\2\u0c52\u0c54\3\2\2\2\u0c53\u0c50\3\2\2\2\u0c53\u0c52\3\2\2\2\u0c54\u0101"+
		"\3\2\2\2\u0c55\u0c56\7f\2\2\u0c56\u0c57\7\u00e4\2\2\u0c57\u0c58\7\u015a"+
		"\2\2\u0c58\u0c5b\5\u053e\u02a0\2\u0c59\u0c5b\3\2\2\2\u0c5a\u0c55\3\2\2"+
		"\2\u0c5a\u0c59\3\2\2\2\u0c5b\u0103\3\2\2\2\u0c5c\u0c5d\7f\2\2\u0c5d\u0c5e"+
		"\7\u00e4\2\2\u0c5e\u0c5f\5\u053e\u02a0\2\u0c5f\u0105\3\2\2\2\u0c60\u0c61"+
		"\7\60\2\2\u0c61\u0c65\7\u0151\2\2\u0c62\u0c63\7\u00de\2\2\u0c63\u0c64"+
		"\7O\2\2\u0c64\u0c66\7\u0187\2\2\u0c65\u0c62\3\2\2\2\u0c65\u0c66\3\2\2"+
		"\2\u0c66\u0c67\3\2\2\2\u0c67\u0c68\5\u020e\u0108\2\u0c68\u0c69\5\u0368"+
		"\u01b5\2\u0c69\u0c6a\7R\2\2\u0c6a\u0c6b\5\u0502\u0282\2\u0c6b\u0c6c\7"+
		"B\2\2\u0c6c\u0c6d\5\u0424\u0213\2\u0c6d\u0107\3\2\2\2\u0c6e\u0c6f\7\u008c"+
		"\2\2\u0c6f\u0c72\7\u0151\2\2\u0c70\u0c71\7\u00de\2\2\u0c71\u0c73\7\u0187"+
		"\2\2\u0c72\u0c70\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74"+
		"\u0c75\5\u020e\u0108\2\u0c75\u0c76\7\u0148\2\2\u0c76\u0c77\7\u0151\2\2"+
		"\u0c77\u0c78\5\u0556\u02ac\2\u0c78\u0109\3\2\2\2\u0c79\u0c7a\7\60\2\2"+
		"\u0c7a\u0c7b\5\u00b0Y\2\u0c7b\u0c7f\7^\2\2\u0c7c\u0c7d\7\u00de\2\2\u0c7d"+
		"\u0c7e\7O\2\2\u0c7e\u0c80\7\u0187\2\2\u0c7f\u0c7c\3\2\2\2\u0c7f\u0c80"+
		"\3\2\2\2\u0c80\u0c81\3\2\2\2\u0c81\u0c82\5\u010c\u0087\2\u0c82\u0c83\7"+
		"&\2\2\u0c83\u0c84\5\u03c2\u01e2\2\u0c84\u0c85\5\u010e\u0088\2\u0c85\u010b"+
		"\3\2\2\2\u0c86\u0c87\5\u053a\u029e\2\u0c87\u0c88\5\u00d8m\2\u0c88\u0c89"+
		"\5\u00fa~\2\u0c89\u0c8a\5\u00fc\177\2\u0c8a\u0c8b\5\u00fe\u0080\2\u0c8b"+
		"\u0c8c\5\u0100\u0081\2\u0c8c\u010d\3\2\2\2\u0c8d\u0c91\7k\2\2\u0c8e\u0c92"+
		"\7\u00b0\2\2\u0c8f\u0c90\7\u0108\2\2\u0c90\u0c92\7\u00b0\2\2\u0c91\u0c8e"+
		"\3\2\2\2\u0c91\u0c8f\3\2\2\2\u0c92\u0c95\3\2\2\2\u0c93\u0c95\3\2\2\2\u0c94"+
		"\u0c8d\3\2\2\2\u0c94\u0c93\3\2\2\2\u0c95\u010f\3\2\2\2\u0c96\u0c97\7\60"+
		"\2\2\u0c97\u0c98\5\u0114\u008b\2\u0c98\u0c99\7\u00fd\2\2\u0c99\u0c9d\7"+
		"\u0173\2\2\u0c9a\u0c9b\7\u00de\2\2\u0c9b\u0c9c\7O\2\2\u0c9c\u0c9e\7\u0187"+
		"\2\2\u0c9d\u0c9a\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f"+
		"\u0ca0\5\u0112\u008a\2\u0ca0\u0ca1\7&\2\2\u0ca1\u0ca2\5\u03c2\u01e2\2"+
		"\u0ca2\u0ca3\5\u010e\u0088\2\u0ca3\u0111\3\2\2\2\u0ca4\u0ca5\5\u053a\u029e"+
		"\2\u0ca5\u0ca6\5\u00d8m\2\u0ca6\u0ca7\5\u00fa~\2\u0ca7\u0ca8\5x=\2\u0ca8"+
		"\u0ca9\5\u0100\u0081\2\u0ca9\u0113\3\2\2\2\u0caa\u0cad\7\u016a\2\2\u0cab"+
		"\u0cad\3\2\2\2\u0cac\u0caa\3\2\2\2\u0cac\u0cab\3\2\2\2\u0cad\u0115\3\2"+
		"\2\2\u0cae\u0caf\7\u012c\2\2\u0caf\u0cb0\7\u00fd\2\2\u0cb0\u0cb1\7\u0173"+
		"\2\2\u0cb1\u0cb2\5\u0252\u012a\2\u0cb2\u0cb3\5\u053a\u029e\2\u0cb3\u0cb4"+
		"\5\u010e\u0088\2\u0cb4\u0117\3\2\2\2\u0cb5\u0cb6\7\60\2\2\u0cb6\u0cb7"+
		"\5\u00b0Y\2\u0cb7\u0cbb\7\u0143\2\2\u0cb8\u0cb9\7\u00de\2\2\u0cb9\u0cba"+
		"\7O\2\2\u0cba\u0cbc\7\u0187\2\2\u0cbb\u0cb8\3\2\2\2\u0cbb\u0cbc\3\2\2"+
		"\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cbe\5\u053a\u029e\2\u0cbe\u0cbf\5\u011c"+
		"\u008f\2\u0cbf\u0119\3\2\2\2\u0cc0\u0cc1\7\u008c\2\2\u0cc1\u0cc4\7\u0143"+
		"\2\2\u0cc2\u0cc3\7\u00de\2\2\u0cc3\u0cc5\7\u0187\2\2\u0cc4\u0cc2\3\2\2"+
		"\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\5\u053a\u029e\2"+
		"\u0cc7\u0cc8\5\u0120\u0091\2\u0cc8\u011b\3\2\2\2\u0cc9\u0ccc\5\u0120\u0091"+
		"\2\u0cca\u0ccc\3\2\2\2\u0ccb\u0cc9\3\2\2\2\u0ccb\u0cca\3\2\2\2\u0ccc\u011d"+
		"\3\2\2\2\u0ccd\u0cce\7\4\2\2\u0cce\u0ccf\5\u0120\u0091\2\u0ccf\u0cd0\7"+
		"\5\2\2\u0cd0\u0cd3\3\2\2\2\u0cd1\u0cd3\3\2\2\2\u0cd2\u0ccd\3\2\2\2\u0cd2"+
		"\u0cd1\3\2\2\2\u0cd3\u011f\3\2\2\2\u0cd4\u0cd6\5\u0122\u0092\2\u0cd5\u0cd4"+
		"\3\2\2\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u0cd5\3\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8"+
		"\u0121\3\2\2\2\u0cd9\u0cda\7&\2\2\u0cda\u0cf8\5\u0464\u0233\2\u0cdb\u0cdc"+
		"\7\u0096\2\2\u0cdc\u0cf8\5\u0126\u0094\2\u0cdd\u0cf8\7\u00af\2\2\u0cde"+
		"\u0cdf\7\u00e3\2\2\u0cdf\u0ce0\5\u0124\u0093\2\u0ce0\u0ce1\5\u0126\u0094"+
		"\2\u0ce1\u0cf8\3\2\2\2\u0ce2\u0ce3\7\u00fe\2\2\u0ce3\u0cf8\5\u0126\u0094"+
		"\2\u0ce4\u0ce5\7\u0101\2\2\u0ce5\u0cf8\5\u0126\u0094\2\u0ce6\u0ce7\7\u0108"+
		"\2\2\u0ce7\u0cf8\t\22\2\2\u0ce8\u0ce9\7\u0114\2\2\u0ce9\u0cea\7\u0095"+
		"\2\2\u0cea\u0cf8\5\u020e\u0108\2\u0ceb\u0cec\7\u0143\2\2\u0cec\u0ced\7"+
		"\u0105\2\2\u0ced\u0cf8\5\u020e\u0108\2\u0cee\u0cef\7\u014f\2\2\u0cef\u0cf0"+
		"\5\22\n\2\u0cf0\u0cf1\5\u0126\u0094\2\u0cf1\u0cf8\3\2\2\2\u0cf2\u0cf3"+
		"\7\u0135\2\2\u0cf3\u0cf5\5\22\n\2\u0cf4\u0cf6\5\u0126\u0094\2\u0cf5\u0cf4"+
		"\3\2\2\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u0cf8\3\2\2\2\u0cf7\u0cd9\3\2\2\2\u0cf7"+
		"\u0cdb\3\2\2\2\u0cf7\u0cdd\3\2\2\2\u0cf7\u0cde\3\2\2\2\u0cf7\u0ce2\3\2"+
		"\2\2\u0cf7\u0ce4\3\2\2\2\u0cf7\u0ce6\3\2\2\2\u0cf7\u0ce8\3\2\2\2\u0cf7"+
		"\u0ceb\3\2\2\2\u0cf7\u0cee\3\2\2\2\u0cf7\u0cf2\3\2\2\2\u0cf8\u0123\3\2"+
		"\2\2\u0cf9\u0cfc\7\u0095\2\2\u0cfa\u0cfc\3\2\2\2\u0cfb\u0cf9\3\2\2\2\u0cfb"+
		"\u0cfa\3\2\2\2\u0cfc\u0125\3\2\2\2\u0cfd\u0d04\5\u054c\u02a7\2\u0cfe\u0cff"+
		"\7\16\2\2\u0cff\u0d04\5\u054c\u02a7\2\u0d00\u0d01\7\17\2\2\u0d01\u0d04"+
		"\5\u054c\u02a7\2\u0d02\u0d04\5\u0556\u02ac\2\u0d03\u0cfd\3\2\2\2\u0d03"+
		"\u0cfe\3\2\2\2\u0d03\u0d00\3\2\2\2\u0d03\u0d02\3\2\2\2\u0d04\u0127\3\2"+
		"\2\2\u0d05\u0d0a\5\u0126\u0094\2\u0d06\u0d07\7\b\2\2\u0d07\u0d09\5\u0126"+
		"\u0094\2\u0d08\u0d06\3\2\2\2\u0d09\u0d0c\3\2\2\2\u0d0a\u0d08\3\2\2\2\u0d0a"+
		"\u0d0b\3\2\2\2\u0d0b\u0129\3\2\2\2\u0d0c\u0d0a\3\2\2\2\u0d0d\u0d0e\7\60"+
		"\2\2\u0d0e\u0d0f\5\u026c\u0137\2\u0d0f\u0d10\5\u012c\u0097\2\u0d10\u0d11"+
		"\5\u0136\u009c\2\u0d11\u0d12\7\u00f0\2\2\u0d12\u0d18\5\u053e\u02a0\2\u0d13"+
		"\u0d14\7\u00d9\2\2\u0d14\u0d15\5\u012e\u0098\2\u0d15\u0d16\5\u0130\u0099"+
		"\2\u0d16\u0d17\5\u0134\u009b\2\u0d17\u0d19\3\2\2\2\u0d18\u0d13\3\2\2\2"+
		"\u0d18\u0d19\3\2\2\2\u0d19\u012b\3\2\2\2\u0d1a\u0d1d\7\u0162\2\2\u0d1b"+
		"\u0d1d\3\2\2\2\u0d1c\u0d1a\3\2\2\2\u0d1c\u0d1b\3\2\2\2\u0d1d\u012d\3\2"+
		"\2\2\u0d1e\u0d20\5\u053e\u02a0\2\u0d1f\u0d21\5\u0210\u0109\2\u0d20\u0d1f"+
		"\3\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u012f\3\2\2\2\u0d22\u0d23\7\u00e8\2"+
		"\2\u0d23\u0d26\5\u012e\u0098\2\u0d24\u0d26\3\2\2\2\u0d25\u0d22\3\2\2\2"+
		"\u0d25\u0d24\3\2\2\2\u0d26\u0131\3\2\2\2\u0d27\u0d28\7\u0170\2\2\u0d28"+
		"\u0d2c\5\u012e\u0098\2\u0d29\u0d2a\7\u0108\2\2\u0d2a\u0d2c\7\u0170\2\2"+
		"\u0d2b\u0d27\3\2\2\2\u0d2b\u0d29\3\2\2\2\u0d2c\u0133\3\2\2\2\u0d2d\u0d30"+
		"\5\u0132\u009a\2\u0d2e\u0d30\3\2\2\2\u0d2f\u0d2d\3\2\2\2\u0d2f\u0d2e\3"+
		"\2\2\2\u0d30\u0135\3\2\2\2\u0d31\u0d34\7\u0122\2\2\u0d32\u0d34\3\2\2\2"+
		"\u0d33\u0d31\3\2\2\2\u0d33\u0d32\3\2\2\2\u0d34\u0137\3\2\2\2\u0d35\u0d36"+
		"\7\60\2\2\u0d36\u0d37\7\u015a\2\2\u0d37\u0d38\5\u053e\u02a0\2\u0d38\u0d39"+
		"\5\u013a\u009e\2\u0d39\u0d3a\7\u00f8\2\2\u0d3a\u0d3b\5\u0550\u02a9\2\u0d3b"+
		"\u0d3c\5x=\2\u0d3c\u0139\3\2\2\2\u0d3d\u0d3e\7\u0115\2\2\u0d3e\u0d41\5"+
		"\u055a\u02ae\2\u0d3f\u0d41\3\2\2\2\u0d40\u0d3d\3\2\2\2\u0d40\u0d3f\3\2"+
		"\2\2\u0d41\u013b\3\2\2\2\u0d42\u0d43\7\u00c1\2\2\u0d43\u0d46\7\u015a\2"+
		"\2\u0d44\u0d45\7\u00de\2\2\u0d45\u0d47\7\u0187\2\2\u0d46\u0d44\3\2\2\2"+
		"\u0d46\u0d47\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48\u0d49\5\u053e\u02a0\2\u0d49"+
		"\u013d\3\2\2\2\u0d4a\u0d4b\7\60\2\2\u0d4b\u0d4f\7\u00ce\2\2\u0d4c\u0d4d"+
		"\7\u00de\2\2\u0d4d\u0d4e\7O\2\2\u0d4e\u0d50\7\u0187\2\2\u0d4f\u0d4c\3"+
		"\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d52\5\u053e\u02a0"+
		"\2\u0d52\u0d53\5\22\n\2\u0d53\u0d54\5\u0140\u00a1\2\u0d54\u013f\3\2\2"+
		"\2\u0d55\u0d57\5\u0142\u00a2\2\u0d56\u0d55\3\2\2\2\u0d57\u0d5a\3\2\2\2"+
		"\u0d58\u0d56\3\2\2\2\u0d58\u0d59\3\2\2\2\u0d59\u0141\3\2\2\2\u0d5a\u0d58"+
		"\3\2\2\2\u0d5b\u0d5c\7\u013e\2\2\u0d5c\u0d63\5\u053e\u02a0\2\u0d5d\u0d5e"+
		"\7\u0172\2\2\u0d5e\u0d63\5J&\2\u0d5f\u0d60\7B\2\2\u0d60\u0d63\5J&\2\u0d61"+
		"\u0d63\7\u0098\2\2\u0d62\u0d5b\3\2\2\2\u0d62\u0d5d\3\2\2\2\u0d62\u0d5f"+
		"\3\2\2\2\u0d62\u0d61\3\2\2\2\u0d63\u0143\3\2\2\2\u0d64\u0d65\7\u008c\2"+
		"\2\u0d65\u0d66\7\u00ce\2\2\u0d66\u0d67\5\u053e\u02a0\2\u0d67\u0d68\7\u016c"+
		"\2\2\u0d68\u0d69\5\u0146\u00a4\2\u0d69\u0145\3\2\2\2\u0d6a\u0d6c\5\u0148"+
		"\u00a5\2\u0d6b\u0d6a\3\2\2\2\u0d6c\u0d6f\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6d"+
		"\u0d6e\3\2\2\2\u0d6e\u0147\3\2\2\2\u0d6f\u0d6d\3\2\2\2\u0d70\u0d71\7`"+
		"\2\2\u0d71\u0d72\5J&\2\u0d72\u0149\3\2\2\2\u0d73\u0d74\7\u008c\2\2\u0d74"+
		"\u0d75\7\u00ce\2\2\u0d75\u0d76\5\u053e\u02a0\2\u0d76\u0d77\5*\26\2\u0d77"+
		"\u0d78\5\u0206\u0104\2\u0d78\u0d79\5\u053e\u02a0\2\u0d79\u0ddc\3\2\2\2"+
		"\u0d7a\u0d7b\7\u008c\2\2\u0d7b\u0d7c\7\u00ce\2\2\u0d7c\u0d7d\5\u053e\u02a0"+
		"\2\u0d7d\u0d7e\5*\26\2\u0d7e\u0d7f\5\u0204\u0103\2\u0d7f\u0d80\5\u020e"+
		"\u0108\2\u0d80\u0ddc\3\2\2\2\u0d81\u0d82\7\u008c\2\2\u0d82\u0d83\7\u00ce"+
		"\2\2\u0d83\u0d84\5\u053e\u02a0\2\u0d84\u0d85\5*\26\2\u0d85\u0d86\7\u008a"+
		"\2\2\u0d86\u0d87\5\u028c\u0147\2\u0d87\u0ddc\3\2\2\2\u0d88\u0d89\7\u008c"+
		"\2\2\u0d89\u0d8a\7\u00ce\2\2\u0d8a\u0d8b\5\u053e\u02a0\2\u0d8b\u0d8c\5"+
		"*\26\2\u0d8c\u0d8d\7+\2\2\u0d8d\u0d8e\7\4\2\2\u0d8e\u0d8f\5\u0460\u0231"+
		"\2\u0d8f\u0d90\7&\2\2\u0d90\u0d91\5\u0460\u0231\2\u0d91\u0d92\7\5\2\2"+
		"\u0d92\u0ddc\3\2\2\2\u0d93\u0d94\7\u008c\2\2\u0d94\u0d95\7\u00ce\2\2\u0d95"+
		"\u0d96\5\u053e\u02a0\2\u0d96\u0d97\5*\26\2\u0d97\u0d98\7\u00bf\2\2\u0d98"+
		"\u0d99\5\u0460\u0231\2\u0d99\u0ddc\3\2\2\2\u0d9a\u0d9b\7\u008c\2\2\u0d9b"+
		"\u0d9c\7\u00ce\2\2\u0d9c\u0d9d\5\u053e\u02a0\2\u0d9d\u0d9e\5*\26\2\u0d9e"+
		"\u0d9f\7\u00d5\2\2\u0d9f\u0da0\5\u0274\u013b\2\u0da0\u0ddc\3\2\2\2\u0da1"+
		"\u0da2\7\u008c\2\2\u0da2\u0da3\7\u00ce\2\2\u0da3\u0da4\5\u053e\u02a0\2"+
		"\u0da4\u0da5\5*\26\2\u0da5\u0da6\7\u0111\2\2\u0da6\u0da7\5\u02b2\u015a"+
		"\2\u0da7\u0ddc\3\2\2\2\u0da8\u0da9\7\u008c\2\2\u0da9\u0daa\7\u00ce\2\2"+
		"\u0daa\u0dab\5\u053e\u02a0\2\u0dab\u0dac\5*\26\2\u0dac\u0dad\7\u0111\2"+
		"\2\u0dad\u0dae\7\u009e\2\2\u0dae\u0daf\5\u020e\u0108\2\u0daf\u0db0\7f"+
		"\2\2\u0db0\u0db1\5\u053e\u02a0\2\u0db1\u0ddc\3\2\2\2\u0db2\u0db3\7\u008c"+
		"\2\2\u0db3\u0db4\7\u00ce\2\2\u0db4\u0db5\5\u053e\u02a0\2\u0db5\u0db6\5"+
		"*\26\2\u0db6\u0db7\7\u0111\2\2\u0db7\u0db8\7\u00d0\2\2\u0db8\u0db9\5\u020e"+
		"\u0108\2\u0db9\u0dba\7f\2\2\u0dba\u0dbb\5\u053e\u02a0\2\u0dbb\u0ddc\3"+
		"\2\2\2\u0dbc\u0dbd\7\u008c\2\2\u0dbd\u0dbe\7\u00ce\2\2\u0dbe\u0dbf\5\u053e"+
		"\u02a0\2\u0dbf\u0dc0\5*\26\2\u0dc0\u0dc1\7\u0123\2\2\u0dc1\u0dc2\5\u0274"+
		"\u013b\2\u0dc2\u0ddc\3\2\2\2\u0dc3\u0dc4\7\u008c\2\2\u0dc4\u0dc5\7\u00ce"+
		"\2\2\u0dc5\u0dc6\5\u053e\u02a0\2\u0dc6\u0dc7\5*\26\2\u0dc7\u0dc8\7\u01bc"+
		"\2\2\u0dc8\u0dc9\5\u0274\u013b\2\u0dc9\u0ddc\3\2\2\2\u0dca\u0dcb\7\u008c"+
		"\2\2\u0dcb\u0dcc\7\u00ce\2\2\u0dcc\u0dcd\5\u053e\u02a0\2\u0dcd\u0dce\5"+
		"*\26\2\u0dce\u0dcf\7\u01bd\2\2\u0dcf\u0dd0\7@\2\2\u0dd0\u0dd1\5\u0460"+
		"\u0231\2\u0dd1\u0dd2\7\u00f0\2\2\u0dd2\u0dd3\5\u053e\u02a0\2\u0dd3\u0ddc"+
		"\3\2\2\2\u0dd4\u0dd5\7\u008c\2\2\u0dd5\u0dd6\7\u00ce\2\2\u0dd6\u0dd7\5"+
		"\u053e\u02a0\2\u0dd7\u0dd8\5*\26\2\u0dd8\u0dd9\7\u0163\2\2\u0dd9\u0dda"+
		"\5\u0460\u0231\2\u0dda\u0ddc\3\2\2\2\u0ddb\u0d73\3\2\2\2\u0ddb\u0d7a\3"+
		"\2\2\2\u0ddb\u0d81\3\2\2\2\u0ddb\u0d88\3\2\2\2\u0ddb\u0d93\3\2\2\2\u0ddb"+
		"\u0d9a\3\2\2\2\u0ddb\u0da1\3\2\2\2\u0ddb\u0da8\3\2\2\2\u0ddb\u0db2\3\2"+
		"\2\2\u0ddb\u0dbc\3\2\2\2\u0ddb\u0dc3\3\2\2\2\u0ddb\u0dca\3\2\2\2\u0ddb"+
		"\u0dd4\3\2\2\2\u0ddc\u014b\3\2\2\2\u0ddd\u0dde\7\60\2\2\u0dde\u0ddf\7"+
		"A\2\2\u0ddf\u0de0\7\u00b0\2\2\u0de0\u0de1\7\u0178\2\2\u0de1\u0de2\5\u053e"+
		"\u02a0\2\u0de2\u0de3\5\u0152\u00aa\2\u0de3\u0de4\5\u0156\u00ac\2\u0de4"+
		"\u014d\3\2\2\2\u0de5\u0de6\7\u00d9\2\2\u0de6\u0dee\5\u012e\u0098\2\u0de7"+
		"\u0de8\7\u0108\2\2\u0de8\u0dee\7\u00d9\2\2\u0de9\u0dea\7\u0170\2\2\u0dea"+
		"\u0dee\5\u012e\u0098\2\u0deb\u0dec\7\u0108\2\2\u0dec\u0dee\7\u0170\2\2"+
		"\u0ded\u0de5\3\2\2\2\u0ded\u0de7\3\2\2\2\u0ded\u0de9\3\2\2\2\u0ded\u0deb"+
		"\3\2\2\2\u0dee\u014f\3\2\2\2\u0def\u0df1\5\u014e\u00a8\2\u0df0\u0def\3"+
		"\2\2\2\u0df1\u0df2\3\2\2\2\u0df2\u0df0\3\2\2\2\u0df2\u0df3\3\2\2\2\u0df3"+
		"\u0151\3\2\2\2\u0df4\u0df7\5\u0150\u00a9\2\u0df5\u0df7\3\2\2\2\u0df6\u0df4"+
		"\3\2\2\2\u0df6\u0df5\3\2\2\2\u0df7\u0153\3\2\2\2\u0df8\u0df9\7\u008c\2"+
		"\2\u0df9\u0dfa\7A\2\2\u0dfa\u0dfb\7\u00b0\2\2\u0dfb\u0dfc\7\u0178\2\2"+
		"\u0dfc\u0dfd\5\u053e\u02a0\2\u0dfd\u0dfe\5\u0152\u00aa\2\u0dfe\u0dff\5"+
		"\u015a\u00ae\2\u0dff\u0e08\3\2\2\2\u0e00\u0e01\7\u008c\2\2\u0e01\u0e02"+
		"\7A\2\2\u0e02\u0e03\7\u00b0\2\2\u0e03\u0e04\7\u0178\2\2\u0e04\u0e05\5"+
		"\u053e\u02a0\2\u0e05\u0e06\5\u0150\u00a9\2\u0e06\u0e08\3\2\2\2\u0e07\u0df8"+
		"\3\2\2\2\u0e07\u0e00\3\2\2\2\u0e08\u0155\3\2\2\2\u0e09\u0e0a\7\u0113\2"+
		"\2\u0e0a\u0e0b\7\4\2\2\u0e0b\u0e0c\5\u0158\u00ad\2\u0e0c\u0e0d\7\5\2\2"+
		"\u0e0d\u0e10\3\2\2\2\u0e0e\u0e10\3\2\2\2\u0e0f\u0e09\3\2\2\2\u0e0f\u0e0e"+
		"\3\2\2\2\u0e10\u0157\3\2\2\2\u0e11\u0e16\5\u0160\u00b1\2\u0e12\u0e13\7"+
		"\b\2\2\u0e13\u0e15\5\u0160\u00b1\2\u0e14\u0e12\3\2\2\2\u0e15\u0e18\3\2"+
		"\2\2\u0e16\u0e14\3\2\2\2\u0e16\u0e17\3\2\2\2\u0e17\u0159\3\2\2\2\u0e18"+
		"\u0e16\3\2\2\2\u0e19\u0e1a\7\u0113\2\2\u0e1a\u0e1b\7\4\2\2\u0e1b\u0e1c"+
		"\5\u015c\u00af\2\u0e1c\u0e1d\7\5\2\2\u0e1d\u015b\3\2\2\2\u0e1e\u0e23\5"+
		"\u015e\u00b0\2\u0e1f\u0e20\7\b\2\2\u0e20\u0e22\5\u015e\u00b0\2\u0e21\u0e1f"+
		"\3\2\2\2\u0e22\u0e25\3\2\2\2\u0e23\u0e21\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24"+
		"\u015d\3\2\2\2\u0e25\u0e23\3\2\2\2\u0e26\u0e2e\5\u0160\u00b1\2\u0e27\u0e28"+
		"\7\u0148\2\2\u0e28\u0e2e\5\u0160\u00b1\2\u0e29\u0e2a\7\u0087\2\2\u0e2a"+
		"\u0e2e\5\u0160\u00b1\2\u0e2b\u0e2c\7\u00c1\2\2\u0e2c\u0e2e\5\u0162\u00b2"+
		"\2\u0e2d\u0e26\3\2\2\2\u0e2d\u0e27\3\2\2\2\u0e2d\u0e29\3\2\2\2\u0e2d\u0e2b"+
		"\3\2\2\2\u0e2e\u015f\3\2\2\2\u0e2f\u0e30\5\u0162\u00b2\2\u0e30\u0e31\5"+
		"\u0164\u00b3\2\u0e31\u0161\3\2\2\2\u0e32\u0e33\5\u0564\u02b3\2\u0e33\u0163"+
		"\3\2\2\2\u0e34\u0e35\5\u0550\u02a9\2\u0e35\u0165\3\2\2\2\u0e36\u0e37\7"+
		"\60\2\2\u0e37\u0e38\7\u0146\2\2\u0e38\u0e39\5\u053e\u02a0\2\u0e39\u0e3a"+
		"\5\u0168\u00b5\2\u0e3a\u0e3b\5\u016c\u00b7\2\u0e3b\u0e3c\7A\2\2\u0e3c"+
		"\u0e3d\7\u00b0\2\2\u0e3d\u0e3e\7\u0178\2\2\u0e3e\u0e3f\5\u053e\u02a0\2"+
		"\u0e3f\u0e40\5\u0156\u00ac\2\u0e40\u0e50\3\2\2\2\u0e41\u0e42\7\60\2\2"+
		"\u0e42\u0e43\7\u0146\2\2\u0e43\u0e44\7\u00de\2\2\u0e44\u0e45\7O\2\2\u0e45"+
		"\u0e46\7\u0187\2\2\u0e46\u0e47\5\u053e\u02a0\2\u0e47\u0e48\5\u0168\u00b5"+
		"\2\u0e48\u0e49\5\u016c\u00b7\2\u0e49\u0e4a\7A\2\2\u0e4a\u0e4b\7\u00b0"+
		"\2\2\u0e4b\u0e4c\7\u0178\2\2\u0e4c\u0e4d\5\u053e\u02a0\2\u0e4d\u0e4e\5"+
		"\u0156\u00ac\2\u0e4e\u0e50\3\2\2\2\u0e4f\u0e36\3\2\2\2\u0e4f\u0e41\3\2"+
		"\2\2\u0e50\u0167\3\2\2\2\u0e51\u0e52\7\u0163\2\2\u0e52\u0e55\5\u0550\u02a9"+
		"\2\u0e53\u0e55\3\2\2\2\u0e54\u0e51\3\2\2\2\u0e54\u0e53\3\2\2\2\u0e55\u0169"+
		"\3\2\2\2\u0e56\u0e59\7\u0172\2\2\u0e57\u0e5a\5\u0550\u02a9\2\u0e58\u0e5a"+
		"\7P\2\2\u0e59\u0e57\3\2\2\2\u0e59\u0e58\3\2\2\2\u0e5a\u016b\3\2\2\2\u0e5b"+
		"\u0e5e\5\u016a\u00b6\2\u0e5c\u0e5e\3\2\2\2\u0e5d\u0e5b\3\2\2\2\u0e5d\u0e5c"+
		"\3\2\2\2\u0e5e\u016d\3\2\2\2\u0e5f\u0e60\7\u008c\2\2\u0e60\u0e61\7\u0146"+
		"\2\2\u0e61\u0e67\5\u053e\u02a0\2\u0e62\u0e68\5\u015a\u00ae\2\u0e63\u0e65"+
		"\5\u016a\u00b6\2\u0e64\u0e66\5\u015a\u00ae\2\u0e65\u0e64\3\2\2\2\u0e65"+
		"\u0e66\3\2\2\2\u0e66\u0e68\3\2\2\2\u0e67\u0e62\3\2\2\2\u0e67\u0e63\3\2"+
		"\2\2\u0e68\u016f\3\2\2\2\u0e69\u0e6a\7\60\2\2\u0e6a\u0e6b\7A\2\2\u0e6b"+
		"\u0e6c\7^\2\2\u0e6c\u0e6d\5\u053a\u029e\2\u0e6d\u0e6e\7\4\2\2\u0e6e\u0e6f"+
		"\5\u00b2Z\2\u0e6f\u0e70\7\5\2\2";
	private static final String _serializedATNSegment2 =
		"\u0e70\u0e71\5\u00f0y\2\u0e71\u0e72\7\u0146\2\2\u0e72\u0e73\5\u053e\u02a0"+
		"\2\u0e73\u0e74\5\u0156\u00ac\2\u0e74\u0ea2\3\2\2\2\u0e75\u0e76\7\60\2"+
		"\2\u0e76\u0e77\7A\2\2\u0e77\u0e78\7^\2\2\u0e78\u0e79\7\u00de\2\2\u0e79"+
		"\u0e7a\7O\2\2\u0e7a\u0e7b\7\u0187\2\2\u0e7b\u0e7c\5\u053a\u029e\2\u0e7c"+
		"\u0e7d\7\4\2\2\u0e7d\u0e7e\5\u00b2Z\2\u0e7e\u0e7f\7\5\2\2\u0e7f\u0e80"+
		"\5\u00f0y\2\u0e80\u0e81\7\u0146\2\2\u0e81\u0e82\5\u053e\u02a0\2\u0e82"+
		"\u0e83\5\u0156\u00ac\2\u0e83\u0ea2\3\2\2\2\u0e84\u0e85\7\60\2\2\u0e85"+
		"\u0e86\7A\2\2\u0e86\u0e87\7^\2\2\u0e87\u0e88\5\u053a\u029e\2\u0e88\u0e89"+
		"\7\u0118\2\2\u0e89\u0e8a\7\u010e\2\2\u0e8a\u0e8b\5\u053a\u029e\2\u0e8b"+
		"\u0e8c\5\u00b4[\2\u0e8c\u0e8d\5\u0082B\2\u0e8d\u0e8e\7\u0146\2\2\u0e8e"+
		"\u0e8f\5\u053e\u02a0\2\u0e8f\u0e90\5\u0156\u00ac\2\u0e90\u0ea2\3\2\2\2"+
		"\u0e91\u0e92\7\60\2\2\u0e92\u0e93\7A\2\2\u0e93\u0e94\7^\2\2\u0e94\u0e95"+
		"\7\u00de\2\2\u0e95\u0e96\7O\2\2\u0e96\u0e97\7\u0187\2\2\u0e97\u0e98\5"+
		"\u053a\u029e\2\u0e98\u0e99\7\u0118\2\2\u0e99\u0e9a\7\u010e\2\2\u0e9a\u0e9b"+
		"\5\u053a\u029e\2\u0e9b\u0e9c\5\u00b4[\2\u0e9c\u0e9d\5\u0082B\2\u0e9d\u0e9e"+
		"\7\u0146\2\2\u0e9e\u0e9f\5\u053e\u02a0\2\u0e9f\u0ea0\5\u0156\u00ac\2\u0ea0"+
		"\u0ea2\3\2\2\2\u0ea1\u0e69\3\2\2\2\u0ea1\u0e75\3\2\2\2\u0ea1\u0e84\3\2"+
		"\2\2\u0ea1\u0e91\3\2\2\2\u0ea2\u0171\3\2\2\2\u0ea3\u0ea4\7\u01be\2\2\u0ea4"+
		"\u0ea5\7A\2\2\u0ea5\u0ea6\7\u013e\2\2\u0ea6\u0ea7\5\u053e\u02a0\2\u0ea7"+
		"\u0ea8\5\u0176\u00bc\2\u0ea8\u0ea9\7B\2\2\u0ea9\u0eaa\7\u0146\2\2\u0eaa"+
		"\u0eab\5\u053e\u02a0\2\u0eab\u0eac\7I\2\2\u0eac\u0ead\5\u053e\u02a0\2"+
		"\u0ead\u0eae\5\u0156\u00ac\2\u0eae\u0173\3\2\2\2\u0eaf\u0eb0\7L\2\2\u0eb0"+
		"\u0eb3\7`\2\2\u0eb1\u0eb3\7=\2\2\u0eb2\u0eaf\3\2\2\2\u0eb2\u0eb1\3\2\2"+
		"\2\u0eb3\u0175\3\2\2\2\u0eb4\u0eb5\5\u0174\u00bb\2\u0eb5\u0eb6\7\4\2\2"+
		"\u0eb6\u0eb7\5\u0436\u021c\2\u0eb7\u0eb8\7\5\2\2\u0eb8\u0ebb\3\2\2\2\u0eb9"+
		"\u0ebb\3\2\2\2\u0eba\u0eb4\3\2\2\2\u0eba\u0eb9\3\2\2\2\u0ebb\u0177\3\2"+
		"\2\2\u0ebc\u0ebd\7\60\2\2\u0ebd\u0ebe\7e\2\2\u0ebe\u0ebf\7\u00fa\2\2\u0ebf"+
		"\u0ec0\7@\2\2\u0ec0\u0ec1\5\u017a\u00be\2\u0ec1\u0ec2\7\u0146\2\2\u0ec2"+
		"\u0ec3\5\u053e\u02a0\2\u0ec3\u0ec4\5\u0156\u00ac\2\u0ec4\u0ed2\3\2\2\2"+
		"\u0ec5\u0ec6\7\60\2\2\u0ec6\u0ec7\7e\2\2\u0ec7\u0ec8\7\u00fa\2\2\u0ec8"+
		"\u0ec9\7\u00de\2\2\u0ec9\u0eca\7O\2\2\u0eca\u0ecb\7\u0187\2\2\u0ecb\u0ecc"+
		"\7@\2\2\u0ecc\u0ecd\5\u017a\u00be\2\u0ecd\u0ece\7\u0146\2\2\u0ece\u0ecf"+
		"\5\u053e\u02a0\2\u0ecf\u0ed0\5\u0156\u00ac\2\u0ed0\u0ed2\3\2\2\2\u0ed1"+
		"\u0ebc\3\2\2\2\u0ed1\u0ec5\3\2\2\2\u0ed2\u0179\3\2\2\2\u0ed3\u0ed6\5\u055a"+
		"\u02ae\2\u0ed4\u0ed6\7e\2\2\u0ed5\u0ed3\3\2\2\2\u0ed5\u0ed4\3\2\2\2\u0ed6"+
		"\u017b\3\2\2\2\u0ed7\u0ed8\7\u00c1\2\2\u0ed8\u0ed9\7e\2\2\u0ed9\u0eda"+
		"\7\u00fa\2\2\u0eda\u0edb\7@\2\2\u0edb\u0edc\5\u017a\u00be\2\u0edc\u0edd"+
		"\7\u0146\2\2\u0edd\u0ede\5\u053e\u02a0\2\u0ede\u0eea\3\2\2\2\u0edf\u0ee0"+
		"\7\u00c1\2\2\u0ee0\u0ee1\7e\2\2\u0ee1\u0ee2\7\u00fa\2\2\u0ee2\u0ee3\7"+
		"\u00de\2\2\u0ee3\u0ee4\7\u0187\2\2\u0ee4\u0ee5\7@\2\2\u0ee5\u0ee6\5\u017a"+
		"\u00be\2\u0ee6\u0ee7\7\u0146\2\2\u0ee7\u0ee8\5\u053e\u02a0\2\u0ee8\u0eea"+
		"\3\2\2\2\u0ee9\u0ed7\3\2\2\2\u0ee9\u0edf\3\2\2\2\u0eea\u017d\3\2\2\2\u0eeb"+
		"\u0eec\7\u008c\2\2\u0eec\u0eed\7e\2\2\u0eed\u0eee\7\u00fa\2\2\u0eee\u0eef"+
		"\7@\2\2\u0eef\u0ef0\5\u017a\u00be\2\u0ef0\u0ef1\7\u0146\2\2\u0ef1\u0ef2"+
		"\5\u053e\u02a0\2\u0ef2\u0ef3\5\u015a\u00ae\2\u0ef3\u017f\3\2\2\2\u0ef4"+
		"\u0ef5\7\60\2\2\u0ef5\u0ef6\7\u01bf\2\2\u0ef6\u0ef7\5\u053e\u02a0\2\u0ef7"+
		"\u0ef8\7R\2\2\u0ef8\u0ef9\5\u053a\u029e\2\u0ef9\u0efa\5\u018c\u00c7\2"+
		"\u0efa\u0efb\5\u018e\u00c8\2\u0efb\u0efc\5\u0188\u00c5\2\u0efc\u0efd\5"+
		"\u0184\u00c3\2\u0efd\u0efe\5\u0186\u00c4\2\u0efe\u0181\3\2\2\2\u0eff\u0f00"+
		"\7\u008c\2\2\u0f00\u0f01\7\u01bf\2\2\u0f01\u0f02\5\u053e\u02a0\2\u0f02"+
		"\u0f03\7R\2\2\u0f03\u0f04\5\u053a\u029e\2\u0f04\u0f05\5\u018a\u00c6\2"+
		"\u0f05\u0f06\5\u0184\u00c3\2\u0f06\u0f07\5\u0186\u00c4\2\u0f07\u0183\3"+
		"\2\2\2\u0f08\u0f09\7f\2\2\u0f09\u0f0a\7\4\2\2\u0f0a\u0f0b\5\u048c\u0247"+
		"\2\u0f0b\u0f0c\7\5\2\2\u0f0c\u0f0f\3\2\2\2\u0f0d\u0f0f\3\2\2\2\u0f0e\u0f08"+
		"\3\2\2\2\u0f0e\u0f0d\3\2\2\2\u0f0f\u0185\3\2\2\2\u0f10\u0f11\7k\2\2\u0f11"+
		"\u0f12\7,\2\2\u0f12\u0f13\7\4\2\2\u0f13\u0f14\5\u048c\u0247\2\u0f14\u0f15"+
		"\7\5\2\2\u0f15\u0f18\3\2\2\2\u0f16\u0f18\3\2\2\2\u0f17\u0f10\3\2\2\2\u0f17"+
		"\u0f16\3\2\2\2\u0f18\u0187\3\2\2\2\u0f19\u0f1a\7`\2\2\u0f1a\u0f1d\5\u055c"+
		"\u02af\2\u0f1b\u0f1d\3\2\2\2\u0f1c\u0f19\3\2\2\2\u0f1c\u0f1b\3\2\2\2\u0f1d"+
		"\u0189\3\2\2\2\u0f1e\u0f1f\7`\2\2\u0f1f\u0f22\5\u055c\u02af\2\u0f20\u0f22"+
		"\3\2\2\2\u0f21\u0f1e\3\2\2\2\u0f21\u0f20\3\2\2\2\u0f22\u018b\3\2\2\2\u0f23"+
		"\u0f24\7&\2\2\u0f24\u0f27\5\u0566\u02b4\2\u0f25\u0f27\3\2\2\2\u0f26\u0f23"+
		"\3\2\2\2\u0f26\u0f25\3\2\2\2\u0f27\u018d\3\2\2\2\u0f28\u0f29\7@\2\2\u0f29"+
		"\u0f2c\5\u0190\u00c9\2\u0f2a\u0f2c\3\2\2\2\u0f2b\u0f28\3\2\2\2\u0f2b\u0f2a"+
		"\3\2\2\2\u0f2c\u018f\3\2\2\2\u0f2d\u0f2e\t\23\2\2\u0f2e\u0191\3\2\2\2"+
		"\u0f2f\u0f30\7\60\2\2\u0f30\u0f31\7\u0085\2\2\u0f31\u0f32\7\u01c0\2\2"+
		"\u0f32\u0f33\5\u053e\u02a0\2\u0f33\u0f34\7\u0163\2\2\u0f34\u0f35\5\u0194"+
		"\u00cb\2\u0f35\u0f36\7\u00d9\2\2\u0f36\u0f37\5\u012e\u0098\2\u0f37\u0193"+
		"\3\2\2\2\u0f38\u0f39\t\24\2\2\u0f39\u0195\3\2\2\2\u0f3a\u0f3b\7\60\2\2"+
		"\u0f3b\u0f3c\7\u0160\2\2\u0f3c\u0f3d\5\u053e\u02a0\2\u0f3d\u0f3e\5\u0198"+
		"\u00cd\2\u0f3e\u0f3f\5\u019a\u00ce\2\u0f3f\u0f40\7R\2\2\u0f40\u0f41\5"+
		"\u053a\u029e\2\u0f41\u0f42\5\u019e\u00d0\2\u0f42\u0f43\5\u01aa\u00d6\2"+
		"\u0f43\u0f44\5\u01b0\u00d9\2\u0f44\u0f45\7\u00cc\2\2\u0f45\u0f46\5\u01b2"+
		"\u00da\2\u0f46\u0f47\5\u0544\u02a3\2\u0f47\u0f48\7\4\2\2\u0f48\u0f49\5"+
		"\u01b4\u00db\2\u0f49\u0f4a\7\5\2\2\u0f4a\u0f61\3\2\2\2\u0f4b\u0f4c\7\60"+
		"\2\2\u0f4c\u0f4d\7/\2\2\u0f4d\u0f4e\7\u0160\2\2\u0f4e\u0f4f\5\u053e\u02a0"+
		"\2\u0f4f\u0f50\7\u0089\2\2\u0f50\u0f51\5\u019a\u00ce\2\u0f51\u0f52\7R"+
		"\2\2\u0f52\u0f53\5\u053a\u029e\2\u0f53\u0f54\5\u01b8\u00dd\2\u0f54\u0f55"+
		"\5\u01ba\u00de\2\u0f55\u0f56\7@\2\2\u0f56\u0f57\7\u00c2\2\2\u0f57\u0f58"+
		"\7\u0199\2\2\u0f58\u0f59\5\u01b0\u00d9\2\u0f59\u0f5a\7\u00cc\2\2\u0f5a"+
		"\u0f5b\5\u01b2\u00da\2\u0f5b\u0f5c\5\u0544\u02a3\2\u0f5c\u0f5d\7\4\2\2"+
		"\u0f5d\u0f5e\5\u01b4\u00db\2\u0f5e\u0f5f\7\5\2\2\u0f5f\u0f61\3\2\2\2\u0f60"+
		"\u0f3a\3\2\2\2\u0f60\u0f4b\3\2\2\2\u0f61\u0197\3\2\2\2\u0f62\u0f67\7\u0093"+
		"\2\2\u0f63\u0f67\7\u0089\2\2\u0f64\u0f65\7\u00eb\2\2\u0f65\u0f67\7\u010e"+
		"\2\2\u0f66\u0f62\3\2\2\2\u0f66\u0f63\3\2\2\2\u0f66\u0f64\3\2\2\2\u0f67"+
		"\u0199\3\2\2\2\u0f68\u0f6d\5\u019c\u00cf\2\u0f69\u0f6a\7T\2\2\u0f6a\u0f6c"+
		"\5\u019c\u00cf\2\u0f6b\u0f69\3\2\2\2\u0f6c\u0f6f\3\2\2\2\u0f6d\u0f6b\3"+
		"\2\2\2\u0f6d\u0f6e\3\2\2\2\u0f6e\u019b\3\2\2\2\u0f6f\u0f6d\3\2\2\2\u0f70"+
		"\u0f78\7\u00ea\2\2\u0f71\u0f78\7\u00b8\2\2\u0f72\u0f78\7\u016c\2\2\u0f73"+
		"\u0f74\7\u016c\2\2\u0f74\u0f75\7\u010e\2\2\u0f75\u0f78\5\u00dan\2\u0f76"+
		"\u0f78\7\u0161\2\2\u0f77\u0f70\3\2\2\2\u0f77\u0f71\3\2\2\2\u0f77\u0f72"+
		"\3\2\2\2\u0f77\u0f73\3\2\2\2\u0f77\u0f76\3\2\2\2\u0f78\u019d\3\2\2\2\u0f79"+
		"\u0f7a\7\u01c1\2\2\u0f7a\u0f7d\5\u01a0\u00d1\2\u0f7b\u0f7d\3\2\2\2\u0f7c"+
		"\u0f79\3\2\2\2\u0f7c\u0f7b\3\2\2\2\u0f7d\u019f\3\2\2\2\u0f7e\u0f80\5\u01a2"+
		"\u00d2\2\u0f7f\u0f7e\3\2\2\2\u0f80\u0f81\3\2\2\2\u0f81\u0f7f\3\2\2\2\u0f81"+
		"\u0f82\3\2\2\2\u0f82\u01a1\3\2\2\2\u0f83\u0f84\5\u01a4\u00d3\2\u0f84\u0f85"+
		"\5\u01a6\u00d4\2\u0f85\u0f86\5\u0344\u01a3\2\u0f86\u0f87\5\u01a8\u00d5"+
		"\2\u0f87\u01a3\3\2\2\2\u0f88\u0f89\t\25\2\2\u0f89\u01a5\3\2\2\2\u0f8a"+
		"\u0f8b\t\26\2\2\u0f8b\u01a7\3\2\2\2\u0f8c\u0f8d\5\u055e\u02b0\2\u0f8d"+
		"\u01a9\3\2\2\2\u0f8e\u0f8f\7@\2\2\u0f8f\u0f90\5\u01ac\u00d7\2\u0f90\u0f91"+
		"\5\u01ae\u00d8\2\u0f91\u0f94\3\2\2\2\u0f92\u0f94\3\2\2\2\u0f93\u0f8e\3"+
		"\2\2\2\u0f93\u0f92\3\2\2\2\u0f94\u01ab\3\2\2\2\u0f95\u0f98\7\u00c2\2\2"+
		"\u0f96\u0f98\3\2\2\2\u0f97\u0f95\3\2\2\2\u0f97\u0f96\3\2\2\2\u0f98\u01ad"+
		"\3\2\2\2\u0f99\u0f9a\t\27\2\2\u0f9a\u01af\3\2\2\2\u0f9b\u0f9c\7h\2\2\u0f9c"+
		"\u0f9d\7\4\2\2\u0f9d\u0f9e\5\u048c\u0247\2\u0f9e\u0f9f\7\5\2\2\u0f9f\u0fa2"+
		"\3\2\2\2\u0fa0\u0fa2\3\2\2\2\u0fa1\u0f9b\3\2\2\2\u0fa1\u0fa0\3\2\2\2\u0fa2"+
		"\u01b1\3\2\2\2\u0fa3\u0fa4\t\30\2\2\u0fa4\u01b3\3\2\2\2\u0fa5\u0fa8\5"+
		"\u01b6\u00dc\2\u0fa6\u0fa8\3\2\2\2\u0fa7\u0fa5\3\2\2\2\u0fa7\u0fa6\3\2"+
		"\2\2\u0fa8\u0fad\3\2\2\2\u0fa9\u0faa\7\b\2\2\u0faa\u0fac\5\u01b6\u00dc"+
		"\2\u0fab\u0fa9\3\2\2\2\u0fac\u0faf\3\2\2\2\u0fad\u0fab\3\2\2\2\u0fad\u0fae"+
		"\3\2\2\2\u0fae\u01b5\3\2\2\2\u0faf\u0fad\3\2\2\2\u0fb0\u0fb5\5\u054e\u02a8"+
		"\2\u0fb1\u0fb5\5\u054c\u02a7\2\u0fb2\u0fb5\5\u0550\u02a9\2\u0fb3\u0fb5"+
		"\5\u0564\u02b3\2\u0fb4\u0fb0\3\2\2\2\u0fb4\u0fb1\3\2\2\2\u0fb4\u0fb2\3"+
		"\2\2\2\u0fb4\u0fb3\3\2\2\2\u0fb5\u01b7\3\2\2\2\u0fb6\u0fb7\7B\2\2\u0fb7"+
		"\u0fba\5\u053a\u029e\2\u0fb8\u0fba\3\2\2\2\u0fb9\u0fb6\3\2\2\2\u0fb9\u0fb8"+
		"\3\2\2\2\u0fba\u01b9\3\2\2\2\u0fbb\u0fbd\5\u01bc\u00df\2\u0fbc\u0fbb\3"+
		"\2\2\2\u0fbd\u0fc0\3\2\2\2\u0fbe\u0fbc\3\2\2\2\u0fbe\u0fbf\3\2\2\2\u0fbf"+
		"\u01bb\3\2\2\2\u0fc0\u0fbe\3\2\2\2\u0fc1\u0fc2\7O\2\2\u0fc2\u0fcd\78\2"+
		"\2\u0fc3\u0fcd\78\2\2\u0fc4\u0fc5\7G\2\2\u0fc5\u0fcd\7\u00df\2\2\u0fc6"+
		"\u0fc7\7G\2\2\u0fc7\u0fcd\7\u00b6\2\2\u0fc8\u0fc9\7O\2\2\u0fc9\u0fcd\7"+
		"\u016e\2\2\u0fca\u0fcb\7\u0108\2\2\u0fcb\u0fcd\7\u00e6\2\2\u0fcc\u0fc1"+
		"\3\2\2\2\u0fcc\u0fc3\3\2\2\2\u0fcc\u0fc4\3\2\2\2\u0fcc\u0fc6\3\2\2\2\u0fcc"+
		"\u0fc8\3\2\2\2\u0fcc\u0fca\3\2\2\2\u0fcd\u01bd\3\2\2\2\u0fce\u0fcf\7\60"+
		"\2\2\u0fcf\u0fd0\7\u00c8\2\2\u0fd0\u0fd1\7\u0160\2\2\u0fd1\u0fd2\5\u053e"+
		"\u02a0\2\u0fd2\u0fd3\7R\2\2\u0fd3\u0fd4\5\u0564\u02b3\2\u0fd4\u0fd5\7"+
		"\u00cc\2\2\u0fd5\u0fd6\5\u01b2\u00da\2\u0fd6\u0fd7\5\u0544\u02a3\2\u0fd7"+
		"\u0fd8\7\4\2\2\u0fd8\u0fd9\7\5\2\2\u0fd9\u0fe9\3\2\2\2\u0fda\u0fdb\7\60"+
		"\2\2\u0fdb\u0fdc\7\u00c8\2\2\u0fdc\u0fdd\7\u0160\2\2\u0fdd\u0fde\5\u053e"+
		"\u02a0\2\u0fde\u0fdf\7R\2\2\u0fdf\u0fe0\5\u0564\u02b3\2\u0fe0\u0fe1\7"+
		"h\2\2\u0fe1\u0fe2\5\u01c0\u00e1\2\u0fe2\u0fe3\7\u00cc\2\2\u0fe3\u0fe4"+
		"\5\u01b2\u00da\2\u0fe4\u0fe5\5\u0544\u02a3\2\u0fe5\u0fe6\7\4\2\2\u0fe6"+
		"\u0fe7\7\5\2\2\u0fe7\u0fe9\3\2\2\2\u0fe8\u0fce\3\2\2\2\u0fe8\u0fda\3\2"+
		"\2\2\u0fe9\u01bf\3\2\2\2\u0fea\u0fef\5\u01c2\u00e2\2\u0feb\u0fec\7#\2"+
		"\2\u0fec\u0fee\5\u01c2\u00e2\2\u0fed\u0feb\3\2\2\2\u0fee\u0ff1\3\2\2\2"+
		"\u0fef\u0fed\3\2\2\2\u0fef\u0ff0\3\2\2\2\u0ff0\u01c1\3\2\2\2\u0ff1\u0fef"+
		"\3\2\2\2\u0ff2\u0ff3\5\u055e\u02b0\2\u0ff3\u0ff4\7F\2\2\u0ff4\u0ff5\7"+
		"\4\2\2\u0ff5\u0ff6\5\u01c4\u00e3\2\u0ff6\u0ff7\7\5\2\2\u0ff7\u01c3\3\2"+
		"\2\2\u0ff8\u0ffd\5\u0550\u02a9\2\u0ff9\u0ffa\7\b\2\2\u0ffa\u0ffc\5\u0550"+
		"\u02a9\2\u0ffb\u0ff9\3\2\2\2\u0ffc\u0fff\3\2\2\2\u0ffd\u0ffb\3\2\2\2\u0ffd"+
		"\u0ffe\3\2\2\2\u0ffe\u01c5\3\2\2\2\u0fff\u0ffd\3\2\2\2\u1000\u1001\7\u008c"+
		"\2\2\u1001\u1002\7\u00c8\2\2\u1002\u1003\7\u0160\2\2\u1003\u1004\5\u053e"+
		"\u02a0\2\u1004\u1005\5\u01c8\u00e5\2\u1005\u01c7\3\2\2\2\u1006\u100d\7"+
		"\u00c3\2\2\u1007\u1008\7\u00c3\2\2\u1008\u100d\7\u0133\2\2\u1009\u100a"+
		"\7\u00c3\2\2\u100a\u100d\7\u008d\2\2\u100b\u100d\7\u00bc\2\2\u100c\u1006"+
		"\3\2\2\2\u100c\u1007\3\2\2\2\u100c\u1009\3\2\2\2\u100c\u100b\3\2\2\2\u100d"+
		"\u01c9\3\2\2\2\u100e\u100f\7\60\2\2\u100f\u1010\7\u008e\2\2\u1010\u1011"+
		"\5\u020e\u0108\2\u1011\u1012\7,\2\2\u1012\u1013\7\4\2\2\u1013\u1014\5"+
		"\u048c\u0247\2\u1014\u1015\7\5\2\2\u1015\u1016\5\u01ba\u00de\2\u1016\u01cb"+
		"\3\2\2\2\u1017\u1018\7\60\2\2\u1018\u1019\5\u026c\u0137\2\u1019\u101a"+
		"\7\u008a\2\2\u101a\u101b\5\u0544\u02a3\2\u101b\u101c\5\u0288\u0145\2\u101c"+
		"\u101d\5\u01ce\u00e8\2\u101d\u1082\3\2\2\2\u101e\u101f\7\60\2\2\u101f"+
		"\u1020\5\u026c\u0137\2\u1020\u1021\7\u008a\2\2\u1021\u1022\5\u0544\u02a3"+
		"\2\u1022\u1023\5\u01d6\u00ec\2\u1023\u1082\3\2\2\2\u1024\u1025\7\60\2"+
		"\2\u1025\u1026\7\u0111\2\2\u1026\u1027\5\u02ae\u0158\2\u1027\u1028\5\u01ce"+
		"\u00e8\2\u1028\u1082\3\2\2\2\u1029\u102a\7\60\2\2\u102a\u102b\7\u0163"+
		"\2\2\u102b\u102c\5\u020e\u0108\2\u102c\u102d\5\u01ce\u00e8\2\u102d\u1082"+
		"\3\2\2\2\u102e\u102f\7\60\2\2\u102f\u1030\7\u0163\2\2\u1030\u1082\5\u020e"+
		"\u0108\2\u1031\u1032\7\60\2\2\u1032\u1033\7\u0163\2\2\u1033\u1034\5\u020e"+
		"\u0108\2\u1034\u1035\7&\2\2\u1035\u1036\7\4\2\2\u1036\u1037\5\u044c\u0227"+
		"\2\u1037\u1038\7\5\2\2\u1038\u1082\3\2\2\2\u1039\u103a\7\60\2\2\u103a"+
		"\u103b\7\u0163\2\2\u103b\u103c\5\u020e\u0108\2\u103c\u103d\7&\2\2\u103d"+
		"\u103e\7\u00c6\2\2\u103e\u103f\7\4\2\2\u103f\u1040\5\u01dc\u00ef\2\u1040"+
		"\u1041\7\5\2\2\u1041\u1082\3\2\2\2\u1042\u1043\7\60\2\2\u1043\u1044\7"+
		"\u0163\2\2\u1044\u1045\5\u020e\u0108\2\u1045\u1046\7&\2\2\u1046\u1047"+
		"\7\u0126\2\2\u1047\u1048\5\u01ce\u00e8\2\u1048\u1082\3\2\2\2\u1049\u104a"+
		"\7\60\2\2\u104a\u104b\7\u015e\2\2\u104b\u104c\7\u0140\2\2\u104c\u104d"+
		"\7\u0116\2\2\u104d\u104e\5\u020e\u0108\2\u104e\u104f\5\u01ce\u00e8\2\u104f"+
		"\u1082\3\2\2\2\u1050\u1051\7\60\2\2\u1051\u1052\7\u015e\2\2\u1052\u1053"+
		"\7\u0140\2\2\u1053\u1054\7\u00bb\2\2\u1054\u1055\5\u020e\u0108\2\u1055"+
		"\u1056\5\u01ce\u00e8\2\u1056\u1082\3\2\2\2\u1057\u1058\7\60\2\2\u1058"+
		"\u1059\7\u015e\2\2\u1059\u105a\7\u0140\2\2\u105a\u105b\7\u015c\2\2\u105b"+
		"\u105c\5\u020e\u0108\2\u105c\u105d\5\u01ce\u00e8\2\u105d\u1082\3\2\2\2"+
		"\u105e\u105f\7\60\2\2\u105f\u1060\7\u015e\2\2\u1060\u1061\7\u0140\2\2"+
		"\u1061\u1062\7\u00a5\2\2\u1062\u1063\5\u020e\u0108\2\u1063\u1064\5\u01ce"+
		"\u00e8\2\u1064\u1082\3\2\2\2\u1065\u1066\7\60\2\2\u1066\u1067\7n\2\2\u1067"+
		"\u1068\5\u020e\u0108\2\u1068\u1069\5\u01ce\u00e8\2\u1069\u1082\3\2\2\2"+
		"\u106a\u106b\7\60\2\2\u106b\u106c\7n\2\2\u106c\u106d\7\u00de\2\2\u106d"+
		"\u106e\7O\2\2\u106e\u106f\7\u0187\2\2\u106f\u1070\5\u020e\u0108\2\u1070"+
		"\u1071\5\u01ce\u00e8\2\u1071\u1082\3\2\2\2\u1072\u1073\7\60\2\2\u1073"+
		"\u1074\7n\2\2\u1074\u1075\5\u020e\u0108\2\u1075\u1076\7B\2\2\u1076\u1077"+
		"\5\u020e\u0108\2\u1077\u1082\3\2\2\2\u1078\u1079\7\60\2\2\u1079\u107a"+
		"\7n\2\2\u107a\u107b\7\u00de\2\2\u107b\u107c\7O\2\2\u107c\u107d\7\u0187"+
		"\2\2\u107d\u107e\5\u020e\u0108\2\u107e\u107f\7B\2\2\u107f\u1080\5\u020e"+
		"\u0108\2\u1080\u1082\3\2\2\2\u1081\u1017\3\2\2\2\u1081\u101e\3\2\2\2\u1081"+
		"\u1024\3\2\2\2\u1081\u1029\3\2\2\2\u1081\u102e\3\2\2\2\u1081\u1031\3\2"+
		"\2\2\u1081\u1039\3\2\2\2\u1081\u1042\3\2\2\2\u1081\u1049\3\2\2\2\u1081"+
		"\u1050\3\2\2\2\u1081\u1057\3\2\2\2\u1081\u105e\3\2\2\2\u1081\u1065\3\2"+
		"\2\2\u1081\u106a\3\2\2\2\u1081\u1072\3\2\2\2\u1081\u1078\3\2\2\2\u1082"+
		"\u01cd\3\2\2\2\u1083\u1084\7\4\2\2\u1084\u1085\5\u01d0\u00e9\2\u1085\u1086"+
		"\7\5\2\2\u1086\u01cf\3\2\2\2\u1087\u108c\5\u01d2\u00ea\2\u1088\u1089\7"+
		"\b\2\2\u1089\u108b\5\u01d2\u00ea\2\u108a\u1088\3\2\2\2\u108b\u108e\3\2"+
		"\2\2\u108c\u108a\3\2\2\2\u108c\u108d\3\2\2\2\u108d\u01d1\3\2\2\2\u108e"+
		"\u108c\3\2\2\2\u108f\u1092\5\u0564\u02b3\2\u1090\u1091\7\f\2\2\u1091\u1093"+
		"\5\u01d4\u00eb\2\u1092\u1090\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u01d3\3"+
		"\2\2\2\u1094\u109b\5\u0282\u0142\2\u1095\u109b\5\u0570\u02b9\2\u1096\u109b"+
		"\5\u04fe\u0280\2\u1097\u109b\5\u0126\u0094\2\u1098\u109b\5\u0550\u02a9"+
		"\2\u1099\u109b\7\u0192\2\2\u109a\u1094\3\2\2\2\u109a\u1095\3\2\2\2\u109a"+
		"\u1096\3\2\2\2\u109a\u1097\3\2\2\2\u109a\u1098\3\2\2\2\u109a\u1099\3\2"+
		"\2\2\u109b\u01d5\3\2\2\2\u109c\u109d\7\4\2\2\u109d\u109e\5\u01d8\u00ed"+
		"\2\u109e\u109f\7\5\2\2\u109f\u01d7\3\2\2\2\u10a0\u10a5\5\u01da\u00ee\2"+
		"\u10a1\u10a2\7\b\2\2\u10a2\u10a4\5\u01da\u00ee\2\u10a3\u10a1\3\2\2\2\u10a4"+
		"\u10a7\3\2\2\2\u10a5\u10a3\3\2\2\2\u10a5\u10a6\3\2\2\2\u10a6\u01d9\3\2"+
		"\2\2\u10a7\u10a5\3\2\2\2\u10a8\u10a9\5\u0566\u02b4\2\u10a9\u10aa\7\f\2"+
		"\2\u10aa\u10ab\5\u01d4\u00eb\2\u10ab\u01db\3\2\2\2\u10ac\u10af\5\u01de"+
		"\u00f0\2\u10ad\u10af\3\2\2\2\u10ae\u10ac\3\2\2\2\u10ae\u10ad\3\2\2\2\u10af"+
		"\u01dd\3\2\2\2\u10b0\u10b5\5\u0550\u02a9\2\u10b1\u10b2\7\b\2\2\u10b2\u10b4"+
		"\5\u0550\u02a9\2\u10b3\u10b1\3\2\2\2\u10b4\u10b7\3\2\2\2\u10b5\u10b3\3"+
		"\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u01df\3\2\2\2\u10b7\u10b5\3\2\2\2\u10b8"+
		"\u10b9\7\u008c\2\2\u10b9\u10ba\7\u0163\2\2\u10ba\u10bb\5\u020e\u0108\2"+
		"\u10bb\u10bc\7\u0087\2\2\u10bc\u10bd\7\u01c4\2\2\u10bd\u10be\5\u01e2\u00f2"+
		"\2\u10be\u10bf\5\u0550\u02a9\2\u10bf\u10de\3\2\2\2\u10c0\u10c1\7\u008c"+
		"\2\2\u10c1\u10c2\7\u0163\2\2\u10c2\u10c3\5\u020e\u0108\2\u10c3\u10c4\7"+
		"\u0087\2\2\u10c4\u10c5\7\u01c4\2\2\u10c5\u10c6\5\u01e2\u00f2\2\u10c6\u10c7"+
		"\5\u0550\u02a9\2\u10c7\u10c8\7\u0093\2\2\u10c8\u10c9\5\u0550\u02a9\2\u10c9"+
		"\u10de\3\2\2\2\u10ca\u10cb\7\u008c\2\2\u10cb\u10cc\7\u0163\2\2\u10cc\u10cd"+
		"\5\u020e\u0108\2\u10cd\u10ce\7\u0087\2\2\u10ce\u10cf\7\u01c4\2\2\u10cf"+
		"\u10d0\5\u01e2\u00f2\2\u10d0\u10d1\5\u0550\u02a9\2\u10d1\u10d2\7\u0089"+
		"\2\2\u10d2\u10d3\5\u0550\u02a9\2\u10d3\u10de\3\2\2\2\u10d4\u10d5\7\u008c"+
		"\2\2\u10d5\u10d6\7\u0163\2\2\u10d6\u10d7\5\u020e\u0108\2\u10d7\u10d8\7"+
		"\u0130\2\2\u10d8\u10d9\7\u01c4\2\2\u10d9\u10da\5\u0550\u02a9\2\u10da\u10db"+
		"\7`\2\2\u10db\u10dc\5\u0550\u02a9\2\u10dc\u10de\3\2\2\2\u10dd\u10b8\3"+
		"\2\2\2\u10dd\u10c0\3\2\2\2\u10dd\u10ca\3\2\2\2\u10dd\u10d4\3\2\2\2\u10de"+
		"\u01e1\3\2\2\2\u10df\u10e0\7\u00de\2\2\u10e0\u10e1\7O\2\2\u10e1\u10e4"+
		"\7\u0187\2\2\u10e2\u10e4\3\2\2\2\u10e3\u10df\3\2\2\2\u10e3\u10e2\3\2\2"+
		"\2\u10e4\u01e3\3\2\2\2\u10e5\u10e6\7\60\2\2\u10e6\u10e7\7\u0111\2\2\u10e7"+
		"\u10e8\7\u009e\2\2\u10e8\u10e9\5\u020e\u0108\2\u10e9\u10ea\5\u01ea\u00f6"+
		"\2\u10ea\u10eb\7@\2\2\u10eb\u10ec\7\u0163\2\2\u10ec\u10ed\5\u0460\u0231"+
		"\2\u10ed\u10ee\7f\2\2\u10ee\u10ef\5\u053e\u02a0\2\u10ef\u10f0\5\u01ec"+
		"\u00f7\2\u10f0\u10f1\7&\2\2\u10f1\u10f2\5\u01e6\u00f4\2\u10f2\u01e5\3"+
		"\2\2\2\u10f3\u10f8\5\u01e8\u00f5\2\u10f4\u10f5\7\b\2\2\u10f5\u10f7\5\u01e8"+
		"\u00f5\2\u10f6\u10f4\3\2\2\2\u10f7\u10fa\3\2\2\2\u10f8\u10f6\3\2\2\2\u10f8"+
		"\u10f9\3\2\2\2\u10f9\u01e7\3\2\2\2\u10fa\u10f8\3\2\2\2\u10fb\u10fc\7\u0111"+
		"\2\2\u10fc\u10fd\5\u054e\u02a8\2\u10fd\u10fe\5\u02ae\u0158\2\u10fe\u10ff"+
		"\5\u01ee\u00f8\2\u10ff\u1100\5\u01f0\u00f9\2\u1100\u1115\3\2\2\2\u1101"+
		"\u1102\7\u0111\2\2\u1102\u1103\5\u054e\u02a8\2\u1103\u1104\5\u02b2\u015a"+
		"\2\u1104\u1105\5\u01ee\u00f8\2\u1105\u1106\5\u01f0\u00f9\2\u1106\u1115"+
		"\3\2\2\2\u1107\u1108\7\u00d5\2\2\u1108\u1109\5\u054e\u02a8\2\u1109\u110a"+
		"\5\u0274\u013b\2\u110a\u1115\3\2\2\2\u110b\u110c\7\u00d5\2\2\u110c\u110d"+
		"\5\u054e\u02a8\2\u110d\u110e\7\4\2\2\u110e\u110f\5\u0508\u0285\2\u110f"+
		"\u1110\7\5\2\2\u1110\u1111\5\u0274\u013b\2\u1111\u1115\3\2\2\2\u1112\u1113"+
		"\7\u0154\2\2\u1113\u1115\5\u0460\u0231\2\u1114\u10fb\3\2\2\2\u1114\u1101"+
		"\3\2\2\2\u1114\u1107\3\2\2\2\u1114\u110b\3\2\2\2\u1114\u1112\3\2\2\2\u1115"+
		"\u01e9\3\2\2\2\u1116\u1119\7\67\2\2\u1117\u1119\3\2\2\2\u1118\u1116\3"+
		"\2\2\2\u1118\u1117\3\2\2\2\u1119\u01eb\3\2\2\2\u111a\u111b\7\u00d0\2\2"+
		"\u111b\u111e\5\u020e\u0108\2\u111c\u111e\3\2\2\2\u111d\u111a\3\2\2\2\u111d"+
		"\u111c\3\2\2\2\u111e\u01ed\3\2\2\2\u111f\u1120\7@\2\2\u1120\u1127\7\u0140"+
		"\2\2\u1121\u1122\7@\2\2\u1122\u1123\7U\2\2\u1123\u1124\7\u0095\2\2\u1124"+
		"\u1127\5\u020e\u0108\2\u1125\u1127\3\2\2\2\u1126\u111f\3\2\2\2\u1126\u1121"+
		"\3\2\2\2\u1126\u1125\3\2\2\2\u1127\u01ef\3\2\2\2\u1128\u112b\7\u0129\2"+
		"\2\u1129\u112b\3\2\2\2\u112a\u1128\3\2\2\2\u112a\u1129\3\2\2\2\u112b\u01f1"+
		"\3\2\2\2\u112c\u112d\7\60\2\2\u112d\u112e\7\u0111\2\2\u112e\u112f\7\u00d0"+
		"\2\2\u112f\u1130\5\u020e\u0108\2\u1130\u1131\7f\2\2\u1131\u1132\5\u053e"+
		"\u02a0\2\u1132\u01f3\3\2\2\2\u1133\u1134\7\u008c\2\2\u1134\u1135\7\u0111"+
		"\2\2\u1135\u1136\7\u00d0\2\2\u1136\u1137\5\u020e\u0108\2\u1137\u1138\7"+
		"f\2\2\u1138\u1139\5\u053e\u02a0\2\u1139\u113a\7\u0087\2\2\u113a\u113b"+
		"\5\u01e6\u00f4\2\u113b\u1146\3\2\2\2\u113c\u113d\7\u008c\2\2\u113d\u113e"+
		"\7\u0111\2\2\u113e\u113f\7\u00d0\2\2\u113f\u1140\5\u020e\u0108\2\u1140"+
		"\u1141\7f\2\2\u1141\u1142\5\u053e\u02a0\2\u1142\u1143\7\u00c1\2\2\u1143"+
		"\u1144\5\u01f6\u00fc\2\u1144\u1146\3\2\2\2\u1145\u1133\3\2\2\2\u1145\u113c"+
		"\3\2\2\2\u1146\u01f5\3\2\2\2\u1147\u114c\5\u01f8\u00fd\2\u1148\u1149\7"+
		"\b\2\2\u1149\u114b\5\u01f8\u00fd\2\u114a\u1148\3\2\2\2\u114b\u114e\3\2"+
		"\2\2\u114c\u114a\3\2\2\2\u114c\u114d\3\2\2\2\u114d\u01f7\3\2\2\2\u114e"+
		"\u114c\3\2\2\2\u114f\u1150\7\u0111\2\2\u1150\u1151\5\u054e\u02a8\2\u1151"+
		"\u1152\7\4\2\2\u1152\u1153\5\u0508\u0285\2\u1153\u1154\7\5\2\2\u1154\u115c"+
		"\3\2\2\2\u1155\u1156\7\u00d5\2\2\u1156\u1157\5\u054e\u02a8\2\u1157\u1158"+
		"\7\4\2\2\u1158\u1159\5\u0508\u0285\2\u1159\u115a\7\5\2\2\u115a\u115c\3"+
		"\2\2\2\u115b\u114f\3\2\2\2\u115b\u1155\3\2\2\2\u115c\u01f9\3\2\2\2\u115d"+
		"\u115e\7\u00c1\2\2\u115e\u115f\7\u0111\2\2\u115f\u1160\7\u009e\2\2\u1160"+
		"\u1161\5\u020e\u0108\2\u1161\u1162\7f\2\2\u1162\u1163\5\u053e\u02a0\2"+
		"\u1163\u1164\5n8\2\u1164\u1170\3\2\2\2\u1165\u1166\7\u00c1\2\2\u1166\u1167"+
		"\7\u0111\2\2\u1167\u1168\7\u009e\2\2\u1168\u1169\7\u00de\2\2\u1169\u116a"+
		"\7\u0187\2\2\u116a\u116b\5\u020e\u0108\2\u116b\u116c\7f\2\2\u116c\u116d"+
		"\5\u053e\u02a0\2\u116d\u116e\5n8\2\u116e\u1170\3\2\2\2\u116f\u115d\3\2"+
		"\2\2\u116f\u1165\3\2\2\2\u1170\u01fb\3\2\2\2\u1171\u1172\7\u00c1\2\2\u1172"+
		"\u1173\7\u0111\2\2\u1173\u1174\7\u00d0\2\2\u1174\u1175\5\u020e\u0108\2"+
		"\u1175\u1176\7f\2\2\u1176\u1177\5\u053e\u02a0\2\u1177\u1178\5n8\2\u1178"+
		"\u1184\3\2\2\2\u1179\u117a\7\u00c1\2\2\u117a\u117b\7\u0111\2\2\u117b\u117c"+
		"\7\u00d0\2\2\u117c\u117d\7\u00de\2\2\u117d\u117e\7\u0187\2\2\u117e\u117f"+
		"\5\u020e\u0108\2\u117f\u1180\7f\2\2\u1180\u1181\5\u053e\u02a0\2\u1181"+
		"\u1182\5n8\2\u1182\u1184\3\2\2\2\u1183\u1171\3\2\2\2\u1183\u1179\3\2\2"+
		"\2\u1184\u01fd\3\2\2\2\u1185\u1186\7\u00c1\2\2\u1186\u1187\7\u0114\2\2"+
		"\u1187\u1188\7\u0095\2\2\u1188\u1189\5\u055c\u02af\2\u1189\u118a\5n8\2"+
		"\u118a\u01ff\3\2\2\2\u118b\u118c\7\u0128\2\2\u118c\u118d\7\u0114\2\2\u118d"+
		"\u118e\7\u0095\2\2\u118e\u118f\5\u055c\u02af\2\u118f\u1190\7`\2\2\u1190"+
		"\u1191\5\u055a\u02ae\2\u1191\u0201\3\2\2\2\u1192\u1193\7\u00c1\2\2\u1193"+
		"\u1194\5\u0204\u0103\2\u1194\u1195\7\u00de\2\2\u1195\u1196\7\u0187\2\2"+
		"\u1196\u1197\5\u020c\u0107\2\u1197\u1198\5n8\2\u1198\u11e1\3\2\2\2\u1199"+
		"\u119a\7\u00c1\2\2\u119a\u119b\5\u0204\u0103\2\u119b\u119c\5\u020c\u0107"+
		"\2\u119c\u119d\5n8\2\u119d\u11e1\3\2\2\2\u119e\u119f\7\u00c1\2\2\u119f"+
		"\u11a0\5\u0208\u0105\2\u11a0\u11a1\7\u00de\2\2\u11a1\u11a2\7\u0187\2\2"+
		"\u11a2\u11a3\5\u053c\u029f\2\u11a3\u11a4\5n8\2\u11a4\u11e1\3\2\2\2\u11a5"+
		"\u11a6\7\u00c1\2\2\u11a6\u11a7\5\u0208\u0105\2\u11a7\u11a8\5\u053c\u029f"+
		"\2\u11a8\u11a9\5n8\2\u11a9\u11e1\3\2\2\2\u11aa\u11ab\7\u00c1\2\2\u11ab"+
		"\u11ac\5\u020a\u0106\2\u11ac\u11ad\5\u053e\u02a0\2\u11ad\u11ae\7R\2\2"+
		"\u11ae\u11af\5\u020e\u0108\2\u11af\u11b0\5n8\2\u11b0\u11e1\3\2\2\2\u11b1"+
		"\u11b2\7\u00c1\2\2\u11b2\u11b3\5\u020a\u0106\2\u11b3\u11b4\7\u00de\2\2"+
		"\u11b4\u11b5\7\u0187\2\2\u11b5\u11b6\5\u053e\u02a0\2\u11b6\u11b7\7R\2"+
		"\2\u11b7\u11b8\5\u020e\u0108\2\u11b8\u11b9\5n8\2\u11b9\u11e1\3\2\2\2\u11ba"+
		"\u11bb\7\u00c1\2\2\u11bb\u11bc\7\u0163\2\2\u11bc\u11bd\5\u0212\u010a\2"+
		"\u11bd\u11be\5n8\2\u11be\u11e1\3\2\2\2\u11bf\u11c0\7\u00c1\2\2\u11c0\u11c1"+
		"\7\u0163\2\2\u11c1\u11c2\7\u00de\2\2\u11c2\u11c3\7\u0187\2\2\u11c3\u11c4"+
		"\5\u0212\u010a\2\u11c4\u11c5\5n8\2\u11c5\u11e1\3\2\2\2\u11c6\u11c7\7\u00c1"+
		"\2\2\u11c7\u11c8\7\u00bf\2\2\u11c8\u11c9\5\u0212\u010a\2\u11c9\u11ca\5"+
		"n8\2\u11ca\u11e1\3\2\2\2\u11cb\u11cc\7\u00c1\2\2\u11cc\u11cd\7\u00bf\2"+
		"\2\u11cd\u11ce\7\u00de\2\2\u11ce\u11cf\7\u0187\2\2\u11cf\u11d0\5\u0212"+
		"\u010a\2\u11d0\u11d1\5n8\2\u11d1\u11e1\3\2\2\2\u11d2\u11d3\7\u00c1\2\2"+
		"\u11d3\u11d4\7\u00e4\2\2\u11d4\u11d5\7o\2\2\u11d5\u11d6\5\u020c\u0107"+
		"\2\u11d6\u11d7\5n8\2\u11d7\u11e1\3\2\2\2\u11d8\u11d9\7\u00c1\2\2\u11d9"+
		"\u11da\7\u00e4\2\2\u11da\u11db\7o\2\2\u11db\u11dc\7\u00de\2\2\u11dc\u11dd"+
		"\7\u0187\2\2\u11dd\u11de\5\u020c\u0107\2\u11de\u11df\5n8\2\u11df\u11e1"+
		"\3\2\2\2\u11e0\u1192\3\2\2\2\u11e0\u1199\3\2\2\2\u11e0\u119e\3\2\2\2\u11e0"+
		"\u11a5\3\2\2\2\u11e0\u11aa\3\2\2\2\u11e0\u11b1\3\2\2\2\u11e0\u11ba\3\2"+
		"\2\2\u11e0\u11bf\3\2\2\2\u11e0\u11c6\3\2\2\2\u11e0\u11cb\3\2\2\2\u11e0"+
		"\u11d2\3\2\2\2\u11e0\u11d8\3\2\2\2\u11e1\u0203\3\2\2\2\u11e2\u11fa\7^"+
		"\2\2\u11e3\u11fa\7\u0143\2\2\u11e4\u11fa\7\u0173\2\2\u11e5\u11e6\7\u00fd"+
		"\2\2\u11e6\u11fa\7\u0173\2\2\u11e7\u11fa\7\u00e4\2\2\u11e8\u11e9\7A\2"+
		"\2\u11e9\u11fa\7^\2\2\u11ea\u11fa\7n\2\2\u11eb\u11fa\7\u00aa\2\2\u11ec"+
		"\u11fa\7\u0151\2\2\u11ed\u11ee\7\u015e\2\2\u11ee\u11ef\7\u0140\2\2\u11ef"+
		"\u11fa\7\u0116\2\2\u11f0\u11f1\7\u015e\2\2\u11f1\u11f2\7\u0140\2\2\u11f2"+
		"\u11fa\7\u00bb\2\2\u11f3\u11f4\7\u015e\2\2\u11f4\u11f5\7\u0140\2\2\u11f5"+
		"\u11fa\7\u015c\2\2\u11f6\u11f7\7\u015e\2\2\u11f7\u11f8\7\u0140\2\2\u11f8"+
		"\u11fa\7\u00a5\2\2\u11f9\u11e2\3\2\2\2\u11f9\u11e3\3\2\2\2\u11f9\u11e4"+
		"\3\2\2\2\u11f9\u11e5\3\2\2\2\u11f9\u11e7\3\2\2\2\u11f9\u11e8\3\2\2\2\u11f9"+
		"\u11ea\3\2\2\2\u11f9\u11eb\3\2\2\2\u11f9\u11ec\3\2\2\2\u11f9\u11ed\3\2"+
		"\2\2\u11f9\u11f0\3\2\2\2\u11f9\u11f3\3\2\2\2\u11f9\u11f6\3\2\2\2\u11fa"+
		"\u0205\3\2\2\2\u11fb\u1201\5\u0208\u0105\2\u11fc\u1201\7\u00b1\2\2\u11fd"+
		"\u1201\7\u0139\2\2\u11fe\u1201\7\u01c5\2\2\u11ff\u1201\7\u015a\2\2\u1200"+
		"\u11fb\3\2\2\2\u1200\u11fc\3\2\2\2\u1200\u11fd\3\2\2\2\u1200\u11fe\3\2"+
		"\2\2\u1200\u11ff\3\2\2\2\u1201\u0207\3\2\2\2\u1202\u1203\7\u0085\2\2\u1203"+
		"\u1211\7\u01c0\2\2\u1204\u1205\7\u00c8\2\2\u1205\u1211\7\u0160\2\2\u1206"+
		"\u1211\7\u00ce\2\2\u1207\u1208\7A\2\2\u1208\u1209\7\u00b0\2\2\u1209\u1211"+
		"\7\u0178\2\2\u120a\u120b\5\u0136\u009c\2\u120b\u120c\7\u00f0\2\2\u120c"+
		"\u1211\3\2\2\2\u120d\u1211\7\u01c6\2\2\u120e\u1211\7\u013e\2\2\u120f\u1211"+
		"\7\u0146\2\2\u1210\u1202\3\2\2\2\u1210\u1204\3\2\2\2\u1210\u1206\3\2\2"+
		"\2\u1210\u1207\3\2\2\2\u1210\u120a\3\2\2\2\u1210\u120d\3\2\2\2\u1210\u120e"+
		"\3\2\2\2\u1210\u120f\3\2\2\2\u1211\u0209\3\2\2\2\u1212\u1213\t\31\2\2"+
		"\u1213\u020b\3\2\2\2\u1214\u1219\5\u020e\u0108\2\u1215\u1216\7\b\2\2\u1216"+
		"\u1218\5\u020e\u0108\2\u1217\u1215\3\2\2\2\u1218\u121b\3\2\2\2\u1219\u1217"+
		"\3\2\2\2\u1219\u121a\3\2\2\2\u121a\u020d\3\2\2\2\u121b\u1219\3\2\2\2\u121c"+
		"\u121e\5\u055e\u02b0\2\u121d\u121f\5\u0210\u0109\2\u121e\u121d\3\2\2\2"+
		"\u121e\u121f\3\2\2\2\u121f\u020f\3\2\2\2\u1220\u1221\7\r\2\2\u1221\u1223"+
		"\5\u0540\u02a1\2\u1222\u1220\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u1222\3"+
		"\2\2\2\u1224\u1225\3\2\2\2\u1225\u0211\3\2\2\2\u1226\u122b\5\u0460\u0231"+
		"\2\u1227\u1228\7\b\2\2\u1228\u122a\5\u0460\u0231\2\u1229\u1227\3\2\2\2"+
		"\u122a\u122d\3\2\2\2\u122b\u1229\3\2\2\2\u122b\u122c\3\2\2\2\u122c\u0213"+
		"\3\2\2\2\u122d\u122b\3\2\2\2\u122e\u122f\7\u0161\2\2\u122f\u1230\5\u03e0"+
		"\u01f1\2\u1230\u1231\5\u0436\u021c\2\u1231\u1232\5\u0216\u010c\2\u1232"+
		"\u1233\5n8\2\u1233\u0215\3\2\2\2\u1234\u1235\7\u00a9\2\2\u1235\u123a\7"+
		"\u00dd\2\2\u1236\u1237\7\u0135\2\2\u1237\u123a\7\u00dd\2\2\u1238\u123a"+
		"\3\2\2\2\u1239\u1234\3\2\2\2\u1239\u1236\3\2\2\2\u1239\u1238\3\2\2\2\u123a"+
		"\u0217\3\2\2\2\u123b\u123c\7\u00a1\2\2\u123c\u123d\7R\2\2\u123d\u123e"+
		"\5\u0204\u0103\2\u123e\u123f\5\u020e\u0108\2\u123f\u1240\7v\2\2\u1240"+
		"\u1241\5\u021a\u010e\2\u1241\u12cf\3\2\2\2\u1242\u1243\7\u00a1\2\2\u1243"+
		"\u1244\7R\2\2\u1244\u1245\7.\2\2\u1245\u1246\5\u020e\u0108\2\u1246\u1247"+
		"\7v\2\2\u1247\u1248\5\u021a\u010e\2\u1248\u12cf\3\2\2\2\u1249\u124a\7"+
		"\u00a1\2\2\u124a\u124b\7R\2\2\u124b\u124c\5\u0206\u0104\2\u124c\u124d"+
		"\5\u053e\u02a0\2\u124d\u124e\7v\2\2\u124e\u124f\5\u021a\u010e\2\u124f"+
		"\u12cf\3\2\2\2\u1250\u1251\7\u00a1\2\2\u1251\u1252\7R\2\2\u1252\u1253"+
		"\7\u0163\2\2\u1253\u1254\5\u0460\u0231\2\u1254\u1255\7v\2\2\u1255\u1256"+
		"\5\u021a\u010e\2\u1256\u12cf\3\2\2\2\u1257\u1258\7\u00a1\2\2\u1258\u1259"+
		"\7R\2\2\u1259\u125a\7\u00bf\2\2\u125a\u125b\5\u0460\u0231\2\u125b\u125c"+
		"\7v\2\2\u125c\u125d\5\u021a\u010e\2\u125d\u12cf\3\2\2\2\u125e\u125f\7"+
		"\u00a1\2\2\u125f\u1260\7R\2\2\u1260\u1261\7\u008a\2\2\u1261\u1262\5\u028c"+
		"\u0147\2\u1262\u1263\7v\2\2\u1263\u1264\5\u021a\u010e\2\u1264\u12cf\3"+
		"\2\2\2\u1265\u1266\7\u00a1\2\2\u1266\u1267\7R\2\2\u1267\u1268\7\u00d5"+
		"\2\2\u1268\u1269\5\u0274\u013b\2\u1269\u126a\7v\2\2\u126a\u126b\5\u021a"+
		"\u010e\2\u126b\u12cf\3\2\2\2\u126c\u126d\7\u00a1\2\2\u126d\u126e\7R\2"+
		"\2\u126e\u126f\7\u0111\2\2\u126f\u1270\5\u02b2\u015a\2\u1270\u1271\7v"+
		"\2\2\u1271\u1272\5\u021a\u010e\2\u1272\u12cf\3\2\2\2\u1273\u1274\7\u00a1"+
		"\2\2\u1274\u1275\7R\2\2\u1275\u1276\7/\2\2\u1276\u1277\5\u053e\u02a0\2"+
		"\u1277\u1278\7R\2\2\u1278\u1279\5\u020e\u0108\2\u1279\u127a\7v\2\2\u127a"+
		"\u127b\5\u021a\u010e\2\u127b\u12cf\3\2\2\2\u127c\u127d\7\u00a1\2\2\u127d"+
		"\u127e\7R\2\2\u127e\u127f\7/\2\2\u127f\u1280\5\u053e\u02a0\2\u1280\u1281"+
		"\7R\2\2\u1281\u1282\7\u00bf\2\2\u1282\u1283\5\u020e\u0108\2\u1283\u1284"+
		"\7v\2\2\u1284\u1285\5\u021a\u010e\2\u1285\u12cf\3\2\2\2\u1286\u1287\7"+
		"\u00a1\2\2\u1287\u1288\7R\2\2\u1288\u1289\5\u020a\u0106\2\u1289\u128a"+
		"\5\u053e\u02a0\2\u128a\u128b\7R\2\2\u128b\u128c\5\u020e\u0108\2\u128c"+
		"\u128d\7v\2\2\u128d\u128e\5\u021a\u010e\2\u128e\u12cf\3\2\2\2\u128f\u1290"+
		"\7\u00a1\2\2\u1290\u1291\7R\2\2\u1291\u1292\7\u0123\2\2\u1292\u1293\5"+
		"\u0274\u013b\2\u1293\u1294\7v\2\2\u1294\u1295\5\u021a\u010e\2\u1295\u12cf"+
		"\3\2\2\2\u1296\u1297\7\u00a1\2\2\u1297\u1298\7R\2\2\u1298\u1299\7\u01bc"+
		"\2\2\u1299\u129a\5\u0274\u013b\2\u129a\u129b\7v\2\2\u129b\u129c\5\u021a"+
		"\u010e\2\u129c\u12cf\3\2\2\2\u129d\u129e\7\u00a1\2\2\u129e\u129f\7R\2"+
		"\2\u129f\u12a0\7\u01bd\2\2\u12a0\u12a1\7@\2\2\u12a1\u12a2\5\u0460\u0231"+
		"\2\u12a2\u12a3\7\u00f0\2\2\u12a3\u12a4\5\u053e\u02a0\2\u12a4\u12a5\7v"+
		"\2\2\u12a5\u12a6\5\u021a\u010e\2\u12a6\u12cf\3\2\2\2\u12a7\u12a8\7\u00a1"+
		"\2\2\u12a8\u12a9\7R\2\2\u12a9\u12aa\7\u0111\2\2\u12aa\u12ab\7\u009e\2"+
		"\2\u12ab\u12ac\5\u020e\u0108\2\u12ac\u12ad\7f\2\2\u12ad\u12ae\5\u053e"+
		"\u02a0\2\u12ae\u12af\7v\2\2\u12af\u12b0\5\u021a\u010e\2\u12b0\u12cf\3"+
		"\2\2\2\u12b1\u12b2\7\u00a1\2\2\u12b2\u12b3\7R\2\2\u12b3\u12b4\7\u0111"+
		"\2\2\u12b4\u12b5\7\u00d0\2\2\u12b5\u12b6\5\u020e\u0108\2\u12b6\u12b7\7"+
		"f\2\2\u12b7\u12b8\5\u053e\u02a0\2\u12b8\u12b9\7v\2\2\u12b9\u12ba\5\u021a"+
		"\u010e\2\u12ba\u12cf\3\2\2\2\u12bb\u12bc\7\u00a1\2\2\u12bc\u12bd\7R\2"+
		"\2\u12bd\u12be\7\u00f1\2\2\u12be\u12bf\7\u010d\2\2\u12bf\u12c0\5\u0126"+
		"\u0094\2\u12c0\u12c1\7v\2\2\u12c1\u12c2\5\u021a\u010e\2\u12c2\u12cf\3"+
		"\2\2\2\u12c3\u12c4\7\u00a1\2\2\u12c4\u12c5\7R\2\2\u12c5\u12c6\7+\2\2\u12c6"+
		"\u12c7\7\4\2\2\u12c7\u12c8\5\u0460\u0231\2\u12c8\u12c9\7&\2\2\u12c9\u12ca"+
		"\5\u0460\u0231\2\u12ca\u12cb\7\5\2\2\u12cb\u12cc\7v\2\2\u12cc\u12cd\5"+
		"\u021a\u010e\2\u12cd\u12cf\3\2\2\2\u12ce\u123b\3\2\2\2\u12ce\u1242\3\2"+
		"\2\2\u12ce\u1249\3\2\2\2\u12ce\u1250\3\2\2\2\u12ce\u1257\3\2\2\2\u12ce"+
		"\u125e\3\2\2\2\u12ce\u1265\3\2\2\2\u12ce\u126c\3\2\2\2\u12ce\u1273\3\2"+
		"\2\2\u12ce\u127c\3\2\2\2\u12ce\u1286\3\2\2\2\u12ce\u128f\3\2\2\2\u12ce"+
		"\u1296\3\2\2\2\u12ce\u129d\3\2\2\2\u12ce\u12a7\3\2\2\2\u12ce\u12b1\3\2"+
		"\2\2\u12ce\u12bb\3\2\2\2\u12ce\u12c3\3\2\2\2\u12cf\u0219\3\2\2\2\u12d0"+
		"\u12d3\5\u0550\u02a9\2\u12d1\u12d3\7P\2\2\u12d2\u12d0\3\2\2\2\u12d2\u12d1"+
		"\3\2\2\2\u12d3\u021b\3\2\2\2\u12d4\u12d5\7\u0142\2\2\u12d5\u12d6\7\u00ef"+
		"\2\2\u12d6\u12d7\5\u021e\u0110\2\u12d7\u12d8\7R\2\2\u12d8\u12d9\5\u0204"+
		"\u0103\2\u12d9\u12da\5\u020e\u0108\2\u12da\u12db\7v\2\2\u12db\u12dc\5"+
		"\u0220\u0111\2\u12dc\u1330\3\2\2\2\u12dd\u12de\7\u0142\2\2\u12de\u12df"+
		"\7\u00ef\2\2\u12df\u12e0\5\u021e\u0110\2\u12e0\u12e1\7R\2\2\u12e1\u12e2"+
		"\7.\2\2\u12e2\u12e3\5\u020e\u0108\2\u12e3\u12e4\7v\2\2\u12e4\u12e5\5\u0220"+
		"\u0111\2\u12e5\u1330\3\2\2\2\u12e6\u12e7\7\u0142\2\2\u12e7\u12e8\7\u00ef"+
		"\2\2\u12e8\u12e9\5\u021e\u0110\2\u12e9\u12ea\7R\2\2\u12ea\u12eb\5\u0206"+
		"\u0104\2\u12eb\u12ec\5\u053e\u02a0\2\u12ec\u12ed\7v\2\2\u12ed\u12ee\5"+
		"\u0220\u0111\2\u12ee\u1330\3\2\2\2\u12ef\u12f0\7\u0142\2\2\u12f0\u12f1"+
		"\7\u00ef\2\2\u12f1\u12f2\5\u021e\u0110\2\u12f2\u12f3\7R\2\2\u12f3\u12f4"+
		"\7\u0163\2\2\u12f4\u12f5\5\u0460\u0231\2\u12f5\u12f6\7v\2\2\u12f6\u12f7"+
		"\5\u0220\u0111\2\u12f7\u1330\3\2\2\2\u12f8\u12f9\7\u0142\2\2\u12f9\u12fa"+
		"\7\u00ef\2\2\u12fa\u12fb\5\u021e\u0110\2\u12fb\u12fc\7R\2\2\u12fc\u12fd"+
		"\7\u00bf\2\2\u12fd\u12fe\5\u0460\u0231\2\u12fe\u12ff\7v\2\2\u12ff\u1300"+
		"\5\u0220\u0111\2\u1300\u1330\3\2\2\2\u1301\u1302\7\u0142\2\2\u1302\u1303"+
		"\7\u00ef\2\2\u1303\u1304\5\u021e\u0110\2\u1304\u1305\7R\2\2\u1305\u1306"+
		"\7\u008a\2\2\u1306\u1307\5\u028c\u0147\2\u1307\u1308\7v\2\2\u1308\u1309"+
		"\5\u0220\u0111\2\u1309\u1330\3\2\2\2\u130a\u130b\7\u0142\2\2\u130b\u130c"+
		"\7\u00ef\2\2\u130c\u130d\5\u021e\u0110\2\u130d\u130e\7R\2\2\u130e\u130f"+
		"\7\u00d5\2\2\u130f\u1310\5\u0274\u013b\2\u1310\u1311\7v\2\2\u1311\u1312"+
		"\5\u0220\u0111\2\u1312\u1330\3\2\2\2\u1313\u1314\7\u0142\2\2\u1314\u1315"+
		"\7\u00ef\2\2\u1315\u1316\5\u021e\u0110\2\u1316\u1317\7R\2\2\u1317\u1318"+
		"\7\u00f1\2\2\u1318\u1319\7\u010d\2\2\u1319\u131a\5\u0126\u0094\2\u131a"+
		"\u131b\7v\2\2\u131b\u131c\5\u0220\u0111\2\u131c\u1330\3\2\2\2\u131d\u131e"+
		"\7\u0142\2\2\u131e\u131f\7\u00ef\2\2\u131f\u1320\5\u021e\u0110\2\u1320"+
		"\u1321\7R\2\2\u1321\u1322\7\u0123\2\2\u1322\u1323\5\u0274\u013b\2\u1323"+
		"\u1324\7v\2\2\u1324\u1325\5\u0220\u0111\2\u1325\u1330\3\2\2\2\u1326\u1327"+
		"\7\u0142\2\2\u1327\u1328\7\u00ef\2\2\u1328\u1329\5\u021e\u0110\2\u1329"+
		"\u132a\7R\2\2\u132a\u132b\7\u01bc\2\2\u132b\u132c\5\u0274\u013b\2\u132c"+
		"\u132d\7v\2\2\u132d\u132e\5\u0220\u0111\2\u132e\u1330\3\2\2\2\u132f\u12d4"+
		"\3\2\2\2\u132f\u12dd\3\2\2\2\u132f\u12e6\3\2\2\2\u132f\u12ef\3\2\2\2\u132f"+
		"\u12f8\3\2\2\2\u132f\u1301\3\2\2\2\u132f\u130a\3\2\2\2\u132f\u1313\3\2"+
		"\2\2\u132f\u131d\3\2\2\2\u132f\u1326\3\2\2\2\u1330\u021d\3\2\2\2\u1331"+
		"\u1332\7@\2\2\u1332\u1335\5J&\2\u1333\u1335\3\2\2\2\u1334\u1331\3\2\2"+
		"\2\u1334\u1333\3\2\2\2\u1335\u021f\3\2\2\2\u1336\u1339\5\u0550\u02a9\2"+
		"\u1337\u1339\7P\2\2\u1338\u1336\3\2\2\2\u1338\u1337\3\2\2\2\u1339\u0221"+
		"\3\2\2\2\u133a\u133b\7?\2\2\u133b\u133f\5\u0224\u0113\2\u133c\u133d\7"+
		"\u0104\2\2\u133d\u133f\5\u0224\u0113\2\u133e\u133a\3\2\2\2\u133e\u133c"+
		"\3\2\2\2\u133f\u0223\3\2\2\2\u1340\u1383\5\u03bc\u01df\2\u1341\u1342\5"+
		"\u0226\u0114\2\u1342\u1343\5\u03bc\u01df\2\u1343\u1383\3\2\2\2\u1344\u1345"+
		"\7\u0107\2\2\u1345\u1346\5\u0228\u0115\2\u1346\u1347\5\u03bc\u01df\2\u1347"+
		"\u1383\3\2\2\2\u1348\u1349\7\u0120\2\2\u1349\u134a\5\u0228\u0115\2\u134a"+
		"\u134b\5\u03bc\u01df\2\u134b\u1383\3\2\2\2\u134c\u134d\7\u00d1\2\2\u134d"+
		"\u134e\5\u0228\u0115\2\u134e\u134f\5\u03bc\u01df\2\u134f\u1383\3\2\2\2"+
		"\u1350\u1351\7\u00f2\2\2\u1351\u1352\5\u0228\u0115\2\u1352\u1353\5\u03bc"+
		"\u01df\2\u1353\u1383\3\2\2\2\u1354\u1355\7\u0084\2\2\u1355\u1356\5\u0556"+
		"\u02ac\2\u1356\u1357\5\u0228\u0115\2\u1357\u1358\5\u03bc\u01df\2\u1358"+
		"\u1383\3\2\2\2\u1359\u135a\7\u012e\2\2\u135a\u135b\5\u0556\u02ac\2\u135b"+
		"\u135c\5\u0228\u0115\2\u135c\u135d\5\u03bc\u01df\2\u135d\u1383\3\2\2\2"+
		"\u135e\u135f\5\u0556\u02ac\2\u135f\u1360\5\u0228\u0115\2\u1360\u1361\5"+
		"\u03bc\u01df\2\u1361\u1383\3\2\2\2\u1362\u1363\7 \2\2\u1363\u1364\5\u0228"+
		"\u0115\2\u1364\u1365\5\u03bc\u01df\2\u1365\u1383\3\2\2\2\u1366\u1367\7"+
		"\u00d4\2\2\u1367\u1368\5\u0228\u0115\2\u1368\u1369\5\u03bc\u01df\2\u1369"+
		"\u1383\3\2\2\2\u136a\u136b\7\u00d4\2\2\u136b\u136c\5\u0556\u02ac\2\u136c"+
		"\u136d\5\u0228\u0115\2\u136d\u136e\5\u03bc\u01df\2\u136e\u1383\3\2\2\2"+
		"\u136f\u1370\7\u00d4\2\2\u1370\u1371\7 \2\2\u1371\u1372\5\u0228\u0115"+
		"\2\u1372\u1373\5\u03bc\u01df\2\u1373\u1383\3\2\2\2\u1374\u1375\7\u0092"+
		"\2\2\u1375\u1376\5\u0228\u0115\2\u1376\u1377\5\u03bc\u01df\2\u1377\u1383"+
		"\3\2\2\2\u1378\u1379\7\u0092\2\2\u1379\u137a\5\u0556\u02ac\2\u137a\u137b"+
		"\5\u0228\u0115\2\u137b\u137c\5\u03bc\u01df\2\u137c\u1383\3\2\2\2\u137d"+
		"\u137e\7\u0092\2\2\u137e\u137f\7 \2\2\u137f\u1380\5\u0228\u0115\2\u1380"+
		"\u1381\5\u03bc\u01df\2\u1381\u1383\3\2\2\2\u1382\u1340\3\2\2\2\u1382\u1341"+
		"\3\2\2\2\u1382\u1344\3\2\2\2\u1382\u1348\3\2\2\2\u1382\u134c\3\2\2\2\u1382"+
		"\u1350\3\2\2\2\u1382\u1354\3\2\2\2\u1382\u1359\3\2\2\2\u1382\u135e\3\2"+
		"\2\2\u1382\u1362\3\2\2\2\u1382\u1366\3\2\2\2\u1382\u136a\3\2\2\2\u1382"+
		"\u136f\3\2\2\2\u1382\u1374\3\2\2\2\u1382\u1378\3\2\2\2\u1382\u137d\3\2"+
		"\2\2\u1383\u0225\3\2\2\2\u1384\u1385\t\32\2\2\u1385\u0227\3\2\2\2\u1386"+
		"\u1389\5\u0226\u0114\2\u1387\u1389\3\2\2\2\u1388\u1386\3\2\2\2\u1388\u1387"+
		"\3\2\2\2\u1389\u0229\3\2\2\2\u138a\u138b\7C\2\2\u138b\u138c\5\u022e\u0118"+
		"\2\u138c\u138d\7R\2\2\u138d\u138e\5\u0234\u011b\2\u138e\u138f\7`\2\2\u138f"+
		"\u1390\5\u0236\u011c\2\u1390\u1391\5\u023a\u011e\2\u1391\u022b\3\2\2\2"+
		"\u1392\u1393\7\u0138\2\2\u1393\u1394\5\u022e\u0118\2\u1394\u1395\7R\2"+
		"\2\u1395\u1396\5\u0234\u011b\2\u1396\u1397\7B\2\2\u1397\u1398\5\u0236"+
		"\u011c\2\u1398\u1399\5n8\2\u1399\u13a6\3\2\2\2\u139a\u139b\7\u0138\2\2"+
		"\u139b\u139c\7C\2\2\u139c\u139d\7\u0112\2\2\u139d\u139e\7@\2\2\u139e\u139f"+
		"\5\u022e\u0118\2\u139f\u13a0\7R\2\2\u13a0\u13a1\5\u0234\u011b\2\u13a1"+
		"\u13a2\7B\2\2\u13a2\u13a3\5\u0236\u011c\2\u13a3\u13a4\5n8\2\u13a4\u13a6"+
		"\3\2\2\2\u13a5\u1392\3\2\2\2\u13a5\u139a\3\2\2\2\u13a6\u022d\3\2\2\2\u13a7"+
		"\u13b7\5\u0230\u0119\2\u13a8\u13b7\7 \2\2\u13a9\u13aa\7 \2\2\u13aa\u13b7"+
		"\7\u0121\2\2\u13ab\u13ac\7 \2\2\u13ac\u13ad\7\4\2\2\u13ad\u13ae\5\u00da"+
		"n\2\u13ae\u13af\7\5\2\2\u13af\u13b7\3\2\2\2\u13b0\u13b1\7 \2\2\u13b1\u13b2"+
		"\7\u0121\2\2\u13b2\u13b3\7\4\2\2\u13b3\u13b4\5\u00dan\2\u13b4\u13b5\7"+
		"\5\2\2\u13b5\u13b7\3\2\2\2\u13b6\u13a7\3\2\2\2\u13b6\u13a8\3\2\2\2\u13b6"+
		"\u13a9\3\2\2\2\u13b6\u13ab\3\2\2\2\u13b6\u13b0\3\2\2\2\u13b7\u022f\3\2"+
		"\2\2\u13b8\u13bd\5\u0232\u011a\2\u13b9\u13ba\7\b\2\2\u13ba\u13bc\5\u0232"+
		"\u011a\2\u13bb\u13b9\3\2\2\2\u13bc\u13bf\3\2\2\2\u13bd\u13bb\3\2\2\2\u13bd"+
		"\u13be\3\2\2\2\u13be\u0231\3\2\2\2\u13bf\u13bd\3\2\2\2\u13c0\u13c1\7Z"+
		"\2\2\u13c1\u13ca\5\u00d8m\2\u13c2\u13c3\7X\2\2\u13c3\u13ca\5\u00d8m\2"+
		"\u13c4\u13c5\7\60\2\2\u13c5\u13ca\5\u00d8m\2\u13c6\u13c7\5\u055e\u02b0"+
		"\2\u13c7\u13c8\5\u00d8m\2\u13c8\u13ca\3\2\2\2\u13c9\u13c0\3\2\2\2\u13c9"+
		"\u13c2\3\2\2\2\u13c9\u13c4\3\2\2\2\u13c9\u13c6\3\2\2\2\u13ca\u0233\3\2"+
		"\2\2\u13cb\u1406\5\u0538\u029d\2\u13cc\u13cd\7^\2\2\u13cd\u1406\5\u0538"+
		"\u029d\2\u13ce\u13cf\7\u0143\2\2\u13cf\u1406\5\u0538\u029d\2\u13d0\u13d1"+
		"\7A\2\2\u13d1\u13d2\7\u00b0\2\2\u13d2\u13d3\7\u0178\2\2\u13d3\u1406\5"+
		"\u053c\u029f\2\u13d4\u13d5\7A\2\2\u13d5\u13d6\7\u0146\2\2\u13d6\u1406"+
		"\5\u053c\u029f\2\u13d7\u13d8\7\u00d5\2\2\u13d8\u1406\5\u0272\u013a\2\u13d9"+
		"\u13da\7\u0123\2\2\u13da\u1406\5\u0272\u013a\2\u13db\u13dc\7\u01bc\2\2"+
		"\u13dc\u1406\5\u0272\u013a\2\u13dd\u13de\7\u00b1\2\2\u13de\u1406\5\u053c"+
		"\u029f\2\u13df\u13e0\7\u00bf\2\2\u13e0\u1406\5\u020c\u0107\2\u13e1\u13e2"+
		"\7\u00f0\2\2\u13e2\u1406\5\u053c\u029f\2\u13e3\u13e4\7\u00f1\2\2\u13e4"+
		"\u13e5\7\u010d\2\2\u13e5\u1406\5\u0128\u0095\2\u13e6\u13e7\7\u013e\2\2"+
		"\u13e7\u1406\5\u053c\u029f\2\u13e8\u13e9\7\u015a\2\2\u13e9\u1406\5\u053c"+
		"\u029f\2\u13ea\u13eb\7\u0163\2\2\u13eb\u1406\5\u020c\u0107\2\u13ec\u13ed"+
		"\7 \2\2\u13ed\u13ee\7\u0159\2\2\u13ee\u13ef\7F\2\2\u13ef\u13f0\7\u013e"+
		"\2\2\u13f0\u1406\5\u053c\u029f\2\u13f1\u13f2\7 \2\2\u13f2\u13f3\7\u0144"+
		"\2\2\u13f3\u13f4\7F\2\2\u13f4\u13f5\7\u013e\2\2\u13f5\u1406\5\u053c\u029f"+
		"\2\u13f6\u13f7\7 \2\2\u13f7\u13f8\7\u00d6\2\2\u13f8\u13f9\7F\2\2\u13f9"+
		"\u13fa\7\u013e\2\2\u13fa\u1406\5\u053c\u029f\2\u13fb\u13fc\7 \2\2\u13fc"+
		"\u13fd\7\u01cb\2\2\u13fd\u13fe\7F\2\2\u13fe\u13ff\7\u013e\2\2\u13ff\u1406"+
		"\5\u053c\u029f\2\u1400\u1401\7 \2\2\u1401\u1402\7\u01c9\2\2\u1402\u1403"+
		"\7F\2\2\u1403\u1404\7\u013e\2\2\u1404\u1406\5\u053c\u029f\2\u1405\u13cb"+
		"\3\2\2\2\u1405\u13cc\3\2\2\2\u1405\u13ce\3\2\2\2\u1405\u13d0\3\2\2\2\u1405"+
		"\u13d4\3\2\2\2\u1405\u13d7\3\2\2\2\u1405\u13d9\3\2\2\2\u1405\u13db\3\2"+
		"\2\2\u1405\u13dd\3\2\2\2\u1405\u13df\3\2\2\2\u1405\u13e1\3\2\2\2\u1405"+
		"\u13e3\3\2\2\2\u1405\u13e6\3\2\2\2\u1405\u13e8\3\2\2\2\u1405\u13ea\3\2"+
		"\2\2\u1405\u13ec\3\2\2\2\u1405\u13f1\3\2\2\2\u1405\u13f6\3\2\2\2\u1405"+
		"\u13fb\3\2\2\2\u1405\u1400\3\2\2\2\u1406\u0235\3\2\2\2\u1407\u140c\5\u0238"+
		"\u011d\2\u1408\u1409\7\b\2\2\u1409\u140b\5\u0238\u011d\2\u140a\u1408\3"+
		"\2\2\2\u140b\u140e\3\2\2\2\u140c\u140a\3\2\2\2\u140c\u140d\3\2\2\2\u140d"+
		"\u0237\3\2\2\2\u140e\u140c\3\2\2\2\u140f\u1413\5\u055a\u02ae\2\u1410\u1411"+
		"\7D\2\2\u1411\u1413\5\u055a\u02ae\2\u1412\u140f\3\2\2\2\u1412\u1410\3"+
		"\2\2\2\u1413\u0239\3\2\2\2\u1414\u1415\7k\2\2\u1415\u1416\7C\2\2\u1416"+
		"\u1419\7\u0112\2\2\u1417\u1419\3\2\2\2\u1418\u1414\3\2\2\2\u1418\u1417"+
		"\3\2\2\2\u1419\u023b\3\2\2\2\u141a\u141b\7C\2\2\u141b\u141c\5\u0230\u0119"+
		"\2\u141c\u141d\7`\2\2\u141d\u141e\5\u055c\u02af\2\u141e\u141f\5\u0240"+
		"\u0121\2\u141f\u1420\5\u0242\u0122\2\u1420\u023d\3\2\2\2\u1421\u1422\7"+
		"\u0138\2\2\u1422\u1423\5\u0230\u0119\2\u1423\u1424\7B\2\2\u1424\u1425"+
		"\5\u055c\u02af\2\u1425\u1426\5\u0242\u0122\2\u1426\u1427\5n8\2\u1427\u1433"+
		"\3\2\2\2\u1428\u1429\7\u0138\2\2\u1429\u142a\7\u0088\2\2\u142a\u142b\7"+
		"\u0112\2\2\u142b\u142c\7@\2\2\u142c\u142d\5\u0230\u0119\2\u142d\u142e"+
		"\7B\2\2\u142e\u142f\5\u055c\u02af\2\u142f\u1430\5\u0242\u0122\2\u1430"+
		"\u1431\5n8\2\u1431\u1433\3\2\2\2\u1432\u1421\3\2\2\2\u1432\u1428\3\2\2"+
		"\2\u1433\u023f\3\2\2\2\u1434\u1435\7k\2\2\u1435\u1436\7\u0088\2\2\u1436"+
		"\u1439\7\u0112\2\2\u1437\u1439\3\2\2\2\u1438\u1434\3\2\2\2\u1438\u1437"+
		"\3\2\2\2\u1439\u0241\3\2\2\2\u143a\u143b\7\u00d8\2\2\u143b\u143c\7\u0095"+
		"\2\2\u143c\u143f\5\u055a\u02ae\2\u143d\u143f\3\2\2\2\u143e\u143a\3\2\2"+
		"\2\u143e\u143d\3\2\2\2\u143f\u0243\3\2\2\2\u1440\u1441\7\u008c\2\2\u1441"+
		"\u1442\7\67\2\2\u1442\u1443\7\u0121\2\2\u1443\u1444\5\u0246\u0124\2\u1444"+
		"\u1445\5\u024a\u0126\2\u1445\u0245\3\2\2\2\u1446\u1448\5\u0248\u0125\2"+
		"\u1447\u1446\3\2\2\2\u1448\u144b\3\2\2\2\u1449\u1447\3\2\2\2\u1449\u144a"+
		"\3\2\2\2\u144a\u0247\3\2\2\2\u144b\u1449\3\2\2\2\u144c\u144d\7F\2\2\u144d"+
		"\u144e\7\u013e\2\2\u144e\u1456\5\u053c\u029f\2\u144f\u1450\7@\2\2\u1450"+
		"\u1451\7\u0139\2\2\u1451\u1456\5\u055c\u02af\2\u1452\u1453\7@\2\2\u1453"+
		"\u1454\7e\2\2\u1454\u1456\5\u055c\u02af\2\u1455\u144c\3\2\2\2\u1455\u144f"+
		"\3\2\2\2\u1455\u1452\3\2\2\2\u1456\u0249\3\2\2\2\u1457\u1458\7C\2\2\u1458"+
		"\u1459\5\u022e\u0118\2\u1459\u145a\7R\2\2\u145a\u145b\5\u024c\u0127\2"+
		"\u145b\u145c\7`\2\2\u145c\u145d\5\u0236\u011c\2\u145d\u145e\5\u023a\u011e"+
		"\2\u145e\u1473\3\2\2\2\u145f\u1460\7\u0138\2\2\u1460\u1461\5\u022e\u0118"+
		"\2\u1461\u1462\7R\2\2\u1462\u1463\5\u024c\u0127\2\u1463\u1464\7B\2\2\u1464"+
		"\u1465\5\u0236\u011c\2\u1465\u1466\5n8\2\u1466\u1473\3\2\2\2\u1467\u1468"+
		"\7\u0138\2\2\u1468\u1469\7C\2\2\u1469\u146a\7\u0112\2\2\u146a\u146b\7"+
		"@\2\2\u146b\u146c\5\u022e\u0118\2\u146c\u146d\7R\2\2\u146d\u146e\5\u024c"+
		"\u0127\2\u146e\u146f\7B\2\2\u146f\u1470\5\u0236\u011c\2\u1470\u1471\5"+
		"n8\2\u1471\u1473\3\2\2\2\u1472\u1457\3\2\2\2\u1472\u145f\3\2\2\2\u1472"+
		"\u1467\3\2\2\2\u1473\u024b\3\2\2\2\u1474\u1475\t\33\2\2\u1475\u024d\3"+
		"\2\2\2\u1476\u1477\7\60\2\2\u1477\u1478\5\u0250\u0129\2\u1478\u1479\7"+
		"\u00e4\2\2\u1479\u147a\5\u0252\u012a\2\u147a\u147b\5\u0254\u012b\2\u147b"+
		"\u147c\7R\2\2\u147c\u147d\5\u0434\u021b\2\u147d\u147e\5\u0256\u012c\2"+
		"\u147e\u147f\7\4\2\2\u147f\u1480\5\u0258\u012d\2\u1480\u1481\7\5\2\2\u1481"+
		"\u1482\5\u025e\u0130\2\u1482\u1483\5x=\2\u1483\u1484\5\u0100\u0081\2\u1484"+
		"\u1485\5\u0448\u0225\2\u1485\u149a\3\2\2\2\u1486\u1487\7\60\2\2\u1487"+
		"\u1488\5\u0250\u0129\2\u1488\u1489\7\u00e4\2\2\u1489\u148a\5\u0252\u012a"+
		"\2\u148a\u148b\7\u00de\2\2\u148b\u148c\7O\2\2\u148c\u148d\7\u0187\2\2"+
		"\u148d\u148e\5\u053e\u02a0\2\u148e\u148f\7R\2\2\u148f\u1490\5\u0434\u021b"+
		"\2\u1490\u1491\5\u0256\u012c\2\u1491\u1492\7\4\2\2\u1492\u1493\5\u0258"+
		"\u012d\2\u1493\u1494\7\5\2\2\u1494\u1495\5\u025e\u0130\2\u1495\u1496\5"+
		"x=\2\u1496\u1497\5\u0100\u0081\2\u1497\u1498\5\u0448\u0225\2\u1498\u149a"+
		"\3\2\2\2\u1499\u1476\3\2\2\2\u1499\u1486\3\2\2\2\u149a\u024f\3\2\2\2\u149b"+
		"\u149e\7d\2\2\u149c\u149e\3\2\2\2\u149d\u149b\3\2\2\2\u149d\u149c\3\2"+
		"\2\2\u149e\u0251\3\2\2\2\u149f\u14a2\7o\2\2\u14a0\u14a2\3\2\2\2\u14a1"+
		"\u149f\3\2\2\2\u14a1\u14a0\3\2\2\2\u14a2\u0253\3\2\2\2\u14a3\u14a6\5\u053e"+
		"\u02a0\2\u14a4\u14a6\3\2\2\2\u14a5\u14a3\3\2\2\2\u14a5\u14a4\3\2\2\2\u14a6"+
		"\u0255\3\2\2\2\u14a7\u14a8\7f\2\2\u14a8\u14ab\5\u053e\u02a0\2\u14a9\u14ab"+
		"\3\2\2\2\u14aa\u14a7\3\2\2\2\u14aa\u14a9\3\2\2\2\u14ab\u0257\3\2\2\2\u14ac"+
		"\u14b1\5\u025c\u012f\2\u14ad\u14ae\7\b\2\2\u14ae\u14b0\5\u025c\u012f\2"+
		"\u14af\u14ad\3\2\2\2\u14b0\u14b3\3\2\2\2\u14b1\u14af\3\2\2\2\u14b1\u14b2"+
		"\3\2\2\2\u14b2\u0259\3\2\2\2\u14b3\u14b1\3\2\2\2\u14b4\u14b5\5\u0262\u0132"+
		"\2\u14b5\u14b6\5\u0264\u0133\2\u14b6\u14b7\5\u0266\u0134\2\u14b7\u14b8"+
		"\5\u0268\u0135\2\u14b8\u14c0\3\2\2\2\u14b9\u14ba\5\u0262\u0132\2\u14ba"+
		"\u14bb\5\u020e\u0108\2\u14bb\u14bc\5v<\2\u14bc\u14bd\5\u0266\u0134\2\u14bd"+
		"\u14be\5\u0268\u0135\2\u14be\u14c0\3\2\2\2\u14bf\u14b4\3\2\2\2\u14bf\u14b9"+
		"\3\2\2\2\u14c0\u025b\3\2\2\2\u14c1\u14c2\5\u055e\u02b0\2\u14c2\u14c3\5"+
		"\u025a\u012e\2\u14c3\u14cd\3\2\2\2\u14c4\u14c5\5\u04c0\u0261\2\u14c5\u14c6"+
		"\5\u025a\u012e\2\u14c6\u14cd\3\2\2\2\u14c7\u14c8\7\4\2\2\u14c8\u14c9\5"+
		"\u048c\u0247\2\u14c9\u14ca\7\5\2\2\u14ca\u14cb\5\u025a\u012e\2\u14cb\u14cd"+
		"\3\2\2\2\u14cc\u14c1\3\2\2\2\u14cc\u14c4\3\2\2\2\u14cc\u14c7\3\2\2\2\u14cd"+
		"\u025d\3\2\2\2\u14ce\u14cf\7\u01bb\2\2\u14cf\u14d0\7\4\2\2\u14d0\u14d1"+
		"\5\u0260\u0131\2\u14d1\u14d2\7\5\2\2\u14d2\u14d5\3\2\2\2\u14d3\u14d5\3"+
		"\2\2\2\u14d4\u14ce\3\2\2\2\u14d4\u14d3\3\2\2\2\u14d5\u025f\3\2\2\2\u14d6"+
		"\u14db\5\u025c\u012f\2\u14d7\u14d8\7\b\2\2\u14d8\u14da\5\u025c\u012f\2"+
		"\u14d9\u14d7\3\2\2\2\u14da\u14dd\3\2\2\2\u14db\u14d9\3\2\2\2\u14db\u14dc"+
		"\3\2\2\2\u14dc\u0261\3\2\2\2\u14dd\u14db\3\2\2\2\u14de\u14df\7-\2\2\u14df"+
		"\u14e2\5\u020e\u0108\2\u14e0\u14e2\3\2\2\2\u14e1\u14de\3\2\2\2\u14e1\u14e0"+
		"\3\2\2\2\u14e2\u0263\3\2\2\2\u14e3\u14e6\5\u020e\u0108\2\u14e4\u14e6\3"+
		"\2\2\2\u14e5\u14e3\3\2\2\2\u14e5\u14e4\3\2\2\2\u14e6\u0265\3\2\2\2\u14e7"+
		"\u14eb\7\'\2\2\u14e8\u14eb\79\2\2\u14e9\u14eb\3\2\2\2\u14ea\u14e7\3\2"+
		"\2\2\u14ea\u14e8\3\2\2\2\u14ea\u14e9\3\2\2\2\u14eb\u0267\3\2\2\2\u14ec"+
		"\u14ed\7\u010c\2\2\u14ed\u14f2\7\u00d1\2\2\u14ee\u14ef\7\u010c\2\2\u14ef"+
		"\u14f2\7\u00f2\2\2\u14f0\u14f2\3\2\2\2\u14f1\u14ec\3\2\2\2\u14f1\u14ee"+
		"\3\2\2\2\u14f1\u14f0\3\2\2\2\u14f2\u0269\3\2\2\2\u14f3\u14f4\7\60\2\2"+
		"\u14f4\u14f5\5\u026c\u0137\2\u14f5\u14f6\t\30\2\2\u14f6\u14f7\5\u0544"+
		"\u02a3\2\u14f7\u1501\5\u0276\u013c\2\u14f8\u14ff\7\u0137\2\2\u14f9\u1500"+
		"\5\u0280\u0141\2\u14fa\u14fb\7^\2\2\u14fb\u14fc\7\4\2\2\u14fc\u14fd\5"+
		"\u029e\u0150\2\u14fd\u14fe\7\5\2\2\u14fe\u1500\3\2\2\2\u14ff\u14f9\3\2"+
		"\2\2\u14ff\u14fa\3\2\2\2\u1500\u1502\3\2\2\2\u1501\u14f8\3\2\2\2\u1501"+
		"\u1502\3\2\2\2\u1502\u1503\3\2\2\2\u1503\u1504\5\u0290\u0149\2\u1504\u026b"+
		"\3\2\2\2\u1505\u1506\7T\2\2\u1506\u1509\7\u0132\2\2\u1507\u1509\3\2\2"+
		"\2\u1508\u1505\3\2\2\2\u1508\u1507\3\2\2\2\u1509\u026d\3\2\2\2\u150a\u150c"+
		"\7\4\2\2\u150b\u150d\5\u0270\u0139\2\u150c\u150b\3\2\2\2\u150c\u150d\3"+
		"\2\2\2\u150d\u150e\3\2\2\2\u150e\u150f\7\5\2\2\u150f\u026f\3\2\2\2\u1510"+
		"\u1515\5\u027a\u013e\2\u1511\u1512\7\b\2\2\u1512\u1514\5\u027a\u013e\2"+
		"\u1513\u1511\3\2\2\2\u1514\u1517\3\2\2\2\u1515\u1513\3\2\2\2\u1515\u1516"+
		"\3\2\2\2\u1516\u0271\3\2\2\2\u1517\u1515\3\2\2\2\u1518\u151d\5\u0274\u013b"+
		"\2\u1519\u151a\7\b\2\2\u151a\u151c\5\u0274\u013b\2\u151b\u1519\3\2\2\2"+
		"\u151c\u151f\3\2\2\2\u151d\u151b\3\2\2\2\u151d\u151e\3\2\2\2\u151e\u0273"+
		"\3\2\2\2\u151f\u151d\3\2\2\2\u1520\u1521\5\u0544\u02a3\2\u1521\u1522\5"+
		"\u026e\u0138\2\u1522\u1529\3\2\2\2\u1523\u1529\5\u056e\u02b8\2\u1524\u1526"+
		"\5\u055e\u02b0\2\u1525\u1527\5\u052e\u0298\2\u1526\u1525\3\2\2\2\u1526"+
		"\u1527\3\2\2\2\u1527\u1529\3\2\2\2\u1528\u1520\3\2\2\2\u1528\u1523\3\2"+
		"\2\2\u1528\u1524\3\2\2\2\u1529\u0275\3\2\2\2\u152a\u152c\7\4\2\2\u152b"+
		"\u152d\5\u0278\u013d\2\u152c\u152b\3\2\2\2\u152c\u152d\3\2\2\2\u152d\u152e"+
		"\3\2\2\2\u152e\u152f\7\5\2\2\u152f\u0277\3\2\2\2\u1530\u1535\5\u0284\u0143"+
		"\2\u1531\u1532\7\b\2\2\u1532\u1534\5\u0284\u0143\2\u1533\u1531\3\2\2\2"+
		"\u1534\u1537\3\2\2\2\u1535\u1533\3\2\2\2\u1535\u1536\3\2\2\2\u1536\u0279"+
		"\3\2\2\2\u1537\u1535\3\2\2\2\u1538\u153a\5\u027c\u013f\2\u1539\u153b\5"+
		"\u027e\u0140\2\u153a\u1539\3\2\2\2\u153a\u153b\3\2\2\2\u153b\u153c\3\2"+
		"\2\2\u153c\u153d\5\u0282\u0142\2\u153d\u1546\3\2\2\2\u153e\u1540\5\u027e"+
		"\u0140\2\u153f\u1541\5\u027c\u013f\2\u1540\u153f\3\2\2\2\u1540\u1541\3"+
		"\2\2\2\u1541\u1542\3\2\2\2\u1542\u1543\5\u0282\u0142\2\u1543\u1546\3\2"+
		"\2\2\u1544\u1546\5\u0282\u0142\2\u1545\u1538\3\2\2\2\u1545\u153e\3\2\2"+
		"\2\u1545\u1544\3\2\2\2\u1546\u027b\3\2\2\2\u1547\u1549\7F\2\2\u1548\u154a"+
		"\7\u01c7\2\2\u1549\u1548\3\2\2\2\u1549\u154a\3\2\2\2\u154a\u154f\3\2\2"+
		"\2\u154b\u154f\7\u01c7\2\2\u154c\u154f\7\u018b\2\2\u154d\u154f\7g\2\2"+
		"\u154e\u1547\3\2\2\2\u154e\u154b\3\2\2\2\u154e\u154c\3\2\2\2\u154e\u154d"+
		"\3\2\2\2\u154f\u027d\3\2\2\2\u1550\u1553\5\u0560\u02b1\2\u1551\u1553\5"+
		"\u0572\u02ba\2\u1552\u1550\3\2\2\2\u1552\u1551\3\2\2\2\u1553\u027f\3\2"+
		"\2\2\u1554\u1555\5\u0282\u0142\2\u1555\u0281\3\2\2\2\u1556\u1563\5\u0460"+
		"\u0231\2\u1557\u1559\7\u019a\2\2\u1558\u1557\3\2\2\2\u1558\u1559\3\2\2"+
		"\2\u1559\u155c\3\2\2\2\u155a\u155d\5\u0572\u02ba\2\u155b\u155d\5\u0560"+
		"\u02b1\2\u155c\u155a\3\2\2\2\u155c\u155b\3\2\2\2\u155d\u155e\3\2\2\2\u155e"+
		"\u155f\5\u0210\u0109\2\u155f\u1560\7\35\2\2\u1560\u1561\7\u0163\2\2\u1561"+
		"\u1563\3\2\2\2\u1562\u1556\3\2\2\2\u1562\u1558\3\2\2\2\u1563\u0283\3\2"+
		"\2\2\u1564\u1567\5\u027a\u013e\2\u1565\u1566\t\34\2\2\u1566\u1568\5\u048c"+
		"\u0247\2\u1567\u1565\3\2\2\2\u1567\u1568\3\2\2\2\u1568\u0285\3\2\2\2\u1569"+
		"\u156a\5\u027a\u013e\2\u156a\u0287\3\2\2\2\u156b\u1576\7\4\2\2\u156c\u1577"+
		"\7\13\2\2\u156d\u1577\5\u028a\u0146\2\u156e\u156f\7U\2\2\u156f\u1570\7"+
		"\u0095\2\2\u1570\u1577\5\u028a\u0146\2\u1571\u1572\5\u028a\u0146\2\u1572"+
		"\u1573\7U\2\2\u1573\u1574\7\u0095\2\2\u1574\u1575\5\u028a\u0146\2\u1575"+
		"\u1577\3\2\2\2\u1576\u156c\3\2\2\2\u1576\u156d\3\2\2\2\u1576\u156e\3\2"+
		"\2\2\u1576\u1571\3\2\2\2\u1577\u1578\3\2\2\2\u1578\u1579\7\5\2\2\u1579"+
		"\u0289\3\2\2\2\u157a\u157f\5\u0286\u0144\2\u157b\u157c\7\b\2\2\u157c\u157e"+
		"\5\u0286\u0144\2\u157d\u157b\3\2\2\2\u157e\u1581\3\2\2\2\u157f\u157d\3"+
		"\2\2\2\u157f\u1580\3\2\2\2\u1580\u028b\3\2\2\2\u1581\u157f\3\2\2\2\u1582"+
		"\u1583\5\u0544\u02a3\2\u1583\u1584\5\u0288\u0145\2\u1584\u028d\3\2\2\2"+
		"\u1585\u158a\5\u028c\u0147\2\u1586\u1587\7\b\2\2\u1587\u1589\5\u028c\u0147"+
		"\2\u1588\u1586\3\2\2\2\u1589\u158c\3\2\2\2\u158a\u1588\3\2\2\2\u158a\u158b"+
		"\3\2\2\2\u158b\u028f\3\2\2\2\u158c\u158a\3\2\2\2\u158d\u158f\5\u0294\u014b"+
		"\2\u158e\u158d\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u158e\3\2\2\2\u1590\u1591"+
		"\3\2\2\2\u1591\u1592\3\2\2\2\u1592\u1593\b\u0149\1\2\u1593\u0291\3\2\2"+
		"\2\u1594\u1595\7\u0097\2\2\u1595\u1596\7R\2\2\u1596\u1597\7P\2\2\u1597"+
		"\u15b8\7\u01cc\2\2\u1598\u1599\7\u0137\2\2\u1599\u159a\7P\2\2\u159a\u159b"+
		"\7R\2\2\u159b\u159c\7P\2\2\u159c\u15b8\7\u01cc\2\2\u159d\u15b8\7\u0155"+
		"\2\2\u159e\u15b8\7\u00e0\2\2\u159f\u15b8\7\u014d\2\2\u15a0\u15b8\7\u0174"+
		"\2\2\u15a1\u15a2\7\u00cf\2\2\u15a2\u15a3\7\u0142\2\2\u15a3\u15b8\7\u00b7"+
		"\2\2\u15a4\u15a5\7\u00cf\2\2\u15a5\u15a6\7\u0142\2\2\u15a6\u15b8\7\u00ec"+
		"\2\2\u15a7\u15a8\7\u0142\2\2\u15a8\u15b8\7\u00b7\2\2\u15a9\u15aa\7\u0142"+
		"\2\2\u15aa\u15b8\7\u00ec\2\2\u15ab\u15b8\7\u00f3\2\2\u15ac\u15ad\7O\2"+
		"\2\u15ad\u15b8\7\u00f3\2\2\u15ae\u15af\7\u00ac\2\2\u15af\u15b8\5\u0126"+
		"\u0094\2\u15b0\u15b1\7\u013b\2\2\u15b1\u15b8\5\u0126\u0094\2\u15b2\u15b3"+
		"\7\u01cd\2\2\u15b3\u15b8\5\u020e\u0108\2\u15b4\u15b8\5T+\2\u15b5\u15b6"+
		"\7\u01ce\2\2\u15b6\u15b8\5\u055e\u02b0\2\u15b7\u1594\3\2\2\2\u15b7\u1598"+
		"\3\2\2\2\u15b7\u159d\3\2\2\2\u15b7\u159e\3\2\2\2\u15b7\u159f\3\2\2\2\u15b7"+
		"\u15a0\3\2\2\2\u15b7\u15a1\3\2\2\2\u15b7\u15a4\3\2\2\2\u15b7\u15a7\3\2"+
		"\2\2\u15b7\u15a9\3\2\2\2\u15b7\u15ab\3\2\2\2\u15b7\u15ac\3\2\2\2\u15b7"+
		"\u15ae\3\2\2\2\u15b7\u15b0\3\2\2\2\u15b7\u15b2\3\2\2\2\u15b7\u15b4\3\2"+
		"\2\2\u15b7\u15b5\3\2\2\2\u15b8\u0293\3\2\2\2\u15b9\u15ba\7&\2\2\u15ba"+
		"\u15c2\5\u0296\u014c\2\u15bb\u15bc\7\u00f0\2\2\u15bc\u15c2\5J&\2\u15bd"+
		"\u15be\7\u01bd\2\2\u15be\u15c2\5\u0298\u014d\2\u15bf\u15c2\7j\2\2\u15c0"+
		"\u15c2\5\u0292\u014a\2\u15c1\u15b9\3\2\2\2\u15c1\u15bb\3\2\2\2\u15c1\u15bd"+
		"\3\2\2\2\u15c1\u15bf\3\2\2\2\u15c1\u15c0\3\2\2\2\u15c2\u0295\3\2\2\2\u15c3"+
		"\u15c9\5\u0550\u02a9\2\u15c4\u15c5\5\u0550\u02a9\2\u15c5\u15c6\7\b\2\2"+
		"\u15c6\u15c7\5\u0550\u02a9\2\u15c7\u15c9\3\2\2\2\u15c8\u15c3\3\2\2\2\u15c8"+
		"\u15c4\3\2\2\2\u15c9\u0297\3\2\2\2\u15ca\u15cb\7@\2\2\u15cb\u15cc\7\u0163"+
		"\2\2\u15cc\u15d3\5\u0460\u0231\2\u15cd\u15ce\7\b\2\2\u15ce\u15cf\7@\2"+
		"\2\u15cf\u15d0\7\u0163\2\2\u15d0\u15d2\5\u0460\u0231\2\u15d1\u15cd\3\2"+
		"\2\2\u15d2\u15d5\3\2\2\2\u15d3\u15d1\3\2\2\2\u15d3\u15d4\3\2\2\2\u15d4"+
		"\u0299\3\2\2\2\u15d5\u15d3\3\2\2\2\u15d6\u15d7\7k\2\2\u15d7\u15da\5\u01ce"+
		"\u00e8\2\u15d8\u15da\3\2\2\2\u15d9\u15d6\3\2\2\2\u15d9\u15d8\3\2\2\2\u15da"+
		"\u029b\3\2\2\2\u15db\u15dc\5\u027e\u0140\2\u15dc\u15dd\5\u0282\u0142\2"+
		"\u15dd\u029d\3\2\2\2\u15de\u15e3\5\u029c\u014f\2\u15df\u15e0\7\b\2\2\u15e0"+
		"\u15e2\5\u029c\u014f\2\u15e1\u15df\3\2\2\2\u15e2\u15e5\3\2\2\2\u15e3\u15e1"+
		"\3\2\2\2\u15e3\u15e4\3\2\2\2\u15e4\u029f\3\2\2\2\u15e5\u15e3\3\2\2\2\u15e6"+
		"\u15e7\7\u008c\2\2\u15e7\u15e8\t\35\2\2\u15e8\u15e9\5\u0274\u013b\2\u15e9"+
		"\u15ea\5\u02a2\u0152\2\u15ea\u15eb\5\u02a4\u0153\2\u15eb\u02a1\3\2\2\2"+
		"\u15ec\u15ee\5\u0292\u014a\2\u15ed\u15ec\3\2\2\2\u15ee\u15ef\3\2\2\2\u15ef"+
		"\u15ed\3\2\2\2\u15ef\u15f0\3\2\2\2\u15f0\u02a3\3\2\2\2\u15f1\u15f4\7\u0136"+
		"\2\2\u15f2\u15f4\3\2\2\2\u15f3\u15f1\3\2\2\2\u15f3\u15f2\3\2\2\2\u15f4"+
		"\u02a5\3\2\2\2\u15f5\u15f6\7\u00c1\2\2\u15f6\u15f7\7\u00d5\2\2\u15f7\u15f8"+
		"\5\u0272\u013a\2\u15f8\u15f9\5n8\2\u15f9\u161a\3\2\2\2\u15fa\u15fb\7\u00c1"+
		"\2\2\u15fb\u15fc\7\u00d5\2\2\u15fc\u15fd\7\u00de\2\2\u15fd\u15fe\7\u0187"+
		"\2\2\u15fe\u15ff\5\u0272\u013a\2\u15ff\u1600\5n8\2\u1600\u161a\3\2\2\2"+
		"\u1601\u1602\7\u00c1\2\2\u1602\u1603\7\u0123\2\2\u1603\u1604\5\u0272\u013a"+
		"\2\u1604\u1605\5n8\2\u1605\u161a\3\2\2\2\u1606\u1607\7\u00c1\2\2\u1607"+
		"\u1608\7\u0123\2\2\u1608\u1609\7\u00de\2\2\u1609\u160a\7\u0187\2\2\u160a"+
		"\u160b\5\u0272\u013a\2\u160b\u160c\5n8\2\u160c\u161a\3\2\2\2\u160d\u160e"+
		"\7\u00c1\2\2\u160e\u160f\7\u01bc\2\2\u160f\u1610\5\u0272\u013a\2\u1610"+
		"\u1611\5n8\2\u1611\u161a\3\2\2\2\u1612\u1613\7\u00c1\2\2\u1613\u1614\7"+
		"\u01bc\2\2\u1614\u1615\7\u00de\2\2\u1615\u1616\7\u0187\2\2\u1616\u1617"+
		"\5\u0272\u013a\2\u1617\u1618\5n8\2\u1618\u161a\3\2\2\2\u1619\u15f5\3\2"+
		"\2\2\u1619\u15fa\3\2\2\2\u1619\u1601\3\2\2\2\u1619\u1606\3\2\2\2\u1619"+
		"\u160d\3\2\2\2\u1619\u1612\3\2\2\2\u161a\u02a7\3\2\2\2\u161b\u161c\7\u00c1"+
		"\2\2\u161c\u161d\7\u008a\2\2\u161d\u161e\5\u028e\u0148\2\u161e\u161f\5"+
		"n8\2\u161f\u1628\3\2\2\2\u1620\u1621\7\u00c1\2\2\u1621\u1622\7\u008a\2"+
		"\2\u1622\u1623\7\u00de\2\2\u1623\u1624\7\u0187\2\2\u1624\u1625\5\u028e"+
		"\u0148\2\u1625\u1626\5n8\2\u1626\u1628\3\2\2\2\u1627\u161b\3\2\2\2\u1627"+
		"\u1620\3\2\2\2\u1628\u02a9\3\2\2\2\u1629\u162a\7\u00c1\2\2\u162a\u162b"+
		"\7\u0111\2\2\u162b\u162c\5\u02b0\u0159\2\u162c\u162d\5n8\2\u162d\u1636"+
		"\3\2\2\2\u162e\u162f\7\u00c1\2\2\u162f\u1630\7\u0111\2\2\u1630\u1631\7"+
		"\u00de\2\2\u1631\u1632\7\u0187\2\2\u1632\u1633\5\u02b0\u0159\2\u1633\u1634"+
		"\5n8\2\u1634\u1636\3\2\2\2\u1635\u1629\3\2\2\2\u1635\u162e\3\2\2\2\u1636"+
		"\u02ab\3\2\2\2\u1637\u1638\7\4\2\2\u1638\u1639\5\u0460\u0231\2\u1639\u163a"+
		"\7\5\2\2\u163a\u164e\3\2\2\2\u163b\u163c\7\4\2\2\u163c\u163d\5\u0460\u0231"+
		"\2\u163d\u163e\7\b\2\2\u163e\u163f\5\u0460\u0231\2\u163f\u1640\7\5\2\2"+
		"\u1640\u164e\3\2\2\2\u1641\u1642\7\4\2\2\u1642\u1643\7\u0192\2\2\u1643"+
		"\u1644\7\b\2\2\u1644\u1645\5\u0460\u0231\2\u1645\u1646\7\5\2\2\u1646\u164e"+
		"\3\2\2\2\u1647\u1648\7\4\2\2\u1648\u1649\5\u0460\u0231\2\u1649\u164a\7"+
		"\b\2\2\u164a\u164b\7\u0192\2\2\u164b\u164c\7\5\2\2\u164c\u164e\3\2\2\2"+
		"\u164d\u1637\3\2\2\2\u164d\u163b\3\2\2\2\u164d\u1641\3\2\2\2\u164d\u1647"+
		"\3\2\2\2\u164e\u02ad\3\2\2\2\u164f\u1650\5\u055e\u02b0\2\u1650\u1651\7"+
		"\r\2\2\u1651\u1653\3\2\2\2\u1652\u164f\3\2\2\2\u1653\u1656\3\2\2\2\u1654"+
		"\u1652\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u1657\3\2\2\2\u1656\u1654\3\2"+
		"\2\2\u1657\u1658\5\u04f8\u027d\2\u1658\u02af\3\2\2\2\u1659\u165e\5\u02b2"+
		"\u015a\2\u165a\u165b\7\b\2\2\u165b\u165d\5\u02b2\u015a\2\u165c\u165a\3"+
		"\2\2\2\u165d\u1660\3\2\2\2\u165e\u165c\3\2\2\2\u165e\u165f\3\2\2\2\u165f"+
		"\u02b1\3\2\2\2\u1660\u165e\3\2\2\2\u1661\u1662\5\u02ae\u0158\2\u1662\u1663"+
		"\5\u02ac\u0157\2\u1663\u02b3\3\2\2\2\u1664\u1665\7;\2\2\u1665\u1666\5"+
		"\u02b6\u015c\2\u1666\u02b5\3\2\2\2\u1667\u1669\5\u02b8\u015d\2\u1668\u1667"+
		"\3\2\2\2\u1669\u166a\3\2\2\2\u166a\u1668\3\2\2\2\u166a\u166b\3\2\2\2\u166b"+
		"\u02b7\3\2\2\2\u166c\u1670\5\u0550\u02a9\2\u166d\u166e\7\u00f0\2\2\u166e"+
		"\u1670\5J&\2\u166f\u166c\3\2\2\2\u166f\u166d\3\2\2\2\u1670\u02b9\3\2\2"+
		"\2\u1671\u1672\7\60\2\2\u1672\u1673\7+\2\2\u1673\u1674\7\4\2\2\u1674\u1675"+
		"\5\u0460\u0231\2\u1675\u1676\7&\2\2\u1676\u1677\5\u0460\u0231\2\u1677"+
		"\u1678\7\5\2\2\u1678\u1679\7k\2\2\u1679\u167a\7\u00d5\2\2\u167a\u167b"+
		"\5\u0274\u013b\2\u167b\u167c\5\u02bc\u015f\2\u167c\u1694\3\2\2\2\u167d"+
		"\u167e\7\60\2\2\u167e\u167f\7+\2\2\u167f\u1680\7\4\2\2\u1680\u1681\5\u0460"+
		"\u0231\2\u1681\u1682\7&\2\2\u1682\u1683\5\u0460\u0231\2\u1683\u1684\7"+
		"\5\2\2\u1684\u1685\7\u0176\2\2\u1685\u1686\7\u00d5\2\2\u1686\u1687\5\u02bc"+
		"\u015f\2\u1687\u1694\3\2\2\2\u1688\u1689\7\60\2\2\u1689\u168a\7+\2\2\u168a"+
		"\u168b\7\4\2\2\u168b\u168c\5\u0460\u0231\2\u168c\u168d\7&\2\2\u168d\u168e"+
		"\5\u0460\u0231\2\u168e\u168f\7\5\2\2\u168f\u1690\7k\2\2\u1690\u1691\7"+
		"\u018b\2\2\u1691\u1692\5\u02bc\u015f\2\u1692\u1694\3\2\2\2\u1693\u1671"+
		"\3\2\2\2\u1693\u167d\3\2\2\2\u1693\u1688\3\2\2\2\u1694\u02bb\3\2\2\2\u1695"+
		"\u1696\7&\2\2\u1696\u169b\7\u00e1\2\2\u1697\u1698\7&\2\2\u1698\u169b\7"+
		"\u008f\2\2\u1699\u169b\3\2\2\2\u169a\u1695\3\2\2\2\u169a\u1697\3\2\2\2"+
		"\u169a\u1699\3\2\2\2\u169b\u02bd\3\2\2\2\u169c\u169d\7\u00c1\2\2\u169d"+
		"\u169e\7+\2\2\u169e\u169f\5\u02c0\u0161\2\u169f\u16a0\7\4\2\2\u16a0\u16a1"+
		"\5\u0460\u0231\2\u16a1\u16a2\7&\2\2\u16a2\u16a3\5\u0460\u0231\2\u16a3"+
		"\u16a4\7\5\2\2\u16a4\u16a5\5n8\2\u16a5\u02bf\3\2\2\2\u16a6\u16a7\7\u00de"+
		"\2\2\u16a7\u16aa\7\u0187\2\2\u16a8\u16aa\3\2\2\2\u16a9\u16a6\3\2\2\2\u16a9"+
		"\u16a8\3\2\2\2\u16aa\u02c1\3\2\2\2\u16ab\u16ac\7\60\2\2\u16ac\u16ad\5"+
		"\u026c\u0137\2\u16ad\u16ae\7\u01bd\2\2\u16ae\u16af\7@\2\2\u16af\u16b0"+
		"\5\u0460\u0231\2\u16b0\u16b1\7\u00f0\2\2\u16b1\u16b2\5\u053e\u02a0\2\u16b2"+
		"\u16b3\7\4\2\2\u16b3\u16b4\5\u02c4\u0163\2\u16b4\u16b5\7\5\2\2\u16b5\u02c3"+
		"\3\2\2\2\u16b6\u16b7\7B\2\2\u16b7\u16b8\7\u01cf\2\2\u16b8\u16b9\7k\2\2"+
		"\u16b9\u16ba\7\u00d5\2\2\u16ba\u16bb\5\u0274\u013b\2\u16bb\u16bc\7\b\2"+
		"\2\u16bc\u16bd\7`\2\2\u16bd\u16be\7\u01cf\2\2\u16be\u16bf\7k\2\2\u16bf"+
		"\u16c0\7\u00d5\2\2\u16c0\u16c1\5\u0274\u013b\2\u16c1\u16d9\3\2\2\2\u16c2"+
		"\u16c3\7`\2\2\u16c3\u16c4\7\u01cf\2\2\u16c4\u16c5\7k\2\2\u16c5\u16c6\7"+
		"\u00d5\2\2\u16c6\u16c7\5\u0274\u013b\2\u16c7\u16c8\7\b\2\2\u16c8\u16c9"+
		"\7B\2\2\u16c9\u16ca\7\u01cf\2\2\u16ca\u16cb\7k\2\2\u16cb\u16cc\7\u00d5"+
		"\2\2\u16cc\u16cd\5\u0274\u013b\2\u16cd\u16d9\3\2\2\2\u16ce\u16cf\7B\2"+
		"\2\u16cf\u16d0\7\u01cf\2\2\u16d0\u16d1\7k\2\2\u16d1\u16d2\7\u00d5\2\2"+
		"\u16d2\u16d9\5\u0274\u013b\2\u16d3\u16d4\7`\2\2\u16d4\u16d5\7\u01cf\2"+
		"\2\u16d5\u16d6\7k\2\2\u16d6\u16d7\7\u00d5\2\2\u16d7\u16d9\5\u0274\u013b"+
		"\2\u16d8\u16b6\3\2\2\2\u16d8\u16c2\3\2\2\2\u16d8\u16ce\3\2\2\2\u16d8\u16d3"+
		"\3\2\2\2\u16d9\u02c5\3\2\2\2\u16da\u16db\7\u00c1\2\2\u16db\u16dc\7\u01bd"+
		"\2\2\u16dc\u16dd\5\u02c0\u0161\2\u16dd\u16de\7@\2\2\u16de\u16df\5\u0460"+
		"\u0231\2\u16df\u16e0\7\u00f0\2\2\u16e0\u16e1\5\u053e\u02a0\2\u16e1\u16e2"+
		"\5n8\2\u16e2\u02c7\3\2\2\2\u16e3\u16e4\7\u012d\2\2\u16e4\u16e5\5\u02ca"+
		"\u0166\2\u16e5\u16e6\5\u0252\u012a\2\u16e6\u16e7\5\u053a\u029e\2\u16e7"+
		"\u16fe\3\2\2\2\u16e8\u16e9\7\u012d\2\2\u16e9\u16ea\5\u02cc\u0167\2\u16ea"+
		"\u16eb\5\u0252\u012a\2\u16eb\u16ec\5\u053e\u02a0\2\u16ec\u16fe\3\2\2\2"+
		"\u16ed\u16ee\7\u012d\2\2\u16ee\u16ef\7\4\2\2\u16ef\u16f0\5\u02ce\u0168"+
		"\2\u16f0\u16f1\7\5\2\2\u16f1\u16f2\5\u02ca\u0166\2\u16f2\u16f3\5\u0252"+
		"\u012a\2\u16f3\u16f4\5\u053a\u029e\2\u16f4\u16fe\3\2\2\2\u16f5\u16f6\7"+
		"\u012d\2\2\u16f6\u16f7\7\4\2\2\u16f7\u16f8\5\u02ce\u0168\2\u16f8\u16f9"+
		"\7\5\2\2\u16f9\u16fa\5\u02cc\u0167\2\u16fa\u16fb\5\u0252\u012a\2\u16fb"+
		"\u16fc\5\u053e\u02a0\2\u16fc\u16fe\3\2\2\2\u16fd\u16e3\3\2\2\2\u16fd\u16e8"+
		"\3\2\2\2\u16fd\u16ed\3\2\2\2\u16fd\u16f5\3\2\2\2\u16fe\u02c9\3\2\2\2\u16ff"+
		"\u1700\t\24\2\2\u1700\u02cb\3\2\2\2\u1701\u1702\t\36\2\2\u1702\u02cd\3"+
		"\2\2\2\u1703\u1708\5\u02d0\u0169\2\u1704\u1705\7\b\2\2\u1705\u1707\5\u02d0"+
		"\u0169\2\u1706\u1704\3\2\2\2\u1707\u170a\3\2\2\2\u1708\u1706\3\2\2\2\u1708"+
		"\u1709\3\2\2\2\u1709\u02cf\3\2\2\2\u170a\u1708\3\2\2\2\u170b\u170c\7\u0082"+
		"\2\2\u170c\u02d1\3\2\2\2\u170d\u170e\7\u008c\2\2\u170e\u170f\7\u015a\2"+
		"\2\u170f\u1710\5\u053e\u02a0\2\u1710\u1711\7\u0148\2\2\u1711\u1712\5v"+
		"<\2\u1712\u171a\3\2\2\2\u1713\u1714\7\u008c\2\2\u1714\u1715\7\u015a\2"+
		"\2\u1715\u1716\5\u053e\u02a0\2\u1716\u1717\7\u0134\2\2\u1717\u1718\5v"+
		"<\2\u1718\u171a\3\2\2\2\u1719\u170d\3\2\2\2\u1719\u1713\3\2\2\2\u171a"+
		"\u02d3\3\2\2\2\u171b\u171c\7\u008c\2\2\u171c\u171d\7\u008a\2\2\u171d\u171e"+
		"\5\u028c\u0147\2\u171e\u171f\7\u0130\2\2\u171f\u1720\7`\2\2\u1720\u1721"+
		"\5\u053e\u02a0\2\u1721\u18f0\3\2\2\2\u1722\u1723\7\u008c\2\2\u1723\u1724"+
		"\7n\2\2\u1724\u1725\5\u020e\u0108\2\u1725\u1726\7\u0130\2\2\u1726\u1727"+
		"\7`\2\2\u1727\u1728\5\u053e\u02a0\2\u1728\u18f0\3\2\2\2\u1729\u172a\7"+
		"\u008c\2\2\u172a\u172b\7\u00aa\2\2\u172b\u172c\5\u020e\u0108\2\u172c\u172d"+
		"\7\u0130\2\2\u172d\u172e\7`\2\2\u172e\u172f\5\u053e\u02a0\2\u172f\u18f0"+
		"\3\2\2\2\u1730\u1731\7\u008c\2\2\u1731\u1732\7\u00b1\2\2\u1732\u1733\5"+
		"\u053e\u02a0\2\u1733\u1734\7\u0130\2\2\u1734\u1735\7`\2\2\u1735\u1736"+
		"\5\u053e\u02a0\2\u1736\u18f0\3\2\2\2\u1737\u1738\7\u008c\2\2\u1738\u1739"+
		"\7\u00bf\2\2\u1739\u173a\5\u020e\u0108\2\u173a\u173b\7\u0130\2\2\u173b"+
		"\u173c\7`\2\2\u173c\u173d\5\u053e\u02a0\2\u173d\u18f0\3\2\2\2\u173e\u173f"+
		"\7\u008c\2\2\u173f\u1740\7\u00bf\2\2\u1740\u1741\5\u020e\u0108\2\u1741"+
		"\u1742\7\u0130\2\2\u1742\u1743\7/\2\2\u1743\u1744\5\u053e\u02a0\2\u1744"+
		"\u1745\7`\2\2\u1745\u1746\5\u053e\u02a0\2\u1746\u18f0\3\2\2\2\u1747\u1748"+
		"\7\u008c\2\2\u1748\u1749\7A\2\2\u1749\u174a\7\u00b0\2\2\u174a\u174b\7"+
		"\u0178\2\2\u174b\u174c\5\u053e\u02a0\2\u174c\u174d\7\u0130\2\2\u174d\u174e"+
		"\7`\2\2\u174e\u174f\5\u053e\u02a0\2\u174f\u18f0\3\2\2\2\u1750\u1751\7"+
		"\u008c\2\2\u1751\u1752\7\u00d5\2\2\u1752\u1753\5\u0274\u013b\2\u1753\u1754"+
		"\7\u0130\2\2\u1754\u1755\7`\2\2\u1755\u1756\5\u053e\u02a0\2\u1756\u18f0"+
		"\3\2\2\2\u1757\u1758\7\u008c\2\2\u1758\u1759\7D\2\2\u1759\u175a\5\u0558"+
		"\u02ad\2\u175a\u175b\7\u0130\2\2\u175b\u175c\7`\2\2\u175c\u175d\5\u0558"+
		"\u02ad\2\u175d\u18f0\3\2\2\2\u175e\u175f\7\u008c\2\2\u175f\u1760\5\u0136"+
		"\u009c\2\u1760\u1761\7\u00f0\2\2\u1761\u1762\5\u053e\u02a0\2\u1762\u1763"+
		"\7\u0130\2\2\u1763\u1764\7`\2\2\u1764\u1765\5\u053e\u02a0\2\u1765\u18f0"+
		"\3\2\2\2\u1766\u1767\7\u008c\2\2\u1767\u1768\7\u0111\2\2\u1768\u1769\7"+
		"\u009e\2\2\u1769\u176a\5\u020e\u0108\2\u176a\u176b\7f\2\2\u176b\u176c"+
		"\5\u053e\u02a0\2\u176c\u176d\7\u0130\2\2\u176d\u176e\7`\2\2\u176e\u176f"+
		"\5\u053e\u02a0\2\u176f\u18f0\3\2\2\2\u1770\u1771\7\u008c\2\2\u1771\u1772"+
		"\7\u0111\2\2\u1772\u1773\7\u00d0\2\2\u1773\u1774\5\u020e\u0108\2\u1774"+
		"\u1775\7f\2\2\u1775\u1776\5\u053e\u02a0\2\u1776\u1777\7\u0130\2\2\u1777"+
		"\u1778\7`\2\2\u1778\u1779\5\u053e\u02a0\2\u1779\u18f0\3\2\2\2\u177a\u177b"+
		"\7\u008c\2\2\u177b\u177c\7\u01bf\2\2\u177c\u177d\5\u053e\u02a0\2\u177d"+
		"\u177e\7R\2\2\u177e\u177f\5\u053a\u029e\2\u177f\u1780\7\u0130\2\2\u1780"+
		"\u1781\7`\2\2\u1781\u1782\5\u053e\u02a0\2\u1782\u18f0\3\2\2\2\u1783\u1784"+
		"\7\u008c\2\2\u1784\u1785\7\u01bf\2\2\u1785\u1786\7\u00de\2\2\u1786\u1787"+
		"\7\u0187\2\2\u1787\u1788\5\u053e\u02a0\2\u1788\u1789\7R\2\2\u1789\u178a"+
		"\5\u053a\u029e\2\u178a\u178b\7\u0130\2\2\u178b\u178c\7`\2\2\u178c\u178d"+
		"\5\u053e\u02a0\2\u178d\u18f0\3\2\2\2\u178e\u178f\7\u008c\2\2\u178f\u1790"+
		"\7\u0123\2\2\u1790\u1791\5\u0274\u013b\2\u1791\u1792\7\u0130\2\2\u1792"+
		"\u1793\7`\2\2\u1793\u1794\5\u053e\u02a0\2\u1794\u18f0\3\2\2\2\u1795\u1796"+
		"\7\u008c\2\2\u1796\u1797\7\u01c6\2\2\u1797\u1798\5\u053e\u02a0\2\u1798"+
		"\u1799\7\u0130\2\2\u1799\u179a\7`\2\2\u179a\u179b\5\u053e\u02a0\2\u179b"+
		"\u18f0\3\2\2\2\u179c\u179d\7\u008c\2\2\u179d\u179e\7\u01bc\2\2\u179e\u179f"+
		"\5\u0274\u013b\2\u179f\u17a0\7\u0130\2\2\u17a0\u17a1\7`\2\2\u17a1\u17a2"+
		"\5\u053e\u02a0\2\u17a2\u18f0\3\2\2\2\u17a3\u17a4\7\u008c\2\2\u17a4\u17a5"+
		"\7\u013e\2\2\u17a5\u17a6\5\u053e\u02a0\2\u17a6\u17a7\7\u0130\2\2\u17a7"+
		"\u17a8\7`\2\2\u17a8\u17a9\5\u053e\u02a0\2\u17a9\u18f0\3\2\2\2\u17aa\u17ab"+
		"\7\u008c\2\2\u17ab\u17ac\7\u0146\2\2\u17ac\u17ad\5\u053e\u02a0\2\u17ad"+
		"\u17ae\7\u0130\2\2\u17ae\u17af\7`\2\2\u17af\u17b0\5\u053e\u02a0\2\u17b0"+
		"\u18f0\3\2\2\2\u17b1\u17b2\7\u008c\2\2\u17b2\u17b3\7\u01c5\2\2\u17b3\u17b4"+
		"\5\u053e\u02a0\2\u17b4\u17b5\7\u0130\2\2\u17b5\u17b6\7`\2\2\u17b6\u17b7"+
		"\5\u053e\u02a0\2\u17b7\u18f0\3\2\2\2\u17b8\u17b9\7\u008c\2\2\u17b9\u17ba"+
		"\7^\2\2\u17ba\u17bb\5\u0434\u021b\2\u17bb\u17bc\7\u0130\2\2\u17bc\u17bd"+
		"\7`\2\2\u17bd\u17be\5\u053e\u02a0\2\u17be\u18f0\3\2\2\2\u17bf\u17c0\7"+
		"\u008c\2\2\u17c0\u17c1\7^\2\2\u17c1\u17c2\7\u00de\2\2\u17c2\u17c3\7\u0187"+
		"\2\2\u17c3\u17c4\5\u0434\u021b\2\u17c4\u17c5\7\u0130\2\2\u17c5\u17c6\7"+
		"`\2\2\u17c6\u17c7\5\u053e\u02a0\2\u17c7\u18f0\3\2\2\2\u17c8\u17c9\7\u008c"+
		"\2\2\u17c9\u17ca\7\u0143\2\2\u17ca\u17cb\5\u053a\u029e\2\u17cb\u17cc\7"+
		"\u0130\2\2\u17cc\u17cd\7`\2\2\u17cd\u17ce\5\u053e\u02a0\2\u17ce\u18f0"+
		"\3\2\2\2\u17cf\u17d0\7\u008c\2\2\u17d0\u17d1\7\u0143\2\2\u17d1\u17d2\7"+
		"\u00de\2\2\u17d2\u17d3\7\u0187\2\2\u17d3\u17d4\5\u053a\u029e\2\u17d4\u17d5"+
		"\7\u0130\2\2\u17d5\u17d6\7`\2\2\u17d6\u17d7\5\u053e\u02a0\2\u17d7\u18f0"+
		"\3\2\2\2\u17d8\u17d9\7\u008c\2\2\u17d9\u17da\7\u0173\2\2\u17da\u17db\5"+
		"\u053a\u029e\2\u17db\u17dc\7\u0130\2\2\u17dc\u17dd\7`\2\2\u17dd\u17de"+
		"\5\u053e\u02a0\2\u17de\u18f0\3\2\2\2\u17df\u17e0\7\u008c\2\2\u17e0\u17e1"+
		"\7\u0173\2\2\u17e1\u17e2\7\u00de\2\2\u17e2\u17e3\7\u0187\2\2\u17e3\u17e4"+
		"\5\u053a\u029e\2\u17e4\u17e5\7\u0130\2\2\u17e5\u17e6\7`\2\2\u17e6\u17e7"+
		"\5\u053e\u02a0\2\u17e7\u18f0\3\2\2\2\u17e8\u17e9\7\u008c\2\2\u17e9\u17ea"+
		"\7\u00fd\2\2\u17ea\u17eb\7\u0173\2\2\u17eb\u17ec\5\u053a\u029e\2\u17ec"+
		"\u17ed\7\u0130\2\2\u17ed\u17ee\7`\2\2\u17ee\u17ef\5\u053e\u02a0\2\u17ef"+
		"\u18f0\3\2\2\2\u17f0\u17f1\7\u008c\2\2\u17f1\u17f2\7\u00fd\2\2\u17f2\u17f3"+
		"\7\u0173\2\2\u17f3\u17f4\7\u00de\2\2\u17f4\u17f5\7\u0187\2\2\u17f5\u17f6"+
		"\5\u053a\u029e\2\u17f6\u17f7\7\u0130\2\2\u17f7\u17f8\7`\2\2\u17f8\u17f9"+
		"\5\u053e\u02a0\2\u17f9\u18f0\3\2\2\2\u17fa\u17fb\7\u008c\2\2\u17fb\u17fc"+
		"\7\u00e4\2\2\u17fc\u17fd\5\u053a\u029e\2\u17fd\u17fe\7\u0130\2\2\u17fe"+
		"\u17ff\7`\2\2\u17ff\u1800\5\u053e\u02a0\2\u1800\u18f0\3\2\2\2\u1801\u1802"+
		"\7\u008c\2\2\u1802\u1803\7\u00e4\2\2\u1803\u1804\7\u00de\2\2\u1804\u1805"+
		"\7\u0187\2\2\u1805\u1806\5\u053a\u029e\2\u1806\u1807\7\u0130\2\2\u1807"+
		"\u1808\7`\2\2\u1808\u1809\5\u053e\u02a0\2\u1809\u18f0\3\2\2\2\u180a\u180b"+
		"\7\u008c\2\2\u180b\u180c\7A\2\2\u180c\u180d\7^\2\2\u180d\u180e\5\u0434"+
		"\u021b\2\u180e\u180f\7\u0130\2\2\u180f\u1810\7`\2\2\u1810\u1811\5\u053e"+
		"\u02a0\2\u1811\u18f0\3\2\2\2\u1812\u1813\7\u008c\2\2\u1813\u1814\7A\2"+
		"\2\u1814\u1815\7^\2\2\u1815\u1816\7\u00de\2\2\u1816\u1817\7\u0187\2\2"+
		"\u1817\u1818\5\u0434\u021b\2\u1818\u1819\7\u0130\2\2\u1819\u181a\7`\2"+
		"\2\u181a\u181b\5\u053e\u02a0\2\u181b\u18f0\3\2\2\2\u181c\u181d\7\u008c"+
		"\2\2\u181d\u181e\7^\2\2\u181e\u181f\5\u0434\u021b\2\u181f\u1820\7\u0130"+
		"\2\2\u1820\u1821\5\u02d6\u016c\2\u1821\u1822\5\u053e\u02a0\2\u1822\u1823"+
		"\7`\2\2\u1823\u1824\5\u053e\u02a0\2\u1824\u18f0\3\2\2\2\u1825\u1826\7"+
		"\u008c\2\2\u1826\u1827\7^\2\2\u1827\u1828\7\u00de\2\2\u1828\u1829\7\u0187"+
		"\2\2\u1829\u182a\5\u0434\u021b\2\u182a\u182b\7\u0130\2\2\u182b\u182c\5"+
		"\u02d6\u016c\2\u182c\u182d\5\u053e\u02a0\2\u182d\u182e\7`\2\2\u182e\u182f"+
		"\5\u053e\u02a0\2\u182f\u18f0\3\2\2\2\u1830\u1831\7\u008c\2\2\u1831\u1832"+
		"\7\u0173\2\2\u1832\u1833\5\u053a\u029e\2\u1833\u1834\7\u0130\2\2\u1834"+
		"\u1835\5\u02d6\u016c\2\u1835\u1836\5\u053e\u02a0\2\u1836\u1837\7`\2\2"+
		"\u1837\u1838\5\u053e\u02a0\2\u1838\u18f0\3\2\2\2\u1839\u183a\7\u008c\2"+
		"\2\u183a\u183b\7\u0173\2\2\u183b\u183c\7\u00de\2\2\u183c\u183d\7\u0187"+
		"\2\2\u183d\u183e\5\u053a\u029e\2\u183e\u183f\7\u0130\2\2\u183f\u1840\5"+
		"\u02d6\u016c\2\u1840\u1841\5\u053e\u02a0\2\u1841\u1842\7`\2\2\u1842\u1843"+
		"\5\u053e\u02a0\2\u1843\u18f0\3\2\2\2\u1844\u1845\7\u008c\2\2\u1845\u1846"+
		"\7\u00fd\2\2\u1846\u1847\7\u0173\2\2\u1847\u1848\5\u053a\u029e\2\u1848"+
		"\u1849\7\u0130\2\2\u1849\u184a\5\u02d6\u016c\2\u184a\u184b\5\u053e\u02a0"+
		"\2\u184b\u184c\7`\2\2\u184c\u184d\5\u053e\u02a0\2\u184d\u18f0\3\2\2\2"+
		"\u184e\u184f\7\u008c\2\2\u184f\u1850\7\u00fd\2\2\u1850\u1851\7\u0173\2"+
		"\2\u1851\u1852\7\u00de\2\2\u1852\u1853\7\u0187\2\2\u1853\u1854\5\u053a"+
		"\u029e\2\u1854\u1855\7\u0130\2\2\u1855\u1856\5\u02d6\u016c\2\u1856\u1857"+
		"\5\u053e\u02a0\2\u1857\u1858\7`\2\2\u1858\u1859\5\u053e\u02a0\2\u1859"+
		"\u18f0\3\2\2\2\u185a\u185b\7\u008c\2\2\u185b\u185c\7^\2\2\u185c\u185d"+
		"\5\u0434\u021b\2\u185d\u185e\7\u0130\2\2\u185e\u185f\7/\2\2\u185f\u1860"+
		"\5\u053e\u02a0\2\u1860\u1861\7`\2\2\u1861\u1862\5\u053e\u02a0\2\u1862"+
		"\u18f0\3\2\2\2\u1863\u1864\7\u008c\2\2\u1864\u1865\7^\2\2\u1865\u1866"+
		"\7\u00de\2\2\u1866\u1867\7\u0187\2\2\u1867\u1868\5\u0434\u021b\2\u1868"+
		"\u1869\7\u0130\2\2\u1869\u186a\7/\2\2\u186a\u186b\5\u053e\u02a0\2\u186b"+
		"\u186c\7`\2\2\u186c\u186d\5\u053e\u02a0\2\u186d\u18f0\3\2\2\2\u186e\u186f"+
		"\7\u008c\2\2\u186f\u1870\7A\2\2\u1870\u1871\7^\2\2\u1871\u1872\5\u0434"+
		"\u021b\2\u1872\u1873\7\u0130\2\2\u1873\u1874\5\u02d6\u016c\2\u1874\u1875"+
		"\5\u053e\u02a0\2\u1875\u1876\7`\2\2\u1876\u1877\5\u053e\u02a0\2\u1877"+
		"\u18f0\3\2\2\2\u1878\u1879\7\u008c\2\2\u1879\u187a\7A\2\2\u187a\u187b"+
		"\7^\2\2\u187b\u187c\7\u00de\2\2\u187c\u187d\7\u0187\2\2\u187d\u187e\5"+
		"\u0434\u021b\2\u187e\u187f\7\u0130\2\2\u187f\u1880\5\u02d6\u016c\2\u1880"+
		"\u1881\5\u053e\u02a0\2\u1881\u1882\7`\2\2\u1882\u1883\5\u053e\u02a0\2"+
		"\u1883\u18f0\3\2\2\2\u1884\u1885\7\u008c\2\2\u1885\u1886\7\u013c\2\2\u1886"+
		"\u1887\5\u053e\u02a0\2\u1887\u1888\7R\2\2\u1888\u1889\5\u053a\u029e\2"+
		"\u1889\u188a\7\u0130\2\2\u188a\u188b\7`\2\2\u188b\u188c\5\u053e\u02a0"+
		"\2\u188c\u18f0\3\2\2\2\u188d\u188e\7\u008c\2\2\u188e\u188f\7\u0160\2\2"+
		"\u188f\u1890\5\u053e\u02a0\2\u1890\u1891\7R\2\2\u1891\u1892\5\u053a\u029e"+
		"\2\u1892\u1893\7\u0130\2\2\u1893\u1894\7`\2\2\u1894\u1895\5\u053e\u02a0"+
		"\2\u1895\u18f0\3\2\2\2\u1896\u1897\7\u008c\2\2\u1897\u1898\7\u00c8\2\2"+
		"\u1898\u1899\7\u0160\2\2\u1899\u189a\5\u053e\u02a0\2\u189a\u189b\7\u0130"+
		"\2\2\u189b\u189c\7`\2\2\u189c\u189d\5\u053e\u02a0\2\u189d\u18f0\3\2\2"+
		"\2\u189e\u189f\7\u008c\2\2\u189f\u18a0\7\u0139\2\2\u18a0\u18a1\5\u0558"+
		"\u02ad\2\u18a1\u18a2\7\u0130\2\2\u18a2\u18a3\7`\2\2\u18a3\u18a4\5\u0558"+
		"\u02ad\2\u18a4\u18f0\3\2\2\2\u18a5\u18a6\7\u008c\2\2\u18a6\u18a7\7e\2"+
		"\2\u18a7\u18a8\5\u0558\u02ad\2\u18a8\u18a9\7\u0130\2\2\u18a9\u18aa\7`"+
		"\2\2\u18aa\u18ab\5\u0558\u02ad\2\u18ab\u18f0\3\2\2\2\u18ac\u18ad\7\u008c"+
		"\2\2\u18ad\u18ae\7\u015a\2\2\u18ae\u18af\5\u053e\u02a0\2\u18af\u18b0\7"+
		"\u0130\2\2\u18b0\u18b1\7`\2\2\u18b1\u18b2\5\u053e\u02a0\2\u18b2\u18f0"+
		"\3\2\2\2\u18b3\u18b4\7\u008c\2\2\u18b4\u18b5\7\u0151\2\2\u18b5\u18b6\5"+
		"\u020e\u0108\2\u18b6\u18b7\7\u0130\2\2\u18b7\u18b8\7`\2\2\u18b8\u18b9"+
		"\5\u053e\u02a0\2\u18b9\u18f0\3\2\2\2\u18ba\u18bb\7\u008c\2\2\u18bb\u18bc"+
		"\7\u015e\2\2\u18bc\u18bd\7\u0140\2\2\u18bd\u18be\7\u0116\2\2\u18be\u18bf"+
		"\5\u020e\u0108\2\u18bf\u18c0\7\u0130\2\2\u18c0\u18c1\7`\2\2\u18c1\u18c2"+
		"\5\u053e\u02a0\2\u18c2\u18f0\3\2\2\2\u18c3\u18c4\7\u008c\2\2\u18c4\u18c5"+
		"\7\u015e\2\2\u18c5\u18c6\7\u0140\2\2\u18c6\u18c7\7\u00bb\2\2\u18c7\u18c8"+
		"\5\u020e\u0108\2\u18c8\u18c9\7\u0130\2\2\u18c9\u18ca\7`\2\2\u18ca\u18cb"+
		"\5\u053e\u02a0\2\u18cb\u18f0\3\2\2\2\u18cc\u18cd\7\u008c\2\2\u18cd\u18ce"+
		"\7\u015e\2\2\u18ce\u18cf\7\u0140\2\2\u18cf\u18d0\7\u015c\2\2\u18d0\u18d1"+
		"\5\u020e\u0108\2\u18d1\u18d2\7\u0130\2\2\u18d2\u18d3\7`\2\2\u18d3\u18d4"+
		"\5\u053e\u02a0\2\u18d4\u18f0\3\2\2\2\u18d5\u18d6\7\u008c\2\2\u18d6\u18d7"+
		"\7\u015e\2\2\u18d7\u18d8\7\u0140\2\2\u18d8\u18d9\7\u00a5\2\2\u18d9\u18da"+
		"\5\u020e\u0108\2\u18da\u18db\7\u0130\2\2\u18db\u18dc\7`\2\2\u18dc\u18dd"+
		"\5\u053e\u02a0\2\u18dd\u18f0\3\2\2\2\u18de\u18df\7\u008c\2\2\u18df\u18e0"+
		"\7\u0163\2\2\u18e0\u18e1\5\u020e\u0108\2\u18e1\u18e2\7\u0130\2\2\u18e2"+
		"\u18e3\7`\2\2\u18e3\u18e4\5\u053e\u02a0\2\u18e4\u18f0\3\2\2\2\u18e5\u18e6"+
		"\7\u008c\2\2\u18e6\u18e7\7\u0163\2\2\u18e7\u18e8\5\u020e\u0108\2\u18e8"+
		"\u18e9\7\u0130\2\2\u18e9\u18ea\7\u0091\2\2\u18ea\u18eb\5\u053e\u02a0\2"+
		"\u18eb\u18ec\7`\2\2\u18ec\u18ed\5\u053e\u02a0\2\u18ed\u18ee\5n8\2\u18ee"+
		"\u18f0\3\2\2\2\u18ef\u171b\3\2\2\2\u18ef\u1722\3\2\2\2\u18ef\u1729\3\2"+
		"\2\2\u18ef\u1730\3\2\2\2\u18ef\u1737\3\2\2\2\u18ef\u173e\3\2\2\2\u18ef"+
		"\u1747\3\2\2\2\u18ef\u1750\3\2\2\2\u18ef\u1757\3\2\2\2\u18ef\u175e\3\2"+
		"\2\2\u18ef\u1766\3\2\2\2\u18ef\u1770\3\2\2\2\u18ef\u177a\3\2\2\2\u18ef"+
		"\u1783\3\2\2\2\u18ef\u178e\3\2\2\2\u18ef\u1795\3\2\2\2\u18ef\u179c\3\2"+
		"\2\2\u18ef\u17a3\3\2\2\2\u18ef\u17aa\3\2\2\2\u18ef\u17b1\3\2\2\2\u18ef"+
		"\u17b8\3\2\2\2\u18ef\u17bf\3\2\2\2\u18ef\u17c8\3\2\2\2\u18ef\u17cf\3\2"+
		"\2\2\u18ef\u17d8\3\2\2\2\u18ef\u17df\3\2\2\2\u18ef\u17e8\3\2\2\2\u18ef"+
		"\u17f0\3\2\2\2\u18ef\u17fa\3\2\2\2\u18ef\u1801\3\2\2\2\u18ef\u180a\3\2"+
		"\2\2\u18ef\u1812\3\2\2\2\u18ef\u181c\3\2\2\2\u18ef\u1825\3\2\2\2\u18ef"+
		"\u1830\3\2\2\2\u18ef\u1839\3\2\2\2\u18ef\u1844\3\2\2\2\u18ef\u184e\3\2"+
		"\2\2\u18ef\u185a\3\2\2\2\u18ef\u1863\3\2\2\2\u18ef\u186e\3\2\2\2\u18ef"+
		"\u1878\3\2\2\2\u18ef\u1884\3\2\2\2\u18ef\u188d\3\2\2\2\u18ef\u1896\3\2"+
		"\2\2\u18ef\u189e\3\2\2\2\u18ef\u18a5\3\2\2\2\u18ef\u18ac\3\2\2\2\u18ef"+
		"\u18b3\3\2\2\2\u18ef\u18ba\3\2\2\2\u18ef\u18c3\3\2\2\2\u18ef\u18cc\3\2"+
		"\2\2\u18ef\u18d5\3\2\2\2\u18ef\u18de\3\2\2\2\u18ef\u18e5\3\2\2\2\u18f0"+
		"\u02d5\3\2\2\2\u18f1\u18f4\7.\2\2\u18f2\u18f4\3\2\2\2\u18f3\u18f1\3\2"+
		"\2\2\u18f3\u18f2\3\2\2\2\u18f4\u02d7\3\2\2\2\u18f5\u18f6\7\u0148\2\2\u18f6"+
		"\u18f9\7\u00b0\2\2\u18f7\u18f9\3\2\2\2\u18f8\u18f5\3\2\2\2\u18f8\u18f7"+
		"\3\2\2\2\u18f9\u02d9\3\2\2\2\u18fa\u18fb\7\u008c\2\2\u18fb\u18fc\7\u00d5"+
		"\2\2\u18fc\u18fd\5\u0274\u013b\2\u18fd\u18fe\5\u02dc\u016f\2\u18fe\u18ff"+
		"\7\u01d0\2\2\u18ff\u1900\7R\2\2\u1900\u1901\7\u00ce\2\2\u1901\u1902\5"+
		"\u053e\u02a0\2\u1902\u1934\3\2\2\2\u1903\u1904\7\u008c\2\2\u1904\u1905"+
		"\7\u0123\2\2\u1905\u1906\5\u0274\u013b\2\u1906\u1907\5\u02dc\u016f\2\u1907"+
		"\u1908\7\u01d0\2\2\u1908\u1909\7R\2\2\u1909\u190a\7\u00ce\2\2\u190a\u190b"+
		"\5\u053e\u02a0\2\u190b\u1934\3\2\2\2\u190c\u190d\7\u008c\2\2\u190d\u190e"+
		"\7\u01bc\2\2\u190e\u190f\5\u0274\u013b\2\u190f\u1910\5\u02dc\u016f\2\u1910"+
		"\u1911\7\u01d0\2\2\u1911\u1912\7R\2\2\u1912\u1913\7\u00ce\2\2\u1913\u1914"+
		"\5\u053e\u02a0\2\u1914\u1934\3\2\2\2\u1915\u1916\7\u008c\2\2\u1916\u1917"+
		"\7\u0160\2\2\u1917\u1918\5\u053e\u02a0\2\u1918\u1919\7R\2\2\u1919\u191a"+
		"\5\u053a\u029e\2\u191a\u191b\5\u02dc\u016f\2\u191b\u191c\7\u01d0\2\2\u191c"+
		"\u191d\7R\2\2\u191d\u191e\7\u00ce\2\2\u191e\u191f\5\u053e\u02a0\2\u191f"+
		"\u1934\3\2\2\2\u1920\u1921\7\u008c\2\2\u1921\u1922\7\u00fd\2\2\u1922\u1923"+
		"\7\u0173\2\2\u1923\u1924\5\u053a\u029e\2\u1924\u1925\5\u02dc\u016f\2\u1925"+
		"\u1926\7\u01d0\2\2\u1926\u1927\7R\2\2\u1927\u1928\7\u00ce\2\2\u1928\u1929"+
		"\5\u053e\u02a0\2\u1929\u1934\3\2\2\2\u192a\u192b\7\u008c\2\2\u192b\u192c"+
		"\7\u00e4\2\2\u192c\u192d\5\u053a\u029e\2\u192d\u192e\5\u02dc\u016f\2\u192e"+
		"\u192f\7\u01d0\2\2\u192f\u1930\7R\2\2\u1930\u1931\7\u00ce\2\2\u1931\u1932"+
		"\5\u053e\u02a0\2\u1932\u1934\3\2\2\2\u1933\u18fa\3\2\2\2\u1933\u1903\3"+
		"\2\2\2\u1933\u190c\3\2\2\2\u1933\u1915\3\2\2\2\u1933\u1920\3\2\2\2\u1933"+
		"\u192a\3\2\2\2\u1934\u02db\3\2\2\2\u1935\u1938\7\u0108\2\2\u1936\u1938"+
		"\3\2\2\2\u1937\u1935\3\2\2\2\u1937\u1936\3\2\2\2\u1938\u02dd\3\2\2\2\u1939"+
		"\u193a\7\u008c\2\2\u193a\u193b\7\u008a\2\2\u193b\u193c\5\u028c\u0147\2"+
		"\u193c\u193d\7\u0148\2\2\u193d\u193e\7\u013e\2\2\u193e\u193f\5\u053e\u02a0"+
		"\2\u193f\u1a13\3\2\2\2\u1940\u1941\7\u008c\2\2\u1941\u1942\7n\2\2\u1942"+
		"\u1943\5\u020e\u0108\2\u1943\u1944\7\u0148\2\2\u1944\u1945\7\u013e\2\2"+
		"\u1945\u1946\5\u053e\u02a0\2\u1946\u1a13\3\2\2\2\u1947\u1948\7\u008c\2"+
		"\2\u1948\u1949\7\u00aa\2\2\u1949\u194a\5\u020e\u0108\2\u194a\u194b\7\u0148"+
		"\2\2\u194b\u194c\7\u013e\2\2\u194c\u194d\5\u053e\u02a0\2\u194d\u1a13\3"+
		"\2\2\2\u194e\u194f\7\u008c\2\2\u194f\u1950\7\u00bf\2\2\u1950\u1951\5\u020e"+
		"\u0108\2\u1951\u1952\7\u0148\2\2\u1952\u1953\7\u013e\2\2\u1953\u1954\5"+
		"\u053e\u02a0\2\u1954\u1a13\3\2\2\2\u1955\u1956\7\u008c\2\2\u1956\u1957"+
		"\7\u00ce\2\2\u1957\u1958\5\u053e\u02a0\2\u1958\u1959\7\u0148\2\2\u1959"+
		"\u195a\7\u013e\2\2\u195a\u195b\5\u053e\u02a0\2\u195b\u1a13\3\2\2\2\u195c"+
		"\u195d\7\u008c\2\2\u195d\u195e\7\u00d5\2\2\u195e\u195f\5\u0274\u013b\2"+
		"\u195f\u1960\7\u0148\2\2\u1960\u1961\7\u013e\2\2\u1961\u1962\5\u053e\u02a0"+
		"\2\u1962\u1a13\3\2\2\2\u1963\u1964\7\u008c\2\2\u1964\u1965\7\u0111\2\2"+
		"\u1965\u1966\5\u02b2\u015a\2\u1966\u1967\7\u0148\2\2\u1967\u1968\7\u013e"+
		"\2\2\u1968\u1969\5\u053e\u02a0\2\u1969\u1a13\3\2\2\2\u196a\u196b\7\u008c"+
		"\2\2\u196b\u196c\7\u0111\2\2\u196c\u196d\7\u009e\2\2\u196d\u196e\5\u020e"+
		"\u0108\2\u196e\u196f\7f\2\2\u196f\u1970\5\u053e\u02a0\2\u1970\u1971\7"+
		"\u0148\2\2\u1971\u1972\7\u013e\2\2\u1972\u1973\5\u053e\u02a0\2\u1973\u1a13"+
		"\3\2\2\2\u1974\u1975\7\u008c\2\2\u1975\u1976\7\u0111\2\2\u1976\u1977\7"+
		"\u00d0\2\2\u1977\u1978\5\u020e\u0108\2\u1978\u1979\7f\2\2\u1979\u197a"+
		"\5\u053e\u02a0\2\u197a\u197b\7\u0148\2\2\u197b\u197c\7\u013e\2\2\u197c"+
		"\u197d\5\u053e\u02a0\2\u197d\u1a13\3\2\2\2\u197e\u197f\7\u008c\2\2\u197f"+
		"\u1980\7\u0123\2\2\u1980\u1981\5\u0274\u013b\2\u1981\u1982\7\u0148\2\2"+
		"\u1982\u1983\7\u013e\2\2\u1983\u1984\5\u053e\u02a0\2\u1984\u1a13\3\2\2"+
		"\2\u1985\u1986\7\u008c\2\2\u1986\u1987\7\u01bc\2\2\u1987\u1988\5\u0274"+
		"\u013b\2\u1988\u1989\7\u0148\2\2\u1989\u198a\7\u013e\2\2\u198a\u198b\5"+
		"\u053e\u02a0\2\u198b\u1a13\3\2\2\2\u198c\u198d\7\u008c\2\2\u198d\u198e"+
		"\7^\2\2\u198e\u198f\5\u0434\u021b\2\u198f\u1990\7\u0148\2\2\u1990\u1991"+
		"\7\u013e\2\2\u1991\u1992\5\u053e\u02a0\2\u1992\u1a13\3\2\2\2\u1993\u1994"+
		"\7\u008c\2\2\u1994\u1995\7^\2\2\u1995\u1996\7\u00de\2\2\u1996\u1997\7"+
		"\u0187\2\2\u1997\u1998\5\u0434\u021b\2\u1998\u1999\7\u0148\2\2\u1999\u199a"+
		"\7\u013e\2\2\u199a\u199b\5\u053e\u02a0\2\u199b\u1a13\3\2\2\2\u199c\u199d"+
		"\7\u008c\2\2\u199d\u199e\7\u0151\2\2\u199e\u199f\5\u020e\u0108\2\u199f"+
		"\u19a0\7\u0148\2\2\u19a0\u19a1\7\u013e\2\2\u19a1\u19a2\5\u053e\u02a0\2"+
		"\u19a2\u1a13\3\2\2\2\u19a3\u19a4\7\u008c\2\2\u19a4\u19a5\7\u015e\2\2\u19a5"+
		"\u19a6\7\u0140\2\2\u19a6\u19a7\7\u0116\2\2\u19a7\u19a8\5\u020e\u0108\2"+
		"\u19a8\u19a9\7\u0148\2\2\u19a9\u19aa\7\u013e\2\2\u19aa\u19ab\5\u053e\u02a0"+
		"\2\u19ab\u1a13\3\2\2\2\u19ac\u19ad\7\u008c\2\2\u19ad\u19ae\7\u015e\2\2"+
		"\u19ae\u19af\7\u0140\2\2\u19af\u19b0\7\u00bb\2\2\u19b0\u19b1\5\u020e\u0108"+
		"\2\u19b1\u19b2\7\u0148\2\2\u19b2\u19b3\7\u013e\2\2\u19b3\u19b4\5\u053e"+
		"\u02a0\2\u19b4\u1a13\3\2\2\2\u19b5\u19b6\7\u008c\2\2\u19b6\u19b7\7\u015e"+
		"\2\2\u19b7\u19b8\7\u0140\2\2\u19b8\u19b9\7\u015c\2\2\u19b9\u19ba\5\u020e"+
		"\u0108\2\u19ba\u19bb\7\u0148\2\2\u19bb\u19bc\7\u013e\2\2\u19bc\u19bd\5"+
		"\u053e\u02a0\2\u19bd\u1a13\3\2\2\2\u19be\u19bf\7\u008c\2\2\u19bf\u19c0"+
		"\7\u015e\2\2\u19c0\u19c1\7\u0140\2\2\u19c1\u19c2\7\u00a5\2\2\u19c2\u19c3"+
		"\5\u020e\u0108\2\u19c3\u19c4\7\u0148\2\2\u19c4\u19c5\7\u013e\2\2\u19c5"+
		"\u19c6\5\u053e\u02a0\2\u19c6\u1a13\3\2\2\2\u19c7\u19c8\7\u008c\2\2\u19c8"+
		"\u19c9\7\u0143\2\2\u19c9\u19ca\5\u053a\u029e\2\u19ca\u19cb\7\u0148\2\2"+
		"\u19cb\u19cc\7\u013e\2\2\u19cc\u19cd\5\u053e\u02a0\2\u19cd\u1a13\3\2\2"+
		"\2\u19ce\u19cf\7\u008c\2\2\u19cf\u19d0\7\u0143\2\2\u19d0\u19d1\7\u00de"+
		"\2\2\u19d1\u19d2\7\u0187\2\2\u19d2\u19d3\5\u053a\u029e\2\u19d3\u19d4\7"+
		"\u0148\2\2\u19d4\u19d5\7\u013e\2\2\u19d5\u19d6\5\u053e\u02a0\2\u19d6\u1a13"+
		"\3\2\2\2\u19d7\u19d8\7\u008c\2\2\u19d8\u19d9\7\u0173\2\2\u19d9\u19da\5"+
		"\u053a\u029e\2\u19da\u19db\7\u0148\2\2\u19db\u19dc\7\u013e\2\2\u19dc\u19dd"+
		"\5\u053e\u02a0\2\u19dd\u1a13\3\2\2\2\u19de\u19df\7\u008c\2\2\u19df\u19e0"+
		"\7\u0173\2\2\u19e0\u19e1\7\u00de\2\2\u19e1\u19e2\7\u0187\2\2\u19e2\u19e3"+
		"\5\u053a\u029e\2\u19e3\u19e4\7\u0148\2\2\u19e4\u19e5\7\u013e\2\2\u19e5"+
		"\u19e6\5\u053e\u02a0\2\u19e6\u1a13\3\2\2\2\u19e7\u19e8\7\u008c\2\2\u19e8"+
		"\u19e9\7\u00fd\2\2\u19e9\u19ea\7\u0173\2\2\u19ea\u19eb\5\u053a\u029e\2"+
		"\u19eb\u19ec\7\u0148\2\2\u19ec\u19ed\7\u013e\2\2\u19ed\u19ee\5\u053e\u02a0"+
		"\2\u19ee\u1a13\3\2\2\2\u19ef\u19f0\7\u008c\2\2\u19f0\u19f1\7\u00fd\2\2"+
		"\u19f1\u19f2\7\u0173\2\2\u19f2\u19f3\7\u00de\2\2\u19f3\u19f4\7\u0187\2"+
		"\2\u19f4\u19f5\5\u053a\u029e\2\u19f5\u19f6\7\u0148\2\2\u19f6\u19f7\7\u013e"+
		"\2\2\u19f7\u19f8\5\u053e\u02a0\2\u19f8\u1a13\3\2\2\2\u19f9\u19fa\7\u008c"+
		"\2\2\u19fa\u19fb\7A\2\2\u19fb\u19fc\7^\2\2\u19fc\u19fd\5\u0434\u021b\2"+
		"\u19fd\u19fe\7\u0148\2\2\u19fe\u19ff\7\u013e\2\2\u19ff\u1a00\5\u053e\u02a0"+
		"\2\u1a00\u1a13\3\2\2\2\u1a01\u1a02\7\u008c\2\2\u1a02\u1a03\7A\2\2\u1a03"+
		"\u1a04\7^\2\2\u1a04\u1a05\7\u00de\2\2\u1a05\u1a06\7\u0187\2\2\u1a06\u1a07"+
		"\5\u0434\u021b\2\u1a07\u1a08\7\u0148\2\2\u1a08\u1a09\7\u013e\2\2\u1a09"+
		"\u1a0a\5\u053e\u02a0\2\u1a0a\u1a13\3\2\2\2\u1a0b\u1a0c\7\u008c\2\2\u1a0c"+
		"\u1a0d\7\u0163\2\2\u1a0d\u1a0e\5\u020e\u0108\2\u1a0e\u1a0f\7\u0148\2\2"+
		"\u1a0f\u1a10\7\u013e\2\2\u1a10\u1a11\5\u053e\u02a0\2\u1a11\u1a13\3\2\2"+
		"\2\u1a12\u1939\3\2\2\2\u1a12\u1940\3\2\2\2\u1a12\u1947\3\2\2\2\u1a12\u194e"+
		"\3\2\2\2\u1a12\u1955\3\2\2\2\u1a12\u195c\3\2\2\2\u1a12\u1963\3\2\2\2\u1a12"+
		"\u196a\3\2\2\2\u1a12\u1974\3\2\2\2\u1a12\u197e\3\2\2\2\u1a12\u1985\3\2"+
		"\2\2\u1a12\u198c\3\2\2\2\u1a12\u1993\3\2\2\2\u1a12\u199c\3\2\2\2\u1a12"+
		"\u19a3\3\2\2\2\u1a12\u19ac\3\2\2\2\u1a12\u19b5\3\2\2\2\u1a12\u19be\3\2"+
		"\2\2\u1a12\u19c7\3\2\2\2\u1a12\u19ce\3\2\2\2\u1a12\u19d7\3\2\2\2\u1a12"+
		"\u19de\3\2\2\2\u1a12\u19e7\3\2\2\2\u1a12\u19ef\3\2\2\2\u1a12\u19f9\3\2"+
		"\2\2\u1a12\u1a01\3\2\2\2\u1a12\u1a0b\3\2\2\2\u1a13\u02df\3\2\2\2\u1a14"+
		"\u1a15\7\u008c\2\2\u1a15\u1a16\7\u0111\2\2\u1a16\u1a17\5\u02b2\u015a\2"+
		"\u1a17\u1a18\7\u0148\2\2\u1a18\u1a19\7\4\2\2\u1a19\u1a1a\5\u02e2\u0172"+
		"\2\u1a1a\u1a1b\7\5\2\2\u1a1b\u02e1\3\2\2\2\u1a1c\u1a21\5\u02e4\u0173\2"+
		"\u1a1d\u1a1e\7\b\2\2\u1a1e\u1a20\5\u02e4\u0173\2\u1a1f\u1a1d\3\2\2\2\u1a20"+
		"\u1a23\3\2\2\2\u1a21\u1a1f\3\2\2\2\u1a21\u1a22\3\2\2\2\u1a22\u02e3\3\2"+
		"\2\2\u1a23\u1a21\3\2\2\2\u1a24\u1a25\5\u0564\u02b3\2\u1a25\u1a26\7\f\2"+
		"\2\u1a26\u1a27\7\u0192\2\2\u1a27\u1a2d\3\2\2\2\u1a28\u1a29\5\u0564\u02b3"+
		"\2\u1a29\u1a2a\7\f\2\2\u1a2a\u1a2b\5\u02e6\u0174\2\u1a2b\u1a2d\3\2\2\2"+
		"\u1a2c\u1a24\3\2\2\2\u1a2c\u1a28\3\2\2\2\u1a2d\u02e5\3\2\2\2\u1a2e\u1a34"+
		"\5\u0282\u0142\2\u1a2f\u1a34\5\u0570\u02b9\2\u1a30\u1a34\5\u04fe\u0280"+
		"\2\u1a31\u1a34\5\u0126\u0094\2\u1a32\u1a34\5\u0550\u02a9\2\u1a33\u1a2e"+
		"\3\2\2\2\u1a33\u1a2f\3\2\2\2\u1a33\u1a30\3\2\2\2\u1a33\u1a31\3\2\2\2\u1a33"+
		"\u1a32\3\2\2\2\u1a34\u02e7\3\2\2\2\u1a35\u1a36\7\u008c\2\2\u1a36\u1a37"+
		"\7\u0163\2\2\u1a37\u1a38\5\u020e\u0108\2\u1a38\u1a39\7\u0148\2\2\u1a39"+
		"\u1a3a\7\4\2\2\u1a3a\u1a3b\5\u02e2\u0172\2\u1a3b\u1a3c\7\5\2\2\u1a3c\u02e9"+
		"\3\2\2\2\u1a3d\u1a3e\7\u008c\2\2\u1a3e\u1a3f\7\u008a\2\2\u1a3f\u1a40\5"+
		"\u028c\u0147\2\u1a40\u1a41\7\u0115\2\2\u1a41\u1a42\7`\2\2\u1a42\u1a43"+
		"\5\u055a\u02ae\2\u1a43\u1af5\3\2\2\2\u1a44\u1a45\7\u008c\2\2\u1a45\u1a46"+
		"\7n\2\2\u1a46\u1a47\5\u020e\u0108\2\u1a47\u1a48\7\u0115\2\2\u1a48\u1a49"+
		"\7`\2\2\u1a49\u1a4a\5\u055a\u02ae\2\u1a4a\u1af5\3\2\2\2\u1a4b\u1a4c\7"+
		"\u008c\2\2\u1a4c\u1a4d\7\u00aa\2\2\u1a4d\u1a4e\5\u020e\u0108\2\u1a4e\u1a4f"+
		"\7\u0115\2\2\u1a4f\u1a50\7`\2\2\u1a50\u1a51\5\u055a\u02ae\2\u1a51\u1af5"+
		"\3\2\2\2\u1a52\u1a53\7\u008c\2\2\u1a53\u1a54\7\u00b1\2\2\u1a54\u1a55\5"+
		"\u053e\u02a0\2\u1a55\u1a56\7\u0115\2\2\u1a56\u1a57\7`\2\2\u1a57\u1a58"+
		"\5\u055a\u02ae\2\u1a58\u1af5\3\2\2\2\u1a59\u1a5a\7\u008c\2\2\u1a5a\u1a5b"+
		"\7\u00bf\2\2\u1a5b\u1a5c\5\u020e\u0108\2\u1a5c\u1a5d\7\u0115\2\2\u1a5d"+
		"\u1a5e\7`\2\2\u1a5e\u1a5f\5\u055a\u02ae\2\u1a5f\u1af5\3\2\2\2\u1a60\u1a61"+
		"\7\u008c\2\2\u1a61\u1a62\7\u00d5\2\2\u1a62\u1a63\5\u0274\u013b\2\u1a63"+
		"\u1a64\7\u0115\2\2\u1a64\u1a65\7`\2\2\u1a65\u1a66\5\u055a\u02ae\2\u1a66"+
		"\u1af5\3\2\2\2\u1a67\u1a68\7\u008c\2\2\u1a68\u1a69\5\u0136\u009c\2\u1a69"+
		"\u1a6a\7\u00f0\2\2\u1a6a\u1a6b\5\u053e\u02a0\2\u1a6b\u1a6c\7\u0115\2\2"+
		"\u1a6c\u1a6d\7`\2\2\u1a6d\u1a6e\5\u055a\u02ae\2\u1a6e\u1af5\3\2\2\2\u1a6f"+
		"\u1a70\7\u008c\2\2\u1a70\u1a71\7\u00f1\2\2\u1a71\u1a72\7\u010d\2\2\u1a72"+
		"\u1a73\5\u0126\u0094\2\u1a73\u1a74\7\u0115\2\2\u1a74\u1a75\7`\2\2\u1a75"+
		"\u1a76\5\u055a\u02ae\2\u1a76\u1af5\3\2\2\2\u1a77\u1a78\7\u008c\2\2\u1a78"+
		"\u1a79\7\u0111\2\2\u1a79\u1a7a\5\u02b2\u015a\2\u1a7a\u1a7b\7\u0115\2\2"+
		"\u1a7b\u1a7c\7`\2\2\u1a7c\u1a7d\5\u055a\u02ae\2\u1a7d\u1af5\3\2\2\2\u1a7e"+
		"\u1a7f\7\u008c\2\2\u1a7f\u1a80\7\u0111\2\2\u1a80\u1a81\7\u009e\2\2\u1a81"+
		"\u1a82\5\u020e\u0108\2\u1a82\u1a83\7f\2\2\u1a83\u1a84\5\u053e\u02a0\2"+
		"\u1a84\u1a85\7\u0115\2\2\u1a85\u1a86\7`\2\2\u1a86\u1a87\5\u055a\u02ae"+
		"\2\u1a87\u1af5\3\2\2\2\u1a88\u1a89\7\u008c\2\2\u1a89\u1a8a\7\u0111\2\2"+
		"\u1a8a\u1a8b\7\u00d0\2\2\u1a8b\u1a8c\5\u020e\u0108\2\u1a8c\u1a8d\7f\2"+
		"\2\u1a8d\u1a8e\5\u053e\u02a0\2\u1a8e\u1a8f\7\u0115\2\2\u1a8f\u1a90\7`"+
		"\2\2\u1a90\u1a91\5\u055a\u02ae\2\u1a91\u1af5\3\2\2\2\u1a92\u1a93\7\u008c"+
		"\2\2\u1a93\u1a94\7\u0123\2\2\u1a94\u1a95\5\u0274\u013b\2\u1a95\u1a96\7"+
		"\u0115\2\2\u1a96\u1a97\7`\2\2\u1a97\u1a98\5\u055a\u02ae\2\u1a98\u1af5"+
		"\3\2\2\2\u1a99\u1a9a\7\u008c\2\2\u1a9a\u1a9b\7\u01bc\2\2\u1a9b\u1a9c\5"+
		"\u0274\u013b\2\u1a9c\u1a9d\7\u0115\2\2\u1a9d\u1a9e\7`\2\2\u1a9e\u1a9f"+
		"\5\u055a\u02ae\2\u1a9f\u1af5\3\2\2\2\u1aa0\u1aa1\7\u008c\2\2\u1aa1\u1aa2"+
		"\7\u013e\2\2\u1aa2\u1aa3\5\u053e\u02a0\2\u1aa3\u1aa4\7\u0115\2\2\u1aa4"+
		"\u1aa5\7`\2\2\u1aa5\u1aa6\5\u055a\u02ae\2\u1aa6\u1af5\3\2\2\2\u1aa7\u1aa8"+
		"\7\u008c\2\2\u1aa8\u1aa9\7\u0163\2\2\u1aa9\u1aaa\5\u020e\u0108\2\u1aaa"+
		"\u1aab\7\u0115\2\2\u1aab\u1aac\7`\2\2\u1aac\u1aad\5\u055a\u02ae\2\u1aad"+
		"\u1af5\3\2\2\2\u1aae\u1aaf\7\u008c\2\2\u1aaf\u1ab0\7\u015a\2\2\u1ab0\u1ab1"+
		"\5\u053e\u02a0\2\u1ab1\u1ab2\7\u0115\2\2\u1ab2\u1ab3\7`\2\2\u1ab3\u1ab4"+
		"\5\u055a\u02ae\2\u1ab4\u1af5\3\2\2\2\u1ab5\u1ab6\7\u008c\2\2\u1ab6\u1ab7"+
		"\7\u0151\2\2\u1ab7\u1ab8\5\u020e\u0108\2\u1ab8\u1ab9\7\u0115\2\2\u1ab9"+
		"\u1aba\7`\2\2\u1aba\u1abb\5\u055a\u02ae\2\u1abb\u1af5\3\2\2\2\u1abc\u1abd"+
		"\7\u008c\2\2\u1abd\u1abe\7\u015e\2\2\u1abe\u1abf\7\u0140\2\2\u1abf\u1ac0"+
		"\7\u00bb\2\2\u1ac0\u1ac1\5\u020e\u0108\2\u1ac1\u1ac2\7\u0115\2\2\u1ac2"+
		"\u1ac3\7`\2\2\u1ac3\u1ac4\5\u055a\u02ae\2\u1ac4\u1af5\3\2\2\2\u1ac5\u1ac6"+
		"\7\u008c\2\2\u1ac6\u1ac7\7\u015e\2\2\u1ac7\u1ac8\7\u0140\2\2\u1ac8\u1ac9"+
		"\7\u00a5\2\2\u1ac9\u1aca\5\u020e\u0108\2\u1aca\u1acb\7\u0115\2\2\u1acb"+
		"\u1acc\7`\2\2\u1acc\u1acd\5\u055a\u02ae\2\u1acd\u1af5\3\2\2\2\u1ace\u1acf"+
		"\7\u008c\2\2\u1acf\u1ad0\7A\2\2\u1ad0\u1ad1\7\u00b0\2\2\u1ad1\u1ad2\7"+
		"\u0178\2\2\u1ad2\u1ad3\5\u053e\u02a0\2\u1ad3\u1ad4\7\u0115\2\2\u1ad4\u1ad5"+
		"\7`\2\2\u1ad5\u1ad6\5\u055a\u02ae\2\u1ad6\u1af5\3\2\2\2\u1ad7\u1ad8\7"+
		"\u008c\2\2\u1ad8\u1ad9\7\u0146\2\2\u1ad9\u1ada\5\u053e\u02a0\2\u1ada\u1adb"+
		"\7\u0115\2\2\u1adb\u1adc\7`\2\2\u1adc\u1add\5\u055a\u02ae\2\u1add\u1af5"+
		"\3\2\2\2\u1ade\u1adf\7\u008c\2\2\u1adf\u1ae0\7\u00c8\2\2\u1ae0\u1ae1\7"+
		"\u0160\2\2\u1ae1\u1ae2\5\u053e\u02a0\2\u1ae2\u1ae3\7\u0115\2\2\u1ae3\u1ae4"+
		"\7`\2\2\u1ae4\u1ae5\5\u055a\u02ae\2\u1ae5\u1af5\3\2\2\2\u1ae6\u1ae7\7"+
		"\u008c\2\2\u1ae7\u1ae8\7\u01c6\2\2\u1ae8\u1ae9\5\u053e\u02a0\2\u1ae9\u1aea"+
		"\7\u0115\2\2\u1aea\u1aeb\7`\2\2\u1aeb\u1aec\5\u055a\u02ae\2\u1aec\u1af5"+
		"\3\2\2\2\u1aed\u1aee\7\u008c\2\2\u1aee\u1aef\7\u01c5\2\2\u1aef\u1af0\5"+
		"\u053e\u02a0\2\u1af0\u1af1\7\u0115\2\2\u1af1\u1af2\7`\2\2\u1af2\u1af3"+
		"\5\u055a\u02ae\2\u1af3\u1af5\3\2\2\2\u1af4\u1a3d\3\2\2\2\u1af4\u1a44\3"+
		"\2\2\2\u1af4\u1a4b\3\2\2\2\u1af4\u1a52\3\2\2\2\u1af4\u1a59\3\2\2\2\u1af4"+
		"\u1a60\3\2\2\2\u1af4\u1a67\3\2\2\2\u1af4\u1a6f\3\2\2\2\u1af4\u1a77\3\2"+
		"\2\2\u1af4\u1a7e\3\2\2\2\u1af4\u1a88\3\2\2\2\u1af4\u1a92\3\2\2\2\u1af4"+
		"\u1a99\3\2\2\2\u1af4\u1aa0\3\2\2\2\u1af4\u1aa7\3\2\2\2\u1af4\u1aae\3\2"+
		"\2\2\u1af4\u1ab5\3\2\2\2\u1af4\u1abc\3\2\2\2\u1af4\u1ac5\3\2\2\2\u1af4"+
		"\u1ace\3\2\2\2\u1af4\u1ad7\3\2\2\2\u1af4\u1ade\3\2\2\2\u1af4\u1ae6\3\2"+
		"\2\2\u1af4\u1aed\3\2\2\2\u1af5\u02eb\3\2\2\2\u1af6\u1af7\7\60\2\2\u1af7"+
		"\u1af8\7\u01c6\2\2\u1af8\u1af9\5\u053e\u02a0\2\u1af9\u1afa\5\u02ee\u0178";
	private static final String _serializedATNSegment3 =
		"\2\u1afa\u1afb\5\u029a\u014e\2\u1afb\u02ed\3\2\2\2\u1afc\u1aff\5\u02f0"+
		"\u0179\2\u1afd\u1aff\3\2\2\2\u1afe\u1afc\3\2\2\2\u1afe\u1afd\3\2\2\2\u1aff"+
		"\u02ef\3\2\2\2\u1b00\u1b01\7@\2\2\u1b01\u1b02\7^\2\2\u1b02\u1b07\5\u0436"+
		"\u021c\2\u1b03\u1b04\7@\2\2\u1b04\u1b05\7 \2\2\u1b05\u1b07\7\u0159\2\2"+
		"\u1b06\u1b00\3\2\2\2\u1b06\u1b03\3\2\2\2\u1b07\u02f1\3\2\2\2\u1b08\u1b09"+
		"\7\u008c\2\2\u1b09\u1b0a\7\u01c6\2\2\u1b0a\u1b0b\5\u053e\u02a0\2\u1b0b"+
		"\u1b0c\7\u0148\2\2\u1b0c\u1b0d\5\u01ce\u00e8\2\u1b0d\u1b24\3\2\2\2\u1b0e"+
		"\u1b0f\7\u008c\2\2\u1b0f\u1b10\7\u01c6\2\2\u1b10\u1b11\5\u053e\u02a0\2"+
		"\u1b11\u1b12\7\u0087\2\2\u1b12\u1b13\7^\2\2\u1b13\u1b14\5\u0436\u021c"+
		"\2\u1b14\u1b24\3\2\2\2\u1b15\u1b16\7\u008c\2\2\u1b16\u1b17\7\u01c6\2\2"+
		"\u1b17\u1b18\5\u053e\u02a0\2\u1b18\u1b19\7\u0148\2\2\u1b19\u1b1a\7^\2"+
		"\2\u1b1a\u1b1b\5\u0436\u021c\2\u1b1b\u1b24\3\2\2\2\u1b1c\u1b1d\7\u008c"+
		"\2\2\u1b1d\u1b1e\7\u01c6\2\2\u1b1e\u1b1f\5\u053e\u02a0\2\u1b1f\u1b20\7"+
		"\u00c1\2\2\u1b20\u1b21\7^\2\2\u1b21\u1b22\5\u0436\u021c\2\u1b22\u1b24"+
		"\3\2\2\2\u1b23\u1b08\3\2\2\2\u1b23\u1b0e\3\2\2\2\u1b23\u1b15\3\2\2\2\u1b23"+
		"\u1b1c\3\2\2\2\u1b24\u02f3\3\2\2\2\u1b25\u1b26\7\60\2\2\u1b26\u1b27\7"+
		"\u01c5\2\2\u1b27\u1b28\5\u053e\u02a0\2\u1b28\u1b29\7\u00a6\2\2\u1b29\u1b2a"+
		"\5\u0550\u02a9\2\u1b2a\u1b2b\7\u01c6\2\2\u1b2b\u1b2c\5\u02f6\u017c\2\u1b2c"+
		"\u1b2d\5\u029a\u014e\2\u1b2d\u02f5\3\2\2\2\u1b2e\u1b33\5\u02f8\u017d\2"+
		"\u1b2f\u1b30\7\b\2\2\u1b30\u1b32\5\u02f8\u017d\2\u1b31\u1b2f\3\2\2\2\u1b32"+
		"\u1b35\3\2\2\2\u1b33\u1b31\3\2\2\2\u1b33\u1b34\3\2\2\2\u1b34\u02f7\3\2"+
		"\2\2\u1b35\u1b33\3\2\2\2\u1b36\u1b37\5\u0564\u02b3\2\u1b37\u02f9\3\2\2"+
		"\2\u1b38\u1b39\7\u008c\2\2\u1b39\u1b3a\7\u01c5\2\2\u1b3a\u1b3b\5\u053e"+
		"\u02a0\2\u1b3b\u1b3c\7\u0148\2\2\u1b3c\u1b3d\5\u01ce\u00e8\2\u1b3d\u1b5e"+
		"\3\2\2\2\u1b3e\u1b3f\7\u008c\2\2\u1b3f\u1b40\7\u01c5\2\2\u1b40\u1b41\5"+
		"\u053e\u02a0\2\u1b41\u1b42\7\u00a6\2\2\u1b42\u1b43\5\u0550\u02a9\2\u1b43"+
		"\u1b5e\3\2\2\2\u1b44\u1b45\7\u008c\2\2\u1b45\u1b46\7\u01c5\2\2\u1b46\u1b47"+
		"\5\u053e\u02a0\2\u1b47\u1b48\7\u012c\2\2\u1b48\u1b49\7\u01c6\2\2\u1b49"+
		"\u1b4a\5\u029a\u014e\2\u1b4a\u1b5e\3\2\2\2\u1b4b\u1b4c\7\u008c\2\2\u1b4c"+
		"\u1b4d\7\u01c5\2\2\u1b4d\u1b4e\5\u053e\u02a0\2\u1b4e\u1b4f\7\u0148\2\2"+
		"\u1b4f\u1b50\7\u01c6\2\2\u1b50\u1b51\5\u02f6\u017c\2\u1b51\u1b52\5\u029a"+
		"\u014e\2\u1b52\u1b5e\3\2\2\2\u1b53\u1b54\7\u008c\2\2\u1b54\u1b55\7\u01c5"+
		"\2\2\u1b55\u1b56\5\u053e\u02a0\2\u1b56\u1b57\7\u00c3\2\2\u1b57\u1b5e\3"+
		"\2\2\2\u1b58\u1b59\7\u008c\2\2\u1b59\u1b5a\7\u01c5\2\2\u1b5a\u1b5b\5\u053e"+
		"\u02a0\2\u1b5b\u1b5c\7\u00bc\2\2\u1b5c\u1b5e\3\2\2\2\u1b5d\u1b38\3\2\2"+
		"\2\u1b5d\u1b3e\3\2\2\2\u1b5d\u1b44\3\2\2\2\u1b5d\u1b4b\3\2\2\2\u1b5d\u1b53"+
		"\3\2\2\2\u1b5d\u1b58\3\2\2\2\u1b5e\u02fb\3\2\2\2\u1b5f\u1b60\7\u00c1\2"+
		"\2\u1b60\u1b61\7\u01c5\2\2\u1b61\u1b62\5\u053e\u02a0\2\u1b62\u1b63\5n"+
		"8\2\u1b63\u1b6c\3\2\2\2\u1b64\u1b65\7\u00c1\2\2\u1b65\u1b66\7\u01c5\2"+
		"\2\u1b66\u1b67\7\u00de\2\2\u1b67\u1b68\7\u0187\2\2\u1b68\u1b69\5\u053e"+
		"\u02a0\2\u1b69\u1b6a\5n8\2\u1b6a\u1b6c\3\2\2\2\u1b6b\u1b5f\3\2\2\2\u1b6b"+
		"\u1b64\3\2\2\2\u1b6c\u02fd\3\2\2\2\u1b6d\u1b6e\7\60\2\2\u1b6e\u1b6f\5"+
		"\u026c\u0137\2\u1b6f\u1b70\7\u013c\2\2\u1b70\u1b71\5\u053e\u02a0\2\u1b71"+
		"\u1b72\7&\2\2\u1b72\u1b73\7R\2\2\u1b73\u1b74\5\u0308\u0185\2\u1b74\u1b75"+
		"\7`\2\2\u1b75\u1b76\5\u053a\u029e\2\u1b76\u1b77\5\u0448\u0225\2\u1b77"+
		"\u1b78\7;\2\2\u1b78\u1b79\5\u030a\u0186\2\u1b79\u1b7a\5\u0300\u0181\2"+
		"\u1b7a\u02ff\3\2\2\2\u1b7b\u1b82\7\u0109\2\2\u1b7c\u1b82\5\u0304\u0183"+
		"\2\u1b7d\u1b7e\7\4\2\2\u1b7e\u1b7f\5\u0302\u0182\2\u1b7f\u1b80\7\5\2\2"+
		"\u1b80\u1b82\3\2\2\2\u1b81\u1b7b\3\2\2\2\u1b81\u1b7c\3\2\2\2\u1b81\u1b7d"+
		"\3\2\2\2\u1b82\u0301\3\2\2\2\u1b83\u1b88\5\u0306\u0184\2\u1b84\u1b85\7"+
		"\t\2\2\u1b85\u1b87\5\u0306\u0184\2\u1b86\u1b84\3\2\2\2\u1b87\u1b8a\3\2"+
		"\2\2\u1b88\u1b86\3\2\2\2\u1b88\u1b89\3\2\2\2\u1b89\u0303\3\2\2\2\u1b8a"+
		"\u1b88\3\2\2\2\u1b8b\u1b91\5\u03c2\u01e2\2\u1b8c\u1b91\5\u0388\u01c5\2"+
		"\u1b8d\u1b91\5\u03b0\u01d9\2\u1b8e\u1b91\5\u03a2\u01d2\2\u1b8f\u1b91\5"+
		"\u030c\u0187\2\u1b90\u1b8b\3\2\2\2\u1b90\u1b8c\3\2\2\2\u1b90\u1b8d\3\2"+
		"\2\2\u1b90\u1b8e\3\2\2\2\u1b90\u1b8f\3\2\2\2\u1b91\u0305\3\2\2\2\u1b92"+
		"\u1b95\5\u0304\u0183\2\u1b93\u1b95\3\2\2\2\u1b94\u1b92\3\2\2\2\u1b94\u1b93"+
		"\3\2\2\2\u1b95\u0307\3\2\2\2\u1b96\u1b97\t\37\2\2\u1b97\u0309\3\2\2\2"+
		"\u1b98\u1b9c\7\u00eb\2\2\u1b99\u1b9c\7\u008b\2\2\u1b9a\u1b9c\3\2\2\2\u1b9b"+
		"\u1b98\3\2\2\2\u1b9b\u1b99\3\2\2\2\u1b9b\u1b9a\3\2\2\2\u1b9c\u030b\3\2"+
		"\2\2\u1b9d\u1b9e\7\u010a\2\2\u1b9e\u1b9f\5\u055e\u02b0\2\u1b9f\u1ba0\5"+
		"\u030e\u0188\2\u1ba0\u030d\3\2\2\2\u1ba1\u1ba2\7\b\2\2\u1ba2\u1ba5\5\u0550"+
		"\u02a9\2\u1ba3\u1ba5\3\2\2\2\u1ba4\u1ba1\3\2\2\2\u1ba4\u1ba3\3\2\2\2\u1ba5"+
		"\u030f\3\2\2\2\u1ba6\u1ba7\7\u00f5\2\2\u1ba7\u1ba8\5\u055e\u02b0\2\u1ba8"+
		"\u0311\3\2\2\2\u1ba9\u1baa\7\u0169\2\2\u1baa\u1bae\5\u055e\u02b0\2\u1bab"+
		"\u1bac\7\u0169\2\2\u1bac\u1bae\7\13\2\2\u1bad\u1ba9\3\2\2\2\u1bad\u1bab"+
		"\3\2\2\2\u1bae\u0313\3\2\2\2\u1baf\u1bb0\7\u0083\2\2\u1bb0\u1bb1\5\u0316"+
		"\u018c\2\u1bb1\u1bb2\5\u031e\u0190\2\u1bb2\u1be2\3\2\2\2\u1bb3\u1bb4\7"+
		"\u0094\2\2\u1bb4\u1bb5\5\u0316\u018c\2\u1bb5\u1bb6\5\u031c\u018f\2\u1bb6"+
		"\u1be2\3\2\2\2\u1bb7\u1bb8\7\u014f\2\2\u1bb8\u1bb9\7\u015f\2\2\u1bb9\u1be2"+
		"\5\u031c\u018f\2\u1bba\u1bbb\7\u00a3\2\2\u1bbb\u1bbc\5\u0316\u018c\2\u1bbc"+
		"\u1bbd\5\u031e\u0190\2\u1bbd\u1be2\3\2\2\2\u1bbe\u1bbf\7\u01c8\2\2\u1bbf"+
		"\u1bc0\5\u0316\u018c\2\u1bc0\u1bc1\5\u031e\u0190\2\u1bc1\u1be2\3\2\2\2"+
		"\u1bc2\u1bc3\7\u013a\2\2\u1bc3\u1bc4\5\u0316\u018c\2\u1bc4\u1bc5\5\u031e"+
		"\u0190\2\u1bc5\u1be2\3\2\2\2\u1bc6\u1bc7\7\u013d\2\2\u1bc7\u1be2\5\u055e"+
		"\u02b0\2\u1bc8\u1bc9\7\u012f\2\2\u1bc9\u1bca\7\u013d\2\2\u1bca\u1be2\5"+
		"\u055e\u02b0\2\u1bcb\u1bcc\7\u012f\2\2\u1bcc\u1be2\5\u055e\u02b0\2\u1bcd"+
		"\u1bce\7\u013a\2\2\u1bce\u1bcf\5\u0316\u018c\2\u1bcf\u1bd0\7`\2\2\u1bd0"+
		"\u1bd1\7\u013d\2\2\u1bd1\u1bd2\5\u055e\u02b0\2\u1bd2\u1be2\3\2\2\2\u1bd3"+
		"\u1bd4\7\u013a\2\2\u1bd4\u1bd5\5\u0316\u018c\2\u1bd5\u1bd6\7`\2\2\u1bd6"+
		"\u1bd7\5\u055e\u02b0\2\u1bd7\u1be2\3\2\2\2\u1bd8\u1bd9\7\u011d\2\2\u1bd9"+
		"\u1bda\7\u015f\2\2\u1bda\u1be2\5\u0550\u02a9\2\u1bdb\u1bdc\7\u00a3\2\2"+
		"\u1bdc\u1bdd\7\u011e\2\2\u1bdd\u1be2\5\u0550\u02a9\2\u1bde\u1bdf\7\u013a"+
		"\2\2\u1bdf\u1be0\7\u011e\2\2\u1be0\u1be2\5\u0550\u02a9\2\u1be1\u1baf\3"+
		"\2\2\2\u1be1\u1bb3\3\2\2\2\u1be1\u1bb7\3\2\2\2\u1be1\u1bba\3\2\2\2\u1be1"+
		"\u1bbe\3\2\2\2\u1be1\u1bc2\3\2\2\2\u1be1\u1bc6\3\2\2\2\u1be1\u1bc8\3\2"+
		"\2\2\u1be1\u1bcb\3\2\2\2\u1be1\u1bcd\3\2\2\2\u1be1\u1bd3\3\2\2\2\u1be1"+
		"\u1bd8\3\2\2\2\u1be1\u1bdb\3\2\2\2\u1be1\u1bde\3\2\2\2\u1be2\u0315\3\2"+
		"\2\2\u1be3\u1be7\7\u0177\2\2\u1be4\u1be7\7\u015f\2\2\u1be5\u1be7\3\2\2"+
		"\2\u1be6\u1be3\3\2\2\2\u1be6\u1be4\3\2\2\2\u1be6\u1be5\3\2\2\2\u1be7\u0317"+
		"\3\2\2\2\u1be8\u1be9\7\u00ed\2\2\u1be9\u1bea\7\u00f4\2\2\u1bea\u1bf3\5"+
		"B\"\2\u1beb\u1bec\7\u0127\2\2\u1bec\u1bf3\7S\2\2\u1bed\u1bee\7\u0127\2"+
		"\2\u1bee\u1bf3\7\u0179\2\2\u1bef\u1bf3\78\2\2\u1bf0\u1bf1\7O\2\2\u1bf1"+
		"\u1bf3\78\2\2\u1bf2\u1be8\3\2\2\2\u1bf2\u1beb\3\2\2\2\u1bf2\u1bed\3\2"+
		"\2\2\u1bf2\u1bef\3\2\2\2\u1bf2\u1bf0\3\2\2\2\u1bf3\u0319\3\2\2\2\u1bf4"+
		"\u1bfb\5\u0318\u018d\2\u1bf5\u1bf7\7\b\2\2\u1bf6\u1bf5\3\2\2\2\u1bf6\u1bf7"+
		"\3\2\2\2\u1bf7\u1bf8\3\2\2\2\u1bf8\u1bfa\5\u0318\u018d\2\u1bf9\u1bf6\3"+
		"\2\2\2\u1bfa\u1bfd\3\2\2\2\u1bfb\u1bf9\3\2\2\2\u1bfb\u1bfc\3\2\2\2\u1bfc"+
		"\u031b\3\2\2\2\u1bfd\u1bfb\3\2\2\2\u1bfe\u1c01\5\u031a\u018e\2\u1bff\u1c01"+
		"\3\2\2\2\u1c00\u1bfe\3\2\2\2\u1c00\u1bff\3\2\2\2\u1c01\u031d\3\2\2\2\u1c02"+
		"\u1c04\7#\2\2\u1c03\u1c05\7\u0108\2\2\u1c04\u1c03\3\2\2\2\u1c04\u1c05"+
		"\3\2\2\2\u1c05\u1c06\3\2\2\2\u1c06\u1c09\7\u009b\2\2\u1c07\u1c09\3\2\2"+
		"\2\u1c08\u1c02\3\2\2\2\u1c08\u1c07\3\2\2\2\u1c09\u031f\3\2\2\2\u1c0a\u1c0d"+
		"\7\60\2\2\u1c0b\u1c0c\7T\2\2\u1c0c\u1c0e\7\u0132\2\2\u1c0d\u1c0b\3\2\2"+
		"\2\u1c0d\u1c0e\3\2\2\2\u1c0e\u1c0f\3\2\2\2\u1c0f\u1c1d\5\u00b0Y\2\u1c10"+
		"\u1c11\7\u0173\2\2\u1c11\u1c12\5\u053a\u029e\2\u1c12\u1c13\5\u00d8m\2"+
		"\u1c13\u1c14\5x=\2\u1c14\u1c1e\3\2\2\2\u1c15\u1c16\7\u012a\2\2\u1c16\u1c17"+
		"\7\u0173\2\2\u1c17\u1c18\5\u053a\u029e\2\u1c18\u1c19\7\4\2\2\u1c19\u1c1a"+
		"\5\u00dan\2\u1c1a\u1c1b\7\5\2\2\u1c1b\u1c1c\5x=\2\u1c1c\u1c1e\3\2\2\2"+
		"\u1c1d\u1c10\3\2\2\2\u1c1d\u1c15\3\2\2\2\u1c1e\u1c1f\3\2\2\2\u1c1f\u1c20"+
		"\7&\2\2\u1c20\u1c21\5\u03c2\u01e2\2\u1c21\u1c22\5\u0322\u0192\2\u1c22"+
		"\u0321\3\2\2\2\u1c23\u1c25\7k\2\2\u1c24\u1c26\t \2\2\u1c25\u1c24\3\2\2"+
		"\2\u1c25\u1c26\3\2\2\2\u1c26\u1c27\3\2\2\2\u1c27\u1c28\7,\2\2\u1c28\u1c2b"+
		"\7\u0112\2\2\u1c29\u1c2b\3\2\2\2\u1c2a\u1c23\3\2\2\2\u1c2a\u1c29\3\2\2"+
		"\2\u1c2b\u0323\3\2\2\2\u1c2c\u1c2d\7\u00f6\2\2\u1c2d\u1c2e\5\u0542\u02a2"+
		"\2\u1c2e\u0325\3\2\2\2\u1c2f\u1c30\7\60\2\2\u1c30\u1c31\7\u00b1\2\2\u1c31"+
		"\u1c32\5\u053e\u02a0\2\u1c32\u1c33\5\22\n\2\u1c33\u1c34\5\u0328\u0195"+
		"\2\u1c34\u0327\3\2\2\2\u1c35\u1c38\5\u032a\u0196\2\u1c36\u1c38\3\2\2\2"+
		"\u1c37\u1c35\3\2\2\2\u1c37\u1c36\3\2\2\2\u1c38\u0329\3\2\2\2\u1c39\u1c3b"+
		"\5\u032c\u0197\2\u1c3a\u1c39\3\2\2\2\u1c3b\u1c3c\3\2\2\2\u1c3c\u1c3a\3"+
		"\2\2\2\u1c3c\u1c3d\3\2\2\2\u1c3d\u032b\3\2\2\2\u1c3e\u1c3f\5\u032e\u0198"+
		"\2\u1c3f\u1c43\5\u0330\u0199\2\u1c40\u1c44\5\u0556\u02ac\2\u1c41\u1c44"+
		"\5D#\2\u1c42\u1c44\7\67\2\2\u1c43\u1c40\3\2\2\2\u1c43\u1c41\3\2\2\2\u1c43"+
		"\u1c42\3\2\2\2\u1c44\u032d\3\2\2\2\u1c45\u1c4e\5\u0566\u02b4\2\u1c46\u1c47"+
		"\7\u00a6\2\2\u1c47\u1c4e\7L\2\2\u1c48\u1c4e\7\u00c4\2\2\u1c49\u1c4e\7"+
		"\u00f8\2\2\u1c4a\u1c4e\7\u0115\2\2\u1c4b\u1c4e\7\u015a\2\2\u1c4c\u1c4e"+
		"\7\u015c\2\2\u1c4d\u1c45\3\2\2\2\u1c4d\u1c46\3\2\2\2\u1c4d\u1c48\3\2\2"+
		"\2\u1c4d\u1c49\3\2\2\2\u1c4d\u1c4a\3\2\2\2\u1c4d\u1c4b\3\2\2\2\u1c4d\u1c4c"+
		"\3\2\2\2\u1c4e\u032f\3\2\2\2\u1c4f\u1c52\7\f\2\2\u1c50\u1c52\3\2\2\2\u1c51"+
		"\u1c4f\3\2\2\2\u1c51\u1c50\3\2\2\2\u1c52\u0331\3\2\2\2\u1c53\u1c54\7\u008c"+
		"\2\2\u1c54\u1c55\7\u00b1\2\2\u1c55\u1c5c\5\u053e\u02a0\2\u1c56\u1c57\7"+
		"k\2\2\u1c57\u1c5d\5\u0328\u0195\2\u1c58\u1c5d\5\u0328\u0195\2\u1c59\u1c5a"+
		"\7\u0148\2\2\u1c5a\u1c5b\7\u015a\2\2\u1c5b\u1c5d\5\u053e\u02a0\2\u1c5c"+
		"\u1c56\3\2\2\2\u1c5c\u1c58\3\2\2\2\u1c5c\u1c59\3\2\2\2\u1c5d\u0333\3\2"+
		"\2\2\u1c5e\u1c5f\7\u008c\2\2\u1c5f\u1c60\7\u00b1\2\2\u1c60\u1c61\5\u053e"+
		"\u02a0\2\u1c61\u1c62\5R*\2\u1c62\u0335\3\2\2\2\u1c63\u1c64\7\u00c1\2\2"+
		"\u1c64\u1c67\7\u00b1\2\2\u1c65\u1c66\7\u00de\2\2\u1c66\u1c68\7\u0187\2"+
		"\2\u1c67\u1c65\3\2\2\2\u1c67\u1c68\3\2\2\2\u1c68\u1c69\3\2\2\2\u1c69\u1c6f"+
		"\5\u053e\u02a0\2\u1c6a\u1c6b\5\22\n\2\u1c6b\u1c6c\7\4\2\2\u1c6c\u1c6d"+
		"\5\u0338\u019d\2\u1c6d\u1c6e\7\5\2\2\u1c6e\u1c70\3\2\2\2\u1c6f\u1c6a\3"+
		"\2\2\2\u1c6f\u1c70\3\2\2\2\u1c70\u0337\3\2\2\2\u1c71\u1c76\5\u033a\u019e"+
		"\2\u1c72\u1c73\7\b\2\2\u1c73\u1c75\5\u033a\u019e\2\u1c74\u1c72\3\2\2\2"+
		"\u1c75\u1c78\3\2\2\2\u1c76\u1c74\3\2\2\2\u1c76\u1c77\3\2\2\2\u1c77\u0339"+
		"\3\2\2\2\u1c78\u1c76\3\2\2\2\u1c79\u1c7a\7\u00d3\2\2\u1c7a\u033b\3\2\2"+
		"\2\u1c7b\u1c7c\7\u008c\2\2\u1c7c\u1c7d\7n\2\2\u1c7d\u1c7e\5\u020e\u0108"+
		"\2\u1c7e\u1c7f\7\u012c\2\2\u1c7f\u1c80\7\u0172\2\2\u1c80\u033d\3\2\2\2"+
		"\u1c81\u1c82\7\u008c\2\2\u1c82\u1c83\7\u0158\2\2\u1c83\u1c84\t!\2\2\u1c84"+
		"\u1c85\58\35\2\u1c85\u033f\3\2\2\2\u1c86\u1c87\7\60\2\2\u1c87\u1c88\7"+
		"\u00bf\2\2\u1c88\u1c89\5\u020e\u0108\2\u1c89\u1c8a\5\u0344\u01a3\2\u1c8a"+
		"\u1c8b\5\u0460\u0231\2\u1c8b\u1c8c\5\u00c2b\2\u1c8c\u0341\3\2\2\2\u1c8d"+
		"\u1c8e\7\u008c\2\2\u1c8e\u1c8f\7\u00bf\2\2\u1c8f\u1ca5\5\u020e\u0108\2"+
		"\u1c90\u1ca6\5l\67\2\u1c91\u1c92\7\u00c1\2\2\u1c92\u1c93\7O\2\2\u1c93"+
		"\u1ca6\7P\2\2\u1c94\u1c95\7\u0148\2\2\u1c95\u1c96\7O\2\2\u1c96\u1ca6\7"+
		"P\2\2\u1c97\u1c98\7\u0087\2\2\u1c98\u1ca6\5\u00d2j\2\u1c99\u1c9a\7\u00c1"+
		"\2\2\u1c9a\u1c9d\7/\2\2\u1c9b\u1c9c\7\u00de\2\2\u1c9c\u1c9e\7\u0187\2"+
		"\2\u1c9d\u1c9b\3\2\2\2\u1c9d\u1c9e\3\2\2\2\u1c9e\u1c9f\3\2\2\2\u1c9f\u1ca0"+
		"\5\u053e\u02a0\2\u1ca0\u1ca1\5n8\2\u1ca1\u1ca6\3\2\2\2\u1ca2\u1ca3\7\u016f"+
		"\2\2\u1ca3\u1ca4\7/\2\2\u1ca4\u1ca6\5\u053e\u02a0\2\u1ca5\u1c90\3\2\2"+
		"\2\u1ca5\u1c91\3\2\2\2\u1ca5\u1c94\3\2\2\2\u1ca5\u1c97\3\2\2\2\u1ca5\u1c99"+
		"\3\2\2\2\u1ca5\u1ca2\3\2\2\2\u1ca6\u0343\3\2\2\2\u1ca7\u1caa\7&\2\2\u1ca8"+
		"\u1caa\3\2\2\2\u1ca9\u1ca7\3\2\2\2\u1ca9\u1ca8\3\2\2\2\u1caa\u0345\3\2"+
		"\2\2\u1cab\u1cac\7\u008c\2\2\u1cac\u1cad\7\u015e\2\2\u1cad\u1cae\7\u0140"+
		"\2\2\u1cae\u1caf\7\u00bb\2\2\u1caf\u1cb0\5\u020e\u0108\2\u1cb0\u1cb1\5"+
		"\u01ce\u00e8\2\u1cb1\u0347\3\2\2\2\u1cb2\u1cb3\7\u008c\2\2\u1cb3\u1cb4"+
		"\7\u015e\2\2\u1cb4\u1cb5\7\u0140\2\2\u1cb5\u1cb6\7\u00a5\2\2\u1cb6\u1cb7"+
		"\5\u020e\u0108\2\u1cb7\u1cb8\7\u0087\2\2\u1cb8\u1cb9\7\u00fa\2\2\u1cb9"+
		"\u1cba\7@\2\2\u1cba\u1cbb\5\u053c\u029f\2\u1cbb\u1cbc\5\u034a\u01a6\2"+
		"\u1cbc\u1cbd\5\u020c\u0107\2\u1cbd\u1cfb\3\2\2\2\u1cbe\u1cbf\7\u008c\2"+
		"\2\u1cbf\u1cc0\7\u015e\2\2\u1cc0\u1cc1\7\u0140\2\2\u1cc1\u1cc2\7\u00a5"+
		"\2\2\u1cc2\u1cc3\5\u020e\u0108\2\u1cc3\u1cc4\7\u008c\2\2\u1cc4\u1cc5\7"+
		"\u00fa\2\2\u1cc5\u1cc6\7@\2\2\u1cc6\u1cc7\5\u053c\u029f\2\u1cc7\u1cc8"+
		"\5\u034a\u01a6\2\u1cc8\u1cc9\5\u020c\u0107\2\u1cc9\u1cfb\3\2\2\2\u1cca"+
		"\u1ccb\7\u008c\2\2\u1ccb\u1ccc\7\u015e\2\2\u1ccc\u1ccd\7\u0140\2\2\u1ccd"+
		"\u1cce\7\u00a5\2\2\u1cce\u1ccf\5\u020e\u0108\2\u1ccf\u1cd0\7\u008c\2\2"+
		"\u1cd0\u1cd1\7\u00fa\2\2\u1cd1\u1cd2\7\u0132\2\2\u1cd2\u1cd3\5\u020e\u0108"+
		"\2\u1cd3\u1cd4\5\u034a\u01a6\2\u1cd4\u1cd5\5\u020e\u0108\2\u1cd5\u1cfb"+
		"\3\2\2\2\u1cd6\u1cd7\7\u008c\2\2\u1cd7\u1cd8\7\u015e\2\2\u1cd8\u1cd9\7"+
		"\u0140\2\2\u1cd9\u1cda\7\u00a5\2\2\u1cda\u1cdb\5\u020e\u0108\2\u1cdb\u1cdc"+
		"\7\u008c\2\2\u1cdc\u1cdd\7\u00fa\2\2\u1cdd\u1cde\7@\2\2\u1cde\u1cdf\5"+
		"\u053c\u029f\2\u1cdf\u1ce0\7\u0132\2\2\u1ce0\u1ce1\5\u020e\u0108\2\u1ce1"+
		"\u1ce2\5\u034a\u01a6\2\u1ce2\u1ce3\5\u020e\u0108\2\u1ce3\u1cfb\3\2\2\2"+
		"\u1ce4\u1ce5\7\u008c\2\2\u1ce5\u1ce6\7\u015e\2\2\u1ce6\u1ce7\7\u0140\2"+
		"\2\u1ce7\u1ce8\7\u00a5\2\2\u1ce8\u1ce9\5\u020e\u0108\2\u1ce9\u1cea\7\u00c1"+
		"\2\2\u1cea\u1ceb\7\u00fa\2\2\u1ceb\u1cec\7@\2\2\u1cec\u1ced\5\u053c\u029f"+
		"\2\u1ced\u1cfb\3\2\2\2\u1cee\u1cef\7\u008c\2\2\u1cef\u1cf0\7\u015e\2\2"+
		"\u1cf0\u1cf1\7\u0140\2\2\u1cf1\u1cf2\7\u00a5\2\2\u1cf2\u1cf3\5\u020e\u0108"+
		"\2\u1cf3\u1cf4\7\u00c1\2\2\u1cf4\u1cf5\7\u00fa\2\2\u1cf5\u1cf6\7\u00de"+
		"\2\2\u1cf6\u1cf7\7\u0187\2\2\u1cf7\u1cf8\7@\2\2\u1cf8\u1cf9\5\u053c\u029f"+
		"\2\u1cf9\u1cfb\3\2\2\2\u1cfa\u1cb2\3\2\2\2\u1cfa\u1cbe\3\2\2\2\u1cfa\u1cca"+
		"\3\2\2\2\u1cfa\u1cd6\3\2\2\2\u1cfa\u1ce4\3\2\2\2\u1cfa\u1cee\3\2\2\2\u1cfb"+
		"\u0349\3\2\2\2\u1cfc\u1cfd\7k\2\2\u1cfd\u034b\3\2\2\2\u1cfe\u1cff\7\60"+
		"\2\2\u1cff\u1d00\5\u01ea\u00f6\2\u1d00\u1d01\7\u00aa\2\2\u1d01\u1d02\5"+
		"\u020e\u0108\2\u1d02\u1d03\7@\2\2\u1d03\u1d04\5\u0550\u02a9\2\u1d04\u1d05"+
		"\7`\2\2\u1d05\u1d06\5\u0550\u02a9\2\u1d06\u1d07\7B\2\2\u1d07\u1d08\5\u020e"+
		"\u0108\2\u1d08\u034d\3\2\2\2\u1d09\u1d0a\7\u00a0\2\2\u1d0a\u1d0b\5\u0362"+
		"\u01b2\2\u1d0b\u1d0c\5\u053a\u029e\2\u1d0c\u1d0d\5\u0350\u01a9\2\u1d0d"+
		"\u1d17\3\2\2\2\u1d0e\u1d0f\7\u00a0\2\2\u1d0f\u1d17\5\u0362\u01b2\2\u1d10"+
		"\u1d11\7\u00a0\2\2\u1d11\u1d12\5\u0362\u01b2\2\u1d12\u1d13\5\u053e\u02a0"+
		"\2\u1d13\u1d14\7R\2\2\u1d14\u1d15\5\u053a\u029e\2\u1d15\u1d17\3\2\2\2"+
		"\u1d16\u1d09\3\2\2\2\u1d16\u1d0e\3\2\2\2\u1d16\u1d10\3\2\2\2\u1d17\u034f"+
		"\3\2\2\2\u1d18\u1d19\7f\2\2\u1d19\u1d1c\5\u053e\u02a0\2\u1d1a\u1d1c\3"+
		"\2\2\2\u1d1b\u1d18\3\2\2\2\u1d1b\u1d1a\3\2\2\2\u1d1c\u0351\3\2\2\2\u1d1d"+
		"\u1d1e\7\u016d\2\2\u1d1e\u1d1f\5\u0364\u01b3\2\u1d1f\u1d20\5\u0366\u01b4"+
		"\2\u1d20\u1d21\5\u0362\u01b2\2\u1d21\u1d22\5\u0360\u01b1\2\u1d22\u1d23"+
		"\5\u036e\u01b8\2\u1d23\u1d2b\3\2\2\2\u1d24\u1d25\7\u016d\2\2\u1d25\u1d26"+
		"\7\4\2\2\u1d26\u1d27\5\u0356\u01ac\2\u1d27\u1d28\7\5\2\2\u1d28\u1d29\5"+
		"\u036e\u01b8\2\u1d29\u1d2b\3\2\2\2\u1d2a\u1d1d\3\2\2\2\u1d2a\u1d24\3\2"+
		"\2\2\u1d2b\u0353\3\2\2\2\u1d2c\u1d2d\5\u0358\u01ad\2\u1d2d\u1d2e\5\u0362"+
		"\u01b2\2\u1d2e\u1d2f\5\u036e\u01b8\2\u1d2f\u1d37\3\2\2\2\u1d30\u1d31\5"+
		"\u0358\u01ad\2\u1d31\u1d32\7\4\2\2\u1d32\u1d33\5\u0356\u01ac\2\u1d33\u1d34"+
		"\7\5\2\2\u1d34\u1d35\5\u036e\u01b8\2\u1d35\u1d37\3\2\2\2\u1d36\u1d2c\3"+
		"\2\2\2\u1d36\u1d30\3\2\2\2\u1d37\u0355\3\2\2\2\u1d38\u1d3d\5\u035a\u01ae"+
		"\2\u1d39\u1d3a\7\b\2\2\u1d3a\u1d3c\5\u035a\u01ae\2\u1d3b\u1d39\3\2\2\2"+
		"\u1d3c\u1d3f\3\2\2\2\u1d3d\u1d3b\3\2\2\2\u1d3d\u1d3e\3\2\2\2\u1d3e\u0357"+
		"\3\2\2\2\u1d3f\u1d3d\3\2\2\2\u1d40\u1d41\t\"\2\2\u1d41\u0359\3\2\2\2\u1d42"+
		"\u1d43\5\u035c\u01af\2\u1d43\u1d44\5\u035e\u01b0\2\u1d44\u035b\3\2\2\2"+
		"\u1d45\u1d48\5\u0562\u02b2\2\u1d46\u1d48\5\u0358\u01ad\2\u1d47\u1d45\3"+
		"\2\2\2\u1d47\u1d46\3\2\2\2\u1d48\u035d\3\2\2\2\u1d49\u1d4d\5D#\2\u1d4a"+
		"\u1d4d\5\u0126\u0094\2\u1d4b\u1d4d\3\2\2\2\u1d4c\u1d49\3\2\2\2\u1d4c\u1d4a"+
		"\3\2\2\2\u1d4c\u1d4b\3\2\2\2\u1d4d\u035f\3\2\2\2\u1d4e\u1d51\5\u0358\u01ad"+
		"\2\u1d4f\u1d51\3\2\2\2\u1d50\u1d4e\3\2\2\2\u1d50\u1d4f\3\2\2\2\u1d51\u0361"+
		"\3\2\2\2\u1d52\u1d55\7\u0082\2\2\u1d53\u1d55\3\2\2\2\u1d54\u1d52\3\2\2"+
		"\2\u1d54\u1d53\3\2\2\2\u1d55\u0363\3\2\2\2\u1d56\u1d59\7s\2\2\u1d57\u1d59"+
		"\3\2\2\2\u1d58\u1d56\3\2\2\2\u1d58\u1d57\3\2\2\2\u1d59\u0365\3\2\2\2\u1d5a"+
		"\u1d5d\7r\2\2\u1d5b\u1d5d\3\2\2\2\u1d5c\u1d5a\3\2\2\2\u1d5c\u1d5b\3\2"+
		"\2\2\u1d5d\u0367\3\2\2\2\u1d5e\u1d5f\7\4\2\2\u1d5f\u1d60\5\u053c\u029f"+
		"\2\u1d60\u1d61\7\5\2\2\u1d61\u1d64\3\2\2\2\u1d62\u1d64\3\2\2\2\u1d63\u1d5e"+
		"\3\2\2\2\u1d63\u1d62\3\2\2\2\u1d64\u0369\3\2\2\2\u1d65\u1d66\5\u053a\u029e"+
		"\2\u1d66\u1d67\5\u0368\u01b5\2\u1d67\u036b\3\2\2\2\u1d68\u1d6d\5\u036a"+
		"\u01b6\2\u1d69\u1d6a\7\b\2\2\u1d6a\u1d6c\5\u036a\u01b6\2\u1d6b\u1d69\3"+
		"\2\2\2\u1d6c\u1d6f\3\2\2\2\u1d6d\u1d6b\3\2\2\2\u1d6d\u1d6e\3\2\2\2\u1d6e"+
		"\u036d\3\2\2\2\u1d6f\u1d6d\3\2\2\2\u1d70\u1d73\5\u036c\u01b7\2\u1d71\u1d73"+
		"\3\2\2\2\u1d72\u1d70\3\2\2\2\u1d72\u1d71\3\2\2\2\u1d73\u036f\3\2\2\2\u1d74"+
		"\u1d75\7\u00cd\2\2\u1d75\u1d85\5\u0372\u01ba\2\u1d76\u1d77\7\u00cd\2\2"+
		"\u1d77\u1d78\5\u0358\u01ad\2\u1d78\u1d79\5\u0362\u01b2\2\u1d79\u1d7a\5"+
		"\u0372\u01ba\2\u1d7a\u1d85\3\2\2\2\u1d7b\u1d7c\7\u00cd\2\2\u1d7c\u1d7d"+
		"\7\u0082\2\2\u1d7d\u1d85\5\u0372\u01ba\2\u1d7e\u1d7f\7\u00cd\2\2\u1d7f"+
		"\u1d80\7\4\2\2\u1d80\u1d81\5\u0374\u01bb\2\u1d81\u1d82\7\5\2\2\u1d82\u1d83"+
		"\5\u0372\u01ba\2\u1d83\u1d85\3\2\2\2\u1d84\u1d74\3\2\2\2\u1d84\u1d76\3"+
		"\2\2\2\u1d84\u1d7b\3\2\2\2\u1d84\u1d7e\3\2\2\2\u1d85\u0371\3\2\2\2\u1d86"+
		"\u1d90\5\u03c2\u01e2\2\u1d87\u1d90\5\u0388\u01c5\2\u1d88\u1d90\5\u03b0"+
		"\u01d9\2\u1d89\u1d90\5\u03a2\u01d2\2\u1d8a\u1d90\5\u03ba\u01de\2\u1d8b"+
		"\u1d90\5\u010a\u0086\2\u1d8c\u1d90\5\u0110\u0089\2\u1d8d\u1d90\5\u0116"+
		"\u008c\2\u1d8e\u1d90\5\u0382\u01c2\2\u1d8f\u1d86\3\2\2\2\u1d8f\u1d87\3"+
		"\2\2\2\u1d8f\u1d88\3\2\2\2\u1d8f\u1d89\3\2\2\2\u1d8f\u1d8a\3\2\2\2\u1d8f"+
		"\u1d8b\3\2\2\2\u1d8f\u1d8c\3\2\2\2\u1d8f\u1d8d\3\2\2\2\u1d8f\u1d8e\3\2"+
		"\2\2\u1d90\u0373\3\2\2\2\u1d91\u1d96\5\u0376\u01bc\2\u1d92\u1d93\7\b\2"+
		"\2\u1d93\u1d95\5\u0376\u01bc\2\u1d94\u1d92\3\2\2\2\u1d95\u1d98\3\2\2\2"+
		"\u1d96\u1d94\3\2\2\2\u1d96\u1d97\3\2\2\2\u1d97\u0375\3\2\2\2\u1d98\u1d96"+
		"\3\2\2\2\u1d99\u1d9a\5\u0378\u01bd\2\u1d9a\u1d9b\5\u037a\u01be\2\u1d9b"+
		"\u0377\3\2\2\2\u1d9c\u1d9f\5\u0562\u02b2\2\u1d9d\u1d9f\5\u0358\u01ad\2"+
		"\u1d9e\u1d9c\3\2\2\2\u1d9e\u1d9d\3\2\2\2\u1d9f\u0379\3\2\2\2\u1da0\u1da4"+
		"\5D#\2\u1da1\u1da4\5\u0126\u0094\2\u1da2\u1da4\3\2\2\2\u1da3\u1da0\3\2"+
		"\2\2\u1da3\u1da1\3\2\2\2\u1da3\u1da2\3\2\2\2\u1da4\u037b\3\2\2\2\u1da5"+
		"\u1da6\7\u011d\2\2\u1da6\u1da7\5\u053e\u02a0\2\u1da7\u1da8\5\u037e\u01c0"+
		"\2\u1da8\u1da9\7&\2\2\u1da9\u1daa\5\u0380\u01c1\2\u1daa\u037d\3\2\2\2"+
		"\u1dab\u1dac\7\4\2\2\u1dac\u1dad\5\u0508\u0285\2\u1dad\u1dae\7\5\2\2\u1dae"+
		"\u1db1\3\2\2\2\u1daf\u1db1\3\2\2\2\u1db0\u1dab\3\2\2\2\u1db0\u1daf\3\2"+
		"\2\2\u1db1\u037f\3\2\2\2\u1db2\u1db7\5\u03c2\u01e2\2\u1db3\u1db7\5\u0388"+
		"\u01c5\2\u1db4\u1db7\5\u03b0\u01d9\2\u1db5\u1db7\5\u03a2\u01d2\2\u1db6"+
		"\u1db2\3\2\2\2\u1db6\u1db3\3\2\2\2\u1db6\u1db4\3\2\2\2\u1db6\u1db5\3\2"+
		"\2\2\u1db7\u0381\3\2\2\2\u1db8\u1db9\7\u00cc\2\2\u1db9\u1dba\5\u053e\u02a0"+
		"\2\u1dba\u1dbb\5\u0384\u01c3\2\u1dbb\u1dd4\3\2\2\2\u1dbc\u1dbd\7\60\2"+
		"\2\u1dbd\u1dbe\5\u00b0Y\2\u1dbe\u1dbf\7^\2\2\u1dbf\u1dc0\5\u010c\u0087"+
		"\2\u1dc0\u1dc1\7&\2\2\u1dc1\u1dc2\7\u00cc\2\2\u1dc2\u1dc3\5\u053e\u02a0"+
		"\2\u1dc3\u1dc4\5\u0384\u01c3\2\u1dc4\u1dc5\5\u010e\u0088\2\u1dc5\u1dd4"+
		"\3\2\2\2\u1dc6\u1dc7\7\60\2\2\u1dc7\u1dc8\5\u00b0Y\2\u1dc8\u1dc9\7^\2"+
		"\2\u1dc9\u1dca\7\u00de\2\2\u1dca\u1dcb\7O\2\2\u1dcb\u1dcc\7\u0187\2\2"+
		"\u1dcc\u1dcd\5\u010c\u0087\2\u1dcd\u1dce\7&\2\2\u1dce\u1dcf\7\u00cc\2"+
		"\2\u1dcf\u1dd0\5\u053e\u02a0\2\u1dd0\u1dd1\5\u0384\u01c3\2\u1dd1\u1dd2"+
		"\5\u010e\u0088\2\u1dd2\u1dd4\3\2\2\2\u1dd3\u1db8\3\2\2\2\u1dd3\u1dbc\3"+
		"\2\2\2\u1dd3\u1dc6\3\2\2\2\u1dd4\u0383\3\2\2\2\u1dd5\u1dd6\7\4\2\2\u1dd6"+
		"\u1dd7\5\u0502\u0282\2\u1dd7\u1dd8\7\5\2\2\u1dd8\u1ddb\3\2\2\2\u1dd9\u1ddb"+
		"\3\2\2\2\u1dda\u1dd5\3\2\2\2\u1dda\u1dd9\3\2\2\2\u1ddb\u0385\3\2\2\2\u1ddc"+
		"\u1ddd\7\u00b3\2\2\u1ddd\u1de7\5\u053e\u02a0\2\u1dde\u1ddf\7\u00b3\2\2"+
		"\u1ddf\u1de0\7\u011d\2\2\u1de0\u1de7\5\u053e\u02a0\2\u1de1\u1de2\7\u00b3"+
		"\2\2\u1de2\u1de7\7 \2\2\u1de3\u1de4\7\u00b3\2\2\u1de4\u1de5\7\u011d\2"+
		"\2\u1de5\u1de7\7 \2\2\u1de6\u1ddc\3\2\2\2\u1de6\u1dde\3\2\2\2\u1de6\u1de1"+
		"\3\2\2\2\u1de6\u1de3\3\2\2\2\u1de7\u0387\3\2\2\2\u1de8\u1de9\5\u03d8\u01ed"+
		"\2\u1de9\u1dea\7\u00ea\2\2\u1dea\u1deb\7I\2\2\u1deb\u1dec\5\u038a\u01c6"+
		"\2\u1dec\u1ded\5\u038c\u01c7\2\u1ded\u1dee\5\u0394\u01cb\2\u1dee\u1def"+
		"\5\u0398\u01cd\2\u1def\u0389\3\2\2\2\u1df0\u1df3\5\u053a\u029e\2\u1df1"+
		"\u1df2\7&\2\2\u1df2\u1df4\5\u055e\u02b0\2\u1df3\u1df1\3\2\2\2\u1df3\u1df4"+
		"\3\2\2\2\u1df4\u038b\3\2\2\2\u1df5\u1e09\5\u03c2\u01e2\2\u1df6\u1df7\7"+
		"\u01d1\2\2\u1df7\u1df8\5\u038e\u01c8\2\u1df8\u1df9\7\u01c4\2\2\u1df9\u1dfa"+
		"\5\u03c2\u01e2\2\u1dfa\u1e09\3\2\2\2\u1dfb\u1dfc\7\4\2\2\u1dfc\u1dfd\5"+
		"\u0390\u01c9\2\u1dfd\u1e02\7\5\2\2\u1dfe\u1dff\7\u01d1\2\2\u1dff\u1e00"+
		"\5\u038e\u01c8\2\u1e00\u1e01\7\u01c4\2\2\u1e01\u1e03\3\2\2\2\u1e02\u1dfe"+
		"\3\2\2\2\u1e02\u1e03\3\2\2\2\u1e03\u1e04\3\2\2\2\u1e04\u1e05\5\u03c2\u01e2"+
		"\2\u1e05\u1e09\3\2\2\2\u1e06\u1e07\7\67\2\2\u1e07\u1e09\7\u01a1\2\2\u1e08"+
		"\u1df5\3\2\2\2\u1e08\u1df6\3\2\2\2\u1e08\u1dfb\3\2\2\2\u1e08\u1e06\3\2"+
		"\2\2\u1e09\u038d\3\2\2\2\u1e0a\u1e0b\t#\2\2\u1e0b\u038f\3\2\2\2\u1e0c"+
		"\u1e11\5\u0392\u01ca\2\u1e0d\u1e0e\7\b\2\2\u1e0e\u1e10\5\u0392\u01ca\2"+
		"\u1e0f\u1e0d\3\2\2\2\u1e10\u1e13\3\2\2\2\u1e11\u1e0f\3\2\2\2\u1e11\u1e12"+
		"\3\2\2\2\u1e12\u0391\3\2\2\2\u1e13\u1e11\3\2\2\2\u1e14\u1e15\5\u055e\u02b0"+
		"\2\u1e15\u1e16\5\u0530\u0299\2\u1e16\u0393\3\2\2\2\u1e17\u1e18\7R\2\2"+
		"\u1e18\u1e19\7\u01d2\2\2\u1e19\u1e1a\5\u0396\u01cc\2\u1e1a\u1e21\7;\2"+
		"\2\u1e1b\u1e1c\7\u016c\2\2\u1e1c\u1e1d\7\u0148\2\2\u1e1d\u1e1e\5\u03b2"+
		"\u01da\2\u1e1e\u1e1f\5\u0448\u0225\2\u1e1f\u1e22\3\2\2\2\u1e20\u1e22\7"+
		"\u0109\2\2\u1e21\u1e1b\3\2\2\2\u1e21\u1e20\3\2\2\2\u1e22\u1e25\3\2\2\2"+
		"\u1e23\u1e25\3\2\2\2\u1e24\u1e17\3\2\2\2\u1e24\u1e23\3\2\2\2\u1e25\u0395"+
		"\3\2\2\2\u1e26\u1e27\7\4\2\2\u1e27\u1e28\5\u0258\u012d\2\u1e28\u1e29\7"+
		"\5\2\2\u1e29\u1e2a\5\u0448\u0225\2\u1e2a\u1e30\3\2\2\2\u1e2b\u1e2c\7R"+
		"\2\2\u1e2c\u1e2d\7/\2\2\u1e2d\u1e30\5\u053e\u02a0\2\u1e2e\u1e30\3\2\2"+
		"\2\u1e2f\u1e26\3\2\2\2\u1e2f\u1e2b\3\2\2\2\u1e2f\u1e2e\3\2\2\2\u1e30\u0397"+
		"\3\2\2\2\u1e31\u1e32\7Y\2\2\u1e32\u1e35\5\u0534\u029b\2\u1e33\u1e35\3"+
		"\2\2\2\u1e34\u1e31\3\2\2\2\u1e34\u1e33\3\2\2\2\u1e35\u0399\3\2\2\2\u1e36"+
		"\u1e38\7\u00ff\2\2\u1e37\u1e39\7I\2\2\u1e38\u1e37\3\2\2\2\u1e38\u1e39"+
		"\3\2\2\2\u1e39\u1e3a\3\2\2\2\u1e3a\u1e3c\5\u053a\u029e\2\u1e3b\u1e3d\5"+
		"\u042a\u0216\2\u1e3c\u1e3b\3\2\2\2\u1e3c\u1e3d\3\2\2\2\u1e3d\u1e3e\3\2"+
		"\2\2\u1e3e\u1e41\7f\2\2\u1e3f\u1e42\5\u03c4\u01e3\2\u1e40\u1e42\5\u053a"+
		"\u029e\2\u1e41\u1e3f\3\2\2\2\u1e41\u1e40\3\2\2\2\u1e42\u1e44\3\2\2\2\u1e43"+
		"\u1e45\5\u042a\u0216\2\u1e44\u1e43\3\2\2\2\u1e44\u1e45\3\2\2\2\u1e45\u1e46"+
		"\3\2\2\2\u1e46\u1e47\7R\2\2\u1e47\u1e50\5\u048c\u0247\2\u1e48\u1e4a\5"+
		"\u039c\u01cf\2\u1e49\u1e4b\5\u039e\u01d0\2\u1e4a\u1e49\3\2\2\2\u1e4a\u1e4b"+
		"\3\2\2\2\u1e4b\u1e51\3\2\2\2\u1e4c\u1e4e\5\u039e\u01d0\2\u1e4d\u1e4f\5"+
		"\u039c\u01cf\2\u1e4e\u1e4d\3\2\2\2\u1e4e\u1e4f\3\2\2\2\u1e4f\u1e51\3\2"+
		"\2\2\u1e50\u1e48\3\2\2\2\u1e50\u1e4c\3\2\2\2\u1e51\u1e53\3\2\2\2\u1e52"+
		"\u1e54\5\u03a0\u01d1\2\u1e53\u1e52\3\2\2\2\u1e53\u1e54\3\2\2\2\u1e54\u039b"+
		"\3\2\2\2\u1e55\u1e56\7h\2\2\u1e56\u1e57\7O\2\2\u1e57\u1e5a\7\u00fc\2\2"+
		"\u1e58\u1e59\7#\2\2\u1e59\u1e5b\5\u048c\u0247\2\u1e5a\u1e58\3\2\2\2\u1e5a"+
		"\u1e5b\3\2\2\2\u1e5b\u1e5d\3\2\2\2\u1e5c\u1e5e\7_\2\2\u1e5d\u1e5c\3\2"+
		"\2\2\u1e5d\u1e5e\3\2\2\2\u1e5e\u1e5f\3\2\2\2\u1e5f\u1e64\7\u00ea\2\2\u1e60"+
		"\u1e61\7\4\2\2\u1e61\u1e62\5\u0390\u01c9\2\u1e62\u1e63\7\5\2\2\u1e63\u1e65"+
		"\3\2\2\2\u1e64\u1e60\3\2\2\2\u1e64\u1e65\3\2\2\2\u1e65\u1e66\3\2\2\2\u1e66"+
		"\u1e67\5\u0420\u0211\2\u1e67\u039d\3\2\2\2\u1e68\u1e69\7h\2\2\u1e69\u1e6c"+
		"\7\u00fc\2\2\u1e6a\u1e6b\7#\2\2\u1e6b\u1e6d\5\u048c\u0247\2\u1e6c\u1e6a"+
		"\3\2\2\2\u1e6c\u1e6d\3\2\2\2\u1e6d\u1e6f\3\2\2\2\u1e6e\u1e70\7_\2\2\u1e6f"+
		"\u1e6e\3\2\2\2\u1e6f\u1e70\3\2\2\2\u1e70\u1e71\3\2\2\2\u1e71\u1e72\7\u016c"+
		"\2\2\u1e72\u1e73\7\u0148\2\2\u1e73\u1e74\5\u03b2\u01da\2\u1e74\u039f\3"+
		"\2\2\2\u1e75\u1e76\7h\2\2\u1e76\u1e78\7\u00fc\2\2\u1e77\u1e79\7_\2\2\u1e78"+
		"\u1e77\3\2\2\2\u1e78\u1e79\3\2\2\2\u1e79\u1e7a\3\2\2\2\u1e7a\u1e7b\7\u00b8"+
		"\2\2\u1e7b\u03a1\3\2\2\2\u1e7c\u1e7d\5\u03d8\u01ed\2\u1e7d\u1e7e\7\u00b8"+
		"\2\2\u1e7e\u1e7f\7B\2\2\u1e7f\u1e80\5\u0438\u021d\2\u1e80\u1e81\5\u03a4"+
		"\u01d3\2\u1e81\u1e82\5\u044a\u0226\2\u1e82\u1e83\5\u0398\u01cd\2\u1e83"+
		"\u03a3\3\2\2\2\u1e84\u1e85\7f\2\2\u1e85\u1e88\5\u0424\u0213\2\u1e86\u1e88"+
		"\3\2\2\2\u1e87\u1e84\3\2\2\2\u1e87\u1e86\3\2\2\2\u1e88\u03a5\3\2\2\2\u1e89"+
		"\u1e8a\7\u00f9\2\2\u1e8a\u1e8b\5\u03e0\u01f1\2\u1e8b\u1e8c\5\u0436\u021c"+
		"\2\u1e8c\u1e8d\5\u03a8\u01d5\2\u1e8d\u1e8e\5\u03ac\u01d7\2\u1e8e\u03a7"+
		"\3\2\2\2\u1e8f\u1e90\7F\2\2\u1e90\u1e91\5\u03aa\u01d6\2\u1e91\u1e92\7"+
		"\u0102\2\2\u1e92\u1e95\3\2\2\2\u1e93\u1e95\3\2\2\2\u1e94\u1e8f\3\2\2\2"+
		"\u1e94\u1e93\3\2\2\2\u1e95\u03a9\3\2\2\2\u1e96\u1e97\7\u0085\2\2\u1e97"+
		"\u1ea3\t$\2\2\u1e98\u1e99\7\u0199\2\2\u1e99\u1ea3\t$\2\2\u1e9a\u1e9f\7"+
		"\u0149\2\2\u1e9b\u1e9c\7\u016c\2\2\u1e9c\u1ea0\7\u00cb\2\2\u1e9d\u1e9e"+
		"\7\u0199\2\2\u1e9e\u1ea0\7\u00cb\2\2\u1e9f\u1e9b\3\2\2\2\u1e9f\u1e9d\3"+
		"\2\2\2\u1e9f\u1ea0\3\2\2\2\u1ea0\u1ea3\3\2\2\2\u1ea1\u1ea3\7\u00cb\2\2"+
		"\u1ea2\u1e96\3\2\2\2\u1ea2\u1e98\3\2\2\2\u1ea2\u1e9a\3\2\2\2\u1ea2\u1ea1"+
		"\3\2\2\2\u1ea3\u03ab\3\2\2\2\u1ea4\u1ea7\7\u010b\2\2\u1ea5\u1ea7\3\2\2"+
		"\2\u1ea6\u1ea4\3\2\2\2\u1ea6\u1ea5\3\2\2\2\u1ea7\u03ad\3\2\2\2\u1ea8\u1ead"+
		"\7\u010b\2\2\u1ea9\u1eaa\7\u01d3\2\2\u1eaa\u1ead\7\u01d4\2\2\u1eab\u1ead"+
		"\3\2\2\2\u1eac\u1ea8\3\2\2\2\u1eac\u1ea9\3\2\2\2\u1eac\u1eab\3\2\2\2\u1ead"+
		"\u03af\3\2\2\2\u1eae\u1eaf\5\u03d8\u01ed\2\u1eaf\u1eb0\7\u016c\2\2\u1eb0"+
		"\u1eb1\5\u0438\u021d\2\u1eb1\u1eb2\7\u0148\2\2\u1eb2\u1eb3\5\u03b2\u01da"+
		"\2\u1eb3\u1eb4\5\u0422\u0212\2\u1eb4\u1eb5\5\u044a\u0226\2\u1eb5\u1eb6"+
		"\5\u0398\u01cd\2\u1eb6\u03b1\3\2\2\2\u1eb7\u1ebc\5\u03b4\u01db\2\u1eb8"+
		"\u1eb9\7\b\2\2\u1eb9\u1ebb\5\u03b4\u01db\2\u1eba\u1eb8\3\2\2\2\u1ebb\u1ebe"+
		"\3\2\2\2\u1ebc\u1eba\3\2\2\2\u1ebc\u1ebd\3\2\2\2\u1ebd\u03b3\3\2\2\2\u1ebe"+
		"\u1ebc\3\2\2\2\u1ebf\u1ec0\5\u03b6\u01dc\2\u1ec0\u1ec1\7\f\2\2\u1ec1\u1ec2"+
		"\5\u048c\u0247\2\u1ec2\u1eca\3\2\2\2\u1ec3\u1ec4\7\4\2\2\u1ec4\u1ec5\5"+
		"\u03b8\u01dd\2\u1ec5\u1ec6\7\5\2\2\u1ec6\u1ec7\7\f\2\2\u1ec7\u1ec8\5\u048c"+
		"\u0247\2\u1ec8\u1eca\3\2\2\2\u1ec9\u1ebf\3\2\2\2\u1ec9\u1ec3\3\2\2\2\u1eca"+
		"\u03b5\3\2\2\2\u1ecb\u1ecc\5\u055e\u02b0\2\u1ecc\u1ecd\5\u0530\u0299\2"+
		"\u1ecd\u03b7\3\2\2\2\u1ece\u1ed3\5\u03b6\u01dc\2\u1ecf\u1ed0\7\b\2\2\u1ed0"+
		"\u1ed2\5\u03b6\u01dc\2\u1ed1\u1ecf\3\2\2\2\u1ed2\u1ed5\3\2\2\2\u1ed3\u1ed1"+
		"\3\2\2\2\u1ed3\u1ed4\3\2\2\2\u1ed4\u03b9\3\2\2\2\u1ed5\u1ed3\3\2\2\2\u1ed6"+
		"\u1ed7\7\u00b4\2\2\u1ed7\u1ed8\5\u03bc\u01df\2\u1ed8\u1ed9\5\u03be\u01e0"+
		"\2\u1ed9\u1eda\7\u00ae\2\2\u1eda\u1edb\5\u03c0\u01e1\2\u1edb\u1edc\7@"+
		"\2\2\u1edc\u1edd\5\u03c2\u01e2\2\u1edd\u03bb\3\2\2\2\u1ede\u1edf\5\u053e"+
		"\u02a0\2\u1edf\u03bd\3\2\2\2\u1ee0\u1ee1\7\u0108\2\2\u1ee1\u1ee6\7\u013f"+
		"\2\2\u1ee2\u1ee6\7\u013f\2\2\u1ee3\u1ee6\7m\2\2\u1ee4\u1ee6\7\u00e9\2"+
		"\2\u1ee5\u1ee0\3\2\2\2\u1ee5\u1ee2\3\2\2\2\u1ee5\u1ee3\3\2\2\2\u1ee5\u1ee4"+
		"\3\2\2\2\u1ee6\u1ee9\3\2\2\2\u1ee7\u1ee5\3\2\2\2\u1ee7\u1ee8\3\2\2\2\u1ee8"+
		"\u03bf\3\2\2\2\u1ee9\u1ee7\3\2\2\2\u1eea\u1ef0\3\2\2\2\u1eeb\u1eec\7k"+
		"\2\2\u1eec\u1ef0\7\u00db\2\2\u1eed\u1eee\7\u0176\2\2\u1eee\u1ef0\7\u00db"+
		"\2\2\u1eef\u1eea\3\2\2\2\u1eef\u1eeb\3\2\2\2\u1eef\u1eed\3\2\2\2\u1ef0"+
		"\u03c1\3\2\2\2\u1ef1\u1ef4\5\u03c6\u01e4\2\u1ef2\u1ef4\5\u03c4\u01e3\2"+
		"\u1ef3\u1ef1\3\2\2\2\u1ef3\u1ef2\3\2\2\2\u1ef4\u03c3\3\2\2\2\u1ef5\u1ef6"+
		"\7\4\2\2\u1ef6\u1ef7\5\u03c6\u01e4\2\u1ef7\u1ef8\7\5\2\2\u1ef8\u1efe\3"+
		"\2\2\2\u1ef9\u1efa\7\4\2\2\u1efa\u1efb\5\u03c4\u01e3\2\u1efb\u1efc\7\5"+
		"\2\2\u1efc\u1efe\3\2\2\2\u1efd\u1ef5\3\2\2\2\u1efd\u1ef9\3\2\2\2\u1efe"+
		"\u03c5\3\2\2\2\u1eff\u1f00\5\u03c8\u01e5\2\u1f00\u1f07\5\u03e8\u01f5\2"+
		"\u1f01\u1f02\5\u0414\u020b\2\u1f02\u1f03\5\u03f2\u01fa\2\u1f03\u1f08\3"+
		"\2\2\2\u1f04\u1f05\5\u03f0\u01f9\2\u1f05\u1f06\5\u0416\u020c\2\u1f06\u1f08"+
		"\3\2\2\2\u1f07\u1f01\3\2\2\2\u1f07\u1f04\3\2\2\2\u1f07\u1f08\3\2\2\2\u1f08"+
		"\u1f15\3\2\2\2\u1f09\u1f0a\5\u03d0\u01e9\2\u1f0a\u1f0b\5\u03c8\u01e5\2"+
		"\u1f0b\u1f12\5\u03e8\u01f5\2\u1f0c\u1f0d\5\u0414\u020b\2\u1f0d\u1f0e\5"+
		"\u03f2\u01fa\2\u1f0e\u1f13\3\2\2\2\u1f0f\u1f10\5\u03f0\u01f9\2\u1f10\u1f11"+
		"\5\u0416\u020c\2\u1f11\u1f13\3\2\2\2\u1f12\u1f0c\3\2\2\2\u1f12\u1f0f\3"+
		"\2\2\2\u1f12\u1f13\3\2\2\2\u1f13\u1f15\3\2\2\2\u1f14\u1eff\3\2\2\2\u1f14"+
		"\u1f09\3\2\2\2\u1f15\u03c7\3\2\2\2\u1f16\u1f19\5\u03ca\u01e6\2\u1f17\u1f19"+
		"\5\u03c4\u01e3\2\u1f18\u1f16\3\2\2\2\u1f18\u1f17\3\2\2\2\u1f19\u03c9\3"+
		"\2\2\2\u1f1a\u1f22\7Z\2\2\u1f1b\u1f1c\5\u03e6\u01f4\2\u1f1c\u1f1d\5\u03da"+
		"\u01ee\2\u1f1d\u1f1e\5\u0532\u029a\2\u1f1e\u1f23\3\2\2\2\u1f1f\u1f20\5"+
		"\u03e4\u01f3\2\u1f20\u1f21\5\u0534\u029b\2\u1f21\u1f23\3\2\2\2\u1f22\u1f1b"+
		"\3\2\2\2\u1f22\u1f1f\3\2\2\2\u1f23\u1f24\3\2\2\2\u1f24\u1f25\5\u03da\u01ee"+
		"\2\u1f25\u1f26\5\u0422\u0212\2\u1f26\u1f27\5\u0448\u0225\2\u1f27\u1f28"+
		"\5\u0404\u0203\2\u1f28\u1f29\5\u0412\u020a\2\u1f29\u1f2a\5\u04da\u026e"+
		"\2\u1f2a\u1f35\3\2\2\2\u1f2b\u1f35\5\u0420\u0211\2\u1f2c\u1f2d\7^\2\2"+
		"\u1f2d\u1f35\5\u0434\u021b\2\u1f2e\u1f2f\5\u03c4\u01e3\2\u1f2f\u1f32\5"+
		"\u03ce\u01e8\2\u1f30\u1f33\5\u03ca\u01e6\2\u1f31\u1f33\5\u03c4\u01e3\2"+
		"\u1f32\u1f30\3\2\2\2\u1f32\u1f31\3\2\2\2\u1f33\u1f35\3\2\2\2\u1f34\u1f1a"+
		"\3\2\2\2\u1f34\u1f2b\3\2\2\2\u1f34\u1f2c\3\2\2\2\u1f34\u1f2e\3\2\2\2\u1f35"+
		"\u1f3d\3\2\2\2\u1f36\u1f39\5\u03ce\u01e8\2\u1f37\u1f3a\5\u03ca\u01e6\2"+
		"\u1f38\u1f3a\5\u03c4\u01e3\2\u1f39\u1f37\3\2\2\2\u1f39\u1f38\3\2\2\2\u1f3a"+
		"\u1f3c\3\2\2\2\u1f3b\u1f36\3\2\2\2\u1f3c\u1f3f\3\2\2\2\u1f3d\u1f3b\3\2"+
		"\2\2\u1f3d\u1f3e\3\2\2\2\u1f3e\u03cb\3\2\2\2\u1f3f\u1f3d\3\2\2\2\u1f40"+
		"\u1f44\7c\2\2\u1f41\u1f44\7H\2\2\u1f42\u1f44\7=\2\2\u1f43\u1f40\3\2\2"+
		"\2\u1f43\u1f41\3\2\2\2\u1f43\u1f42\3\2\2\2\u1f44\u03cd\3\2\2\2\u1f45\u1f46"+
		"\5\u03cc\u01e7\2\u1f46\u1f47\5\u03e2\u01f2\2\u1f47\u03cf\3\2\2\2\u1f48"+
		"\u1f4a\7k\2\2\u1f49\u1f4b\7\u012a\2\2\u1f4a\u1f49\3\2\2\2\u1f4a\u1f4b"+
		"\3\2\2\2\u1f4b\u1f4c\3\2\2\2\u1f4c\u1f4d\5\u03d2\u01ea\2\u1f4d\u03d1\3"+
		"\2\2\2\u1f4e\u1f53\5\u03d4\u01eb\2\u1f4f\u1f50\7\b\2\2\u1f50\u1f52\5\u03d4"+
		"\u01eb\2\u1f51\u1f4f\3\2\2\2\u1f52\u1f55\3\2\2\2\u1f53\u1f51\3\2\2\2\u1f53"+
		"\u1f54\3\2\2\2\u1f54\u03d3\3\2\2\2\u1f55\u1f53\3\2\2\2\u1f56\u1f57\5\u053e"+
		"\u02a0\2\u1f57\u1f58\5\u0368\u01b5\2\u1f58\u1f59\7&\2\2\u1f59\u1f5a\5"+
		"\u03d6\u01ec\2\u1f5a\u1f5b\7\4\2\2\u1f5b\u1f5c\5\u0380\u01c1\2\u1f5c\u1f5d"+
		"\7\5\2\2\u1f5d\u03d5\3\2\2\2\u1f5e\u1f63\7\u00fd\2\2\u1f5f\u1f60\7O\2"+
		"\2\u1f60\u1f63\7\u00fd\2\2\u1f61\u1f63\3\2\2\2\u1f62\u1f5e\3\2\2\2\u1f62"+
		"\u1f5f\3\2\2\2\u1f62\u1f61\3\2\2\2\u1f63\u03d7\3\2\2\2\u1f64\u1f67\5\u03d0"+
		"\u01e9\2\u1f65\u1f67\3\2\2\2\u1f66\u1f64\3\2\2\2\u1f66\u1f65\3\2\2\2\u1f67"+
		"\u03d9\3\2\2\2\u1f68\u1f6d\7I\2\2\u1f69\u1f6a\5\u03dc\u01ef\2\u1f6a\u1f6b"+
		"\5\u03de\u01f0\2\u1f6b\u1f6e\3\2\2\2\u1f6c\u1f6e\5\u061e\u0310\2\u1f6d"+
		"\u1f69\3\2\2\2\u1f6d\u1f6c\3\2\2\2\u1f6e\u1f71\3\2\2\2\u1f6f\u1f71\3\2"+
		"\2\2\u1f70\u1f68\3\2\2\2\u1f70\u1f6f\3\2\2\2\u1f71\u03db\3\2\2\2\u1f72"+
		"\u1f75\3\2\2\2\u1f73\u1f75\7\u0155\2\2\u1f74\u1f72\3\2\2\2\u1f74\u1f73"+
		"\3\2\2\2\u1f75\u03dd\3\2\2\2\u1f76\u1f78\t%\2\2\u1f77\u1f76\3\2\2\2\u1f77"+
		"\u1f78\3\2\2\2\u1f78\u1f79\3\2\2\2\u1f79\u1f7a\t\r\2\2\u1f7a\u1f7b\5\u03e0"+
		"\u01f1\2\u1f7b\u1f7c\5\u053a\u029e\2\u1f7c\u1f85\3\2\2\2\u1f7d\u1f7e\7"+
		"\u016a\2\2\u1f7e\u1f7f\5\u03e0\u01f1\2\u1f7f\u1f80\5\u053a\u029e\2\u1f80"+
		"\u1f85\3\2\2\2\u1f81\u1f82\7^\2\2\u1f82\u1f85\5\u053a\u029e\2\u1f83\u1f85"+
		"\5\u053a\u029e\2\u1f84\u1f77\3\2\2\2\u1f84\u1f7d\3\2\2\2\u1f84\u1f81\3"+
		"\2\2\2\u1f84\u1f83\3\2\2\2\u1f85\u03df\3\2\2\2\u1f86\u1f89\7^\2\2\u1f87"+
		"\u1f89\3\2\2\2\u1f88\u1f86\3\2\2\2\u1f88\u1f87\3\2\2\2\u1f89\u03e1\3\2"+
		"\2\2\u1f8a\u1f8e\7 \2\2\u1f8b\u1f8e\7:\2\2\u1f8c\u1f8e\3\2\2\2\u1f8d\u1f8a"+
		"\3\2\2\2\u1f8d\u1f8b\3\2\2\2\u1f8d\u1f8c\3\2\2\2\u1f8e\u03e3\3\2\2\2\u1f8f"+
		"\u1f95\7:\2\2\u1f90\u1f91\7R\2\2\u1f91\u1f92\7\4\2\2\u1f92\u1f93\5\u0502"+
		"\u0282\2\u1f93\u1f94\7\5\2\2\u1f94\u1f96\3\2\2\2\u1f95\u1f90\3\2\2\2\u1f95"+
		"\u1f96\3\2\2\2\u1f96\u03e5\3\2\2\2\u1f97\u1f9a\7 \2\2\u1f98\u1f9a\3\2"+
		"\2\2\u1f99\u1f97\3\2\2\2\u1f99\u1f98\3\2\2\2\u1f9a\u03e7\3\2\2\2\u1f9b"+
		"\u1f9e\5\u03ea\u01f6\2\u1f9c\u1f9e\3\2\2\2\u1f9d\u1f9b\3\2\2\2\u1f9d\u1f9c"+
		"\3\2\2\2\u1f9e\u03e9\3\2\2\2\u1f9f\u1fa0\7U\2\2\u1fa0\u1fa1\7\u0095\2"+
		"\2\u1fa1\u1fa2\5\u03ec\u01f7\2\u1fa2\u03eb\3\2\2\2\u1fa3\u1fa8\5\u03ee"+
		"\u01f8\2\u1fa4\u1fa5\7\b\2\2\u1fa5\u1fa7\5\u03ee\u01f8\2\u1fa6\u1fa4\3"+
		"\2\2\2\u1fa7\u1faa\3\2\2\2\u1fa8\u1fa6\3\2\2\2\u1fa8\u1fa9\3\2\2\2\u1fa9"+
		"\u03ed\3\2\2\2\u1faa\u1fa8\3\2\2\2\u1fab\u1faf\5\u048c\u0247\2\u1fac\u1fad"+
		"\7f\2\2\u1fad\u1fb0\5\u04fe\u0280\2\u1fae\u1fb0\5\u0266\u0134\2\u1faf"+
		"\u1fac\3\2\2\2\u1faf\u1fae\3\2\2\2\u1fb0\u1fb1\3\2\2\2\u1fb1\u1fb2\5\u0268"+
		"\u0135\2\u1fb2\u03ef\3\2\2\2\u1fb3\u1fb5\5\u03f4\u01fb\2\u1fb4\u1fb6\5"+
		"\u03f6\u01fc\2\u1fb5\u1fb4\3\2\2\2\u1fb5\u1fb6\3\2\2\2\u1fb6\u1fbc\3\2"+
		"\2\2\u1fb7\u1fb9\5\u03f6\u01fc\2\u1fb8\u1fba\5\u03f4\u01fb\2\u1fb9\u1fb8"+
		"\3\2\2\2\u1fb9\u1fba\3\2\2\2\u1fba\u1fbc\3\2\2\2\u1fbb\u1fb3\3\2\2\2\u1fbb"+
		"\u1fb7\3\2\2\2\u1fbc\u03f1\3\2\2\2\u1fbd\u1fc0\5\u03f0\u01f9\2\u1fbe\u1fc0"+
		"\3\2\2\2\u1fbf\u1fbd\3\2\2\2\u1fbf\u1fbe\3\2\2\2\u1fc0\u03f3\3\2\2\2\u1fc1"+
		"\u1fc2\7L\2\2\u1fc2\u1fc5\5\u03f8\u01fd\2\u1fc3\u1fc4\7\b\2\2\u1fc4\u1fc6"+
		"\5\u03fa\u01fe\2\u1fc5\u1fc3\3\2\2\2\u1fc5\u1fc6\3\2\2\2\u1fc6\u1fd9\3"+
		"\2\2\2\u1fc7\u1fc8\7?\2\2\u1fc8\u1fd6\5\u0402\u0202\2\u1fc9\u1fca\5\u03fc"+
		"\u01ff\2\u1fca\u1fce\5\u0400\u0201\2\u1fcb\u1fcf\7S\2\2\u1fcc\u1fcd\7"+
		"k\2\2\u1fcd\u1fcf\7\u01d5\2\2\u1fce\u1fcb\3\2\2\2\u1fce\u1fcc\3\2\2\2"+
		"\u1fcf\u1fd7\3\2\2\2\u1fd0\u1fd4\5\u0400\u0201\2\u1fd1\u1fd5\7S\2\2\u1fd2"+
		"\u1fd3\7k\2\2\u1fd3\u1fd5\7\u01d5\2\2\u1fd4\u1fd1\3\2\2\2\u1fd4\u1fd2"+
		"\3\2\2\2\u1fd5\u1fd7\3\2\2\2\u1fd6\u1fc9\3\2\2\2\u1fd6\u1fd0\3\2\2\2\u1fd7"+
		"\u1fd9\3\2\2\2\u1fd8\u1fc1\3\2\2\2\u1fd8\u1fc7\3\2\2\2\u1fd9\u03f5\3\2"+
		"\2\2\u1fda\u1fdf\7Q\2\2\u1fdb\u1fe0\5\u03fa\u01fe\2\u1fdc\u1fdd\5\u03fc"+
		"\u01ff\2\u1fdd\u1fde\5\u0400\u0201\2\u1fde\u1fe0\3\2\2\2\u1fdf\u1fdb\3"+
		"\2\2\2\u1fdf\u1fdc\3\2\2\2\u1fe0\u03f7\3\2\2\2\u1fe1\u1fe4\5\u048c\u0247"+
		"\2\u1fe2\u1fe4\7 \2\2\u1fe3\u1fe1\3\2\2\2\u1fe3\u1fe2\3\2\2\2\u1fe4\u03f9"+
		"\3\2\2\2\u1fe5\u1fe6\5\u048c\u0247\2\u1fe6\u03fb\3\2\2\2\u1fe7\u1fed\5"+
		"\u04b8\u025d\2\u1fe8\u1fe9\7\16\2\2\u1fe9\u1fed\5\u03fe\u0200\2\u1fea"+
		"\u1feb\7\17\2\2\u1feb\u1fed\5\u03fe\u0200\2\u1fec\u1fe7\3\2\2\2\u1fec"+
		"\u1fe8\3\2\2\2\u1fec\u1fea\3\2\2\2\u1fed\u03fd\3\2\2\2\u1fee\u1ff1\5\u054e"+
		"\u02a8\2\u1fef\u1ff1\5\u054c\u02a7\2\u1ff0\u1fee\3\2\2\2\u1ff0\u1fef\3"+
		"\2\2\2\u1ff1\u03ff\3\2\2\2\u1ff2\u1ff3\t&\2\2\u1ff3\u0401\3\2\2\2\u1ff4"+
		"\u1ff5\t\'\2\2\u1ff5\u0403\3\2\2\2\u1ff6\u1ff7\7D\2\2\u1ff7\u1ff8\7\u0095"+
		"\2\2\u1ff8\u1ffb\5\u0406\u0204\2\u1ff9\u1ffb\3\2\2\2\u1ffa\u1ff6\3\2\2"+
		"\2\u1ffa\u1ff9\3\2\2\2\u1ffb\u0405\3\2\2\2\u1ffc\u2001\5\u0408\u0205\2"+
		"\u1ffd\u1ffe\7\b\2\2\u1ffe\u2000\5\u0408\u0205\2\u1fff\u1ffd\3\2\2\2\u2000"+
		"\u2003\3\2\2\2\u2001\u1fff\3\2\2\2\u2001\u2002\3\2\2\2\u2002\u0407\3\2"+
		"\2\2\u2003\u2001\3\2\2\2\u2004\u200a\5\u048c\u0247\2\u2005\u200a\5\u040a"+
		"\u0206\2\u2006\u200a\5\u040e\u0208\2\u2007\u200a\5\u040c\u0207\2\u2008"+
		"\u200a\5\u0410\u0209\2\u2009\u2004\3\2\2\2\u2009\u2005\3\2\2\2\u2009\u2006"+
		"\3\2\2\2\u2009\u2007\3\2\2\2\u2009\u2008\3\2\2\2\u200a\u0409\3\2\2\2\u200b"+
		"\u200c\7\4\2\2\u200c\u200d\7\5\2\2\u200d\u040b\3\2\2\2\u200e\u200f\7\u01d6"+
		"\2\2\u200f\u2010\7\4\2\2\u2010\u2011\5\u0502\u0282\2\u2011\u2012\7\5\2"+
		"\2\u2012\u040d\3\2\2\2\u2013\u2014\7\u01d7\2\2\u2014\u2015\7\4\2\2\u2015"+
		"\u2016\5\u0502\u0282\2\u2016\u2017\7\5\2\2\u2017\u040f\3\2\2\2\u2018\u2019"+
		"\7\u01d8\2\2\u2019\u201a\7\u01d9\2\2\u201a\u201b\7\4\2\2\u201b\u201c\5"+
		"\u0406\u0204\2\u201c\u201d\7\5\2\2\u201d\u0411\3\2\2\2\u201e\u201f\7E"+
		"\2\2\u201f\u2022\5\u048c\u0247\2\u2020\u2022\3\2\2\2\u2021\u201e\3\2\2"+
		"\2\u2021\u2020\3\2\2\2\u2022\u0413\3\2\2\2\u2023\u2028\5\u0418\u020d\2"+
		"\u2024\u2025\7@\2\2\u2025\u2026\7\u0127\2\2\u2026\u2028\7S\2\2\u2027\u2023"+
		"\3\2\2\2\u2027\u2024\3\2\2\2\u2028\u0415\3\2\2\2\u2029\u202c\5\u0414\u020b"+
		"\2\u202a\u202c\3\2\2\2\u202b\u2029\3\2\2\2\u202b\u202a\3\2\2\2\u202c\u0417"+
		"\3\2\2\2\u202d\u202f\5\u041a\u020e\2\u202e\u202d\3\2\2\2\u202f\u2030\3"+
		"\2\2\2\u2030\u202e\3\2\2\2\u2030\u2031\3\2\2\2\u2031\u0419\3\2\2\2\u2032"+
		"\u2033\5\u041c\u020f\2\u2033\u2034\5\u041e\u0210\2\u2034\u2035\5\u03ae"+
		"\u01d8\2\u2035\u041b\3\2\2\2\u2036\u2040\7@\2\2\u2037\u2038\7\u0108\2"+
		"\2\u2038\u203a\7\u00ee\2\2\u2039\u2037\3\2\2\2\u2039\u203a\3\2\2\2\u203a"+
		"\u203b\3\2\2\2\u203b\u2041\7\u016c\2\2\u203c\u203e\7\u00ee\2\2\u203d\u203c"+
		"\3\2\2\2\u203d\u203e\3\2\2\2\u203e\u203f\3\2\2\2\u203f\u2041\7\u0149\2"+
		"\2\u2040\u2039\3\2\2\2\u2040\u203d\3\2\2\2\u2041\u041d\3\2\2\2\u2042\u2043"+
		"\7\u010e\2\2\u2043\u2046\5\u0538\u029d\2\u2044\u2046\3\2\2\2\u2045\u2042"+
		"\3\2\2\2\u2045\u2044\3\2\2\2\u2046\u041f\3\2\2\2\u2047\u2048\7\u01a1\2"+
		"\2\u2048\u2049\7\4\2\2\u2049\u204a\5\u0502\u0282\2\u204a\u2052\7\5\2\2"+
		"\u204b\u204c\7\b\2\2\u204c\u204d\7\4\2\2\u204d\u204e\5\u0502\u0282\2\u204e"+
		"\u204f\7\5\2\2\u204f\u2051\3\2\2\2\u2050\u204b\3\2\2\2\u2051\u2054\3\2"+
		"\2\2\u2052\u2050\3\2\2\2\u2052\u2053\3\2\2\2\u2053\u0421\3\2\2\2\u2054"+
		"\u2052\3\2\2\2\u2055\u2056\7B\2\2\u2056\u2059\5\u0424\u0213\2\u2057\u2059"+
		"\3\2\2\2\u2058\u2055\3\2\2\2\u2058\u2057\3\2\2\2\u2059\u0423\3\2\2\2\u205a"+
		"\u2064\5\u0426\u0214\2\u205b\u2060\5\u0428\u0215\2\u205c\u205d\7\b\2\2"+
		"\u205d\u205f\5\u0428\u0215\2\u205e\u205c\3\2\2\2\u205f\u2062\3\2\2\2\u2060"+
		"\u205e\3\2\2\2\u2060\u2061\3\2\2\2\u2061\u2064\3\2\2\2\u2062\u2060\3\2"+
		"\2\2\u2063\u205a\3\2\2\2\u2063\u205b\3\2\2\2\u2064\u0425\3\2\2\2\u2065"+
		"\u2068\5\u0428\u0215\2\u2066\u2067\7\b\2\2\u2067\u2069\5\u0428\u0215\2"+
		"\u2068\u2066\3\2\2\2\u2069\u206a\3\2\2\2\u206a\u2068\3\2\2\2\u206a\u206b"+
		"\3\2\2\2\u206b\u0427\3\2\2\2\u206c\u206d\5\u0434\u021b\2\u206d\u206f\5"+
		"\u042c\u0217\2\u206e\u2070\5\u043a\u021e\2\u206f\u206e\3\2\2\2\u206f\u2070"+
		"\3\2\2\2\u2070\u209e\3\2\2\2\u2071\u2072\5\u043e\u0220\2\u2072\u2073\5"+
		"\u042e\u0218\2\u2073\u209e\3\2\2\2\u2074\u2075\5\u0452\u022a\2\u2075\u2076"+
		"\5\u042c\u0217\2\u2076\u209e\3\2\2\2\u2077\u2078\5\u03c4\u01e3\2\u2078"+
		"\u2079\5\u042c\u0217\2\u2079\u209e\3\2\2\2\u207a\u2084\7J\2\2\u207b\u207c"+
		"\5\u0452\u022a\2\u207c\u207d\5\u042c\u0217\2\u207d\u2085\3\2\2\2\u207e"+
		"\u207f\5\u043e\u0220\2\u207f\u2080\5\u042e\u0218\2\u2080\u2085\3\2\2\2"+
		"\u2081\u2082\5\u03c4\u01e3\2\u2082\u2083\5\u042c\u0217\2\u2083\u2085\3"+
		"\2\2\2\u2084\u207b\3\2\2\2\u2084\u207e\3\2\2\2\u2084\u2081\3\2\2\2\u2085"+
		"\u209e\3\2\2\2\u2086\u2087\7\4\2\2\u2087\u2098\5\u0428\u0215\2\u2088\u2089"+
		"\7p\2\2\u2089\u208a\7x\2\2\u208a\u2099\5\u0428\u0215\2\u208b\u208d\7{"+
		"\2\2\u208c\u208e\5\u0430\u0219\2\u208d\u208c\3\2\2\2\u208d\u208e\3\2\2"+
		"\2\u208e\u208f\3\2\2\2\u208f\u2090\7x\2\2\u2090\u2099\5\u0428\u0215\2"+
		"\u2091\u2093\5\u0430\u0219\2\u2092\u2091\3\2\2\2\u2092\u2093\3\2\2\2\u2093"+
		"\u2094\3\2\2\2\u2094\u2095\7x\2\2\u2095\u2096\5\u0428\u0215\2\u2096\u2097"+
		"\5\u0432\u021a\2\u2097\u2099\3\2\2\2\u2098\u2088\3\2\2\2\u2098\u208b\3"+
		"\2\2\2\u2098\u2092\3\2\2\2\u2098\u2099\3\2\2\2\u2099\u209a\3\2\2\2\u209a"+
		"\u209b\7\5\2\2\u209b\u209c\5\u042c\u0217\2\u209c\u209e\3\2\2\2\u209d\u206c"+
		"\3\2\2\2\u209d\u2071\3\2\2\2\u209d\u2074\3\2\2\2\u209d\u2077\3\2\2\2\u209d"+
		"\u207a\3\2\2\2\u209d\u2086\3\2\2\2\u209e\u20b1\3\2\2\2\u209f\u20a0\7p"+
		"\2\2\u20a0\u20a1\7x\2\2\u20a1\u20b0\5\u0428\u0215\2\u20a2\u20a4\7{\2\2"+
		"\u20a3\u20a5\5\u0430\u0219\2\u20a4\u20a3\3\2\2\2\u20a4\u20a5\3\2\2\2\u20a5"+
		"\u20a6\3\2\2\2\u20a6\u20a7\7x\2\2\u20a7\u20b0\5\u0428\u0215\2\u20a8\u20aa"+
		"\5\u0430\u0219\2\u20a9\u20a8\3\2\2\2\u20a9\u20aa\3\2\2\2\u20aa\u20ab\3"+
		"\2\2\2\u20ab\u20ac\7x\2\2\u20ac\u20ad\5\u0428\u0215\2\u20ad\u20ae\5\u0432"+
		"\u021a\2\u20ae\u20b0\3\2\2\2\u20af\u209f\3\2\2\2\u20af\u20a2\3\2\2\2\u20af"+
		"\u20a9\3\2\2\2\u20b0\u20b3\3\2\2\2\u20b1\u20af\3\2\2\2\u20b1\u20b2\3\2"+
		"\2\2\u20b2\u0429\3\2\2\2\u20b3\u20b1\3\2\2\2\u20b4\u20b6\7&\2\2\u20b5"+
		"\u20b4\3\2\2\2\u20b5\u20b6\3\2\2\2\u20b6\u20b7\3\2\2\2\u20b7\u20bc\5\u055e"+
		"\u02b0\2\u20b8\u20b9\7\4\2\2\u20b9\u20ba\5\u053c\u029f\2\u20ba\u20bb\7"+
		"\5\2\2\u20bb\u20bd\3\2\2\2\u20bc\u20b8\3\2\2\2\u20bc\u20bd\3\2\2\2\u20bd"+
		"\u042b\3\2\2\2\u20be\u20c1\5\u042a\u0216\2\u20bf\u20c1\3\2\2\2\u20c0\u20be"+
		"\3\2\2\2\u20c0\u20bf\3\2\2\2\u20c1\u042d\3\2\2\2\u20c2\u20d0\5\u042a\u0216"+
		"\2\u20c3\u20c5\7&\2\2\u20c4\u20c6\5\u055e\u02b0\2\u20c5\u20c4\3\2\2\2"+
		"\u20c5\u20c6\3\2\2\2\u20c6\u20c9\3\2\2\2\u20c7\u20c9\5\u055e\u02b0\2\u20c8"+
		"\u20c3\3\2\2\2\u20c8\u20c7\3\2\2\2\u20c9\u20ca\3\2\2\2\u20ca\u20cb\7\4"+
		"\2\2\u20cb\u20cc\5\u044e\u0228\2\u20cc\u20cd\7\5\2\2\u20cd\u20d0\3\2\2"+
		"\2\u20ce\u20d0\3\2\2\2\u20cf\u20c2\3\2\2\2\u20cf\u20c8\3\2\2\2\u20cf\u20ce"+
		"\3\2\2\2\u20d0\u042f\3\2\2\2\u20d1\u20d3\t(\2\2\u20d2\u20d4\7}\2\2\u20d3"+
		"\u20d2\3\2\2\2\u20d3\u20d4\3\2\2\2\u20d4\u0431\3\2\2\2\u20d5\u20d6\7f"+
		"\2\2\u20d6\u20d7\7\4\2\2\u20d7\u20d8\5\u053c\u029f\2\u20d8\u20d9\7\5\2"+
		"\2\u20d9\u20dd\3\2\2\2\u20da\u20db\7R\2\2\u20db\u20dd\5\u048c\u0247\2"+
		"\u20dc\u20d5\3\2\2\2\u20dc\u20da\3\2\2\2\u20dd\u0433\3\2\2\2\u20de\u20e0"+
		"\5\u053a\u029e\2\u20df\u20e1\7\13\2\2\u20e0\u20df\3\2\2\2\u20e0\u20e1"+
		"\3\2\2\2\u20e1\u20eb\3\2\2\2\u20e2\u20e8\7S\2\2\u20e3\u20e9\5\u053a\u029e"+
		"\2\u20e4\u20e5\7\4\2\2\u20e5\u20e6\5\u053a\u029e\2\u20e6\u20e7\7\5\2\2"+
		"\u20e7\u20e9\3\2\2\2\u20e8\u20e3\3\2\2\2\u20e8\u20e4\3\2\2\2\u20e9\u20eb"+
		"\3\2\2\2\u20ea\u20de\3\2\2\2\u20ea\u20e2\3\2\2\2\u20eb\u0435\3\2\2\2\u20ec"+
		"\u20f1\5\u0434\u021b\2\u20ed\u20ee\7\b\2\2\u20ee\u20f0\5\u0434\u021b\2"+
		"\u20ef\u20ed\3\2\2\2\u20f0\u20f3\3\2\2\2\u20f1\u20ef\3\2\2\2\u20f1\u20f2"+
		"\3\2\2\2\u20f2\u0437\3\2\2\2\u20f3\u20f1\3\2\2\2\u20f4\u20f9\5\u0434\u021b"+
		"\2\u20f5\u20f7\7&\2\2\u20f6\u20f5\3\2\2\2\u20f6\u20f7\3\2\2\2\u20f7\u20f8"+
		"\3\2\2\2\u20f8\u20fa\5\u055e\u02b0\2\u20f9\u20f6\3\2\2\2\u20f9\u20fa\3"+
		"\2\2\2\u20fa\u0439\3\2\2\2\u20fb\u20fc\7\u01da\2\2\u20fc\u20fd\5\u0544"+
		"\u02a3\2\u20fd\u20fe\7\4\2\2\u20fe\u20ff\5\u0502\u0282\2\u20ff\u2100\7"+
		"\5\2\2\u2100\u2101\5\u043c\u021f\2\u2101\u043b\3\2\2\2\u2102\u2103\7\u0131"+
		"\2\2\u2103\u2104\7\4\2\2\u2104\u2105\5\u048c\u0247\2\u2105\u2106\7\5\2"+
		"\2\u2106\u2109\3\2\2\2\u2107\u2109\3\2\2\2\u2108\u2102\3\2\2\2\u2108\u2107"+
		"\3\2\2\2\u2109\u043d\3\2\2\2\u210a\u210b\5\u04c0\u0261\2\u210b\u210c\5"+
		"\u0446\u0224\2\u210c\u2115\3\2\2\2\u210d\u210e\7\u013b\2\2\u210e\u210f"+
		"\7B\2\2\u210f\u2110\7\4\2\2\u2110\u2111\5\u0442\u0222\2\u2111\u2112\7"+
		"\5\2\2\u2112\u2113\5\u0446\u0224\2\u2113\u2115\3\2\2\2\u2114\u210a\3\2"+
		"\2\2\u2114\u210d\3\2\2\2\u2115\u043f\3\2\2\2\u2116\u2117\5\u04c0\u0261"+
		"\2\u2117\u2118\5\u0444\u0223\2\u2118\u0441\3\2\2\2\u2119\u211e\5\u0440"+
		"\u0221\2\u211a\u211b\7\b\2\2\u211b\u211d\5\u0440\u0221\2\u211c\u211a\3"+
		"\2\2\2\u211d\u2120\3\2\2\2\u211e\u211c\3\2\2\2\u211e\u211f\3\2\2\2\u211f"+
		"\u0443\3\2\2\2\u2120\u211e\3\2\2\2\u2121\u2122\7&\2\2\u2122\u2123\7\4"+
		"\2\2\u2123\u2124\5\u044e\u0228\2\u2124\u2125\7\5\2\2\u2125\u2128\3\2\2"+
		"\2\u2126\u2128\3\2\2\2\u2127\u2121\3\2\2\2\u2127\u2126\3\2\2\2\u2128\u0445"+
		"\3\2\2\2\u2129\u212a\7k\2\2\u212a\u212d\7\u01db\2\2\u212b\u212d\3\2\2"+
		"\2\u212c\u2129\3\2\2\2\u212c\u212b\3\2\2\2\u212d\u0447\3\2\2\2\u212e\u212f"+
		"\7i\2\2\u212f\u2132\5\u048c\u0247\2\u2130\u2132\3\2\2\2\u2131\u212e\3"+
		"\2\2\2\u2131\u2130\3\2\2\2\u2132\u0449\3\2\2\2\u2133\u2138\7i\2\2\u2134"+
		"\u2135\7\u01b4\2\2\u2135\u2136\7\u010e\2\2\u2136\u2139\5\u03bc\u01df\2"+
		"\u2137\u2139\5\u048c\u0247\2\u2138\u2134\3\2\2\2\u2138\u2137\3\2\2\2\u2139"+
		"\u213c\3\2\2\2\u213a\u213c\3\2\2\2\u213b\u2133\3\2\2\2\u213b\u213a\3\2"+
		"\2\2\u213c\u044b\3\2\2\2\u213d\u2140\5\u044e\u0228\2\u213e\u2140\3\2\2"+
		"\2\u213f\u213d\3\2\2\2\u213f\u213e\3\2\2\2\u2140\u044d\3\2\2\2\u2141\u2146"+
		"\5\u0450\u0229\2\u2142\u2143\7\b\2\2\u2143\u2145\5\u0450\u0229\2\u2144"+
		"\u2142\3\2\2\2\u2145\u2148\3\2\2\2\u2146\u2144\3\2\2\2\u2146\u2147\3\2"+
		"\2\2\u2147\u044f\3\2\2\2\u2148\u2146\3\2\2\2\u2149\u214a\5\u055e\u02b0"+
		"\2\u214a\u214b\5\u0460\u0231\2\u214b\u214c\5p9\2\u214c\u0451\3\2\2\2\u214d"+
		"\u214e\7\u01dc\2\2\u214e\u215e\7\4\2\2\u214f\u2150\5\u04b8\u025d\2\u2150"+
		"\u2151\5\u04d2\u026a\2\u2151\u2152\7\u01dd\2\2\u2152\u2153\5\u0454\u022b"+
		"\2\u2153\u215f\3\2\2\2\u2154\u2155\7\u01de\2\2\u2155\u2156\7\4\2\2\u2156"+
		"\u2157\5\u045c\u022f\2\u2157\u2158\7\5\2\2\u2158\u2159\7\b\2\2\u2159\u215a"+
		"\5\u04b8\u025d\2\u215a\u215b\5\u04d2\u026a\2\u215b\u215c\7\u01dd\2\2\u215c"+
		"\u215d\5\u0454\u022b\2\u215d\u215f\3\2\2\2\u215e\u214f\3\2\2\2\u215e\u2154"+
		"\3\2\2\2\u215f\u2160\3\2\2\2\u2160\u2161\7\5\2\2\u2161\u0453\3\2\2\2\u2162"+
		"\u2167\5\u0456\u022c\2\u2163\u2164\7\b\2\2\u2164\u2166\5\u0456\u022c\2"+
		"\u2165\u2163\3\2\2\2\u2166\u2169\3\2\2\2\u2167\u2165\3\2\2\2\u2167\u2168"+
		"\3\2\2\2\u2168\u0455\3\2\2\2\u2169\u2167\3\2\2\2\u216a\u2171\5\u055e\u02b0"+
		"\2\u216b\u216d\5\u0460\u0231\2\u216c\u216e\5\u0458\u022d\2\u216d\u216c"+
		"\3\2\2\2\u216d\u216e\3\2\2\2\u216e\u2172\3\2\2\2\u216f\u2170\7@\2\2\u2170"+
		"\u2172\7\u01db\2\2\u2171\u216b\3\2\2\2\u2171\u216f\3\2\2\2\u2172\u0457"+
		"\3\2\2\2\u2173\u2175\5\u045a\u022e\2\u2174\u2173\3\2\2\2\u2175\u2176\3"+
		"\2\2\2\u2176\u2174\3\2\2\2\u2176\u2177\3\2\2\2\u2177\u0459\3\2\2\2\u2178"+
		"\u2179\7\67\2\2\u2179\u2181\5\u048c\u0247\2\u217a\u217b\5\u0566\u02b4"+
		"\2\u217b\u217c\5\u048c\u0247\2\u217c\u2181\3\2\2\2\u217d\u217e\7O\2\2"+
		"\u217e\u2181\7P\2\2\u217f\u2181\7P\2\2\u2180\u2178\3\2\2\2\u2180\u217a"+
		"\3\2\2\2\u2180\u217d\3\2\2\2\u2180\u217f\3\2\2\2\u2181\u045b\3\2\2\2\u2182"+
		"\u2187\5\u045e\u0230\2\u2183\u2184\7\b\2\2\u2184\u2186\5\u045e\u0230\2"+
		"\u2185\u2183\3\2\2\2\u2186\u2189\3\2\2\2\u2187\u2185\3\2\2\2\u2187\u2188"+
		"\3\2\2\2\u2188\u045d\3\2\2\2\u2189\u2187\3\2\2\2\u218a\u218b\5\u04b6\u025c"+
		"\2\u218b\u218c\7&\2\2\u218c\u218d\5\u0564\u02b3\2\u218d\u2191\3\2\2\2"+
		"\u218e\u218f\7\67\2\2\u218f\u2191\5\u04b6\u025c\2\u2190\u218a\3\2\2\2"+
		"\u2190\u218e\3\2\2\2\u2191\u045f\3\2\2\2\u2192\u2194\7\u019a\2\2\u2193"+
		"\u2192\3\2\2\2\u2193\u2194\3\2\2\2\u2194\u2195\3\2\2\2\u2195\u219e\5\u0464"+
		"\u0233\2\u2196\u219f\5\u0462\u0232\2\u2197\u219c\7%\2\2\u2198\u2199\7"+
		"\6\2\2\u2199\u219a\5\u054e\u02a8\2\u219a\u219b\7\7\2\2\u219b\u219d\3\2"+
		"\2\2\u219c\u2198\3\2\2\2\u219c\u219d\3\2\2\2\u219d\u219f\3\2\2\2\u219e"+
		"\u2196\3\2\2\2\u219e\u2197\3\2\2\2\u219f\u21a5\3\2\2\2\u21a0\u21a1\5\u053a"+
		"\u029e\2\u21a1\u21a2\7\35\2\2\u21a2\u21a3\t)\2\2\u21a3\u21a5\3\2\2\2\u21a4"+
		"\u2193\3\2\2\2\u21a4\u21a0\3\2\2\2\u21a5\u0461\3\2\2\2\u21a6\u21a8\7\6"+
		"\2\2\u21a7\u21a9\5\u054e\u02a8\2\u21a8\u21a7\3\2\2\2\u21a8\u21a9\3\2\2"+
		"\2\u21a9\u21aa\3\2\2\2\u21aa\u21ac\7\7\2\2\u21ab\u21a6\3\2\2\2\u21ac\u21af"+
		"\3\2\2\2\u21ad\u21ab\3\2\2\2\u21ad\u21ae\3\2\2\2\u21ae\u0463\3\2\2\2\u21af"+
		"\u21ad\3\2\2\2\u21b0\u21be\5\u0468\u0235\2\u21b1\u21be\5\u046c\u0237\2"+
		"\u21b2\u21be\5\u0470\u0239\2\u21b3\u21be\5\u0478\u023d\2\u21b4\u21be\5"+
		"\u0480\u0241\2\u21b5\u21bb\5\u0482\u0242\2\u21b6\u21bc\5\u0486\u0244\2"+
		"\u21b7\u21b8\7\4\2\2\u21b8\u21b9\5\u054e\u02a8\2\u21b9\u21ba\7\5\2\2\u21ba"+
		"\u21bc\3\2\2\2\u21bb\u21b6\3\2\2\2\u21bb\u21b7\3\2\2\2\u21bc\u21be\3\2"+
		"\2\2\u21bd\u21b0\3\2\2\2\u21bd\u21b1\3\2\2\2\u21bd\u21b2\3\2\2\2\u21bd"+
		"\u21b3\3\2\2\2\u21bd\u21b4\3\2\2\2\u21bd\u21b5\3\2\2\2\u21be\u0465\3\2"+
		"\2\2\u21bf\u21c4\5\u046c\u0237\2\u21c0\u21c4\5\u0472\u023a\2\u21c1\u21c4"+
		"\5\u047a\u023e\2\u21c2\u21c4\5\u0480\u0241\2\u21c3\u21bf\3\2\2\2\u21c3"+
		"\u21c0\3\2\2\2\u21c3\u21c1\3\2\2\2\u21c3\u21c2\3\2\2\2\u21c4\u0467\3\2"+
		"\2\2\u21c5\u21c8\5\u0572\u02ba\2\u21c6\u21c8\5\u0560\u02b1\2\u21c7\u21c5"+
		"\3\2\2\2\u21c7\u21c6\3\2\2\2\u21c8\u21ca\3\2\2\2\u21c9\u21cb\5\u0210\u0109"+
		"\2\u21ca\u21c9\3\2\2\2\u21ca\u21cb\3\2\2\2\u21cb\u21cc\3\2\2\2\u21cc\u21cd"+
		"\5\u046a\u0236\2\u21cd\u0469\3\2\2\2\u21ce\u21cf\7\4\2\2\u21cf\u21d0\5"+
		"\u0502\u0282\2\u21d0\u21d1\7\5\2\2\u21d1\u21d4\3\2\2\2\u21d2\u21d4\3\2"+
		"\2\2\u21d3\u21ce\3\2\2\2\u21d3\u21d2\3\2\2\2\u21d4\u046b\3\2\2\2\u21d5"+
		"\u21e6\7\u018c\2\2\u21d6\u21e6\7\u018d\2\2\u21d7\u21e6\7\u019b\2\2\u21d8"+
		"\u21e6\7\u017f\2\2\u21d9\u21e6\7\u0198\2\2\u21da\u21db\7\u0189\2\2\u21db"+
		"\u21e6\5\u046e\u0238\2\u21dc\u21dd\7\u00c0\2\2\u21dd\u21e6\7\u0197\2\2"+
		"\u21de\u21df\7\u0186\2\2\u21df\u21e6\5\u046a\u0236\2\u21e0\u21e1\7\u0185"+
		"\2\2\u21e1\u21e6\5\u046a\u0236\2\u21e2\u21e3\7\u0194\2\2\u21e3\u21e6\5"+
		"\u046a\u0236\2\u21e4\u21e6\7\u0181\2\2\u21e5\u21d5\3\2\2\2\u21e5\u21d6"+
		"\3\2\2\2\u21e5\u21d7\3\2\2\2\u21e5\u21d8\3\2\2\2\u21e5\u21d9\3\2\2\2\u21e5"+
		"\u21da\3\2\2\2\u21e5\u21dc\3\2\2\2\u21e5\u21de\3\2\2\2\u21e5\u21e0\3\2"+
		"\2\2\u21e5\u21e2\3\2\2\2\u21e5\u21e4\3\2\2\2\u21e6\u046d\3\2\2\2\u21e7"+
		"\u21e8\7\4\2\2\u21e8\u21e9\5\u054e\u02a8\2\u21e9\u21ea\7\5\2\2\u21ea\u21ed"+
		"\3\2\2\2\u21eb\u21ed\3\2\2\2\u21ec\u21e7\3\2\2\2\u21ec\u21eb\3\2\2\2\u21ed"+
		"\u046f\3\2\2\2\u21ee\u21f1\5\u0474\u023b\2\u21ef\u21f1\5\u0476\u023c\2"+
		"\u21f0\u21ee\3\2\2\2\u21f0\u21ef\3\2\2\2\u21f1\u0471\3\2\2\2\u21f2\u21f5"+
		"\5\u0474\u023b\2\u21f3\u21f5\5\u0476\u023c\2\u21f4\u21f2\3\2\2\2\u21f4"+
		"\u21f3\3\2\2\2\u21f5\u0473\3\2\2\2\u21f6\u21f7\7\u0180\2\2\u21f7\u21f8"+
		"\5\u047e\u0240\2\u21f8\u21f9\7\4\2\2\u21f9\u21fa\5\u0502\u0282\2\u21fa"+
		"\u21fb\7\5\2\2\u21fb\u0475\3\2\2\2\u21fc\u21fd\7\u0180\2\2\u21fd\u21fe"+
		"\5\u047e\u0240\2\u21fe\u0477\3\2\2\2\u21ff\u2204\5\u047c\u023f\2\u2200"+
		"\u2201\7\4\2\2\u2201\u2202\5\u054e\u02a8\2\u2202\u2203\7\5\2\2\u2203\u2205"+
		"\3\2\2\2\u2204\u2200\3\2\2\2\u2204\u2205\3\2\2\2\u2205\u0479\3\2\2\2\u2206"+
		"\u220b\5\u047c\u023f\2\u2207\u2208\7\4\2\2\u2208\u2209\5\u054e\u02a8\2"+
		"\u2209\u220a\7\5\2\2\u220a\u220c\3\2\2\2\u220b\u2207\3\2\2\2\u220b\u220c"+
		"\3\2\2\2\u220c\u047b\3\2\2\2\u220d\u220e\t*\2\2\u220e\u2214\5\u047e\u0240"+
		"\2\u220f\u2214\7\u01a2\2\2\u2210\u2211\7\u0190\2\2\u2211\u2212\t+\2\2"+
		"\u2212\u2214\5\u047e\u0240\2\u2213\u220d\3\2\2\2\u2213\u220f\3\2\2\2\u2213"+
		"\u2210\3\2\2\2\u2214\u047d\3\2\2\2\u2215\u2218\7\u0171\2\2\u2216\u2218"+
		"\3\2\2\2\u2217\u2215\3\2\2\2\u2217\u2216\3\2\2\2\u2218\u047f\3\2\2\2\u2219"+
		"\u221e\t,\2\2\u221a\u221b\7\4\2\2\u221b\u221c\5\u054e\u02a8\2\u221c\u221d"+
		"\7\5\2\2\u221d\u221f\3\2\2\2\u221e\u221a\3\2\2\2\u221e\u221f\3\2\2\2\u221f"+
		"\u2220\3\2\2\2\u2220\u2221\5\u0484\u0243\2\u2221\u0481\3\2\2\2\u2222\u2223"+
		"\7\u018e\2\2\u2223\u0483\3\2\2\2\u2224\u2225\7k\2\2\u2225\u2226\7\u019d"+
		"\2\2\u2226\u222c\7\u017d\2\2\u2227\u2228\7\u0176\2\2\u2228\u2229\7\u019d"+
		"\2\2\u2229\u222c\7\u017d\2\2\u222a\u222c\3\2\2\2\u222b\u2224\3\2\2\2\u222b"+
		"\u2227\3\2\2\2\u222b\u222a\3\2\2\2\u222c\u0485\3\2\2\2\u222d\u2248\7\u017b"+
		"\2\2\u222e\u2248\7\u0103\2\2\u222f\u2248\7\u00b2\2\2\u2230\u2248\7\u00dc"+
		"\2\2\u2231\u2248\7\u0100\2\2\u2232\u2248\5\u0488\u0245\2\u2233\u2234\7"+
		"\u017b\2\2\u2234\u2235\7`\2\2\u2235\u2248\7\u0103\2\2\u2236\u2237\7\u00b2"+
		"\2\2\u2237\u223b\7`\2\2\u2238\u223c\7\u00dc\2\2\u2239\u223c\7\u0100\2"+
		"\2\u223a\u223c\5\u0488\u0245\2\u223b\u2238\3\2\2\2\u223b\u2239\3\2\2\2"+
		"\u223b\u223a\3\2\2\2\u223c\u2248\3\2\2\2\u223d\u223e\7\u00dc\2\2\u223e"+
		"\u2241\7`\2\2\u223f\u2242\7\u0100\2\2\u2240\u2242\5\u0488\u0245\2\u2241"+
		"\u223f\3\2\2\2\u2241\u2240\3\2\2\2\u2242\u2248\3\2\2\2\u2243\u2244\7\u0100"+
		"\2\2\u2244\u2245\7`\2\2\u2245\u2248\5\u0488\u0245\2\u2246\u2248\3\2\2"+
		"\2\u2247\u222d\3\2\2\2\u2247\u222e\3\2\2\2\u2247\u222f\3\2\2\2\u2247\u2230"+
		"\3\2\2\2\u2247\u2231\3\2\2\2\u2247\u2232\3\2\2\2\u2247\u2233\3\2\2\2\u2247"+
		"\u2236\3\2\2\2\u2247\u223d\3\2\2\2\u2247\u2243\3\2\2\2\u2247\u2246\3\2"+
		"\2\2\u2248\u0487\3\2\2\2\u2249\u224e\7\u0141\2\2\u224a\u224b\7\4\2\2\u224b"+
		"\u224c\5\u054e\u02a8\2\u224c\u224d\7\5\2\2\u224d\u224f\3\2\2\2\u224e\u224a"+
		"\3\2\2\2\u224e\u224f\3\2\2\2\u224f\u0489\3\2\2\2\u2250\u2251\7\u00c7\2"+
		"\2\u2251\u2254\5\u048c\u0247\2\u2252\u2254\3\2\2\2\u2253\u2250\3\2\2\2"+
		"\u2253\u2252\3\2\2\2\u2254\u048b\3\2\2\2\u2255\u2256\5\u048e\u0248\2\u2256"+
		"\u048d\3\2\2\2\u2257\u2259\5\u0490\u0249\2\u2258\u225a\5\u04fc\u027f\2"+
		"\u2259\u2258\3\2\2\2\u2259\u225a\3\2\2\2\u225a\u048f\3\2\2\2\u225b\u2260"+
		"\5\u0492\u024a\2\u225c\u225d\t-\2\2\u225d\u225f\5\u0492\u024a\2\u225e"+
		"\u225c\3\2\2\2\u225f\u2262\3\2\2\2\u2260\u225e\3\2\2\2\u2260\u2261\3\2"+
		"\2\2\u2261\u0491\3\2\2\2\u2262\u2260\3\2\2\2\u2263\u2268\5\u0494\u024b"+
		"\2\u2264\u2265\7T\2\2\u2265\u2267\5\u0494\u024b\2\u2266\u2264\3\2\2\2"+
		"\u2267\u226a\3\2\2\2\u2268\u2266\3\2\2\2\u2268\u2269\3\2\2\2\u2269\u0493"+
		"\3\2\2\2\u226a\u2268\3\2\2\2\u226b\u2270\5\u0496\u024c\2\u226c\u226d\7"+
		"#\2\2\u226d\u226f\5\u0496\u024c\2\u226e\u226c\3\2\2\2\u226f\u2272\3\2"+
		"\2\2\u2270\u226e\3\2\2\2\u2270\u2271\3\2\2\2\u2271\u0495\3\2\2\2\u2272"+
		"\u2270\3\2\2\2\u2273\u227f\5\u0498\u024d\2\u2274\u2276\7O\2\2\u2275\u2274"+
		"\3\2\2\2\u2275\u2276\3\2\2\2\u2276\u2277\3\2\2\2\u2277\u2279\7\u017e\2"+
		"\2\u2278\u227a\7]\2\2\u2279\u2278\3\2\2\2\u2279\u227a\3\2\2\2\u227a\u227b"+
		"\3\2\2\2\u227b\u227c\5\u0498\u024d\2\u227c\u227d\7#\2\2\u227d\u227e\5"+
		"\u0498\u024d\2\u227e\u2280\3\2\2\2\u227f\u2275\3\2\2\2\u227f\u2280\3\2"+
		"\2\2\u2280\u0497\3\2\2\2\u2281\u2287\5\u049a\u024e\2\u2282\u2284\7O\2"+
		"\2\u2283\u2282\3\2\2\2\u2283\u2284\3\2\2\2\u2284\u2285\3\2\2\2\u2285\u2286"+
		"\7F\2\2\u2286\u2288\5\u051c\u028f\2\u2287\u2283\3\2\2\2\u2287\u2288\3"+
		"\2\2\2\u2288\u0499\3\2\2\2\u2289\u228b\7O\2\2\u228a\u2289\3\2\2\2\u228a"+
		"\u228b\3\2\2\2\u228b\u228c\3\2\2\2\u228c\u228d\5\u049c\u024f\2\u228d\u049b"+
		"\3\2\2\2\u228e\u2290\5\u049e\u0250\2\u228f\u2291\t.\2\2\u2290\u228f\3"+
		"\2\2\2\u2290\u2291\3\2\2\2\u2291\u049d\3\2\2\2\u2292\u22aa\5\u04a0\u0251"+
		"\2\u2293\u2295\7v\2\2\u2294\u2296\7O\2\2\u2295\u2294\3\2\2\2\u2295\u2296"+
		"\3\2\2\2\u2296\u22a8\3\2\2\2\u2297\u22a9\7P\2\2\u2298\u22a9\7b\2\2\u2299"+
		"\u22a9\7>\2\2\u229a\u22a9\7\u0168\2\2\u229b\u229c\7:\2\2\u229c\u229d\7"+
		"B\2\2\u229d\u22a9\5\u048c\u0247\2\u229e\u229f\7\u010e\2\2\u229f\u22a0"+
		"\7\4\2\2\u22a0\u22a1\5\u0508\u0285\2\u22a1\u22a2\7\5\2\2\u22a2\u22a9\3"+
		"\2\2\2\u22a3\u22a9\7\u00be\2\2\u22a4\u22a6\5\u0512\u028a\2\u22a5\u22a4"+
		"\3\2\2\2\u22a5\u22a6\3\2\2\2\u22a6\u22a7\3\2\2\2\u22a7\u22a9\7\u01e0\2"+
		"\2\u22a8\u2297\3\2\2\2\u22a8\u2298\3\2\2\2\u22a8\u2299\3\2\2\2\u22a8\u229a"+
		"\3\2\2\2\u22a8\u229b\3\2\2\2\u22a8\u229e\3\2\2\2\u22a8\u22a3\3\2\2\2\u22a8"+
		"\u22a5\3\2\2\2\u22a9\u22ab\3\2\2\2\u22aa\u2293\3\2\2\2\u22aa\u22ab\3\2"+
		"\2\2\u22ab\u049f\3\2\2\2\u22ac\u22b8\5\u04a2\u0252\2\u22ad\u22ae\t/\2"+
		"\2\u22ae\u22b9\5\u04a2\u0252\2\u22af\u22b0\5\u0500\u0281\2\u22b0\u22b6"+
		"\5\u04f6\u027c\2\u22b1\u22b7\5\u03c4\u01e3\2\u22b2\u22b3\7\4\2\2\u22b3"+
		"\u22b4\5\u048c\u0247\2\u22b4\u22b5\7\5\2\2\u22b5\u22b7\3\2\2\2\u22b6\u22b1"+
		"\3\2\2\2\u22b6\u22b2\3\2\2\2\u22b7\u22b9\3\2\2\2\u22b8\u22ad\3\2\2\2\u22b8"+
		"\u22af\3\2\2\2\u22b8\u22b9\3\2\2\2\u22b9\u04a1\3\2\2\2\u22ba\u22c7\5\u04a4"+
		"\u0253\2\u22bb\u22bd\7O\2\2\u22bc\u22bb\3\2\2\2\u22bc\u22bd\3\2\2\2\u22bd"+
		"\u22c2\3\2\2\2\u22be\u22c3\7z\2\2\u22bf\u22c3\7t\2\2\u22c0\u22c1\7\u0081"+
		"\2\2\u22c1\u22c3\7`\2\2\u22c2\u22be\3\2\2\2\u22c2\u22bf\3\2\2\2\u22c2"+
		"\u22c0\3\2\2\2\u22c3\u22c4\3\2\2\2\u22c4\u22c5\5\u04a4\u0253\2\u22c5\u22c6"+
		"\5\u048a\u0246\2\u22c6\u22c8\3\2\2\2\u22c7\u22bc\3\2\2\2\u22c7\u22c8\3"+
		"\2\2\2\u22c8\u04a3\3\2\2\2\u22c9\u22cf\5\u04a6\u0254\2\u22ca\u22cb\5\u04fc"+
		"\u027f\2\u22cb\u22cc\5\u04a6\u0254\2\u22cc\u22ce\3\2\2\2\u22cd\u22ca\3"+
		"\2\2\2\u22ce\u22d1\3\2\2\2\u22cf\u22cd\3\2\2\2\u22cf\u22d0\3\2\2\2\u22d0"+
		"\u04a5\3\2\2\2\u22d1\u22cf\3\2\2\2\u22d2\u22d4\5\u04fc\u027f\2\u22d3\u22d2"+
		"\3\2\2\2\u22d3\u22d4\3\2\2\2\u22d4\u22d5\3\2\2\2\u22d5\u22d6\5\u04a8\u0255"+
		"\2\u22d6\u04a7\3\2\2\2\u22d7\u22dc\5\u04aa\u0256\2\u22d8\u22d9\t\60\2"+
		"\2\u22d9\u22db\5\u04aa\u0256\2\u22da\u22d8\3\2\2\2\u22db\u22de\3\2\2\2"+
		"\u22dc\u22da\3\2\2\2\u22dc\u22dd\3\2\2\2\u22dd\u04a9\3\2\2\2\u22de\u22dc"+
		"\3\2\2\2\u22df\u22e4\5\u04ac\u0257\2\u22e0\u22e1\t\61\2\2\u22e1\u22e3"+
		"\5\u04ac\u0257\2\u22e2\u22e0\3\2\2\2\u22e3\u22e6\3\2\2\2\u22e4\u22e2\3"+
		"\2\2\2\u22e4\u22e5\3\2\2\2\u22e5\u04ab\3\2\2\2\u22e6\u22e4\3\2\2\2\u22e7"+
		"\u22ea\5\u04ae\u0258\2\u22e8\u22e9\7\21\2\2\u22e9\u22eb\5\u048c\u0247"+
		"\2\u22ea\u22e8\3\2\2\2\u22ea\u22eb\3\2\2\2\u22eb\u04ad\3\2\2\2\u22ec\u22ee"+
		"\t\60\2\2\u22ed\u22ec\3\2\2\2\u22ed\u22ee\3\2\2\2\u22ee\u22ef\3\2\2\2"+
		"\u22ef\u22f0\5\u04b0\u0259\2\u22f0\u04af\3\2\2\2\u22f1\u22f6\5\u04b2\u025a"+
		"\2\u22f2\u22f3\7\u0090\2\2\u22f3\u22f4\7\u019d\2\2\u22f4\u22f5\7\u017d"+
		"\2\2\u22f5\u22f7\5\u048c\u0247\2\u22f6\u22f2\3\2\2\2\u22f6\u22f7\3\2\2"+
		"\2\u22f7\u04b1\3\2\2\2\u22f8\u22fb\5\u04b4\u025b\2\u22f9\u22fa\7-\2\2"+
		"\u22fa\u22fc\5\u020e\u0108\2\u22fb\u22f9\3\2\2\2\u22fb\u22fc\3\2\2\2\u22fc"+
		"\u04b3\3\2\2\2\u22fd\u2302\5\u04b8\u025d\2\u22fe\u22ff\7\34\2\2\u22ff"+
		"\u2301\5\u0460\u0231\2\u2300\u22fe\3\2\2\2\u2301\u2304\3\2\2\2\u2302\u2300"+
		"\3\2\2\2\u2302\u2303\3\2\2\2\u2303\u04b5\3\2\2\2\u2304\u2302\3\2\2\2\u2305"+
		"\u2306\b\u025c\1\2\u2306\u230d\5\u04b8\u025d\2\u2307\u2308\t\60\2\2\u2308"+
		"\u230d\5\u04b6\u025c\13\u2309\u230a\5\u04fc\u027f\2\u230a\u230b\5\u04b6"+
		"\u025c\5\u230b\u230d\3\2\2\2\u230c\u2305\3\2\2\2\u230c\u2307\3\2\2\2\u230c"+
		"\u2309\3\2\2\2\u230d\u2335\3\2\2\2\u230e\u230f\f\n\2\2\u230f\u2310\7\21"+
		"\2\2\u2310\u2334\5\u04b6\u025c\13\u2311\u2312\f\t\2\2\u2312\u2313\t\61"+
		"\2\2\u2313\u2334\5\u04b6\u025c\n\u2314\u2315\f\b\2\2\u2315\u2316\t\60"+
		"\2\2\u2316\u2334\5\u04b6\u025c\t\u2317\u2318\f\7\2\2\u2318\u2319\5\u04fc"+
		"\u027f\2\u2319\u231a\5\u04b6\u025c\b\u231a\u2334\3\2\2\2\u231b\u231c\f"+
		"\6\2\2\u231c\u231d\t/\2\2\u231d\u2334\5\u04b6\u025c\7\u231e\u231f\f\f"+
		"\2\2\u231f\u2320\7\34\2\2\u2320\u2334\5\u0460\u0231\2\u2321\u2322\f\4"+
		"\2\2\u2322\u2334\5\u04fc\u027f\2\u2323\u2324\f\3\2\2\u2324\u2326\7v\2"+
		"\2\u2325\u2327\7O\2\2\u2326\u2325\3\2\2\2\u2326\u2327\3\2\2\2\u2327\u2331"+
		"\3\2\2\2\u2328\u2329\7:\2\2\u2329\u232a\7B\2\2\u232a\u2332\5\u04b6\u025c"+
		"\2\u232b\u232c\7\u010e\2\2\u232c\u232d\7\4\2\2\u232d\u232e\5\u0508\u0285"+
		"\2\u232e\u232f\7\5\2\2\u232f\u2332\3\2\2\2\u2330\u2332\7\u00be\2\2\u2331"+
		"\u2328\3\2\2\2\u2331\u232b\3\2\2\2\u2331\u2330\3\2\2\2\u2332\u2334\3\2"+
		"\2\2\u2333\u230e\3\2\2\2\u2333\u2311\3\2\2\2\u2333\u2314\3\2\2\2\u2333"+
		"\u2317\3\2\2\2\u2333\u231b\3\2\2\2\u2333\u231e\3\2\2\2\u2333\u2321\3\2"+
		"\2\2\u2333\u2323\3\2\2\2\u2334\u2337\3\2\2\2\u2335\u2333\3\2\2\2\u2335"+
		"\u2336\3\2\2\2\u2336\u04b7\3\2\2\2\u2337\u2335\3\2\2\2\u2338\u2339\7\u0187"+
		"\2\2\u2339\u235d\5\u03c4\u01e3\2\u233a\u233d\7%\2\2\u233b\u233e\5\u03c4"+
		"\u01e3\2\u233c\u233e\5\u050a\u0286\2\u233d\u233b\3\2\2\2\u233d\u233c\3"+
		"\2\2\2\u233e\u235d\3\2\2\2\u233f\u2340\7\36\2\2\u2340\u235d\5\u0530\u0299"+
		"\2\u2341\u2342\7\u01d8\2\2\u2342\u2343\7\4\2\2\u2343\u2344\5\u0502\u0282"+
		"\2\u2344\u2345\7\5\2\2\u2345\u235d\3\2\2\2\u2346\u2347\7d\2\2\u2347\u235d"+
		"\5\u03c4\u01e3\2\u2348\u235d\5\u0528\u0295\2\u2349\u235d\5\u0546\u02a4"+
		"\2\u234a\u235d\5\u04ba\u025e\2\u234b\u234c\7\4\2\2\u234c\u234d\5\u048c"+
		"\u0247\2\u234d\u234e\7\5\2\2\u234e\u234f\5\u0530\u0299\2\u234f\u235d\3"+
		"\2\2\2\u2350\u235d\5\u051e\u0290\2\u2351\u235d\5\u04be\u0260\2\u2352\u2354"+
		"\5\u03c4\u01e3\2\u2353\u2355\5\u052e\u0298\2\u2354\u2353\3\2\2\2\u2354"+
		"\u2355\3\2\2\2\u2355\u235d\3\2\2\2\u2356\u235d\5\u04f2\u027a\2\u2357\u235d"+
		"\5\u04f4\u027b\2\u2358\u2359\5\u04f0\u0279\2\u2359\u235a\7\177\2\2\u235a"+
		"\u235b\5\u04f0\u0279\2\u235b\u235d\3\2\2\2\u235c\u2338\3\2\2\2\u235c\u233a"+
		"\3\2\2\2\u235c\u233f\3\2\2\2\u235c\u2341\3\2\2\2\u235c\u2346\3\2\2\2\u235c"+
		"\u2348\3\2\2\2\u235c\u2349\3\2\2\2\u235c\u234a\3\2\2\2\u235c\u234b\3\2"+
		"\2\2\u235c\u2350\3\2\2\2\u235c\u2351\3\2\2\2\u235c\u2352\3\2\2\2\u235c"+
		"\u2356\3\2\2\2\u235c\u2357\3\2\2\2\u235c\u2358\3\2\2\2\u235d\u04b9\3\2"+
		"\2\2\u235e\u235f\7\u0297\2\2\u235f\u04bb\3\2\2\2\u2360\u2361\5\u0544\u02a3"+
		"\2\u2361\u2374\7\4\2\2\u2362\u2366\5\u0504\u0283\2\u2363\u2364\7\b\2\2"+
		"\u2364\u2365\7g\2\2\u2365\u2367\5\u0506\u0284\2\u2366\u2363\3\2\2\2\u2366"+
		"\u2367\3\2\2\2\u2367\u2368\3\2\2\2\u2368\u2369\5\u03e8\u01f5\2\u2369\u2375"+
		"\3\2\2\2\u236a\u236b\7g\2\2\u236b\u236c\5\u0506\u0284\2\u236c\u236d\5"+
		"\u03e8\u01f5\2\u236d\u2375\3\2\2\2\u236e\u236f\t\62\2\2\u236f\u2370\5"+
		"\u0504\u0283\2\u2370\u2371\5\u03e8\u01f5\2\u2371\u2375\3\2\2\2\u2372\u2375"+
		"\7\13\2\2\u2373\u2375\3\2\2\2\u2374\u2362\3\2\2\2\u2374\u236a\3\2\2\2"+
		"\u2374\u236e\3\2\2\2\u2374\u2372\3\2\2\2\u2374\u2373\3\2\2\2\u2375\u2376"+
		"\3\2\2\2\u2376\u2377\7\5\2\2\u2377\u04bd\3\2\2\2\u2378\u2379\5\u04bc\u025f"+
		"\2\u2379\u237a\5\u04d6\u026c\2\u237a\u237b\5\u04d8\u026d\2\u237b\u237c"+
		"\5\u04e0\u0271\2\u237c\u237f\3\2\2\2\u237d\u237f\5\u04c2\u0262\2\u237e"+
		"\u2378\3\2\2\2\u237e\u237d\3\2\2\2\u237f\u04bf\3\2\2\2\u2380\u2383\5\u04bc"+
		"\u025f\2\u2381\u2383\5\u04c2\u0262\2\u2382\u2380\3\2\2\2\u2382\u2381\3"+
		"\2\2\2\u2383\u04c1\3\2\2\2\u2384\u2385\7n\2\2\u2385\u2386\7@\2\2\u2386"+
		"\u2387\7\4\2\2\u2387\u2388\5\u048c\u0247\2\u2388\u2389\7\5\2\2\u2389\u2436"+
		"\3\2\2\2\u238a\u2436\7\62\2\2\u238b\u2390\7\64\2\2\u238c\u238d\7\4\2\2"+
		"\u238d\u238e\5\u054e\u02a8\2\u238e\u238f\7\5\2\2\u238f\u2391\3\2\2\2\u2390"+
		"\u238c\3\2\2\2\u2390\u2391\3\2\2\2\u2391\u2436\3\2\2\2\u2392\u2397\7\65"+
		"\2\2\u2393\u2394\7\4\2\2\u2394\u2395\5\u054e\u02a8\2\u2395\u2396\7\5\2"+
		"\2\u2396\u2398\3\2\2\2\u2397\u2393\3\2\2\2\u2397\u2398\3\2\2\2\u2398\u2436"+
		"\3\2\2\2\u2399\u239e\7M\2\2\u239a\u239b\7\4\2\2\u239b\u239c\5\u054e\u02a8"+
		"\2\u239c\u239d\7\5\2\2\u239d\u239f\3\2\2\2\u239e\u239a\3\2\2\2\u239e\u239f"+
		"\3\2\2\2\u239f\u2436\3\2\2\2\u23a0\u23a5\7N\2\2\u23a1\u23a2\7\4\2\2\u23a2"+
		"\u23a3\5\u054e\u02a8\2\u23a3\u23a4\7\5\2\2\u23a4\u23a6\3\2\2\2\u23a5\u23a1"+
		"\3\2\2\2\u23a5\u23a6\3\2\2\2\u23a6\u2436\3\2\2\2\u23a7\u2436\7\63\2\2"+
		"\u23a8\u2436\7\66\2\2\u23a9\u2436\7[\2\2\u23aa\u2436\7e\2\2\u23ab\u2436"+
		"\7\61\2\2\u23ac\u2436\7q\2\2\u23ad\u23ae\7+\2\2\u23ae\u23af\7\4\2\2\u23af"+
		"\u23b0\5\u048c\u0247\2\u23b0\u23b1\7&\2\2\u23b1\u23b2\5\u0460\u0231\2"+
		"\u23b2\u23b3\7\5\2\2\u23b3\u2436\3\2\2\2\u23b4\u23b5\7\u0188\2\2\u23b5"+
		"\u23b6\7\4\2\2\u23b6\u23b7\5\u050e\u0288\2\u23b7\u23b8\7\5\2\2\u23b8\u2436"+
		"\3\2\2\2\u23b9\u23ba\7\u01eb\2\2\u23ba\u23bb\7\4\2\2\u23bb\u23be\5\u048c"+
		"\u0247\2\u23bc\u23bd\7\b\2\2\u23bd\u23bf\5\u0512\u028a\2\u23be\u23bc\3"+
		"\2\2\2\u23be\u23bf\3\2\2\2\u23bf\u23c0\3\2\2\2\u23c0\u23c1\7\5\2\2\u23c1"+
		"\u2436\3\2\2\2\u23c2\u23c3\7\u0195\2\2\u23c3\u23c4\7\4\2\2\u23c4\u23c5"+
		"\5\u0514\u028b\2\u23c5\u23c6\7\5\2\2\u23c6\u2436\3\2\2\2\u23c7\u23c8\7"+
		"\u0196\2\2\u23c8\u23c9\7\4\2\2\u23c9\u23ca\5\u0516\u028c\2\u23ca\u23cb"+
		"\7\5\2\2\u23cb\u2436\3\2\2\2\u23cc\u23cd\7\u019c\2\2\u23cd\u23ce\7\4\2"+
		"\2\u23ce\u23cf\5\u0518\u028d\2\u23cf\u23d0\7\5\2\2\u23d0\u2436\3\2\2\2"+
		"\u23d1\u23d2\7\u019f\2\2\u23d2\u23d3\7\4\2\2\u23d3\u23d4\5\u048c\u0247"+
		"\2\u23d4\u23d5\7&\2\2\u23d5\u23d6\5\u0460\u0231\2\u23d6\u23d7\7\5\2\2"+
		"\u23d7\u2436\3\2\2\2\u23d8\u23d9\7\u01a0\2\2\u23d9\u23db\7\4\2\2\u23da"+
		"\u23dc\t\63\2\2\u23db\u23da\3\2\2\2\u23db\u23dc\3\2\2\2\u23dc\u23dd\3"+
		"\2\2\2\u23dd\u23de\5\u051a\u028e\2\u23de\u23df\7\5\2\2\u23df\u2436\3\2"+
		"\2\2\u23e0\u23e1\7\u0193\2\2\u23e1\u23e2\7\4\2\2\u23e2\u23e3\5\u048c\u0247"+
		"\2\u23e3\u23e4\7\b\2\2\u23e4\u23e5\5\u048c\u0247\2\u23e5\u23e6\7\5\2\2"+
		"\u23e6\u2436\3\2\2\2\u23e7\u23e8\7\u0184\2\2\u23e8\u23e9\7\4\2\2\u23e9"+
		"\u23ea\5\u0502\u0282\2\u23ea\u23eb\7\5\2\2\u23eb\u2436\3\2\2\2\u23ec\u23ed"+
		"\7\u018a\2\2\u23ed\u23ee\7\4\2\2\u23ee\u23ef\5\u0502\u0282\2\u23ef\u23f0"+
		"\7\5\2\2\u23f0\u2436\3\2\2\2\u23f1\u23f2\7\u018f\2\2\u23f2\u23f3\7\4\2"+
		"\2\u23f3\u23f4\5\u0502\u0282\2\u23f4\u23f5\7\5\2\2\u23f5\u2436\3\2\2\2"+
		"\u23f6\u23f7\7\u01ab\2\2\u23f7\u23f8\7\4\2\2\u23f8\u23f9\5\u0502\u0282"+
		"\2\u23f9\u23fa\7\5\2\2\u23fa\u2436\3\2\2\2\u23fb\u23fc\7\u01ac\2\2\u23fc"+
		"\u23fd\7\4\2\2\u23fd\u23fe\7\u0105\2\2\u23fe\u2404\5\u0564\u02b3\2\u23ff"+
		"\u2402\7\b\2\2\u2400\u2403\5\u04c8\u0265\2\u2401\u2403\5\u0502\u0282\2"+
		"\u2402\u2400\3\2\2\2\u2402\u2401\3\2\2\2\u2403\u2405\3\2\2\2\u2404\u23ff"+
		"\3\2\2\2\u2404\u2405\3\2\2\2\u2405\u2406\3\2\2\2\u2406\u2407\7\5\2\2\u2407"+
		"\u2436\3\2\2\2\u2408\u2409\7\u01ad\2\2\u2409\u240a\7\4\2\2\u240a\u240b"+
		"\5\u04b8\u025d\2\u240b\u240c\5\u04d2\u026a\2\u240c\u240d\7\5\2\2\u240d"+
		"\u2436\3\2\2\2\u240e\u240f\7\u01ae\2\2\u240f\u2410\7\4\2\2\u2410\u2411"+
		"\5\u04ca\u0266\2\u2411\u2412\7\5\2\2\u2412\u2436\3\2\2\2\u2413\u2414\7"+
		"\u01af\2\2\u2414\u2415\7\4\2\2\u2415\u2416\5\u04ce\u0268\2\u2416\u2417"+
		"\5\u048c\u0247\2\u2417\u2418\5\u04d0\u0269\2\u2418\u2419\7\5\2\2\u2419"+
		"\u2436\3\2\2\2\u241a\u241b\7\u01b0\2\2\u241b\u241c\7\4\2\2\u241c\u241d"+
		"\7\u0105\2\2\u241d\u2420\5\u0564\u02b3\2\u241e\u241f\7\b\2\2\u241f\u2421"+
		"\5\u048c\u0247\2\u2420\u241e\3\2\2\2\u2420\u2421\3\2\2\2\u2421\u2422\3"+
		"\2\2\2\u2422\u2423\7\5\2\2\u2423\u2436\3\2\2\2\u2424\u2425\7\u01b1\2\2"+
		"\u2425\u2426\7\4\2\2\u2426\u2427\7\u017a\2\2\u2427\u2428\5\u048c\u0247"+
		"\2\u2428\u2429\7\b\2\2\u2429\u242a\5\u04c4\u0263\2\u242a\u242b\5\u04c6"+
		"\u0264\2\u242b\u242c\7\5\2\2\u242c\u2436\3\2\2\2\u242d\u242e\7\u01b2\2"+
		"\2\u242e\u242f\7\4\2\2\u242f\u2430\5\u04ce\u0268\2\u2430\u2431\5\u048c"+
		"\u0247\2\u2431\u2432\7&\2\2\u2432\u2433\5\u0464\u0233\2\u2433\u2434\7"+
		"\5\2\2\u2434\u2436\3\2\2\2\u2435\u2384\3\2\2\2\u2435\u238a\3\2\2\2\u2435"+
		"\u238b\3\2\2\2\u2435\u2392\3\2\2\2\u2435\u2399\3\2\2\2\u2435\u23a0\3\2"+
		"\2\2\u2435\u23a7\3\2\2\2\u2435\u23a8\3\2\2\2\u2435\u23a9\3\2\2\2\u2435"+
		"\u23aa\3\2\2\2\u2435\u23ab\3\2\2\2\u2435\u23ac\3\2\2\2\u2435\u23ad\3\2"+
		"\2\2\u2435\u23b4\3\2\2\2\u2435\u23b9\3\2\2\2\u2435\u23c2\3\2\2\2\u2435"+
		"\u23c7\3\2\2\2\u2435\u23cc\3\2\2\2\u2435\u23d1\3\2\2\2\u2435\u23d8\3\2"+
		"\2\2\u2435\u23e0\3\2\2\2\u2435\u23e7\3\2\2\2\u2435\u23ec\3\2\2\2\u2435"+
		"\u23f1\3\2\2\2\u2435\u23f6\3\2\2\2\u2435\u23fb\3\2\2\2\u2435\u2408\3\2"+
		"\2\2\u2435\u240e\3\2\2\2\u2435\u2413\3\2\2\2\u2435\u241a\3\2\2\2\u2435"+
		"\u2424\3\2\2\2\u2435\u242d\3\2\2\2\u2436\u04c3\3\2\2\2\u2437\u2438\7\u0172"+
		"\2\2\u2438\u243d\5\u048c\u0247\2\u2439\u243a\7\u0172\2\2\u243a\u243b\7"+
		"\u0108\2\2\u243b\u243d\7\u01c4\2\2\u243c\u2437\3\2\2\2\u243c\u2439\3\2"+
		"\2\2\u243d\u04c5\3\2\2\2\u243e\u243f\7\b\2\2\u243f\u2440\7\u014e\2\2\u2440"+
		"\u244a\7\u017c\2\2\u2441\u2442\7\b\2\2\u2442\u2443\7\u014e\2\2\u2443\u244a"+
		"\7\u0108\2\2\u2444\u2445\7\b\2\2\u2445\u2446\7\u014e\2\2\u2446\u2447\7"+
		"\u0108\2\2\u2447\u244a\7\u01c4\2\2\u2448\u244a\3\2\2\2\u2449\u243e\3\2"+
		"\2\2\u2449\u2441\3\2\2\2\u2449\u2444\3\2\2\2\u2449\u2448\3\2\2\2\u244a"+
		"\u04c7\3\2\2\2\u244b\u244c\7\u01a3\2\2\u244c\u244d\7\4\2\2\u244d\u244e"+
		"\5\u04ca\u0266\2\u244e\u244f\7\5\2\2\u244f\u04c9\3\2\2\2\u2450\u2455\5"+
		"\u04cc\u0267\2\u2451\u2452\7\b\2\2\u2452\u2454\5\u04cc\u0267\2\u2453\u2451"+
		"\3\2\2\2\u2454\u2457\3\2\2\2\u2455\u2453\3\2\2\2\u2455\u2456\3\2\2\2\u2456"+
		"\u04cb\3\2\2\2\u2457\u2455\3\2\2\2\u2458\u245b\5\u048c\u0247\2\u2459\u245a"+
		"\7&\2\2\u245a\u245c\5\u0564\u02b3\2\u245b\u2459\3\2\2\2\u245b\u245c\3"+
		"\2\2\2\u245c\u04cd\3\2\2\2\u245d\u245e\t\64\2\2\u245e\u04cf\3\2\2\2\u245f"+
		"\u2460\7\u011f\2\2\u2460\u2465\7\u0175\2\2\u2461\u2462\7\u0156\2\2\u2462"+
		"\u2465\7\u0175\2\2\u2463\u2465\3\2\2\2\u2464\u245f\3\2\2\2\u2464\u2461"+
		"\3\2\2\2\u2464\u2463\3\2\2\2\u2465\u04d1\3\2\2\2\u2466\u2467\7\u0119\2"+
		"\2\u2467\u2476\5\u04b8\u025d\2\u2468\u2469\7\u0119\2\2\u2469\u246a\5\u04b8"+
		"\u025d\2\u246a\u246b\5\u04d4\u026b\2\u246b\u2476\3\2\2\2\u246c\u246d\7"+
		"\u0119\2\2\u246d\u246e\5\u04d4\u026b\2\u246e\u246f\5\u04b8\u025d\2\u246f"+
		"\u2476\3\2\2\2\u2470\u2471\7\u0119\2\2\u2471\u2472\5\u04d4\u026b\2\u2472"+
		"\u2473\5\u04b8\u025d\2\u2473\u2474\5\u04d4\u026b\2\u2474\u2476\3\2\2\2"+
		"\u2475\u2466\3\2\2\2\u2475\u2468\3\2\2\2\u2475\u246c\3\2\2\2\u2475\u2470"+
		"\3\2\2\2\u2476\u04d3\3\2\2\2\u2477\u2478\7\u0095\2\2\u2478\u2479\t\65"+
		"\2\2\u2479\u04d5\3\2\2\2\u247a\u247b\7\u01e1\2\2\u247b\u247c\7D\2\2\u247c"+
		"\u247d\7\4\2\2\u247d\u247e\5\u03ea\u01f6\2\u247e\u247f\7\5\2\2\u247f\u2482"+
		"\3\2\2\2\u2480\u2482\3\2\2\2\u2481\u247a\3\2\2\2\u2481\u2480\3\2\2\2\u2482"+
		"\u04d7\3\2\2\2\u2483\u2484\7\u01e2\2\2\u2484\u2485\7\4\2\2\u2485\u2486"+
		"\7i\2\2\u2486\u2487\5\u048c\u0247\2\u2487\u2488\7\5\2\2\u2488\u248b\3"+
		"\2\2\2\u2489\u248b\3\2\2\2\u248a\u2483\3\2\2\2\u248a\u2489\3\2\2\2\u248b"+
		"\u04d9\3\2\2\2\u248c\u248d\7j\2\2\u248d\u2490\5\u04dc\u026f\2\u248e\u2490"+
		"\3\2\2\2\u248f\u248c\3\2\2\2\u248f\u248e\3\2\2\2\u2490\u04db\3\2\2\2\u2491"+
		"\u2496\5\u04de\u0270\2\u2492\u2493\7\b\2\2\u2493\u2495\5\u04de\u0270\2"+
		"\u2494\u2492\3\2\2\2\u2495\u2498\3\2\2\2\u2496\u2494\3\2\2\2\u2496\u2497"+
		"\3\2\2\2\u2497\u04dd\3\2\2\2\u2498\u2496\3\2\2\2\u2499\u249a\5\u055e\u02b0"+
		"\2\u249a\u249b\7&\2\2\u249b\u249c\5\u04e2\u0272\2\u249c\u04df\3\2\2\2"+
		"\u249d\u24a0\7~\2\2\u249e\u24a1\5\u04e2\u0272\2\u249f\u24a1\5\u055e\u02b0"+
		"\2\u24a0\u249e\3\2\2\2\u24a0\u249f\3\2\2\2\u24a1\u24a4\3\2\2\2\u24a2\u24a4"+
		"\3\2\2\2\u24a3\u249d\3\2\2\2\u24a3\u24a2\3\2\2\2\u24a4\u04e1\3\2\2\2\u24a5"+
		"\u24a6\7\4\2\2\u24a6\u24a7\5\u04e4\u0273\2\u24a7\u24a8\5\u04e6\u0274\2"+
		"\u24a8\u24a9\5\u03e8\u01f5\2\u24a9\u24aa\5\u04e8\u0275\2\u24aa\u24ab\7"+
		"\5\2\2\u24ab\u04e3\3\2\2\2\u24ac\u24af\5\u055e\u02b0\2\u24ad\u24af\3\2"+
		"\2\2\u24ae\u24ac\3\2\2\2\u24ae\u24ad\3\2\2\2\u24af\u04e5\3\2\2\2\u24b0"+
		"\u24b1\7\u0118\2\2\u24b1\u24b2\7\u0095\2\2\u24b2\u24b5\5\u0502\u0282\2"+
		"\u24b3\u24b5\3\2\2\2\u24b4\u24b0\3\2\2\2\u24b4\u24b3\3\2\2\2\u24b5\u04e7"+
		"\3\2\2\2\u24b6\u24b7\7\u0126\2\2\u24b7\u24b8\5\u04ea\u0276\2\u24b8\u24b9"+
		"\5\u04ee\u0278\2\u24b9\u24c4\3\2\2\2\u24ba\u24bb\7\u013b\2\2\u24bb\u24bc"+
		"\5\u04ea\u0276\2\u24bc\u24bd\5\u04ee\u0278\2\u24bd\u24c4\3\2\2\2\u24be"+
		"\u24bf\7\u01e3\2\2\u24bf\u24c0\5\u04ea\u0276\2\u24c0\u24c1\5\u04ee\u0278"+
		"\2\u24c1\u24c4\3\2\2\2\u24c2\u24c4\3\2\2\2\u24c3\u24b6\3\2\2\2\u24c3\u24ba"+
		"\3\2\2\2\u24c3\u24be\3\2\2\2\u24c3\u24c2\3\2\2\2\u24c4\u04e9\3\2\2\2\u24c5"+
		"\u24cc\5\u04ec\u0277\2\u24c6\u24c7\7\u017e\2\2\u24c7\u24c8\5\u04ec\u0277"+
		"\2\u24c8\u24c9\7#\2\2\u24c9\u24ca\5\u04ec\u0277\2\u24ca\u24cc\3\2\2\2"+
		"\u24cb\u24c5\3\2\2\2\u24cb\u24c6\3\2\2\2\u24cc\u04eb\3\2\2\2\u24cd\u24ce"+
		"\7\u0165\2\2\u24ce\u24d5\t\66\2\2\u24cf\u24d0\7\u01b4\2\2\u24d0\u24d5"+
		"\7\u0199\2\2\u24d1\u24d2\5\u048c\u0247\2\u24d2\u24d3\t\66\2\2\u24d3\u24d5"+
		"\3\2\2\2\u24d4\u24cd\3\2\2\2\u24d4\u24cf\3\2\2\2\u24d4\u24d1\3\2\2\2\u24d5"+
		"\u04ed\3\2\2\2\u24d6\u24dd\7\u00c9\2\2\u24d7\u24d8\7\u01b4\2\2\u24d8\u24de"+
		"\7\u0199\2\2\u24d9\u24de\7D\2\2\u24da\u24de\7\u01d5\2\2\u24db\u24dc\7"+
		"\u0108\2\2\u24dc\u24de\7\u01e4\2\2\u24dd\u24d7\3\2\2\2\u24dd\u24d9\3\2"+
		"\2\2\u24dd\u24da\3\2\2\2\u24dd\u24db\3\2\2\2\u24de\u24e1\3\2\2\2\u24df"+
		"\u24e1\3\2\2\2\u24e0\u24d6\3\2\2\2\u24e0\u24df\3\2\2\2\u24e1\u04ef\3\2"+
		"\2\2\u24e2\u24e3\7\u0199\2\2\u24e3\u24e5\7\4\2\2\u24e4\u24e6\5\u0502\u0282"+
		"\2\u24e5\u24e4\3\2\2\2\u24e5\u24e6\3\2\2\2\u24e6\u24e7\3\2\2\2\u24e7\u24ef"+
		"\7\5\2\2\u24e8\u24e9\7\4\2\2\u24e9\u24ea\5\u0502\u0282\2\u24ea\u24eb\7"+
		"\b\2\2\u24eb\u24ec\5\u048c\u0247\2\u24ec\u24ed\7\5\2\2\u24ed\u24ef\3\2"+
		"\2\2\u24ee\u24e2\3\2\2\2\u24ee\u24e8\3\2\2\2\u24ef\u04f1\3\2\2\2\u24f0"+
		"\u24f1\7\u0199\2\2\u24f1\u24f3\7\4\2\2\u24f2\u24f4\5\u0502\u0282\2\u24f3"+
		"\u24f2\3\2\2\2\u24f3\u24f4\3\2\2\2\u24f4\u24f5\3\2\2\2\u24f5\u24f6\7\5"+
		"\2\2\u24f6\u04f3\3\2\2\2\u24f7\u24f8\7\4\2\2\u24f8\u24f9\5\u0502\u0282"+
		"\2\u24f9\u24fa\7\b\2\2\u24fa\u24fb\5\u048c\u0247\2\u24fb\u24fc\7\5\2\2"+
		"\u24fc\u04f5\3\2\2\2\u24fd\u24fe\t\67\2\2\u24fe\u04f7\3\2\2\2\u24ff\u2502"+
		"\7\37\2\2\u2500\u2502\5\u04fa\u027e\2\u2501\u24ff\3\2\2\2\u2501\u2500"+
		"\3\2\2\2\u2502\u04f9\3\2\2\2\u2503\u2504\t8\2\2\u2504\u04fb\3\2\2\2\u2505"+
		"\u250c\7\37\2\2\u2506\u2507\7\u0111\2\2\u2507\u2508\7\4\2\2\u2508\u2509"+
		"\5\u02ae\u0158\2\u2509\u250a\7\5\2\2\u250a\u250c\3\2\2\2\u250b\u2505\3"+
		"\2\2\2\u250b\u2506\3\2\2\2\u250c\u04fd\3\2\2\2\u250d\u2514\5\u04f8\u027d"+
		"\2\u250e\u250f\7\u0111\2\2\u250f\u2510\7\4\2\2\u2510\u2511\5\u02ae\u0158"+
		"\2\u2511\u2512\7\5\2\2\u2512\u2514\3\2\2\2\u2513\u250d\3\2\2\2\u2513\u250e"+
		"\3\2\2\2\u2514\u04ff\3\2\2\2\u2515\u2522\5\u04f8\u027d\2\u2516\u2517\7"+
		"\u0111\2\2\u2517\u2518\7\4\2\2\u2518\u2519\5\u02ae\u0158\2\u2519\u251a"+
		"\7\5\2\2\u251a\u2522\3\2\2\2\u251b\u2522\7z\2\2\u251c\u251d\7O\2\2\u251d"+
		"\u2522\7z\2\2\u251e\u2522\7t\2\2\u251f\u2520\7O\2\2\u2520\u2522\7t\2\2"+
		"\u2521\u2515\3\2\2\2\u2521\u2516\3\2\2\2\u2521\u251b\3\2\2\2\u2521\u251c"+
		"\3\2\2\2\u2521\u251e\3\2\2\2\u2521\u251f\3\2\2\2\u2522\u0501\3\2\2\2\u2523"+
		"\u2528\5\u048c\u0247\2\u2524\u2525\7\b\2\2\u2525\u2527\5\u048c\u0247\2"+
		"\u2526\u2524\3\2\2\2\u2527\u252a\3\2\2\2\u2528\u2526\3\2\2\2\u2528\u2529"+
		"\3\2\2\2\u2529\u0503\3\2\2\2\u252a\u2528\3\2\2\2\u252b\u2530\5\u0506\u0284"+
		"\2\u252c\u252d\7\b\2\2\u252d\u252f\5\u0506\u0284\2\u252e\u252c\3\2\2\2"+
		"\u252f\u2532\3\2\2\2\u2530\u252e\3\2\2\2\u2530\u2531\3\2\2\2\u2531\u0505"+
		"\3\2\2\2\u2532\u2530\3\2\2\2\u2533\u2539\5\u048c\u0247\2\u2534\u2535\5"+
		"\u027e\u0140\2\u2535\u2536\t9\2\2\u2536\u2537\5\u048c\u0247\2\u2537\u2539"+
		"\3\2\2\2\u2538\u2533\3\2\2\2\u2538\u2534\3\2\2\2\u2539\u0507\3\2\2\2\u253a"+
		"\u253f\5\u0460\u0231\2\u253b\u253c\7\b\2\2\u253c\u253e\5\u0460\u0231\2"+
		"\u253d\u253b\3\2\2\2\u253e\u2541\3\2\2\2\u253f\u253d\3\2\2\2\u253f\u2540"+
		"\3\2\2\2\u2540\u0509\3\2\2\2\u2541\u253f\3\2\2\2\u2542\u2545\7\6\2\2\u2543"+
		"\u2546\5\u0502\u0282\2\u2544\u2546\5\u050c\u0287\2\u2545\u2543\3\2\2\2"+
		"\u2545\u2544\3\2\2\2\u2545\u2546\3\2\2\2\u2546\u2547\3\2\2\2\u2547\u2548"+
		"\7\7\2\2\u2548\u050b\3\2\2\2\u2549\u254e\5\u050a\u0286\2\u254a\u254b\7"+
		"\b\2\2\u254b\u254d\5\u050a\u0286\2\u254c\u254a\3\2\2\2\u254d\u2550\3\2"+
		"\2\2\u254e\u254c\3\2\2\2\u254e\u254f\3\2\2\2\u254f\u050d\3\2\2\2\u2550"+
		"\u254e\3\2\2\2\u2551\u2552\5\u0510\u0289\2\u2552\u2553\7B\2\2\u2553\u2554"+
		"\5\u048c\u0247\2\u2554\u2557\3\2\2\2\u2555\u2557\3\2\2\2\u2556\u2551\3"+
		"\2\2\2\u2556\u2555\3\2\2\2\u2557\u050f\3\2\2\2\u2558\u2561\5\u0566\u02b4"+
		"\2\u2559\u2561\7\u017b\2\2\u255a\u2561\7\u0103\2\2\u255b\u2561\7\u00b2"+
		"\2\2\u255c\u2561\7\u00dc\2\2\u255d\u2561\7\u0100\2\2\u255e\u2561\7\u0141"+
		"\2\2\u255f\u2561\5\u0550\u02a9\2\u2560\u2558\3\2\2\2\u2560\u2559\3\2\2"+
		"\2\u2560\u255a\3\2\2\2\u2560\u255b\3\2\2\2\u2560\u255c\3\2\2\2\u2560\u255d"+
		"\3\2\2\2\u2560\u255e\3\2\2\2\u2560\u255f\3\2\2\2\u2561\u0511\3\2\2\2\u2562"+
		"\u2563\t:\2\2\u2563\u0513\3\2\2\2\u2564\u2565\5\u048c\u0247\2\u2565\u2566"+
		"\7V\2\2\u2566\u2567\5\u048c\u0247\2\u2567\u2568\7B\2\2\u2568\u256b\5\u048c"+
		"\u0247\2\u2569\u256a\7@\2\2\u256a\u256c\5\u048c\u0247\2\u256b\u2569\3"+
		"\2\2\2\u256b\u256c\3\2\2\2\u256c\u0515\3\2\2\2\u256d\u256e\5\u04b6\u025c"+
		"\2\u256e\u256f\7F\2\2\u256f\u2570\5\u04b6\u025c\2\u2570\u2573\3\2\2\2"+
		"\u2571\u2573\3\2\2\2\u2572\u256d\3\2\2\2\u2572\u2571\3\2\2\2\u2573\u0517"+
		"\3\2\2\2\u2574\u2575\5\u048c\u0247\2\u2575\u2576\7B\2\2\u2576\u2577\5"+
		"\u048c\u0247\2\u2577\u2578\7@\2\2\u2578\u2579\5\u048c\u0247\2\u2579\u2591"+
		"\3\2\2\2\u257a\u257b\5\u048c\u0247\2\u257b\u257c\7@\2\2\u257c\u257d\5"+
		"\u048c\u0247\2\u257d\u257e\7B\2\2\u257e\u257f\5\u048c\u0247\2\u257f\u2591"+
		"\3\2\2\2\u2580\u2581\5\u048c\u0247\2\u2581\u2582\7B\2\2\u2582\u2583\5"+
		"\u048c\u0247\2\u2583\u2591\3\2\2\2\u2584\u2585\5\u048c\u0247\2\u2585\u2586"+
		"\7@\2\2\u2586\u2587\5\u048c\u0247\2\u2587\u2591\3\2\2\2\u2588\u2589\5"+
		"\u048c\u0247\2\u2589\u258a\7\u0081\2\2\u258a\u258b\5\u048c\u0247\2\u258b"+
		"\u258c\7\u00c7\2\2\u258c\u258d\5\u048c\u0247\2\u258d\u2591\3\2\2\2\u258e"+
		"\u2591\5\u0502\u0282\2\u258f\u2591\3\2\2\2\u2590\u2574\3\2\2\2\u2590\u257a"+
		"\3\2\2\2\u2590\u2580\3\2\2\2\u2590\u2584\3\2\2\2\u2590\u2588\3\2\2\2\u2590"+
		"\u258e\3\2\2\2\u2590\u258f\3\2\2\2\u2591\u0519\3\2\2\2\u2592\u2593\5\u048c"+
		"\u0247\2\u2593\u2594\7B\2\2\u2594\u2595\5\u0502\u0282\2\u2595\u259a\3"+
		"\2\2\2\u2596\u2597\7B\2\2\u2597\u259a\5\u0502\u0282\2\u2598\u259a\5\u0502"+
		"\u0282\2\u2599\u2592\3\2\2\2\u2599\u2596\3\2\2\2\u2599\u2598\3\2\2\2\u259a"+
		"\u051b\3\2\2\2\u259b\u25a1\5\u03c4\u01e3\2\u259c\u259d\7\4\2\2\u259d\u259e"+
		"\5\u0502\u0282\2\u259e\u259f\7\5\2\2\u259f\u25a1\3\2\2\2\u25a0\u259b\3"+
		"\2\2\2\u25a0\u259c\3\2\2\2\u25a1\u051d\3\2\2\2\u25a2\u25a3\7*\2\2\u25a3"+
		"\u25a4\5\u0526\u0294\2\u25a4\u25a5\5\u0520\u0291\2\u25a5\u25a6\5\u0524"+
		"\u0293\2\u25a6\u25a7\7\u01c8\2\2\u25a7\u051f\3\2\2\2\u25a8\u25aa\5\u0522"+
		"\u0292\2\u25a9\u25a8\3\2\2\2\u25aa\u25ab\3\2\2\2\u25ab\u25a9\3\2\2\2\u25ab"+
		"\u25ac\3\2\2\2\u25ac\u0521\3\2\2\2\u25ad\u25ae\7h\2\2\u25ae\u25af\5\u048c"+
		"\u0247\2\u25af\u25b0\7_\2\2\u25b0\u25b1\5\u048c\u0247\2\u25b1\u0523\3"+
		"\2\2\2\u25b2\u25b3\7<\2\2\u25b3\u25b6\5\u048c\u0247\2\u25b4\u25b6\3\2"+
		"\2\2\u25b5\u25b2\3\2\2\2\u25b5\u25b4\3\2\2\2\u25b6\u0525\3\2\2\2\u25b7"+
		"\u25ba\5\u048c\u0247\2\u25b8\u25ba\3\2\2\2\u25b9\u25b7\3\2\2\2\u25b9\u25b8"+
		"\3\2\2\2\u25ba\u0527\3\2\2\2\u25bb\u25bd\5\u055e\u02b0\2\u25bc\u25be\5"+
		"\u052e\u0298\2\u25bd\u25bc\3\2\2\2\u25bd\u25be\3\2\2\2\u25be\u0529\3\2"+
		"\2\2\u25bf\u25c2\7\r\2\2\u25c0\u25c3\5\u0540\u02a1\2\u25c1\u25c3\7\13"+
		"\2\2\u25c2\u25c0\3\2\2\2\u25c2\u25c1\3\2\2\2\u25c3\u25cf\3\2\2\2\u25c4"+
		"\u25ca\7\6\2\2\u25c5\u25cb\5\u048c\u0247\2\u25c6\u25c7\5\u052c\u0297\2"+
		"\u25c7\u25c8\7\n\2\2\u25c8\u25c9\5\u052c\u0297\2\u25c9\u25cb\3\2\2\2\u25ca"+
		"\u25c5\3\2\2\2\u25ca\u25c6\3\2\2\2\u25cb\u25cc\3\2\2\2\u25cc\u25cd\7\7"+
		"\2\2\u25cd\u25cf\3\2\2\2\u25ce\u25bf\3\2\2\2\u25ce\u25c4\3\2\2\2\u25cf"+
		"\u052b\3\2\2\2\u25d0\u25d3\5\u048c\u0247\2\u25d1\u25d3\3\2\2\2\u25d2\u25d0"+
		"\3\2\2\2\u25d2\u25d1\3\2\2\2\u25d3\u052d\3\2\2\2\u25d4\u25d6\5\u052a\u0296"+
		"\2\u25d5\u25d4\3\2\2\2\u25d6\u25d7\3\2\2\2\u25d7\u25d5\3\2\2\2\u25d7\u25d8"+
		"\3\2\2\2\u25d8\u052f\3\2\2\2\u25d9\u25db\5\u052a\u0296\2\u25da\u25d9\3"+
		"\2\2\2\u25db\u25de\3\2\2\2\u25dc\u25da\3\2\2\2\u25dc\u25dd\3\2\2\2\u25dd"+
		"\u0531\3\2\2\2\u25de\u25dc\3\2\2\2\u25df\u25e2\5\u0534\u029b\2\u25e0\u25e2"+
		"\3\2\2\2\u25e1\u25df\3\2\2\2\u25e1\u25e0\3\2\2\2\u25e2\u0533\3\2\2\2\u25e3"+
		"\u25e8\5\u0536\u029c\2\u25e4\u25e5\7\b\2\2\u25e5\u25e7\5\u0536\u029c\2"+
		"\u25e6\u25e4\3\2\2\2\u25e7\u25ea\3\2\2\2\u25e8\u25e6\3\2\2\2\u25e8\u25e9"+
		"\3\2\2\2\u25e9\u0535\3\2\2\2\u25ea\u25e8\3\2\2\2\u25eb\u25f0\5\u048c\u0247"+
		"\2\u25ec\u25ed\7&\2\2\u25ed\u25f1\5\u0564\u02b3\2\u25ee\u25f1\5\u0566"+
		"\u02b4\2\u25ef\u25f1\3\2\2\2\u25f0\u25ec\3\2\2\2\u25f0\u25ee\3\2\2\2\u25f0"+
		"\u25ef\3\2\2\2\u25f1\u25f4\3\2\2\2\u25f2\u25f4\7\13\2\2\u25f3\u25eb\3"+
		"\2\2\2\u25f3\u25f2\3\2\2\2\u25f4\u0537\3\2\2\2\u25f5\u25fa\5\u053a\u029e"+
		"\2\u25f6\u25f7\7\b\2\2\u25f7\u25f9\5\u053a\u029e\2\u25f8\u25f6\3\2\2\2"+
		"\u25f9\u25fc\3\2\2\2\u25fa\u25f8\3\2\2\2\u25fa\u25fb\3\2\2\2\u25fb\u0539"+
		"\3\2\2\2\u25fc\u25fa\3\2\2\2\u25fd\u25ff\5\u055e\u02b0\2\u25fe\u2600\5"+
		"\u052e\u0298\2\u25ff\u25fe\3\2\2\2\u25ff\u2600\3\2\2\2\u2600\u053b\3\2"+
		"\2\2\u2601\u2606\5\u053e\u02a0\2\u2602\u2603\7\b\2\2\u2603\u2605\5\u053e"+
		"\u02a0\2\u2604\u2602\3\2\2\2\u2605\u2608\3\2\2\2\u2606\u2604\3\2\2\2\u2606"+
		"\u2607\3\2\2\2\u2607\u053d\3\2\2\2\u2608\u2606\3\2\2\2\u2609\u260a\5\u055e"+
		"\u02b0\2\u260a\u053f\3\2\2\2\u260b\u260c\5\u0564\u02b3\2\u260c\u0541\3"+
		"\2\2\2\u260d\u260e\5\u0550\u02a9\2\u260e\u0543\3\2\2\2\u260f\u2615\5\u0572"+
		"\u02ba\2\u2610\u2615\5\u0560\u02b1\2\u2611\u2612\5\u055e\u02b0\2\u2612"+
		"\u2613\5\u052e\u0298\2\u2613\u2615\3\2\2\2\u2614\u260f\3\2\2\2\u2614\u2610"+
		"\3\2\2\2\u2614\u2611\3\2\2\2\u2615\u0545\3\2\2\2\u2616\u2637\5\u054e\u02a8"+
		"\2\u2617\u2637\5\u054c\u02a7\2\u2618\u2637\5\u0550\u02a9\2\u2619\u2637"+
		"\5\u054a\u02a6\2\u261a\u2637\5\u0548\u02a5\2\u261b\u2623\5\u0544\u02a3"+
		"\2\u261c\u2624\5\u0550\u02a9\2\u261d\u261e\7\4\2\2\u261e\u261f\5\u0504"+
		"\u0283\2\u261f\u2620\5\u03e8\u01f5\2\u2620\u2621\7\5\2\2\u2621\u2622\5"+
		"\u0550\u02a9\2\u2622\u2624\3\2\2\2\u2623\u261c\3\2\2\2\u2623\u261d\3\2"+
		"\2\2\u2624\u2637\3\2\2\2\u2625\u2626\5\u0466\u0234\2\u2626\u2627\5\u0550"+
		"\u02a9\2\u2627\u2637\3\2\2\2\u2628\u2631\5\u0482\u0242\2\u2629\u262a\5"+
		"\u0550\u02a9\2\u262a\u262b\5\u0486\u0244\2\u262b\u2632\3\2\2\2\u262c\u262d"+
		"\7\4\2\2\u262d\u262e\5\u054e\u02a8\2\u262e\u262f\7\5\2\2\u262f\u2630\5"+
		"\u0550\u02a9\2\u2630\u2632\3\2\2\2\u2631\u2629\3\2\2\2\u2631\u262c\3\2"+
		"\2\2\u2632\u2637\3\2\2\2\u2633\u2637\7b\2\2\u2634\u2637\7>\2\2\u2635\u2637"+
		"\7P\2\2\u2636\u2616\3\2\2\2\u2636\u2617\3\2\2\2\u2636\u2618\3\2\2\2\u2636"+
		"\u2619\3\2\2\2\u2636\u261a\3\2\2\2\u2636\u261b\3\2\2\2\u2636\u2625\3\2"+
		"\2\2\u2636\u2628\3\2\2\2\u2636\u2633\3\2\2\2\u2636\u2634\3\2\2\2\u2636"+
		"\u2635\3\2\2\2\u2637\u0547\3\2\2\2\u2638\u2639\7\u0290\2\2\u2639\u0549"+
		"\3\2\2\2\u263a\u263b\7\u028c\2\2\u263b\u054b\3\2\2\2\u263c\u263d\7\u0296"+
		"\2\2\u263d\u054d\3\2\2\2\u263e\u263f\7\u0294\2\2\u263f\u054f\3\2\2\2\u2640"+
		"\u2641\5\u0552\u02aa\2\u2641\u2642\5\u0554\u02ab\2\u2642\u0551\3\2\2\2"+
		"\u2643\u264f\7\u0287\2\2\u2644\u264f\7\u0289\2\2\u2645\u2649\7\u028b\2"+
		"\2\u2646\u2648\7\u02a7\2\2\u2647\u2646\3\2\2\2\u2648\u264b\3\2\2\2\u2649"+
		"\u2647\3\2\2\2\u2649\u264a\3\2\2\2\u264a\u264c\3\2\2\2\u264b\u2649\3\2"+
		"\2\2\u264c\u264f\7\u02a8\2\2\u264d\u264f\7\u02a1\2\2\u264e\u2643\3\2\2"+
		"\2\u264e\u2644\3\2\2\2\u264e\u2645\3\2\2\2\u264e\u264d\3\2\2\2\u264f\u0553"+
		"\3\2\2\2\u2650\u2651\7\u01e9\2\2\u2651\u2654\5\u0552\u02aa\2\u2652\u2654"+
		"\3\2\2\2\u2653\u2650\3\2\2\2\u2653\u2652\3\2\2\2\u2654\u0555\3\2\2\2\u2655"+
		"\u265b\5\u054e\u02a8\2\u2656\u2657\7\16\2\2\u2657\u265b\5\u054e\u02a8"+
		"\2\u2658\u2659\7\17\2\2\u2659\u265b\5\u054e\u02a8\2\u265a\u2655\3\2\2"+
		"\2\u265a\u2656\3\2\2\2\u265a\u2658\3\2\2\2\u265b\u0557\3\2\2\2\u265c\u265d"+
		"\5\u055a\u02ae\2\u265d\u0559\3\2\2\2\u265e\u2662\5\u0562\u02b2\2\u265f"+
		"\u2662\7\66\2\2\u2660\u2662\7[\2\2\u2661\u265e\3\2\2\2\u2661\u265f\3\2"+
		"\2\2\u2661\u2660\3\2\2\2\u2662\u055b\3\2\2\2\u2663\u2668\5\u055a\u02ae"+
		"\2\u2664\u2665\7\b\2\2\u2665\u2667\5\u055a\u02ae\2\u2666\u2664\3\2\2\2"+
		"\u2667\u266a\3\2\2\2\u2668\u2666\3\2\2\2\u2668\u2669\3\2\2\2\u2669\u055d"+
		"\3\2\2\2\u266a\u2668\3\2\2\2\u266b\u2670\5\u0566\u02b4\2\u266c\u2670\5"+
		"\u056a\u02b6\2\u266d\u2670\5\u056c\u02b7\2\u266e\u2670\5\u0648\u0325\2"+
		"\u266f\u266b\3\2\2\2\u266f\u266c\3\2\2\2\u266f\u266d\3\2\2\2\u266f\u266e"+
		"\3\2\2\2\u2670\u055f\3\2\2\2\u2671\u2676\5\u0566\u02b4\2\u2672\u2676\5"+
		"\u056a\u02b6\2\u2673\u2676\5\u0648\u0325\2\u2674\u2676\5\u056e\u02b8\2"+
		"\u2675\u2671\3\2\2\2\u2675\u2672\3\2\2\2\u2675\u2673\3\2\2\2\u2675\u2674"+
		"\3\2\2\2\u2676\u0561\3\2\2\2\u2677\u267c\5\u0566\u02b4\2\u2678\u267c\5"+
		"\u056a\u02b6\2\u2679\u267c\5\u056c\u02b7\2\u267a\u267c\5\u056e\u02b8\2"+
		"\u267b\u2677\3\2\2\2\u267b\u2678\3\2\2\2\u267b\u2679\3\2\2\2\u267b\u267a"+
		"\3\2\2\2\u267c\u0563\3\2\2\2\u267d\u2684\5\u0566\u02b4\2\u267e\u2684\5"+
		"\u0648\u0325\2\u267f\u2684\5\u056a\u02b6\2\u2680\u2684\5\u056c\u02b7\2"+
		"\u2681\u2684\5\u056e\u02b8\2\u2682\u2684\5\u0570\u02b9\2\u2683\u267d\3"+
		"\2\2\2\u2683\u267e\3\2\2\2\u2683\u267f\3\2\2\2\u2683\u2680\3\2\2\2\u2683"+
		"\u2681\3\2\2\2\u2683\u2682\3\2\2\2\u2684\u0565\3\2\2\2\u2685\u2686\7\u027e"+
		"\2\2\u2686\u268d\5\u0554\u02ab\2\u2687\u268d\7\u027f\2\2\u2688\u268d\7"+
		"\u0283\2\2\u2689\u268d\5\u04ba\u025e\2\u268a\u268d\5\u0568\u02b5\2\u268b"+
		"\u268d\5\u0648\u0325\2\u268c\u2685\3\2\2\2\u268c\u2687\3\2\2\2\u268c\u2688"+
		"\3\2\2\2\u268c\u2689\3\2\2\2\u268c\u268a\3\2\2\2\u268c\u268b\3\2\2\2\u268d"+
		"\u0567\3\2\2\2\u268e\u268f\7\u0298\2\2\u268f\u0569\3\2\2\2\u2690\u2691"+
		"\t;\2\2\u2691\u056b\3\2\2\2\u2692\u26c7\7\u017e\2\2\u2693\u26c7\7\u017f"+
		"\2\2\u2694\u26c7\5\u0470\u0239\2\u2695\u26c7\7\u0181\2\2\u2696\u26c7\7"+
		"\u0182\2\2\u2697\u26c7\5\u0478\u023d\2\u2698\u26c7\7\u0184\2\2\u2699\u26c7"+
		"\7\u0185\2\2\u269a\u26c7\7\u0186\2\2\u269b\u26c7\7\u0187\2\2\u269c\u26c7"+
		"\7\u0188\2\2\u269d\u26c7\7\u0189\2\2\u269e\u26c7\7\u018a\2\2\u269f\u26c7"+
		"\7\u01d8\2\2\u26a0\u26c7\7\u018b\2\2\u26a1\u26c7\7\u018c\2\2\u26a2\u26c7"+
		"\7\u018d\2\2\u26a3\u26c7\7\u018e\2\2\u26a4\u26c7\7\u018f\2\2\u26a5\u26c7"+
		"\7\u0190\2\2\u26a6\u26c7\7\u0191\2\2\u26a7\u26c7\7\u0192\2\2\u26a8\u26c7"+
		"\7\u01eb\2\2\u26a9\u26c7\7\u0193\2\2\u26aa\u26c7\5\u046c\u0237\2\u26ab"+
		"\u26c7\7\u01c7\2\2\u26ac\u26c7\7\u0195\2\2\u26ad\u26c7\7\u0196\2\2\u26ae"+
		"\u26c7\7\u0197\2\2\u26af\u26c7\7\u0198\2\2\u26b0\u26c7\7\u0199\2\2\u26b1"+
		"\u26c7\7\u019a\2\2\u26b2\u26c7\7\u019b\2\2\u26b3\u26c7\7\u019c\2\2\u26b4"+
		"\u26c7\7\u019d\2\2\u26b5\u26c7\7\u019e\2\2\u26b6\u26c7\7\u019f\2\2\u26b7"+
		"\u26c7\7\u01a0\2\2\u26b8\u26c7\7\u01a1\2\2\u26b9\u26c7\7\u01a2\2\2\u26ba"+
		"\u26c7\7\u01a3\2\2\u26bb\u26c7\7\u01ab\2\2\u26bc\u26c7\7\u01ac\2\2\u26bd"+
		"\u26c7\7\u01ad\2\2\u26be\u26c7\7\u01ae\2\2\u26bf\u26c7\7\u01de\2\2\u26c0"+
		"\u26c7\7\u01af\2\2\u26c1\u26c7\7\u01b0\2\2\u26c2\u26c7\7\u01b1\2\2\u26c3"+
		"\u26c7\7\u01b2\2\2\u26c4\u26c7\7\u01dc\2\2\u26c5\u26c7\5\u0572\u02ba\2"+
		"\u26c6\u2692\3\2\2\2\u26c6\u2693\3\2\2\2\u26c6\u2694\3\2\2\2\u26c6\u2695"+
		"\3\2\2\2\u26c6\u2696\3\2\2\2\u26c6\u2697\3\2\2\2\u26c6\u2698\3\2\2\2\u26c6"+
		"\u2699\3\2\2\2\u26c6\u269a\3\2\2\2\u26c6\u269b\3\2\2\2\u26c6\u269c\3\2"+
		"\2\2\u26c6\u269d\3\2\2\2\u26c6\u269e\3\2\2\2\u26c6\u269f\3\2\2\2\u26c6"+
		"\u26a0\3\2\2\2\u26c6\u26a1\3\2\2\2\u26c6\u26a2\3\2\2\2\u26c6\u26a3\3\2"+
		"\2\2\u26c6\u26a4\3\2\2\2\u26c6\u26a5\3\2\2\2\u26c6\u26a6\3\2\2\2\u26c6"+
		"\u26a7\3\2\2\2\u26c6\u26a8\3\2\2\2\u26c6\u26a9\3\2\2\2\u26c6\u26aa\3\2"+
		"\2\2\u26c6\u26ab\3\2\2\2\u26c6\u26ac\3\2\2\2\u26c6\u26ad\3\2\2\2\u26c6"+
		"\u26ae\3\2\2\2\u26c6\u26af\3\2\2\2\u26c6\u26b0\3\2\2\2\u26c6\u26b1\3\2"+
		"\2\2\u26c6\u26b2\3\2\2\2\u26c6\u26b3\3\2\2\2\u26c6\u26b4\3\2\2\2\u26c6"+
		"\u26b5\3\2\2\2\u26c6\u26b6\3\2\2\2\u26c6\u26b7\3\2\2\2\u26c6\u26b8\3\2";
	private static final String _serializedATNSegment4 =
		"\2\2\u26c6\u26b9\3\2\2\2\u26c6\u26ba\3\2\2\2\u26c6\u26bb\3\2\2\2\u26c6"+
		"\u26bc\3\2\2\2\u26c6\u26bd\3\2\2\2\u26c6\u26be\3\2\2\2\u26c6\u26bf\3\2"+
		"\2\2\u26c6\u26c0\3\2\2\2\u26c6\u26c1\3\2\2\2\u26c6\u26c2\3\2\2\2\u26c6"+
		"\u26c3\3\2\2\2\u26c6\u26c4\3\2\2\2\u26c6\u26c5\3\2\2\2\u26c7\u056d\3\2"+
		"\2\2\u26c8\u26c9\t<\2\2\u26c9\u056f\3\2\2\2\u26ca\u26cb\t=\2\2\u26cb\u0571"+
		"\3\2\2\2\u26cc\u26cd\t>\2\2\u26cd\u0573\3\2\2\2\u26ce\u26cf\5\u0576\u02bc"+
		"\2\u26cf\u26d0\5\u0580\u02c1\2\u26d0\u26d1\5\u057e\u02c0\2\u26d1\u0575"+
		"\3\2\2\2\u26d2\u26d4\5\u0578\u02bd\2\u26d3\u26d2\3\2\2\2\u26d4\u26d7\3"+
		"\2\2\2\u26d5\u26d3\3\2\2\2\u26d5\u26d6\3\2\2\2\u26d6\u0577\3\2\2\2\u26d7"+
		"\u26d5\3\2\2\2\u26d8\u26d9\5\u057a\u02be\2\u26d9\u26da\7\u0112\2\2\u26da"+
		"\u26db\7\u01ec\2\2\u26db\u26ed\3\2\2\2\u26dc\u26dd\5\u057a\u02be\2\u26dd"+
		"\u26de\7\u01ed\2\2\u26de\u26df\5\u057c\u02bf\2\u26df\u26ed\3\2\2\2\u26e0"+
		"\u26e1\5\u057a\u02be\2\u26e1\u26e2\7\u01ee\2\2\u26e2\u26e3\7\u01ef\2\2"+
		"\u26e3\u26ed\3\2\2\2\u26e4\u26e5\5\u057a\u02be\2\u26e5\u26e6\7\u01ee\2"+
		"\2\u26e6\u26e7\7\u01f0\2\2\u26e7\u26ed\3\2\2\2\u26e8\u26e9\5\u057a\u02be"+
		"\2\u26e9\u26ea\7\u01ee\2\2\u26ea\u26eb\7\u01f1\2\2\u26eb\u26ed\3\2\2\2"+
		"\u26ec\u26d8\3\2\2\2\u26ec\u26dc\3\2\2\2\u26ec\u26e0\3\2\2\2\u26ec\u26e4"+
		"\3\2\2\2\u26ec\u26e8\3\2\2\2\u26ed\u0579\3\2\2\2\u26ee\u26ef\7\37\2\2"+
		"\u26ef\u057b\3\2\2\2\u26f0\u26f5\5\u0550\u02a9\2\u26f1\u26f5\5\u0570\u02b9"+
		"\2\u26f2\u26f5\5\u0648\u0325\2\u26f3\u26f5\5\u056a\u02b6\2\u26f4\u26f0"+
		"\3\2\2\2\u26f4\u26f1\3\2\2\2\u26f4\u26f2\3\2\2\2\u26f4\u26f3\3\2\2\2\u26f5"+
		"\u057d\3\2\2\2\u26f6\u26f9\3\2\2\2\u26f7\u26f9\7\t\2\2\u26f8\u26f6\3\2"+
		"\2\2\u26f8\u26f7\3\2\2\2\u26f9\u057f\3\2\2\2\u26fa\u26fb\5\u0582\u02c2"+
		"\2\u26fb\u26fc\7\u0094\2\2\u26fc\u26fd\5\u05ac\u02d7\2\u26fd\u26fe\5\u0634"+
		"\u031b\2\u26fe\u26ff\7\u01c8\2\2\u26ff\u2700\5\u0642\u0322\2\u2700\u0581"+
		"\3\2\2\2\u2701\u2706\5\u063e\u0320\2\u2702\u2704\5\u0584\u02c3\2\u2703"+
		"\u2705\5\u0586\u02c4\2\u2704\u2703\3\2\2\2\u2704\u2705\3\2\2\2\u2705\u2707"+
		"\3\2\2\2\u2706\u2702\3\2\2\2\u2706\u2707\3\2\2\2\u2707\u0583\3\2\2\2\u2708"+
		"\u2709\7\u00b4\2\2\u2709\u0585\3\2\2\2\u270a\u270c\5\u058a\u02c6\2\u270b"+
		"\u270a\3\2\2\2\u270c\u270d\3\2\2\2\u270d\u270b\3\2\2\2\u270d\u270e\3\2"+
		"\2\2\u270e\u0587\3\2\2\2\u270f\u2710\7\24\2\2\u2710\u2711\5\u0646\u0324"+
		"\2\u2711\u2712\7\25\2\2\u2712\u0589\3\2\2\2\u2713\u2717\5\u058c\u02c7"+
		"\2\u2714\u2717\7\u00b4\2\2\u2715\u2717\5\u0588\u02c5\2\u2716\u2713\3\2"+
		"\2\2\u2716\u2714\3\2\2\2\u2716\u2715\3\2\2\2\u2717\u058b\3\2\2\2\u2718"+
		"\u2728\5\u059c\u02cf\2\u2719\u271a\7\u01f2\2\2\u271a\u271b\7@\2\2\u271b"+
		"\u2729\5\u059a\u02ce\2\u271c\u271d\5\u059e\u02d0\2\u271d\u271e\5\u05a0"+
		"\u02d1\2\u271e\u271f\5\u05a2\u02d2\2\u271f\u2720\5\u05a4\u02d3\2\u2720"+
		"\u2721\5\u05a6\u02d4\2\u2721\u2729\3\2\2\2\u2722\u2723\5\u058e\u02c8\2"+
		"\u2723\u2724\7\u00ae\2\2\u2724\u2725\5\u0592\u02ca\2\u2725\u2726\5\u0598"+
		"\u02cd\2\u2726\u2727\5\u0590\u02c9\2\u2727\u2729\3\2\2\2\u2728\u2719\3"+
		"\2\2\2\u2728\u271c\3\2\2\2\u2728\u2722\3\2\2\2\u2729\u272a\3\2\2\2\u272a"+
		"\u272b\7\t\2\2\u272b\u058d\3\2\2\2\u272c\u2731\3\2\2\2\u272d\u272e\7\u0108"+
		"\2\2\u272e\u2731\7\u013f\2\2\u272f\u2731\7\u013f\2\2\u2730\u272c\3\2\2"+
		"\2\u2730\u272d\3\2\2\2\u2730\u272f\3\2\2\2\u2731\u058f\3\2\2\2\u2732\u2733"+
		"\5\u03c2\u01e2\2\u2733\u0591\3\2\2\2\u2734\u273a\3\2\2\2\u2735\u2736\7"+
		"\4\2\2\u2736\u2737\5\u0594\u02cb\2\u2737\u2738\7\5\2\2\u2738\u273a\3\2"+
		"\2\2\u2739\u2734\3\2\2\2\u2739\u2735\3\2\2\2\u273a\u0593\3\2\2\2\u273b"+
		"\u2740\5\u0596\u02cc\2\u273c\u273d\7\b\2\2\u273d\u273f\5\u0596\u02cc\2"+
		"\u273e\u273c\3\2\2\2\u273f\u2742\3\2\2\2\u2740\u273e\3\2\2\2\u2740\u2741"+
		"\3\2\2\2\u2741\u0595\3\2\2\2\u2742\u2740\3\2\2\2\u2743\u2744\5\u059c\u02cf"+
		"\2\u2744\u2745\5\u05a0\u02d1\2\u2745\u0597\3\2\2\2\u2746\u2747\t?\2\2"+
		"\u2747\u0599\3\2\2\2\u2748\u274b\7\36\2\2\u2749\u274b\5\u055e\u02b0\2"+
		"\u274a\u2748\3\2\2\2\u274a\u2749\3\2\2\2\u274b\u059b\3\2\2\2\u274c\u274d"+
		"\5\u0646\u0324\2\u274d\u059d\3\2\2\2\u274e\u2751\3\2\2\2\u274f\u2751\7"+
		"\u01f3\2\2\u2750\u274e\3\2\2\2\u2750\u274f\3\2\2\2\u2751\u059f\3\2\2\2"+
		"\u2752\u2753\5\u0460\u0231\2\u2753\u05a1\3\2\2\2\u2754\u2758\3\2\2\2\u2755"+
		"\u2756\7-\2\2\u2756\u2758\5\u020e\u0108\2\u2757\u2754\3\2\2\2\u2757\u2755"+
		"\3\2\2\2\u2758\u05a3\3\2\2\2\u2759\u275d\3\2\2\2\u275a\u275b\7O\2\2\u275b"+
		"\u275d\7P\2\2\u275c\u2759\3\2\2\2\u275c\u275a\3\2\2\2\u275d\u05a5\3\2"+
		"\2\2\u275e\u2763\3\2\2\2\u275f\u2760\5\u05a8\u02d5\2\u2760\u2761\5\u064a"+
		"\u0326\2\u2761\u2763\3\2\2\2\u2762\u275e\3\2\2\2\u2762\u275f\3\2\2\2\u2763"+
		"\u05a7\3\2\2\2\u2764\u2767\5\u05aa\u02d6\2\u2765\u2767\7\67\2\2\u2766"+
		"\u2764\3\2\2\2\u2766\u2765\3\2\2\2\u2767\u05a9\3\2\2\2\u2768\u2769\t@"+
		"\2\2\u2769\u05ab\3\2\2\2\u276a\u276c\5\u05ae\u02d8\2\u276b\u276a\3\2\2"+
		"\2\u276c\u276f\3\2\2\2\u276d\u276b\3\2\2\2\u276d\u276e\3\2\2\2\u276e\u05ad"+
		"\3\2\2\2\u276f\u276d\3\2\2\2\u2770\u2771\5\u0580\u02c1\2\u2771\u2772\7"+
		"\t\2\2\u2772\u278c\3\2\2\2\u2773\u278c\5\u05f0\u02f9\2\u2774\u278c\5\u05f4"+
		"\u02fb\2\u2775\u278c\5\u05b6\u02dc\2\u2776\u278c\5\u05c6\u02e4\2\u2777"+
		"\u278c\5\u05cc\u02e7\2\u2778\u278c\5\u05d6\u02ec\2\u2779\u278c\5\u05d8"+
		"\u02ed\2\u277a\u278c\5\u05da\u02ee\2\u277b\u278c\5\u05e8\u02f5\2\u277c"+
		"\u278c\5\u05ec\u02f7\2\u277d\u278c\5\u0600\u0301\2\u277e\u278c\5\u0606"+
		"\u0304\2\u277f\u278c\5\u0608\u0305\2\u2780\u278c\5\u05b0\u02d9\2\u2781"+
		"\u278c\5\u05b2\u02da\2\u2782\u278c\5\u05b8\u02dd\2\u2783\u278c\5\u0610"+
		"\u0309\2\u2784\u278c\5\u061c\u030f\2\u2785\u278c\5\u0624\u0313\2\u2786"+
		"\u278c\5\u0626\u0314\2\u2787\u278c\5\u0628\u0315\2\u2788\u278c\5\u062a"+
		"\u0316\2\u2789\u278c\5\u062c\u0317\2\u278a\u278c\5\u0630\u0319\2\u278b"+
		"\u2770\3\2\2\2\u278b\u2773\3\2\2\2\u278b\u2774\3\2\2\2\u278b\u2775\3\2"+
		"\2\2\u278b\u2776\3\2\2\2\u278b\u2777\3\2\2\2\u278b\u2778\3\2\2\2\u278b"+
		"\u2779\3\2\2\2\u278b\u277a\3\2\2\2\u278b\u277b\3\2\2\2\u278b\u277c\3\2"+
		"\2\2\u278b\u277d\3\2\2\2\u278b\u277e\3\2\2\2\u278b\u277f\3\2\2\2\u278b"+
		"\u2780\3\2\2\2\u278b\u2781\3\2\2\2\u278b\u2782\3\2\2\2\u278b\u2783\3\2"+
		"\2\2\u278b\u2784\3\2\2\2\u278b\u2785\3\2\2\2\u278b\u2786\3\2\2\2\u278b"+
		"\u2787\3\2\2\2\u278b\u2788\3\2\2\2\u278b\u2789\3\2\2\2\u278b\u278a\3\2"+
		"\2\2\u278c\u05af\3\2\2\2\u278d\u278e\7\u01f4\2\2\u278e\u278f\5\u064e\u0328"+
		"\2\u278f\u2790\7\t\2\2\u2790\u05b1\3\2\2\2\u2791\u2792\7\u01b3\2\2\u2792"+
		"\u2793\5\u0646\u0324\2\u2793\u2794\7\4\2\2\u2794\u2795\5\u05b4\u02db\2"+
		"\u2795\u2796\7\5\2\2\u2796\u2797\7\t\2\2\u2797\u27a0\3\2\2\2\u2798\u2799"+
		"\7;\2\2\u2799\u279a\5\u0646\u0324\2\u279a\u279b\7\4\2\2\u279b\u279c\5"+
		"\u05b4\u02db\2\u279c\u279d\7\5\2\2\u279d\u279e\7\t\2\2\u279e\u27a0\3\2"+
		"\2\2\u279f\u2791\3\2\2\2\u279f\u2798\3\2\2\2\u27a0\u05b3\3\2\2\2\u27a1"+
		"\u27a4\3\2\2\2\u27a2\u27a4\5\u0502\u0282\2\u27a3\u27a1\3\2\2\2\u27a3\u27a2"+
		"\3\2\2\2\u27a4\u05b5\3\2\2\2\u27a5\u27a6\5\u05c4\u02e3\2\u27a6\u27a7\5"+
		"\u05aa\u02d6\2\u27a7\u27a8\5\u064a\u0326\2\u27a8\u27a9\7\t\2\2\u27a9\u05b7"+
		"\3\2\2\2\u27aa\u27ab\7\u01f5\2\2\u27ab\u27ac\5\u05ba\u02de\2\u27ac\u27ad"+
		"\7\u01f6\2\2\u27ad\u27ae\5\u05bc\u02df\2\u27ae\u27af\7\t\2\2\u27af\u05b9"+
		"\3\2\2\2\u27b0\u27b4\3\2\2\2\u27b1\u27b4\7\u01b4\2\2\u27b2\u27b4\7\u01f7"+
		"\2\2\u27b3\u27b0\3\2\2\2\u27b3\u27b1\3\2\2\2\u27b3\u27b2\3\2\2\2\u27b4"+
		"\u05bb\3\2\2\2\u27b5\u27ba\5\u05be\u02e0\2\u27b6\u27b7\7\b\2\2\u27b7\u27b9"+
		"\5\u05be\u02e0\2\u27b8\u27b6\3\2\2\2\u27b9\u27bc\3\2\2\2\u27ba\u27b8\3"+
		"\2\2\2\u27ba\u27bb\3\2\2\2\u27bb\u05bd\3\2\2\2\u27bc\u27ba\3\2\2\2\u27bd"+
		"\u27be\5\u05c2\u02e2\2\u27be\u27bf\5\u05aa\u02d6\2\u27bf\u27c0\5\u05c0"+
		"\u02e1\2\u27c0\u05bf\3\2\2\2\u27c1\u27c2\5\u055e\u02b0\2\u27c2\u05c1\3"+
		"\2\2\2\u27c3\u27c4\5\u05c4\u02e3\2\u27c4\u05c3\3\2\2\2\u27c5\u27c8\5\u020e"+
		"\u0108\2\u27c6\u27c8\7\36\2\2\u27c7\u27c5\3\2\2\2\u27c7\u27c6\3\2\2\2"+
		"\u27c8\u27cf\3\2\2\2\u27c9\u27ca\7\6\2\2\u27ca\u27cb\5\u0650\u0329\2\u27cb"+
		"\u27cc\7\7\2\2\u27cc\u27ce\3\2\2\2\u27cd\u27c9\3\2\2\2\u27ce\u27d1\3\2"+
		"\2\2\u27cf\u27cd\3\2\2\2\u27cf\u27d0\3\2\2\2\u27d0\u05c5\3\2\2\2\u27d1"+
		"\u27cf\3\2\2\2\u27d2\u27d3\7\u00de\2\2\u27d3\u27d4\5\u064c\u0327\2\u27d4"+
		"\u27d5\7_\2\2\u27d5\u27d6\5\u05ac\u02d7\2\u27d6\u27d7\5\u05c8\u02e5\2"+
		"\u27d7\u27d8\5\u05ca\u02e6\2\u27d8\u27d9\7\u01c8\2\2\u27d9\u27da\7\u00de"+
		"\2\2\u27da\u27db\7\t\2\2\u27db\u05c7\3\2\2\2\u27dc\u27dd\7\u01f8\2\2\u27dd"+
		"\u27de\5\u048c\u0247\2\u27de\u27df\7_\2\2\u27df\u27e0\5\u05ac\u02d7\2"+
		"\u27e0\u27e2\3\2\2\2\u27e1\u27dc\3\2\2\2\u27e2\u27e5\3\2\2\2\u27e3\u27e1"+
		"\3\2\2\2\u27e3\u27e4\3\2\2\2\u27e4\u05c9\3\2\2\2\u27e5\u27e3\3\2\2\2\u27e6"+
		"\u27ea\3\2\2\2\u27e7\u27e8\7<\2\2\u27e8\u27ea\5\u05ac\u02d7\2\u27e9\u27e6"+
		"\3\2\2\2\u27e9\u27e7\3\2\2\2\u27ea\u05cb\3\2\2\2\u27eb\u27ec\7*\2\2\u27ec"+
		"\u27ed\5\u05ce\u02e8\2\u27ed\u27ee\5\u05d0\u02e9\2\u27ee\u27ef\5\u05d4"+
		"\u02eb\2\u27ef\u27f0\7\u01c8\2\2\u27f0\u27f1\7*\2\2\u27f1\u27f2\7\t\2"+
		"\2\u27f2\u05cd\3\2\2\2\u27f3\u27f6\3\2\2\2\u27f4\u27f6\5\u064a\u0326\2"+
		"\u27f5\u27f3\3\2\2\2\u27f5\u27f4\3\2\2\2\u27f6\u05cf\3\2\2\2\u27f7\u27f9"+
		"\5\u05d2\u02ea\2\u27f8\u27f7\3\2\2\2\u27f9\u27fa\3\2\2\2\u27fa\u27f8\3"+
		"\2\2\2\u27fa\u27fb\3\2\2\2\u27fb\u05d1\3\2\2\2\u27fc\u27fd\7h\2\2\u27fd"+
		"\u27fe\5\u0502\u0282\2\u27fe\u27ff\7_\2\2\u27ff\u2800\5\u05ac\u02d7\2"+
		"\u2800\u05d3\3\2\2\2\u2801\u2805\3\2\2\2\u2802\u2803\7<\2\2\u2803\u2805"+
		"\5\u05ac\u02d7\2\u2804\u2801\3\2\2\2\u2804\u2802\3\2\2\2\u2805\u05d5\3"+
		"\2\2\2\u2806\u2807\5\u0640\u0321\2\u2807\u2808\5\u0604\u0303\2\u2808\u05d7"+
		"\3\2\2\2\u2809\u280a\5\u0640\u0321\2\u280a\u280b\7\u01f9\2\2\u280b\u280c"+
		"\5\u0652\u032a\2\u280c\u280d\5\u0604\u0303\2\u280d\u05d9\3\2\2\2\u280e"+
		"\u280f\5\u0640\u0321\2\u280f\u2810\7@\2\2\u2810\u2811\5\u05dc\u02ef\2"+
		"\u2811\u2812\5\u0604\u0303\2\u2812\u05db\3\2\2\2\u2813\u2814\5\u05e6\u02f4"+
		"\2\u2814\u2824\7F\2\2\u2815\u2816\5\u03bc\u01df\2\u2816\u2817\5\u05e0"+
		"\u02f1\2\u2817\u2825\3\2\2\2\u2818\u2825\5\u03c2\u01e2\2\u2819\u2825\5"+
		"\u0370\u01b9\2\u281a\u281b\7\u00cc\2\2\u281b\u281c\5\u048c\u0247\2\u281c"+
		"\u281d\5\u05de\u02f0\2\u281d\u2825\3\2\2\2\u281e\u281f\5\u05e2\u02f2\2"+
		"\u281f\u2820\5\u048c\u0247\2\u2820\u2821\7\32\2\2\u2821\u2822\5\u048c"+
		"\u0247\2\u2822\u2823\5\u05e4\u02f3\2\u2823\u2825\3\2\2\2\u2824\u2815\3"+
		"\2\2\2\u2824\u2818\3\2\2\2\u2824\u2819\3\2\2\2\u2824\u281a\3\2\2\2\u2824"+
		"\u281e\3\2\2\2\u2825\u05dd\3\2\2\2\u2826\u282a\3\2\2\2\u2827\u2828\7f"+
		"\2\2\u2828\u282a\5\u0502\u0282\2\u2829\u2826\3\2\2\2\u2829\u2827\3\2\2"+
		"\2\u282a\u05df\3\2\2\2\u282b\u2838\3\2\2\2\u282c\u282d\7\4\2\2\u282d\u2832"+
		"\5\u048c\u0247\2\u282e\u282f\7\b\2\2\u282f\u2831\5\u048c\u0247\2\u2830"+
		"\u282e\3\2\2\2\u2831\u2834\3\2\2\2\u2832\u2830\3\2\2\2\u2832\u2833\3\2"+
		"\2\2\u2833\u2835\3\2\2\2\u2834\u2832\3\2\2\2\u2835\u2836\7\5\2\2\u2836"+
		"\u2838\3\2\2\2\u2837\u282b\3\2\2\2\u2837\u282c\3\2\2\2\u2838\u05e1\3\2"+
		"\2\2\u2839\u283c\3\2\2\2\u283a\u283c\7\u01fa\2\2\u283b\u2839\3\2\2\2\u283b"+
		"\u283a\3\2\2\2\u283c\u05e3\3\2\2\2\u283d\u2841\3\2\2\2\u283e\u283f\7\u0095"+
		"\2\2\u283f\u2841\5\u048c\u0247\2\u2840\u283d\3\2\2\2\u2840\u283e\3\2\2"+
		"\2\u2841\u05e5\3\2\2\2\u2842\u2843\5\u020c\u0107\2\u2843\u05e7\3\2\2\2"+
		"\u2844\u2845\5\u0640\u0321\2\u2845\u2846\7\u01fb\2\2\u2846\u2847\5\u05e6"+
		"\u02f4\2\u2847\u2848\5\u05ea\u02f6\2\u2848\u2849\7F\2\2\u2849\u284a\7"+
		"%\2\2\u284a\u284b\5\u048c\u0247\2\u284b\u284c\5\u0604\u0303\2\u284c\u05e9"+
		"\3\2\2\2\u284d\u2851\3\2\2\2\u284e\u284f\7\u01fc\2\2\u284f\u2851\5\u054e"+
		"\u02a8\2\u2850\u284d\3\2\2\2\u2850\u284e\3\2\2\2\u2851\u05eb\3\2\2\2\u2852"+
		"\u2853\5\u05ee\u02f8\2\u2853\u2854\5\u0642\u0322\2\u2854\u2855\5\u0644"+
		"\u0323\2\u2855\u2856\7\t\2\2\u2856\u05ed\3\2\2\2\u2857\u2858\tA\2\2\u2858"+
		"\u05ef\3\2\2\2\u2859\u2865\7\u01fe\2\2\u285a\u285b\7\u0107\2\2\u285b\u2866"+
		"\5\u064a\u0326\2\u285c\u2862\7\u01ff\2\2\u285d\u285e\7\u00cc\2\2\u285e"+
		"\u285f\5\u048c\u0247\2\u285f\u2860\5\u05de\u02f0\2\u2860\u2863\3\2\2\2"+
		"\u2861\u2863\5\u03c2\u01e2\2\u2862\u285d\3\2\2\2\u2862\u2861\3\2\2\2\u2863"+
		"\u2866\3\2\2\2\u2864\u2866\5\u05f2\u02fa\2\u2865\u285a\3\2\2\2\u2865\u285c"+
		"\3\2\2\2\u2865\u2864\3\2\2\2\u2866\u2867\3\2\2\2\u2867\u2868\7\t\2\2\u2868"+
		"\u05f1\3\2\2\2\u2869\u286c\3\2\2\2\u286a\u286c\5\u064a\u0326\2\u286b\u2869"+
		"\3\2\2\2\u286b\u286a\3\2\2\2\u286c\u05f3\3\2\2\2\u286d\u286e\7\u0200\2"+
		"\2\u286e\u286f\5\u05f6\u02fc\2\u286f\u2870\5\u0550\u02a9\2\u2870\u2871"+
		"\5\u05f8\u02fd\2\u2871\u2872\5\u05fa\u02fe\2\u2872\u2873\7\t\2\2\u2873"+
		"\u2888\3\2\2\2\u2874\u2875\7\u0200\2\2\u2875\u2876\5\u05f6\u02fc\2\u2876"+
		"\u2877\5\u0566\u02b4\2\u2877\u2878\5\u05fa\u02fe\2\u2878\u2879\7\t\2\2"+
		"\u2879\u2888\3\2\2\2\u287a\u287b\7\u0200\2\2\u287b\u287c\5\u05f6\u02fc"+
		"\2\u287c\u287d\7\u0201\2\2\u287d\u287e\5\u0550\u02a9\2\u287e\u287f\5\u05fa"+
		"\u02fe\2\u287f\u2880\7\t\2\2\u2880\u2888\3\2\2\2\u2881\u2882\7\u0200\2"+
		"\2\u2882\u2883\5\u05f6\u02fc\2\u2883\u2884\5\u05fa\u02fe\2\u2884\u2885"+
		"\7\t\2\2\u2885\u2888\3\2\2\2\u2886\u2888\7\u0200\2\2\u2887\u286d\3\2\2"+
		"\2\u2887\u2874\3\2\2\2\u2887\u287a\3\2\2\2\u2887\u2881\3\2\2\2\u2887\u2886"+
		"\3\2\2\2\u2888\u05f5\3\2\2\2\u2889\u2892\3\2\2\2\u288a\u2892\3\2\2\2\u288b"+
		"\u2892\7\u0202\2\2\u288c\u2892\7\u0203\2\2\u288d\u2892\7\u0204\2\2\u288e"+
		"\u2892\7\u0205\2\2\u288f\u2892\7\u0206\2\2\u2890\u2892\7\u0207\2\2\u2891"+
		"\u2889\3\2\2\2\u2891\u288a\3\2\2\2\u2891\u288b\3\2\2\2\u2891\u288c\3\2"+
		"\2\2\u2891\u288d\3\2\2\2\u2891\u288e\3\2\2\2\u2891\u288f\3\2\2\2\u2891"+
		"\u2890\3\2\2\2\u2892\u05f7\3\2\2\2\u2893\u289b\3\2\2\2\u2894\u2895\7\b"+
		"\2\2\u2895\u2897\5\u048c\u0247\2\u2896\u2894\3\2\2\2\u2897\u2898\3\2\2"+
		"\2\u2898\u2896\3\2\2\2\u2898\u2899\3\2\2\2\u2899\u289b\3\2\2\2\u289a\u2893"+
		"\3\2\2\2\u289a\u2896\3\2\2\2\u289b\u05f9\3\2\2\2\u289c\u28a0\3\2\2\2\u289d"+
		"\u289e\7f\2\2\u289e\u28a0\5\u05fe\u0300\2\u289f\u289c\3\2\2\2\u289f\u289d"+
		"\3\2\2\2\u28a0\u05fb\3\2\2\2\u28a1\u28a2\5\u0566\u02b4\2\u28a2\u28a3\7"+
		"\f\2\2\u28a3\u28a4\5\u048c\u0247\2\u28a4\u05fd\3\2\2\2\u28a5\u28aa\5\u05fc"+
		"\u02ff\2\u28a6\u28a7\7\b\2\2\u28a7\u28a9\5\u05fc\u02ff\2\u28a8\u28a6\3"+
		"\2\2\2\u28a9\u28ac\3\2\2\2\u28aa\u28a8\3\2\2\2\u28aa\u28ab\3\2\2\2\u28ab"+
		"\u05ff\3\2\2\2\u28ac\u28aa\3\2\2\2\u28ad\u28ae\7\u0208\2\2\u28ae\u28af"+
		"\5\u064a\u0326\2\u28af\u28b0\5\u0602\u0302\2\u28b0\u28b1\7\t\2\2\u28b1"+
		"\u0601\3\2\2\2\u28b2\u28b6\3\2\2\2\u28b3\u28b4\7\b\2\2\u28b4\u28b6\5\u064a"+
		"\u0326\2\u28b5\u28b2\3\2\2\2\u28b5\u28b3\3\2\2\2\u28b6\u0603\3\2\2\2\u28b7"+
		"\u28b8\7\u0209\2\2\u28b8\u28b9\5\u05ac\u02d7\2\u28b9\u28ba\7\u01c8\2\2"+
		"\u28ba\u28bb\7\u0209\2\2\u28bb\u28bc\5\u0642\u0322\2\u28bc\u28bd\7\t\2"+
		"\2\u28bd\u0605\3\2\2\2\u28be\u28bf\5\u0654\u032b\2\u28bf\u28c0\7\t\2\2"+
		"\u28c0\u0607\3\2\2\2\u28c1\u28c2\7\u00cc\2\2\u28c2\u28ca\5\u048c\u0247"+
		"\2\u28c3\u28c4\5\u060e\u0308\2\u28c4\u28c5\5\u060a\u0306\2\u28c5\u28cb"+
		"\3\2\2\2\u28c6\u28c7\5\u060a\u0306\2\u28c7\u28c8\5\u060e\u0308\2\u28c8"+
		"\u28cb\3\2\2\2\u28c9\u28cb\3\2\2\2\u28ca\u28c3\3\2\2\2\u28ca\u28c6\3\2"+
		"\2\2\u28ca\u28c9\3\2\2\2\u28cb\u28cc\3\2\2\2\u28cc\u28cd\7\t\2\2\u28cd"+
		"\u0609\3\2\2\2\u28ce\u28d2\3\2\2\2\u28cf\u28d0\7f\2\2\u28d0\u28d2\5\u060c"+
		"\u0307\2\u28d1\u28ce\3\2\2\2\u28d1\u28cf\3\2\2\2\u28d2\u060b\3\2\2\2\u28d3"+
		"\u28d8\5\u048c\u0247\2\u28d4\u28d5\7\b\2\2\u28d5\u28d7\5\u048c\u0247\2"+
		"\u28d6\u28d4\3\2\2\2\u28d7\u28da\3\2\2\2\u28d8\u28d6\3\2\2\2\u28d8\u28d9"+
		"\3\2\2\2\u28d9\u060d\3\2\2\2\u28da\u28d8\3\2\2\2\u28db\u28e2\3\2\2\2\u28dc"+
		"\u28de\7I\2\2\u28dd\u28df\7\u0155\2\2\u28de\u28dd\3\2\2\2\u28de\u28df"+
		"\3\2\2\2\u28df\u28e0\3\2\2\2\u28e0\u28e2\5\u061e\u0310\2\u28e1\u28db\3"+
		"\2\2\2\u28e1\u28dc\3\2\2\2\u28e2\u060f\3\2\2\2\u28e3\u28f5\7\u020a\2\2"+
		"\u28e4\u28e5\5\u0632\u031a\2\u28e5\u28e6\5\u0618\u030d\2\u28e6\u28ec\7"+
		"@\2\2\u28e7\u28ed\5\u03c2\u01e2\2\u28e8\u28e9\7\u00cc\2\2\u28e9\u28ea"+
		"\5\u064a\u0326\2\u28ea\u28eb\5\u0616\u030c\2\u28eb\u28ed\3\2\2\2\u28ec"+
		"\u28e7\3\2\2\2\u28ec\u28e8\3\2\2\2\u28ed\u28f6\3\2\2\2\u28ee\u28f3\5\u055e"+
		"\u02b0\2\u28ef\u28f0\7\4\2\2\u28f0\u28f1\5\u0614\u030b\2\u28f1\u28f2\7"+
		"\5\2\2\u28f2\u28f4\3\2\2\2\u28f3\u28ef\3\2\2\2\u28f3\u28f4\3\2\2\2\u28f4"+
		"\u28f6\3\2\2\2\u28f5\u28e4\3\2\2\2\u28f5\u28ee\3\2\2\2\u28f6\u28f7\3\2"+
		"\2\2\u28f7\u28f8\7\t\2\2\u28f8\u0611\3\2\2\2\u28f9\u28fa\5\u055e\u02b0"+
		"\2\u28fa\u28fb\7\26\2\2\u28fb\u28fc\5\u048c\u0247\2\u28fc\u28ff\3\2\2"+
		"\2\u28fd\u28ff\5\u048c\u0247\2\u28fe\u28f9\3\2\2\2\u28fe\u28fd\3\2\2\2"+
		"\u28ff\u0613\3\2\2\2\u2900\u2905\5\u0612\u030a\2\u2901\u2902\7\b\2\2\u2902"+
		"\u2904\5\u0612\u030a\2\u2903\u2901\3\2\2\2\u2904\u2907\3\2\2\2\u2905\u2903"+
		"\3\2\2\2\u2905\u2906\3\2\2\2\u2906\u0615\3\2\2\2\u2907\u2905\3\2\2\2\u2908"+
		"\u290c\3\2\2\2\u2909\u290a\7f\2\2\u290a\u290c\5\u0502\u0282\2\u290b\u2908"+
		"\3\2\2\2\u290b\u2909\3\2\2\2\u290c\u0617\3\2\2\2\u290d\u2912\3\2\2\2\u290e"+
		"\u290f\5\u061a\u030e\2\u290f\u2910\7\u013f\2\2\u2910\u2912\3\2\2\2\u2911"+
		"\u290d\3\2\2\2\u2911\u290e\3\2\2\2\u2912\u0619\3\2\2\2\u2913\u2916\3\2"+
		"\2\2\u2914\u2916\7\u0108\2\2\u2915\u2913\3\2\2\2\u2915\u2914\3\2\2\2\u2916"+
		"\u061b\3\2\2\2\u2917\u2918\7?\2\2\u2918\u2919\5\u0622\u0312\2\u2919\u291a"+
		"\5\u0620\u0311\2\u291a\u291b\5\u0632\u031a\2\u291b\u291c\7I\2\2\u291c"+
		"\u291d\5\u061e\u0310\2\u291d\u291e\7\t\2\2\u291e\u061d\3\2\2\2\u291f\u2920"+
		"\5\u0502\u0282\2\u2920\u061f\3\2\2\2\u2921\u2925\3\2\2\2\u2922\u2925\7"+
		"B\2\2\u2923\u2925\7F\2\2\u2924\u2921\3\2\2\2\u2924\u2922\3\2\2\2\u2924"+
		"\u2923\3\2\2\2\u2925\u0621\3\2\2\2\u2926\u2938\3\2\2\2\u2927\u2938\3\2"+
		"\2\2\u2928\u2938\7\u0107\2\2\u2929\u2938\7\u0120\2\2\u292a\u2938\7\u00d1"+
		"\2\2\u292b\u2938\7\u00f2\2\2\u292c\u292d\7\u0084\2\2\u292d\u2938\5\u048c"+
		"\u0247\2\u292e\u292f\7\u012e\2\2\u292f\u2938\5\u048c\u0247\2\u2930\u2938"+
		"\5\u048c\u0247\2\u2931\u2938\7 \2\2\u2932\u2935\tB\2\2\u2933\u2936\5\u048c"+
		"\u0247\2\u2934\u2936\7 \2\2\u2935\u2933\3\2\2\2\u2935\u2934\3\2\2\2\u2935"+
		"\u2936\3\2\2\2\u2936\u2938\3\2\2\2\u2937\u2926\3\2\2\2\u2937\u2927\3\2"+
		"\2\2\u2937\u2928\3\2\2\2\u2937\u2929\3\2\2\2\u2937\u292a\3\2\2\2\u2937"+
		"\u292b\3\2\2\2\u2937\u292c\3\2\2\2\u2937\u292e\3\2\2\2\u2937\u2930\3\2"+
		"\2\2\u2937\u2931\3\2\2\2\u2937\u2932\3\2\2\2\u2938\u0623\3\2\2\2\u2939"+
		"\u293a\7\u0104\2\2\u293a\u293b\5\u0622\u0312\2\u293b\u293c\5\u0632\u031a"+
		"\2\u293c\u293d\7\t\2\2\u293d\u0625\3\2\2\2\u293e\u293f\7\u009f\2\2\u293f"+
		"\u2940\5\u0632\u031a\2\u2940\u2941\7\t\2\2\u2941\u0627\3\2\2\2\u2942\u2943"+
		"\7P\2\2\u2943\u2944\7\t\2\2\u2944\u0629\3\2\2\2\u2945\u2946\7\u00a3\2"+
		"\2\u2946\u2947\5\u062e\u0318\2\u2947\u2948\7\t\2\2\u2948\u062b\3\2\2\2"+
		"\u2949\u294a\7\u013a\2\2\u294a\u294b\5\u062e\u0318\2\u294b\u294c\7\t\2"+
		"\2\u294c\u062d\3\2\2\2\u294d\u294f\7#\2\2\u294e\u2950\7\u0108\2\2\u294f"+
		"\u294e\3\2\2\2\u294f\u2950\3\2\2\2\u2950\u2951\3\2\2\2\u2951\u2954\7\u009b"+
		"\2\2\u2952\u2954\3\2\2\2\u2953\u294d\3\2\2\2\u2953\u2952\3\2\2\2\u2954"+
		"\u062f\3\2\2\2\u2955\u2956\7\u0148\2\2\u2956\u2957\5\u020e\u0108\2\u2957"+
		"\u2958\7`\2\2\u2958\u2959\7\67\2\2\u2959\u295a\7\t\2\2\u295a\u2962\3\2"+
		"\2\2\u295b\u295e\7\u0134\2\2\u295c\u295f\5\u020e\u0108\2\u295d\u295f\7"+
		" \2\2\u295e\u295c\3\2\2\2\u295e\u295d\3\2\2\2\u295f\u2960\3\2\2\2\u2960"+
		"\u2962\7\t\2\2\u2961\u2955\3\2\2\2\u2961\u295b\3\2\2\2\u2962\u0631\3\2"+
		"\2\2\u2963\u2966\5\u055e\u02b0\2\u2964\u2966\7\36\2\2\u2965\u2963\3\2"+
		"\2\2\u2965\u2964\3\2\2\2\u2966\u0633\3\2\2\2\u2967\u296b\3\2\2\2\u2968"+
		"\u2969\7\u0207\2\2\u2969\u296b\5\u0636\u031c\2\u296a\u2967\3\2\2\2\u296a"+
		"\u2968\3\2\2\2\u296b\u0635\3\2\2\2\u296c\u296e\5\u0638\u031d\2\u296d\u296c"+
		"\3\2\2\2\u296e\u296f\3\2\2\2\u296f\u296d\3\2\2\2\u296f\u2970\3\2\2\2\u2970"+
		"\u0637\3\2\2\2\u2971\u2972\7h\2\2\u2972\u2973\5\u063a\u031e\2\u2973\u2974"+
		"\7_\2\2\u2974\u2975\5\u05ac\u02d7\2\u2975\u0639\3\2\2\2\u2976\u297b\5"+
		"\u063c\u031f\2\u2977\u2978\7T\2\2\u2978\u297a\5\u063c\u031f\2\u2979\u2977"+
		"\3\2\2\2\u297a\u297d\3\2\2\2\u297b\u2979\3\2\2\2\u297b\u297c\3\2\2\2\u297c"+
		"\u063b\3\2\2\2\u297d\u297b\3\2\2\2\u297e\u2982\5\u0646\u0324\2\u297f\u2980"+
		"\7\u0201\2\2\u2980\u2982\5\u0550\u02a9\2\u2981\u297e\3\2\2\2\u2981\u297f"+
		"\3\2\2\2\u2982\u063d\3\2\2\2\u2983\u2986\3\2\2\2\u2984\u2986\5\u0588\u02c5"+
		"\2\u2985\u2983\3\2\2\2\u2985\u2984\3\2\2\2\u2986\u063f\3\2\2\2\u2987\u298a"+
		"\3\2\2\2\u2988\u298a\5\u0588\u02c5\2\u2989\u2987\3\2\2\2\u2989\u2988\3"+
		"\2\2\2\u298a\u0641\3\2\2\2\u298b\u298e\3\2\2\2\u298c\u298e\5\u0646\u0324"+
		"\2\u298d\u298b\3\2\2\2\u298d\u298c\3\2\2\2\u298e\u0643\3\2\2\2\u298f\u2990"+
		"\7h\2\2\u2990\u2993\5\u064e\u0328\2\u2991\u2993\3\2\2\2\u2992\u298f\3"+
		"\2\2\2\u2992\u2991\3\2\2\2\u2993\u0645\3\2\2\2\u2994\u2997\5\u055e\u02b0"+
		"\2\u2995\u2997\5\u0648\u0325\2\u2996\u2994\3\2\2\2\u2996\u2995\3\2\2\2"+
		"\u2997\u0647\3\2\2\2\u2998\u2999\tC\2\2\u2999\u0649\3\2\2\2\u299a\u299b"+
		"\5\u0532\u029a\2\u299b\u299c\5\u03da\u01ee\2\u299c\u299d\5\u0422\u0212"+
		"\2\u299d\u299e\5\u0448\u0225\2\u299e\u299f\5\u0404\u0203\2\u299f\u29a0"+
		"\5\u0412\u020a\2\u29a0\u29a1\5\u04da\u026e\2\u29a1\u064b\3\2\2\2\u29a2"+
		"\u29a3\5\u064a\u0326\2\u29a3\u064d\3\2\2\2\u29a4\u29a5\5\u064a\u0326\2"+
		"\u29a5\u064f\3\2\2\2\u29a6\u29a7\5\u048c\u0247\2\u29a7\u0651\3\2\2\2\u29a8"+
		"\u29a9\5\u048c\u0247\2\u29a9\u0653\3\2\2\2\u29aa\u29ab\5\n\6\2\u29ab\u29ac"+
		"\5\u0656\u032c\2\u29ac\u0655\3\2\2\2\u29ad\u29ae\7I\2\2\u29ae\u29af\5"+
		"\u03dc\u01ef\2\u29af\u29b0\5\u061e\u0310\2\u29b0\u29b3\3\2\2\2\u29b1\u29b3"+
		"\3\2\2\2\u29b2\u29ad\3\2\2\2\u29b2\u29b1\3\2\2\2\u29b3\u0657\3\2\2\2\u02ea"+
		"\u0661\u0665\u06e5\u06e9\u06f6\u06fb\u0701\u0707\u0716\u0722\u0734\u0739"+
		"\u0743\u075b\u0762\u0768\u076d\u0776\u077a\u0786\u07a5\u07ac\u07b4\u07b9"+
		"\u07c0\u07c6\u07d7\u07dc\u07e0\u07ed\u07f1\u07f6\u07fb\u0807\u0810\u081d"+
		"\u0822\u082d\u0838\u083d\u0848\u0853\u085c\u0866\u0875\u0881\u0886\u088d"+
		"\u0898\u099a\u09a1\u09a6\u09ab\u09b0\u09b8\u09c1\u09c8\u09d2\u09d4\u09d9"+
		"\u09df\u09e5\u09e7\u0a03\u0a0d\u0a1a\u0a26\u0a34\u0a39\u0a51\u0a57\u0a5c"+
		"\u0a63\u0a68\u0a8e\u0a92\u0a99\u0a9d\u0aa4\u0ab2\u0ab9\u0ac4\u0ae5\u0aef"+
		"\u0af3\u0afa\u0b01\u0b09\u0b0f\u0b13\u0b1d\u0b24\u0b2f\u0b4f\u0b57\u0b5c"+
		"\u0b63\u0b6d\u0b77\u0b8b\u0b9a\u0bb3\u0bb8\u0bbf\u0bc6\u0bd1\u0bd6\u0bdd"+
		"\u0be8\u0bf0\u0bfb\u0c0b\u0c13\u0c17\u0c25\u0c36\u0c3b\u0c42\u0c4b\u0c4e"+
		"\u0c53\u0c5a\u0c65\u0c72\u0c7f\u0c91\u0c94\u0c9d\u0cac\u0cbb\u0cc4\u0ccb"+
		"\u0cd2\u0cd7\u0cf5\u0cf7\u0cfb\u0d03\u0d0a\u0d18\u0d1c\u0d20\u0d25\u0d2b"+
		"\u0d2f\u0d33\u0d40\u0d46\u0d4f\u0d58\u0d62\u0d6d\u0ddb\u0ded\u0df2\u0df6"+
		"\u0e07\u0e0f\u0e16\u0e23\u0e2d\u0e4f\u0e54\u0e59\u0e5d\u0e65\u0e67\u0ea1"+
		"\u0eb2\u0eba\u0ed1\u0ed5\u0ee9\u0f0e\u0f17\u0f1c\u0f21\u0f26\u0f2b\u0f60"+
		"\u0f66\u0f6d\u0f77\u0f7c\u0f81\u0f93\u0f97\u0fa1\u0fa7\u0fad\u0fb4\u0fb9"+
		"\u0fbe\u0fcc\u0fe8\u0fef\u0ffd\u100c\u1081\u108c\u1092\u109a\u10a5\u10ae"+
		"\u10b5\u10dd\u10e3\u10f8\u1114\u1118\u111d\u1126\u112a\u1145\u114c\u115b"+
		"\u116f\u1183\u11e0\u11f9\u1200\u1210\u1219\u121e\u1224\u122b\u1239\u12ce"+
		"\u12d2\u132f\u1334\u1338\u133e\u1382\u1388\u13a5\u13b6\u13bd\u13c9\u1405"+
		"\u140c\u1412\u1418\u1432\u1438\u143e\u1449\u1455\u1472\u1499\u149d\u14a1"+
		"\u14a5\u14aa\u14b1\u14bf\u14cc\u14d4\u14db\u14e1\u14e5\u14ea\u14f1\u14ff"+
		"\u1501\u1508\u150c\u1515\u151d\u1526\u1528\u152c\u1535\u153a\u1540\u1545"+
		"\u1549\u154e\u1552\u1558\u155c\u1562\u1567\u1576\u157f\u158a\u1590\u15b7"+
		"\u15c1\u15c8\u15d3\u15d9\u15e3\u15ef\u15f3\u1619\u1627\u1635\u164d\u1654"+
		"\u165e\u166a\u166f\u1693\u169a\u16a9\u16d8\u16fd\u1708\u1719\u18ef\u18f3"+
		"\u18f8\u1933\u1937\u1a12\u1a21\u1a2c\u1a33\u1af4\u1afe\u1b06\u1b23\u1b33"+
		"\u1b5d\u1b6b\u1b81\u1b88\u1b90\u1b94\u1b9b\u1ba4\u1bad\u1be1\u1be6\u1bf2"+
		"\u1bf6\u1bfb\u1c00\u1c04\u1c08\u1c0d\u1c1d\u1c25\u1c2a\u1c37\u1c3c\u1c43"+
		"\u1c4d\u1c51\u1c5c\u1c67\u1c6f\u1c76\u1c9d\u1ca5\u1ca9\u1cfa\u1d16\u1d1b"+
		"\u1d2a\u1d36\u1d3d\u1d47\u1d4c\u1d50\u1d54\u1d58\u1d5c\u1d63\u1d6d\u1d72"+
		"\u1d84\u1d8f\u1d96\u1d9e\u1da3\u1db0\u1db6\u1dd3\u1dda\u1de6\u1df3\u1e02"+
		"\u1e08\u1e11\u1e21\u1e24\u1e2f\u1e34\u1e38\u1e3c\u1e41\u1e44\u1e4a\u1e4e"+
		"\u1e50\u1e53\u1e5a\u1e5d\u1e64\u1e6c\u1e6f\u1e78\u1e87\u1e94\u1e9f\u1ea2"+
		"\u1ea6\u1eac\u1ebc\u1ec9\u1ed3\u1ee5\u1ee7\u1eef\u1ef3\u1efd\u1f07\u1f12"+
		"\u1f14\u1f18\u1f22\u1f32\u1f34\u1f39\u1f3d\u1f43\u1f4a\u1f53\u1f62\u1f66"+
		"\u1f6d\u1f70\u1f74\u1f77\u1f84\u1f88\u1f8d\u1f95\u1f99\u1f9d\u1fa8\u1faf"+
		"\u1fb5\u1fb9\u1fbb\u1fbf\u1fc5\u1fce\u1fd4\u1fd6\u1fd8\u1fdf\u1fe3\u1fec"+
		"\u1ff0\u1ffa\u2001\u2009\u2021\u2027\u202b\u2030\u2039\u203d\u2040\u2045"+
		"\u2052\u2058\u2060\u2063\u206a\u206f\u2084\u208d\u2092\u2098\u209d\u20a4"+
		"\u20a9\u20af\u20b1\u20b5\u20bc\u20c0\u20c5\u20c8\u20cf\u20d3\u20dc\u20e0"+
		"\u20e8\u20ea\u20f1\u20f6\u20f9\u2108\u2114\u211e\u2127\u212c\u2131\u2138"+
		"\u213b\u213f\u2146\u215e\u2167\u216d\u2171\u2176\u2180\u2187\u2190\u2193"+
		"\u219c\u219e\u21a4\u21a8\u21ad\u21bb\u21bd\u21c3\u21c7\u21ca\u21d3\u21e5"+
		"\u21ec\u21f0\u21f4\u2204\u220b\u2213\u2217\u221e\u222b\u223b\u2241\u2247"+
		"\u224e\u2253\u2259\u2260\u2268\u2270\u2275\u2279\u227f\u2283\u2287\u228a"+
		"\u2290\u2295\u22a5\u22a8\u22aa\u22b6\u22b8\u22bc\u22c2\u22c7\u22cf\u22d3"+
		"\u22dc\u22e4\u22ea\u22ed\u22f6\u22fb\u2302\u230c\u2326\u2331\u2333\u2335"+
		"\u233d\u2354\u235c\u2366\u2374\u237e\u2382\u2390\u2397\u239e\u23a5\u23be"+
		"\u23db\u2402\u2404\u2420\u2435\u243c\u2449\u2455\u245b\u2464\u2475\u2481"+
		"\u248a\u248f\u2496\u24a0\u24a3\u24ae\u24b4\u24c3\u24cb\u24d4\u24dd\u24e0"+
		"\u24e5\u24ee\u24f3\u2501\u250b\u2513\u2521\u2528\u2530\u2538\u253f\u2545"+
		"\u254e\u2556\u2560\u256b\u2572\u2590\u2599\u25a0\u25ab\u25b5\u25b9\u25bd"+
		"\u25c2\u25ca\u25ce\u25d2\u25d7\u25dc\u25e1\u25e8\u25f0\u25f3\u25fa\u25ff"+
		"\u2606\u2614\u2623\u2631\u2636\u2649\u264e\u2653\u265a\u2661\u2668\u266f"+
		"\u2675\u267b\u2683\u268c\u26c6\u26d5\u26ec\u26f4\u26f8\u2704\u2706\u270d"+
		"\u2716\u2728\u2730\u2739\u2740\u274a\u2750\u2757\u275c\u2762\u2766\u276d"+
		"\u278b\u279f\u27a3\u27b3\u27ba\u27c7\u27cf\u27e3\u27e9\u27f5\u27fa\u2804"+
		"\u2824\u2829\u2832\u2837\u283b\u2840\u2850\u2862\u2865\u286b\u2887\u2891"+
		"\u2898\u289a\u289f\u28aa\u28b5\u28ca\u28d1\u28d8\u28de\u28e1\u28ec\u28f3"+
		"\u28f5\u28fe\u2905\u290b\u2911\u2915\u2924\u2935\u2937\u294f\u2953\u295e"+
		"\u2961\u2965\u296a\u296f\u297b\u2981\u2985\u2989\u298d\u2992\u2996\u29b2";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}